// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./src/protobufs/services/common/containers.proto
package com.rhlabs.protobufs.services.common.containers;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Label.REPEATED;

public final class InflationsV1 extends Message {
  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_VERSION = 1;
  public static final Boolean DEFAULT_ENABLED = true;
  public static final List<String> DEFAULT_ONLY = Collections.emptyList();
  public static final List<String> DEFAULT_EXCLUDE = Collections.emptyList();

  @ProtoField(tag = 1, type = UINT32)
  public final Integer version;

  @ProtoField(tag = 2, type = BOOL)
  public final Boolean enabled;

  @ProtoField(tag = 3, type = STRING, label = REPEATED)
  public final List<String> only;

  @ProtoField(tag = 4, type = STRING, label = REPEATED)
  public final List<String> exclude;

  public InflationsV1(Integer version, Boolean enabled, List<String> only, List<String> exclude) {
    this.version = version;
    this.enabled = enabled;
    this.only = immutableCopyOf(only);
    this.exclude = immutableCopyOf(exclude);
  }

  private InflationsV1(Builder builder) {
    this(builder.version, builder.enabled, builder.only, builder.exclude);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof InflationsV1)) return false;
    InflationsV1 o = (InflationsV1) other;
    return equals(version, o.version)
        && equals(enabled, o.enabled)
        && equals(only, o.only)
        && equals(exclude, o.exclude);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = version != null ? version.hashCode() : 0;
      result = result * 37 + (enabled != null ? enabled.hashCode() : 0);
      result = result * 37 + (only != null ? only.hashCode() : 1);
      result = result * 37 + (exclude != null ? exclude.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<InflationsV1> {

    public Integer version;
    public Boolean enabled;
    public List<String> only;
    public List<String> exclude;

    public Builder() {
    }

    public Builder(InflationsV1 message) {
      super(message);
      if (message == null) return;
      this.version = message.version;
      this.enabled = message.enabled;
      this.only = copyOf(message.only);
      this.exclude = copyOf(message.exclude);
    }

    public Builder version(Integer version) {
      this.version = version;
      return this;
    }

    public Builder enabled(Boolean enabled) {
      this.enabled = enabled;
      return this;
    }

    public Builder only(List<String> only) {
      this.only = checkForNulls(only);
      return this;
    }

    public Builder exclude(List<String> exclude) {
      this.exclude = checkForNulls(exclude);
      return this;
    }

    @Override
    public InflationsV1 build() {
      return new InflationsV1(this);
    }
  }
}
