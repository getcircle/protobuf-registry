// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./src/protobufs/services/group/actions/get_members.proto
package com.rhlabs.protobufs.services.group.actions.get_members;

import com.rhlabs.protobufs.services.group.containers.MemberV1;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Label.REPEATED;

public final class GetMembersResponseV1 extends Message {
  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_VERSION = 1;
  public static final List<MemberV1> DEFAULT_MEMBERS = Collections.emptyList();

  @ProtoField(tag = 1, type = UINT32)
  public final Integer version;

  @ProtoField(tag = 2, label = REPEATED, messageType = MemberV1.class)
  public final List<MemberV1> members;

  public GetMembersResponseV1(Integer version, List<MemberV1> members) {
    this.version = version;
    this.members = immutableCopyOf(members);
  }

  private GetMembersResponseV1(Builder builder) {
    this(builder.version, builder.members);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetMembersResponseV1)) return false;
    GetMembersResponseV1 o = (GetMembersResponseV1) other;
    return equals(version, o.version)
        && equals(members, o.members);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = version != null ? version.hashCode() : 0;
      result = result * 37 + (members != null ? members.hashCode() : 1);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<GetMembersResponseV1> {

    public Integer version;
    public List<MemberV1> members;

    public Builder() {
    }

    public Builder(GetMembersResponseV1 message) {
      super(message);
      if (message == null) return;
      this.version = message.version;
      this.members = copyOf(message.members);
    }

    public Builder version(Integer version) {
      this.version = version;
      return this;
    }

    public Builder members(List<MemberV1> members) {
      this.members = checkForNulls(members);
      return this;
    }

    @Override
    public GetMembersResponseV1 build() {
      return new GetMembersResponseV1(this);
    }
  }
}
