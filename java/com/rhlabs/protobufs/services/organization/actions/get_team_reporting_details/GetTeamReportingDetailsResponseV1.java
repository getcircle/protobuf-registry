// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./src/protobufs/services/organization/actions/get_team_reporting_details.proto
package com.rhlabs.protobufs.services.organization.actions.get_team_reporting_details;

import com.rhlabs.protobufs.services.organization.containers.TeamV1;
import com.rhlabs.protobufs.services.profile.containers.ProfileV1;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Label.REPEATED;

public final class GetTeamReportingDetailsResponseV1 extends Message {
  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_VERSION = 1;
  public static final List<ProfileV1> DEFAULT_MEMBERS = Collections.emptyList();
  public static final List<TeamV1> DEFAULT_CHILD_TEAMS = Collections.emptyList();

  @ProtoField(tag = 1, type = UINT32)
  public final Integer version;

  @ProtoField(tag = 2, label = REPEATED, messageType = ProfileV1.class)
  public final List<ProfileV1> members;

  @ProtoField(tag = 3, label = REPEATED, messageType = TeamV1.class)
  public final List<TeamV1> child_teams;

  @ProtoField(tag = 4)
  public final ProfileV1 manager;

  public GetTeamReportingDetailsResponseV1(Integer version, List<ProfileV1> members, List<TeamV1> child_teams, ProfileV1 manager) {
    this.version = version;
    this.members = immutableCopyOf(members);
    this.child_teams = immutableCopyOf(child_teams);
    this.manager = manager;
  }

  private GetTeamReportingDetailsResponseV1(Builder builder) {
    this(builder.version, builder.members, builder.child_teams, builder.manager);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetTeamReportingDetailsResponseV1)) return false;
    GetTeamReportingDetailsResponseV1 o = (GetTeamReportingDetailsResponseV1) other;
    return equals(version, o.version)
        && equals(members, o.members)
        && equals(child_teams, o.child_teams)
        && equals(manager, o.manager);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = version != null ? version.hashCode() : 0;
      result = result * 37 + (members != null ? members.hashCode() : 1);
      result = result * 37 + (child_teams != null ? child_teams.hashCode() : 1);
      result = result * 37 + (manager != null ? manager.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<GetTeamReportingDetailsResponseV1> {

    public Integer version;
    public List<ProfileV1> members;
    public List<TeamV1> child_teams;
    public ProfileV1 manager;

    public Builder() {
    }

    public Builder(GetTeamReportingDetailsResponseV1 message) {
      super(message);
      if (message == null) return;
      this.version = message.version;
      this.members = copyOf(message.members);
      this.child_teams = copyOf(message.child_teams);
      this.manager = message.manager;
    }

    public Builder version(Integer version) {
      this.version = version;
      return this;
    }

    public Builder members(List<ProfileV1> members) {
      this.members = checkForNulls(members);
      return this;
    }

    public Builder child_teams(List<TeamV1> child_teams) {
      this.child_teams = checkForNulls(child_teams);
      return this;
    }

    public Builder manager(ProfileV1 manager) {
      this.manager = manager;
      return this;
    }

    @Override
    public GetTeamReportingDetailsResponseV1 build() {
      return new GetTeamReportingDetailsResponseV1(this);
    }
  }
}
