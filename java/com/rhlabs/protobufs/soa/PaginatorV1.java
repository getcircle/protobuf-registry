// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./src/service_protobufs/soa.proto
package com.rhlabs.protobufs.soa;

import com.squareup.wire.ExtendableMessage;
import com.squareup.wire.Extension;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.UINT32;

public final class PaginatorV1 extends ExtendableMessage<PaginatorV1> {
  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_VERSION = 1;
  public static final Integer DEFAULT_NEXT_PAGE = 0;
  public static final Integer DEFAULT_PREVIOUS_PAGE = 0;
  public static final Integer DEFAULT_COUNT = 0;
  public static final Integer DEFAULT_PAGE_SIZE = 0;
  public static final Integer DEFAULT_PAGE = 1;
  public static final Integer DEFAULT_TOTAL_PAGES = 0;

  @ProtoField(tag = 1, type = UINT32)
  public final Integer version;

  @ProtoField(tag = 2, type = UINT32)
  public final Integer next_page;

  @ProtoField(tag = 3, type = UINT32)
  public final Integer previous_page;

  @ProtoField(tag = 4, type = UINT32)
  public final Integer count;

  @ProtoField(tag = 5, type = UINT32)
  public final Integer page_size;

  @ProtoField(tag = 6, type = UINT32)
  public final Integer page;

  @ProtoField(tag = 7, type = UINT32)
  public final Integer total_pages;

  public PaginatorV1(Integer version, Integer next_page, Integer previous_page, Integer count, Integer page_size, Integer page, Integer total_pages) {
    this.version = version;
    this.next_page = next_page;
    this.previous_page = previous_page;
    this.count = count;
    this.page_size = page_size;
    this.page = page;
    this.total_pages = total_pages;
  }

  private PaginatorV1(Builder builder) {
    this(builder.version, builder.next_page, builder.previous_page, builder.count, builder.page_size, builder.page, builder.total_pages);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PaginatorV1)) return false;
    PaginatorV1 o = (PaginatorV1) other;
    if (!extensionsEqual(o)) return false;
    return equals(version, o.version)
        && equals(next_page, o.next_page)
        && equals(previous_page, o.previous_page)
        && equals(count, o.count)
        && equals(page_size, o.page_size)
        && equals(page, o.page)
        && equals(total_pages, o.total_pages);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = extensionsHashCode();
      result = result * 37 + (version != null ? version.hashCode() : 0);
      result = result * 37 + (next_page != null ? next_page.hashCode() : 0);
      result = result * 37 + (previous_page != null ? previous_page.hashCode() : 0);
      result = result * 37 + (count != null ? count.hashCode() : 0);
      result = result * 37 + (page_size != null ? page_size.hashCode() : 0);
      result = result * 37 + (page != null ? page.hashCode() : 0);
      result = result * 37 + (total_pages != null ? total_pages.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends ExtendableBuilder<PaginatorV1> {

    public Integer version;
    public Integer next_page;
    public Integer previous_page;
    public Integer count;
    public Integer page_size;
    public Integer page;
    public Integer total_pages;

    public Builder() {
    }

    public Builder(PaginatorV1 message) {
      super(message);
      if (message == null) return;
      this.version = message.version;
      this.next_page = message.next_page;
      this.previous_page = message.previous_page;
      this.count = message.count;
      this.page_size = message.page_size;
      this.page = message.page;
      this.total_pages = message.total_pages;
    }

    public Builder version(Integer version) {
      this.version = version;
      return this;
    }

    public Builder next_page(Integer next_page) {
      this.next_page = next_page;
      return this;
    }

    public Builder previous_page(Integer previous_page) {
      this.previous_page = previous_page;
      return this;
    }

    public Builder count(Integer count) {
      this.count = count;
      return this;
    }

    public Builder page_size(Integer page_size) {
      this.page_size = page_size;
      return this;
    }

    public Builder page(Integer page) {
      this.page = page;
      return this;
    }

    public Builder total_pages(Integer total_pages) {
      this.total_pages = total_pages;
      return this;
    }

    @Override
    public <E> Builder setExtension(Extension<PaginatorV1, E> extension, E value) {
      super.setExtension(extension, value);
      return this;
    }

    @Override
    public PaginatorV1 build() {
      return new PaginatorV1(this);
    }
  }
}
