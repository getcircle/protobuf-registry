// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

public struct ResumeServiceRoot {
  public static var sharedInstance : ResumeServiceRoot {
   struct Static {
       static let instance : ResumeServiceRoot = ResumeServiceRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

public func == (lhs: ResumeService.Containers, rhs: ResumeService.Containers) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ResumeService.BulkCreateEducation, rhs: ResumeService.BulkCreateEducation) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ResumeService.BulkCreatePositions, rhs: ResumeService.BulkCreatePositions) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ResumeService.CreateCompany, rhs: ResumeService.CreateCompany) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ResumeService.BulkCreateCompanies, rhs: ResumeService.BulkCreateCompanies) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ResumeService.GetResume, rhs: ResumeService.GetResume) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ResumeService, rhs: ResumeService) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final public class ResumeService : GeneratedMessage {


  //Nested type declaration start

    final public class Containers : GeneratedMessage {


      //Nested type declaration start

        final public class ApproximateDate : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "year": return year
                 case "month": return month
                 case "day": return day
                 default: return nil
                 }
          }

          public private(set) var hasYear:Bool = false
          public private(set) var year:UInt32 = UInt32(0)

          public private(set) var hasMonth:Bool = false
          public private(set) var month:UInt32 = UInt32(0)

          public private(set) var hasDay:Bool = false
          public private(set) var day:UInt32 = UInt32(0)

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasYear {
              output.writeUInt32(1, value:year)
            }
            if hasMonth {
              output.writeUInt32(2, value:month)
            }
            if hasDay {
              output.writeUInt32(3, value:day)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasYear {
              size += WireFormat.computeUInt32Size(1, value:year)
            }
            if hasMonth {
              size += WireFormat.computeUInt32Size(2, value:month)
            }
            if hasDay {
              size += WireFormat.computeUInt32Size(3, value:day)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ResumeService.Containers.ApproximateDate {
            return ResumeService.Containers.ApproximateDate.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.ApproximateDate {
            return ResumeService.Containers.ApproximateDate.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ResumeService.Containers.ApproximateDate {
            return ResumeService.Containers.ApproximateDate.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.Containers.ApproximateDate {
            return ResumeService.Containers.ApproximateDate.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.Containers.ApproximateDate {
            return ResumeService.Containers.ApproximateDate.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.ApproximateDate {
            return ResumeService.Containers.ApproximateDate.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ResumeService.Containers.ApproximateDateBuilder {
            return ResumeService.Containers.ApproximateDate.classBuilder() as ResumeService.Containers.ApproximateDateBuilder
          }
          public func builder() -> ResumeService.Containers.ApproximateDateBuilder {
            return classBuilder() as ResumeService.Containers.ApproximateDateBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ResumeService.Containers.ApproximateDateBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ResumeService.Containers.ApproximateDate.builder()
          }
          public func toBuilder() -> ResumeService.Containers.ApproximateDateBuilder {
            return ResumeService.Containers.ApproximateDate.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ResumeService.Containers.ApproximateDate) -> ResumeService.Containers.ApproximateDateBuilder {
            return ResumeService.Containers.ApproximateDate.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasYear {
              output += "\(indent) year: \(year) \n"
            }
            if hasMonth {
              output += "\(indent) month: \(month) \n"
            }
            if hasDay {
              output += "\(indent) day: \(day) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasYear {
                     hashCode = (hashCode &* 31) &+ year.hashValue
                  }
                  if hasMonth {
                     hashCode = (hashCode &* 31) &+ month.hashValue
                  }
                  if hasDay {
                     hashCode = (hashCode &* 31) &+ day.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ResumeService.Containers.ApproximateDate"
          }
          override public func className() -> String {
              return "ResumeService.Containers.ApproximateDate"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ResumeService.Containers.ApproximateDate.self
          }


          //Meta information declaration end

        }

        final public class ApproximateDateBuilder : GeneratedMessageBuilder {
          private var builderResult:ResumeService.Containers.ApproximateDate

          required override public init () {
             builderResult = ResumeService.Containers.ApproximateDate()
             super.init()
          }
          public var hasYear:Bool {
               get {
                    return builderResult.hasYear
               }
          }
          public var year:UInt32 {
               get {
                    return builderResult.year
               }
               set (value) {
                   builderResult.hasYear = true
                   builderResult.year = value
               }
          }
          public func clearYear() -> ResumeService.Containers.ApproximateDateBuilder{
               builderResult.hasYear = false
               builderResult.year = UInt32(0)
               return self
          }
          public var hasMonth:Bool {
               get {
                    return builderResult.hasMonth
               }
          }
          public var month:UInt32 {
               get {
                    return builderResult.month
               }
               set (value) {
                   builderResult.hasMonth = true
                   builderResult.month = value
               }
          }
          public func clearMonth() -> ResumeService.Containers.ApproximateDateBuilder{
               builderResult.hasMonth = false
               builderResult.month = UInt32(0)
               return self
          }
          public var hasDay:Bool {
               get {
                    return builderResult.hasDay
               }
          }
          public var day:UInt32 {
               get {
                    return builderResult.day
               }
               set (value) {
                   builderResult.hasDay = true
                   builderResult.day = value
               }
          }
          public func clearDay() -> ResumeService.Containers.ApproximateDateBuilder{
               builderResult.hasDay = false
               builderResult.day = UInt32(0)
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ResumeService.Containers.ApproximateDateBuilder {
            builderResult = ResumeService.Containers.ApproximateDate()
            return self
          }
          public override func clone() -> ResumeService.Containers.ApproximateDateBuilder {
            return ResumeService.Containers.ApproximateDate.builderWithPrototype(builderResult)
          }
          public override func build() -> ResumeService.Containers.ApproximateDate {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ResumeService.Containers.ApproximateDate {
            var returnMe:ResumeService.Containers.ApproximateDate = builderResult
            return returnMe
          }
          public func mergeFrom(other:ResumeService.Containers.ApproximateDate) -> ResumeService.Containers.ApproximateDateBuilder {
            if other.hasYear {
                 year = other.year
            }
            if other.hasMonth {
                 month = other.month
            }
            if other.hasDay {
                 day = other.day
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.Containers.ApproximateDateBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.ApproximateDateBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 8 :
                year = input.readUInt32()

              case 16 :
                month = input.readUInt32()

              case 24 :
                day = input.readUInt32()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Resume : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "user_id": return user_id
                 default: return nil
                 }
          }

          public private(set) var hasUserId:Bool = false
          public private(set) var user_id:String = ""

          public private(set) var educations:Array<ResumeService.Containers.Education>  = Array<ResumeService.Containers.Education>()
          public private(set) var positions:Array<ResumeService.Containers.Position>  = Array<ResumeService.Containers.Position>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUserId {
              output.writeString(1, value:user_id)
            }
            for oneElementeducations in educations {
                output.writeMessage(2, value:oneElementeducations)
            }
            for oneElementpositions in positions {
                output.writeMessage(3, value:oneElementpositions)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUserId {
              size += WireFormat.computeStringSize(1, value:user_id)
            }
            for oneElementeducations in educations {
                size += WireFormat.computeMessageSize(2, value:oneElementeducations)
            }
            for oneElementpositions in positions {
                size += WireFormat.computeMessageSize(3, value:oneElementpositions)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ResumeService.Containers.Resume {
            return ResumeService.Containers.Resume.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.Resume {
            return ResumeService.Containers.Resume.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ResumeService.Containers.Resume {
            return ResumeService.Containers.Resume.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.Containers.Resume {
            return ResumeService.Containers.Resume.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.Containers.Resume {
            return ResumeService.Containers.Resume.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.Resume {
            return ResumeService.Containers.Resume.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ResumeService.Containers.ResumeBuilder {
            return ResumeService.Containers.Resume.classBuilder() as ResumeService.Containers.ResumeBuilder
          }
          public func builder() -> ResumeService.Containers.ResumeBuilder {
            return classBuilder() as ResumeService.Containers.ResumeBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ResumeService.Containers.ResumeBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ResumeService.Containers.Resume.builder()
          }
          public func toBuilder() -> ResumeService.Containers.ResumeBuilder {
            return ResumeService.Containers.Resume.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ResumeService.Containers.Resume) -> ResumeService.Containers.ResumeBuilder {
            return ResumeService.Containers.Resume.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            var educationsElementIndex:Int = 0
            for oneElementeducations in educations {
                output += "\(indent) educations[\(educationsElementIndex)] {\n"
                oneElementeducations.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                educationsElementIndex++
            }
            var positionsElementIndex:Int = 0
            for oneElementpositions in positions {
                output += "\(indent) positions[\(positionsElementIndex)] {\n"
                oneElementpositions.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                positionsElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  for oneElementeducations in educations {
                      hashCode = (hashCode &* 31) &+ oneElementeducations.hashValue
                  }
                  for oneElementpositions in positions {
                      hashCode = (hashCode &* 31) &+ oneElementpositions.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ResumeService.Containers.Resume"
          }
          override public func className() -> String {
              return "ResumeService.Containers.Resume"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ResumeService.Containers.Resume.self
          }


          //Meta information declaration end

        }

        final public class ResumeBuilder : GeneratedMessageBuilder {
          private var builderResult:ResumeService.Containers.Resume

          required override public init () {
             builderResult = ResumeService.Containers.Resume()
             super.init()
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> ResumeService.Containers.ResumeBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          public var educations:Array<ResumeService.Containers.Education> {
               get {
                   return builderResult.educations
               }
               set (value) {
                   builderResult.educations = value
               }
          }
          public func clearEducations() -> ResumeService.Containers.ResumeBuilder {
            builderResult.educations.removeAll(keepCapacity: false)
            return self
          }
          public var positions:Array<ResumeService.Containers.Position> {
               get {
                   return builderResult.positions
               }
               set (value) {
                   builderResult.positions = value
               }
          }
          public func clearPositions() -> ResumeService.Containers.ResumeBuilder {
            builderResult.positions.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ResumeService.Containers.ResumeBuilder {
            builderResult = ResumeService.Containers.Resume()
            return self
          }
          public override func clone() -> ResumeService.Containers.ResumeBuilder {
            return ResumeService.Containers.Resume.builderWithPrototype(builderResult)
          }
          public override func build() -> ResumeService.Containers.Resume {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ResumeService.Containers.Resume {
            var returnMe:ResumeService.Containers.Resume = builderResult
            return returnMe
          }
          public func mergeFrom(other:ResumeService.Containers.Resume) -> ResumeService.Containers.ResumeBuilder {
            if other.hasUserId {
                 user_id = other.user_id
            }
            if !other.educations.isEmpty  {
               builderResult.educations += other.educations
            }
            if !other.positions.isEmpty  {
               builderResult.positions += other.positions
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.Containers.ResumeBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.ResumeBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                user_id = input.readString()

              case 18 :
                var subBuilder = ResumeService.Containers.Education.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                educations += [subBuilder.buildPartial()]

              case 26 :
                var subBuilder = ResumeService.Containers.Position.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                positions += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Education : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "id": return id
                 case "school_name": return school_name
                 case "start_date": return start_date
                 case "end_date": return end_date
                 case "notes": return notes
                 case "user_id": return user_id
                 case "activities": return activities
                 case "field_of_study": return field_of_study
                 case "degree": return degree
                 default: return nil
                 }
          }

          public private(set) var hasId:Bool = false
          public private(set) var id:String = ""

          public private(set) var hasSchoolName:Bool = false
          public private(set) var school_name:String = ""

          public private(set) var hasStartDate:Bool = false
          public private(set) var start_date:ResumeService.Containers.ApproximateDate = ResumeService.Containers.ApproximateDate()
          public private(set) var hasEndDate:Bool = false
          public private(set) var end_date:ResumeService.Containers.ApproximateDate = ResumeService.Containers.ApproximateDate()
          public private(set) var hasNotes:Bool = false
          public private(set) var notes:String = ""

          public private(set) var hasUserId:Bool = false
          public private(set) var user_id:String = ""

          public private(set) var hasActivities:Bool = false
          public private(set) var activities:String = ""

          public private(set) var hasFieldOfStudy:Bool = false
          public private(set) var field_of_study:String = ""

          public private(set) var hasDegree:Bool = false
          public private(set) var degree:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasId {
              output.writeString(1, value:id)
            }
            if hasSchoolName {
              output.writeString(2, value:school_name)
            }
            if hasStartDate {
              output.writeMessage(3, value:start_date)
            }
            if hasEndDate {
              output.writeMessage(4, value:end_date)
            }
            if hasNotes {
              output.writeString(5, value:notes)
            }
            if hasUserId {
              output.writeString(6, value:user_id)
            }
            if hasActivities {
              output.writeString(7, value:activities)
            }
            if hasFieldOfStudy {
              output.writeString(8, value:field_of_study)
            }
            if hasDegree {
              output.writeString(9, value:degree)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasId {
              size += WireFormat.computeStringSize(1, value:id)
            }
            if hasSchoolName {
              size += WireFormat.computeStringSize(2, value:school_name)
            }
            if hasStartDate {
              size += WireFormat.computeMessageSize(3, value:start_date)
            }
            if hasEndDate {
              size += WireFormat.computeMessageSize(4, value:end_date)
            }
            if hasNotes {
              size += WireFormat.computeStringSize(5, value:notes)
            }
            if hasUserId {
              size += WireFormat.computeStringSize(6, value:user_id)
            }
            if hasActivities {
              size += WireFormat.computeStringSize(7, value:activities)
            }
            if hasFieldOfStudy {
              size += WireFormat.computeStringSize(8, value:field_of_study)
            }
            if hasDegree {
              size += WireFormat.computeStringSize(9, value:degree)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ResumeService.Containers.Education {
            return ResumeService.Containers.Education.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.Education {
            return ResumeService.Containers.Education.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ResumeService.Containers.Education {
            return ResumeService.Containers.Education.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.Containers.Education {
            return ResumeService.Containers.Education.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.Containers.Education {
            return ResumeService.Containers.Education.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.Education {
            return ResumeService.Containers.Education.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ResumeService.Containers.EducationBuilder {
            return ResumeService.Containers.Education.classBuilder() as ResumeService.Containers.EducationBuilder
          }
          public func builder() -> ResumeService.Containers.EducationBuilder {
            return classBuilder() as ResumeService.Containers.EducationBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ResumeService.Containers.EducationBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ResumeService.Containers.Education.builder()
          }
          public func toBuilder() -> ResumeService.Containers.EducationBuilder {
            return ResumeService.Containers.Education.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ResumeService.Containers.Education) -> ResumeService.Containers.EducationBuilder {
            return ResumeService.Containers.Education.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasId {
              output += "\(indent) id: \(id) \n"
            }
            if hasSchoolName {
              output += "\(indent) school_name: \(school_name) \n"
            }
            if hasStartDate {
              output += "\(indent) start_date {\n"
              start_date.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasEndDate {
              output += "\(indent) end_date {\n"
              end_date.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasNotes {
              output += "\(indent) notes: \(notes) \n"
            }
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            if hasActivities {
              output += "\(indent) activities: \(activities) \n"
            }
            if hasFieldOfStudy {
              output += "\(indent) field_of_study: \(field_of_study) \n"
            }
            if hasDegree {
              output += "\(indent) degree: \(degree) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasId {
                     hashCode = (hashCode &* 31) &+ id.hashValue
                  }
                  if hasSchoolName {
                     hashCode = (hashCode &* 31) &+ school_name.hashValue
                  }
                  if hasStartDate {
                    hashCode = (hashCode &* 31) &+ start_date.hashValue
                  }
                  if hasEndDate {
                    hashCode = (hashCode &* 31) &+ end_date.hashValue
                  }
                  if hasNotes {
                     hashCode = (hashCode &* 31) &+ notes.hashValue
                  }
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  if hasActivities {
                     hashCode = (hashCode &* 31) &+ activities.hashValue
                  }
                  if hasFieldOfStudy {
                     hashCode = (hashCode &* 31) &+ field_of_study.hashValue
                  }
                  if hasDegree {
                     hashCode = (hashCode &* 31) &+ degree.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ResumeService.Containers.Education"
          }
          override public func className() -> String {
              return "ResumeService.Containers.Education"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ResumeService.Containers.Education.self
          }


          //Meta information declaration end

        }

        final public class EducationBuilder : GeneratedMessageBuilder {
          private var builderResult:ResumeService.Containers.Education

          required override public init () {
             builderResult = ResumeService.Containers.Education()
             super.init()
          }
          public var hasId:Bool {
               get {
                    return builderResult.hasId
               }
          }
          public var id:String {
               get {
                    return builderResult.id
               }
               set (value) {
                   builderResult.hasId = true
                   builderResult.id = value
               }
          }
          public func clearId() -> ResumeService.Containers.EducationBuilder{
               builderResult.hasId = false
               builderResult.id = ""
               return self
          }
          public var hasSchoolName:Bool {
               get {
                    return builderResult.hasSchoolName
               }
          }
          public var school_name:String {
               get {
                    return builderResult.school_name
               }
               set (value) {
                   builderResult.hasSchoolName = true
                   builderResult.school_name = value
               }
          }
          public func clearSchoolName() -> ResumeService.Containers.EducationBuilder{
               builderResult.hasSchoolName = false
               builderResult.school_name = ""
               return self
          }
          public var hasStartDate:Bool {
               get {
                   return builderResult.hasStartDate
               }
          }
          public var start_date:ResumeService.Containers.ApproximateDate {
               get {
                   return builderResult.start_date
               }
               set (value) {
                   builderResult.hasStartDate = true
                   builderResult.start_date = value
               }
          }
          public func setStartDateBuilder(builderForValue:ResumeService.Containers.ApproximateDateBuilder) -> ResumeService.Containers.EducationBuilder {
            start_date = builderForValue.build()
            return self
          }
          public func mergeStartDate(value:ResumeService.Containers.ApproximateDate) -> ResumeService.Containers.EducationBuilder {
            if (builderResult.hasStartDate) {
              builderResult.start_date = ResumeService.Containers.ApproximateDate.builderWithPrototype(builderResult.start_date).mergeFrom(value).buildPartial()
            } else {
              builderResult.start_date = value
            }
            builderResult.hasStartDate = true
            return self
          }
          public func clearStartDate() -> ResumeService.Containers.EducationBuilder {
            builderResult.hasStartDate = false
            builderResult.start_date = ResumeService.Containers.ApproximateDate()
            return self
          }
          public var hasEndDate:Bool {
               get {
                   return builderResult.hasEndDate
               }
          }
          public var end_date:ResumeService.Containers.ApproximateDate {
               get {
                   return builderResult.end_date
               }
               set (value) {
                   builderResult.hasEndDate = true
                   builderResult.end_date = value
               }
          }
          public func setEndDateBuilder(builderForValue:ResumeService.Containers.ApproximateDateBuilder) -> ResumeService.Containers.EducationBuilder {
            end_date = builderForValue.build()
            return self
          }
          public func mergeEndDate(value:ResumeService.Containers.ApproximateDate) -> ResumeService.Containers.EducationBuilder {
            if (builderResult.hasEndDate) {
              builderResult.end_date = ResumeService.Containers.ApproximateDate.builderWithPrototype(builderResult.end_date).mergeFrom(value).buildPartial()
            } else {
              builderResult.end_date = value
            }
            builderResult.hasEndDate = true
            return self
          }
          public func clearEndDate() -> ResumeService.Containers.EducationBuilder {
            builderResult.hasEndDate = false
            builderResult.end_date = ResumeService.Containers.ApproximateDate()
            return self
          }
          public var hasNotes:Bool {
               get {
                    return builderResult.hasNotes
               }
          }
          public var notes:String {
               get {
                    return builderResult.notes
               }
               set (value) {
                   builderResult.hasNotes = true
                   builderResult.notes = value
               }
          }
          public func clearNotes() -> ResumeService.Containers.EducationBuilder{
               builderResult.hasNotes = false
               builderResult.notes = ""
               return self
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> ResumeService.Containers.EducationBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          public var hasActivities:Bool {
               get {
                    return builderResult.hasActivities
               }
          }
          public var activities:String {
               get {
                    return builderResult.activities
               }
               set (value) {
                   builderResult.hasActivities = true
                   builderResult.activities = value
               }
          }
          public func clearActivities() -> ResumeService.Containers.EducationBuilder{
               builderResult.hasActivities = false
               builderResult.activities = ""
               return self
          }
          public var hasFieldOfStudy:Bool {
               get {
                    return builderResult.hasFieldOfStudy
               }
          }
          public var field_of_study:String {
               get {
                    return builderResult.field_of_study
               }
               set (value) {
                   builderResult.hasFieldOfStudy = true
                   builderResult.field_of_study = value
               }
          }
          public func clearFieldOfStudy() -> ResumeService.Containers.EducationBuilder{
               builderResult.hasFieldOfStudy = false
               builderResult.field_of_study = ""
               return self
          }
          public var hasDegree:Bool {
               get {
                    return builderResult.hasDegree
               }
          }
          public var degree:String {
               get {
                    return builderResult.degree
               }
               set (value) {
                   builderResult.hasDegree = true
                   builderResult.degree = value
               }
          }
          public func clearDegree() -> ResumeService.Containers.EducationBuilder{
               builderResult.hasDegree = false
               builderResult.degree = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ResumeService.Containers.EducationBuilder {
            builderResult = ResumeService.Containers.Education()
            return self
          }
          public override func clone() -> ResumeService.Containers.EducationBuilder {
            return ResumeService.Containers.Education.builderWithPrototype(builderResult)
          }
          public override func build() -> ResumeService.Containers.Education {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ResumeService.Containers.Education {
            var returnMe:ResumeService.Containers.Education = builderResult
            return returnMe
          }
          public func mergeFrom(other:ResumeService.Containers.Education) -> ResumeService.Containers.EducationBuilder {
            if other.hasId {
                 id = other.id
            }
            if other.hasSchoolName {
                 school_name = other.school_name
            }
            if (other.hasStartDate) {
                mergeStartDate(other.start_date)
            }
            if (other.hasEndDate) {
                mergeEndDate(other.end_date)
            }
            if other.hasNotes {
                 notes = other.notes
            }
            if other.hasUserId {
                 user_id = other.user_id
            }
            if other.hasActivities {
                 activities = other.activities
            }
            if other.hasFieldOfStudy {
                 field_of_study = other.field_of_study
            }
            if other.hasDegree {
                 degree = other.degree
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.Containers.EducationBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.EducationBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                id = input.readString()

              case 18 :
                school_name = input.readString()

              case 26 :
                var subBuilder:ResumeService.Containers.ApproximateDateBuilder = ResumeService.Containers.ApproximateDate.builder()
                if hasStartDate {
                  subBuilder.mergeFrom(start_date)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                start_date = subBuilder.buildPartial()

              case 34 :
                var subBuilder:ResumeService.Containers.ApproximateDateBuilder = ResumeService.Containers.ApproximateDate.builder()
                if hasEndDate {
                  subBuilder.mergeFrom(end_date)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                end_date = subBuilder.buildPartial()

              case 42 :
                notes = input.readString()

              case 50 :
                user_id = input.readString()

              case 58 :
                activities = input.readString()

              case 66 :
                field_of_study = input.readString()

              case 74 :
                degree = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Position : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "id": return id
                 case "title": return title
                 case "start_date": return start_date
                 case "end_date": return end_date
                 case "summary": return summary
                 case "company": return company
                 case "user_id": return user_id
                 case "is_current": return is_current
                 default: return nil
                 }
          }

          public private(set) var hasId:Bool = false
          public private(set) var id:String = ""

          public private(set) var hasTitle:Bool = false
          public private(set) var title:String = ""

          public private(set) var hasStartDate:Bool = false
          public private(set) var start_date:ResumeService.Containers.ApproximateDate = ResumeService.Containers.ApproximateDate()
          public private(set) var hasEndDate:Bool = false
          public private(set) var end_date:ResumeService.Containers.ApproximateDate = ResumeService.Containers.ApproximateDate()
          public private(set) var hasSummary:Bool = false
          public private(set) var summary:String = ""

          public private(set) var hasCompany:Bool = false
          public private(set) var company:ResumeService.Containers.Company = ResumeService.Containers.Company()
          public private(set) var hasUserId:Bool = false
          public private(set) var user_id:String = ""

          public private(set) var hasIsCurrent:Bool = false
          public private(set) var is_current:Bool = false

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasId {
              output.writeString(1, value:id)
            }
            if hasTitle {
              output.writeString(2, value:title)
            }
            if hasStartDate {
              output.writeMessage(3, value:start_date)
            }
            if hasEndDate {
              output.writeMessage(4, value:end_date)
            }
            if hasSummary {
              output.writeString(5, value:summary)
            }
            if hasCompany {
              output.writeMessage(6, value:company)
            }
            if hasUserId {
              output.writeString(7, value:user_id)
            }
            if hasIsCurrent {
              output.writeBool(8, value:is_current)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasId {
              size += WireFormat.computeStringSize(1, value:id)
            }
            if hasTitle {
              size += WireFormat.computeStringSize(2, value:title)
            }
            if hasStartDate {
              size += WireFormat.computeMessageSize(3, value:start_date)
            }
            if hasEndDate {
              size += WireFormat.computeMessageSize(4, value:end_date)
            }
            if hasSummary {
              size += WireFormat.computeStringSize(5, value:summary)
            }
            if hasCompany {
              size += WireFormat.computeMessageSize(6, value:company)
            }
            if hasUserId {
              size += WireFormat.computeStringSize(7, value:user_id)
            }
            if hasIsCurrent {
              size += WireFormat.computeBoolSize(8, value:is_current)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ResumeService.Containers.Position {
            return ResumeService.Containers.Position.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.Position {
            return ResumeService.Containers.Position.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ResumeService.Containers.Position {
            return ResumeService.Containers.Position.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.Containers.Position {
            return ResumeService.Containers.Position.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.Containers.Position {
            return ResumeService.Containers.Position.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.Position {
            return ResumeService.Containers.Position.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ResumeService.Containers.PositionBuilder {
            return ResumeService.Containers.Position.classBuilder() as ResumeService.Containers.PositionBuilder
          }
          public func builder() -> ResumeService.Containers.PositionBuilder {
            return classBuilder() as ResumeService.Containers.PositionBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ResumeService.Containers.PositionBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ResumeService.Containers.Position.builder()
          }
          public func toBuilder() -> ResumeService.Containers.PositionBuilder {
            return ResumeService.Containers.Position.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ResumeService.Containers.Position) -> ResumeService.Containers.PositionBuilder {
            return ResumeService.Containers.Position.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasId {
              output += "\(indent) id: \(id) \n"
            }
            if hasTitle {
              output += "\(indent) title: \(title) \n"
            }
            if hasStartDate {
              output += "\(indent) start_date {\n"
              start_date.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasEndDate {
              output += "\(indent) end_date {\n"
              end_date.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasSummary {
              output += "\(indent) summary: \(summary) \n"
            }
            if hasCompany {
              output += "\(indent) company {\n"
              company.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            if hasIsCurrent {
              output += "\(indent) is_current: \(is_current) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasId {
                     hashCode = (hashCode &* 31) &+ id.hashValue
                  }
                  if hasTitle {
                     hashCode = (hashCode &* 31) &+ title.hashValue
                  }
                  if hasStartDate {
                    hashCode = (hashCode &* 31) &+ start_date.hashValue
                  }
                  if hasEndDate {
                    hashCode = (hashCode &* 31) &+ end_date.hashValue
                  }
                  if hasSummary {
                     hashCode = (hashCode &* 31) &+ summary.hashValue
                  }
                  if hasCompany {
                    hashCode = (hashCode &* 31) &+ company.hashValue
                  }
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  if hasIsCurrent {
                     hashCode = (hashCode &* 31) &+ is_current.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ResumeService.Containers.Position"
          }
          override public func className() -> String {
              return "ResumeService.Containers.Position"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ResumeService.Containers.Position.self
          }


          //Meta information declaration end

        }

        final public class PositionBuilder : GeneratedMessageBuilder {
          private var builderResult:ResumeService.Containers.Position

          required override public init () {
             builderResult = ResumeService.Containers.Position()
             super.init()
          }
          public var hasId:Bool {
               get {
                    return builderResult.hasId
               }
          }
          public var id:String {
               get {
                    return builderResult.id
               }
               set (value) {
                   builderResult.hasId = true
                   builderResult.id = value
               }
          }
          public func clearId() -> ResumeService.Containers.PositionBuilder{
               builderResult.hasId = false
               builderResult.id = ""
               return self
          }
          public var hasTitle:Bool {
               get {
                    return builderResult.hasTitle
               }
          }
          public var title:String {
               get {
                    return builderResult.title
               }
               set (value) {
                   builderResult.hasTitle = true
                   builderResult.title = value
               }
          }
          public func clearTitle() -> ResumeService.Containers.PositionBuilder{
               builderResult.hasTitle = false
               builderResult.title = ""
               return self
          }
          public var hasStartDate:Bool {
               get {
                   return builderResult.hasStartDate
               }
          }
          public var start_date:ResumeService.Containers.ApproximateDate {
               get {
                   return builderResult.start_date
               }
               set (value) {
                   builderResult.hasStartDate = true
                   builderResult.start_date = value
               }
          }
          public func setStartDateBuilder(builderForValue:ResumeService.Containers.ApproximateDateBuilder) -> ResumeService.Containers.PositionBuilder {
            start_date = builderForValue.build()
            return self
          }
          public func mergeStartDate(value:ResumeService.Containers.ApproximateDate) -> ResumeService.Containers.PositionBuilder {
            if (builderResult.hasStartDate) {
              builderResult.start_date = ResumeService.Containers.ApproximateDate.builderWithPrototype(builderResult.start_date).mergeFrom(value).buildPartial()
            } else {
              builderResult.start_date = value
            }
            builderResult.hasStartDate = true
            return self
          }
          public func clearStartDate() -> ResumeService.Containers.PositionBuilder {
            builderResult.hasStartDate = false
            builderResult.start_date = ResumeService.Containers.ApproximateDate()
            return self
          }
          public var hasEndDate:Bool {
               get {
                   return builderResult.hasEndDate
               }
          }
          public var end_date:ResumeService.Containers.ApproximateDate {
               get {
                   return builderResult.end_date
               }
               set (value) {
                   builderResult.hasEndDate = true
                   builderResult.end_date = value
               }
          }
          public func setEndDateBuilder(builderForValue:ResumeService.Containers.ApproximateDateBuilder) -> ResumeService.Containers.PositionBuilder {
            end_date = builderForValue.build()
            return self
          }
          public func mergeEndDate(value:ResumeService.Containers.ApproximateDate) -> ResumeService.Containers.PositionBuilder {
            if (builderResult.hasEndDate) {
              builderResult.end_date = ResumeService.Containers.ApproximateDate.builderWithPrototype(builderResult.end_date).mergeFrom(value).buildPartial()
            } else {
              builderResult.end_date = value
            }
            builderResult.hasEndDate = true
            return self
          }
          public func clearEndDate() -> ResumeService.Containers.PositionBuilder {
            builderResult.hasEndDate = false
            builderResult.end_date = ResumeService.Containers.ApproximateDate()
            return self
          }
          public var hasSummary:Bool {
               get {
                    return builderResult.hasSummary
               }
          }
          public var summary:String {
               get {
                    return builderResult.summary
               }
               set (value) {
                   builderResult.hasSummary = true
                   builderResult.summary = value
               }
          }
          public func clearSummary() -> ResumeService.Containers.PositionBuilder{
               builderResult.hasSummary = false
               builderResult.summary = ""
               return self
          }
          public var hasCompany:Bool {
               get {
                   return builderResult.hasCompany
               }
          }
          public var company:ResumeService.Containers.Company {
               get {
                   return builderResult.company
               }
               set (value) {
                   builderResult.hasCompany = true
                   builderResult.company = value
               }
          }
          public func setCompanyBuilder(builderForValue:ResumeService.Containers.CompanyBuilder) -> ResumeService.Containers.PositionBuilder {
            company = builderForValue.build()
            return self
          }
          public func mergeCompany(value:ResumeService.Containers.Company) -> ResumeService.Containers.PositionBuilder {
            if (builderResult.hasCompany) {
              builderResult.company = ResumeService.Containers.Company.builderWithPrototype(builderResult.company).mergeFrom(value).buildPartial()
            } else {
              builderResult.company = value
            }
            builderResult.hasCompany = true
            return self
          }
          public func clearCompany() -> ResumeService.Containers.PositionBuilder {
            builderResult.hasCompany = false
            builderResult.company = ResumeService.Containers.Company()
            return self
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> ResumeService.Containers.PositionBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          public var hasIsCurrent:Bool {
               get {
                    return builderResult.hasIsCurrent
               }
          }
          public var is_current:Bool {
               get {
                    return builderResult.is_current
               }
               set (value) {
                   builderResult.hasIsCurrent = true
                   builderResult.is_current = value
               }
          }
          public func clearIsCurrent() -> ResumeService.Containers.PositionBuilder{
               builderResult.hasIsCurrent = false
               builderResult.is_current = false
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ResumeService.Containers.PositionBuilder {
            builderResult = ResumeService.Containers.Position()
            return self
          }
          public override func clone() -> ResumeService.Containers.PositionBuilder {
            return ResumeService.Containers.Position.builderWithPrototype(builderResult)
          }
          public override func build() -> ResumeService.Containers.Position {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ResumeService.Containers.Position {
            var returnMe:ResumeService.Containers.Position = builderResult
            return returnMe
          }
          public func mergeFrom(other:ResumeService.Containers.Position) -> ResumeService.Containers.PositionBuilder {
            if other.hasId {
                 id = other.id
            }
            if other.hasTitle {
                 title = other.title
            }
            if (other.hasStartDate) {
                mergeStartDate(other.start_date)
            }
            if (other.hasEndDate) {
                mergeEndDate(other.end_date)
            }
            if other.hasSummary {
                 summary = other.summary
            }
            if (other.hasCompany) {
                mergeCompany(other.company)
            }
            if other.hasUserId {
                 user_id = other.user_id
            }
            if other.hasIsCurrent {
                 is_current = other.is_current
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.Containers.PositionBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.PositionBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                id = input.readString()

              case 18 :
                title = input.readString()

              case 26 :
                var subBuilder:ResumeService.Containers.ApproximateDateBuilder = ResumeService.Containers.ApproximateDate.builder()
                if hasStartDate {
                  subBuilder.mergeFrom(start_date)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                start_date = subBuilder.buildPartial()

              case 34 :
                var subBuilder:ResumeService.Containers.ApproximateDateBuilder = ResumeService.Containers.ApproximateDate.builder()
                if hasEndDate {
                  subBuilder.mergeFrom(end_date)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                end_date = subBuilder.buildPartial()

              case 42 :
                summary = input.readString()

              case 50 :
                var subBuilder:ResumeService.Containers.CompanyBuilder = ResumeService.Containers.Company.builder()
                if hasCompany {
                  subBuilder.mergeFrom(company)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                company = subBuilder.buildPartial()

              case 58 :
                user_id = input.readString()

              case 64 :
                is_current = input.readBool()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Company : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "id": return id
                 case "name": return name
                 case "linkedin_id": return linkedin_id
                 default: return nil
                 }
          }

          public private(set) var hasId:Bool = false
          public private(set) var id:String = ""

          public private(set) var hasName:Bool = false
          public private(set) var name:String = ""

          public private(set) var hasLinkedinId:Bool = false
          public private(set) var linkedin_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasId {
              output.writeString(1, value:id)
            }
            if hasName {
              output.writeString(2, value:name)
            }
            if hasLinkedinId {
              output.writeString(3, value:linkedin_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasId {
              size += WireFormat.computeStringSize(1, value:id)
            }
            if hasName {
              size += WireFormat.computeStringSize(2, value:name)
            }
            if hasLinkedinId {
              size += WireFormat.computeStringSize(3, value:linkedin_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ResumeService.Containers.Company {
            return ResumeService.Containers.Company.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.Company {
            return ResumeService.Containers.Company.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ResumeService.Containers.Company {
            return ResumeService.Containers.Company.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.Containers.Company {
            return ResumeService.Containers.Company.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.Containers.Company {
            return ResumeService.Containers.Company.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.Company {
            return ResumeService.Containers.Company.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ResumeService.Containers.CompanyBuilder {
            return ResumeService.Containers.Company.classBuilder() as ResumeService.Containers.CompanyBuilder
          }
          public func builder() -> ResumeService.Containers.CompanyBuilder {
            return classBuilder() as ResumeService.Containers.CompanyBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ResumeService.Containers.CompanyBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ResumeService.Containers.Company.builder()
          }
          public func toBuilder() -> ResumeService.Containers.CompanyBuilder {
            return ResumeService.Containers.Company.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ResumeService.Containers.Company) -> ResumeService.Containers.CompanyBuilder {
            return ResumeService.Containers.Company.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasId {
              output += "\(indent) id: \(id) \n"
            }
            if hasName {
              output += "\(indent) name: \(name) \n"
            }
            if hasLinkedinId {
              output += "\(indent) linkedin_id: \(linkedin_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasId {
                     hashCode = (hashCode &* 31) &+ id.hashValue
                  }
                  if hasName {
                     hashCode = (hashCode &* 31) &+ name.hashValue
                  }
                  if hasLinkedinId {
                     hashCode = (hashCode &* 31) &+ linkedin_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ResumeService.Containers.Company"
          }
          override public func className() -> String {
              return "ResumeService.Containers.Company"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ResumeService.Containers.Company.self
          }


          //Meta information declaration end

        }

        final public class CompanyBuilder : GeneratedMessageBuilder {
          private var builderResult:ResumeService.Containers.Company

          required override public init () {
             builderResult = ResumeService.Containers.Company()
             super.init()
          }
          public var hasId:Bool {
               get {
                    return builderResult.hasId
               }
          }
          public var id:String {
               get {
                    return builderResult.id
               }
               set (value) {
                   builderResult.hasId = true
                   builderResult.id = value
               }
          }
          public func clearId() -> ResumeService.Containers.CompanyBuilder{
               builderResult.hasId = false
               builderResult.id = ""
               return self
          }
          public var hasName:Bool {
               get {
                    return builderResult.hasName
               }
          }
          public var name:String {
               get {
                    return builderResult.name
               }
               set (value) {
                   builderResult.hasName = true
                   builderResult.name = value
               }
          }
          public func clearName() -> ResumeService.Containers.CompanyBuilder{
               builderResult.hasName = false
               builderResult.name = ""
               return self
          }
          public var hasLinkedinId:Bool {
               get {
                    return builderResult.hasLinkedinId
               }
          }
          public var linkedin_id:String {
               get {
                    return builderResult.linkedin_id
               }
               set (value) {
                   builderResult.hasLinkedinId = true
                   builderResult.linkedin_id = value
               }
          }
          public func clearLinkedinId() -> ResumeService.Containers.CompanyBuilder{
               builderResult.hasLinkedinId = false
               builderResult.linkedin_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ResumeService.Containers.CompanyBuilder {
            builderResult = ResumeService.Containers.Company()
            return self
          }
          public override func clone() -> ResumeService.Containers.CompanyBuilder {
            return ResumeService.Containers.Company.builderWithPrototype(builderResult)
          }
          public override func build() -> ResumeService.Containers.Company {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ResumeService.Containers.Company {
            var returnMe:ResumeService.Containers.Company = builderResult
            return returnMe
          }
          public func mergeFrom(other:ResumeService.Containers.Company) -> ResumeService.Containers.CompanyBuilder {
            if other.hasId {
                 id = other.id
            }
            if other.hasName {
                 name = other.name
            }
            if other.hasLinkedinId {
                 linkedin_id = other.linkedin_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.Containers.CompanyBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.CompanyBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                id = input.readString()

              case 18 :
                name = input.readString()

              case 26 :
                linkedin_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ResumeService.Containers {
        return ResumeService.Containers.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.Containers {
        return ResumeService.Containers.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ResumeService.Containers {
        return ResumeService.Containers.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.Containers {
        return ResumeService.Containers.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.Containers {
        return ResumeService.Containers.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.Containers {
        return ResumeService.Containers.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ResumeService.ContainersBuilder {
        return ResumeService.Containers.classBuilder() as ResumeService.ContainersBuilder
      }
      public func builder() -> ResumeService.ContainersBuilder {
        return classBuilder() as ResumeService.ContainersBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ResumeService.ContainersBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ResumeService.Containers.builder()
      }
      public func toBuilder() -> ResumeService.ContainersBuilder {
        return ResumeService.Containers.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ResumeService.Containers) -> ResumeService.ContainersBuilder {
        return ResumeService.Containers.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ResumeService.Containers"
      }
      override public func className() -> String {
          return "ResumeService.Containers"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ResumeService.Containers.self
      }


      //Meta information declaration end

    }

    final public class ContainersBuilder : GeneratedMessageBuilder {
      private var builderResult:ResumeService.Containers

      required override public init () {
         builderResult = ResumeService.Containers()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ResumeService.ContainersBuilder {
        builderResult = ResumeService.Containers()
        return self
      }
      public override func clone() -> ResumeService.ContainersBuilder {
        return ResumeService.Containers.builderWithPrototype(builderResult)
      }
      public override func build() -> ResumeService.Containers {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ResumeService.Containers {
        var returnMe:ResumeService.Containers = builderResult
        return returnMe
      }
      public func mergeFrom(other:ResumeService.Containers) -> ResumeService.ContainersBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.ContainersBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.ContainersBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class BulkCreateEducation : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var educations:Array<ResumeService.Containers.Education>  = Array<ResumeService.Containers.Education>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementeducations in educations {
                output.writeMessage(1, value:oneElementeducations)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementeducations in educations {
                size += WireFormat.computeMessageSize(1, value:oneElementeducations)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ResumeService.BulkCreateEducation.Request {
            return ResumeService.BulkCreateEducation.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateEducation.Request {
            return ResumeService.BulkCreateEducation.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ResumeService.BulkCreateEducation.Request {
            return ResumeService.BulkCreateEducation.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.BulkCreateEducation.Request {
            return ResumeService.BulkCreateEducation.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.BulkCreateEducation.Request {
            return ResumeService.BulkCreateEducation.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateEducation.Request {
            return ResumeService.BulkCreateEducation.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ResumeService.BulkCreateEducation.RequestBuilder {
            return ResumeService.BulkCreateEducation.Request.classBuilder() as ResumeService.BulkCreateEducation.RequestBuilder
          }
          public func builder() -> ResumeService.BulkCreateEducation.RequestBuilder {
            return classBuilder() as ResumeService.BulkCreateEducation.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ResumeService.BulkCreateEducation.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ResumeService.BulkCreateEducation.Request.builder()
          }
          public func toBuilder() -> ResumeService.BulkCreateEducation.RequestBuilder {
            return ResumeService.BulkCreateEducation.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ResumeService.BulkCreateEducation.Request) -> ResumeService.BulkCreateEducation.RequestBuilder {
            return ResumeService.BulkCreateEducation.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var educationsElementIndex:Int = 0
            for oneElementeducations in educations {
                output += "\(indent) educations[\(educationsElementIndex)] {\n"
                oneElementeducations.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                educationsElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementeducations in educations {
                      hashCode = (hashCode &* 31) &+ oneElementeducations.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ResumeService.BulkCreateEducation.Request"
          }
          override public func className() -> String {
              return "ResumeService.BulkCreateEducation.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ResumeService.BulkCreateEducation.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ResumeService.BulkCreateEducation.Request

          required override public init () {
             builderResult = ResumeService.BulkCreateEducation.Request()
             super.init()
          }
          public var educations:Array<ResumeService.Containers.Education> {
               get {
                   return builderResult.educations
               }
               set (value) {
                   builderResult.educations = value
               }
          }
          public func clearEducations() -> ResumeService.BulkCreateEducation.RequestBuilder {
            builderResult.educations.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ResumeService.BulkCreateEducation.RequestBuilder {
            builderResult = ResumeService.BulkCreateEducation.Request()
            return self
          }
          public override func clone() -> ResumeService.BulkCreateEducation.RequestBuilder {
            return ResumeService.BulkCreateEducation.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ResumeService.BulkCreateEducation.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ResumeService.BulkCreateEducation.Request {
            var returnMe:ResumeService.BulkCreateEducation.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ResumeService.BulkCreateEducation.Request) -> ResumeService.BulkCreateEducation.RequestBuilder {
            if !other.educations.isEmpty  {
               builderResult.educations += other.educations
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.BulkCreateEducation.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateEducation.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = ResumeService.Containers.Education.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                educations += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var educations:Array<ResumeService.Containers.Education>  = Array<ResumeService.Containers.Education>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementeducations in educations {
                output.writeMessage(1, value:oneElementeducations)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementeducations in educations {
                size += WireFormat.computeMessageSize(1, value:oneElementeducations)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ResumeService.BulkCreateEducation.Response {
            return ResumeService.BulkCreateEducation.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateEducation.Response {
            return ResumeService.BulkCreateEducation.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ResumeService.BulkCreateEducation.Response {
            return ResumeService.BulkCreateEducation.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.BulkCreateEducation.Response {
            return ResumeService.BulkCreateEducation.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.BulkCreateEducation.Response {
            return ResumeService.BulkCreateEducation.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateEducation.Response {
            return ResumeService.BulkCreateEducation.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ResumeService.BulkCreateEducation.ResponseBuilder {
            return ResumeService.BulkCreateEducation.Response.classBuilder() as ResumeService.BulkCreateEducation.ResponseBuilder
          }
          public func builder() -> ResumeService.BulkCreateEducation.ResponseBuilder {
            return classBuilder() as ResumeService.BulkCreateEducation.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ResumeService.BulkCreateEducation.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ResumeService.BulkCreateEducation.Response.builder()
          }
          public func toBuilder() -> ResumeService.BulkCreateEducation.ResponseBuilder {
            return ResumeService.BulkCreateEducation.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ResumeService.BulkCreateEducation.Response) -> ResumeService.BulkCreateEducation.ResponseBuilder {
            return ResumeService.BulkCreateEducation.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var educationsElementIndex:Int = 0
            for oneElementeducations in educations {
                output += "\(indent) educations[\(educationsElementIndex)] {\n"
                oneElementeducations.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                educationsElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementeducations in educations {
                      hashCode = (hashCode &* 31) &+ oneElementeducations.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ResumeService.BulkCreateEducation.Response"
          }
          override public func className() -> String {
              return "ResumeService.BulkCreateEducation.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ResumeService.BulkCreateEducation.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ResumeService.BulkCreateEducation.Response

          required override public init () {
             builderResult = ResumeService.BulkCreateEducation.Response()
             super.init()
          }
          public var educations:Array<ResumeService.Containers.Education> {
               get {
                   return builderResult.educations
               }
               set (value) {
                   builderResult.educations = value
               }
          }
          public func clearEducations() -> ResumeService.BulkCreateEducation.ResponseBuilder {
            builderResult.educations.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ResumeService.BulkCreateEducation.ResponseBuilder {
            builderResult = ResumeService.BulkCreateEducation.Response()
            return self
          }
          public override func clone() -> ResumeService.BulkCreateEducation.ResponseBuilder {
            return ResumeService.BulkCreateEducation.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ResumeService.BulkCreateEducation.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ResumeService.BulkCreateEducation.Response {
            var returnMe:ResumeService.BulkCreateEducation.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ResumeService.BulkCreateEducation.Response) -> ResumeService.BulkCreateEducation.ResponseBuilder {
            if !other.educations.isEmpty  {
               builderResult.educations += other.educations
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.BulkCreateEducation.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateEducation.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = ResumeService.Containers.Education.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                educations += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ResumeService.BulkCreateEducation {
        return ResumeService.BulkCreateEducation.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateEducation {
        return ResumeService.BulkCreateEducation.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ResumeService.BulkCreateEducation {
        return ResumeService.BulkCreateEducation.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.BulkCreateEducation {
        return ResumeService.BulkCreateEducation.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.BulkCreateEducation {
        return ResumeService.BulkCreateEducation.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateEducation {
        return ResumeService.BulkCreateEducation.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ResumeService.BulkCreateEducationBuilder {
        return ResumeService.BulkCreateEducation.classBuilder() as ResumeService.BulkCreateEducationBuilder
      }
      public func builder() -> ResumeService.BulkCreateEducationBuilder {
        return classBuilder() as ResumeService.BulkCreateEducationBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ResumeService.BulkCreateEducationBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ResumeService.BulkCreateEducation.builder()
      }
      public func toBuilder() -> ResumeService.BulkCreateEducationBuilder {
        return ResumeService.BulkCreateEducation.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ResumeService.BulkCreateEducation) -> ResumeService.BulkCreateEducationBuilder {
        return ResumeService.BulkCreateEducation.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ResumeService.BulkCreateEducation"
      }
      override public func className() -> String {
          return "ResumeService.BulkCreateEducation"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ResumeService.BulkCreateEducation.self
      }


      //Meta information declaration end

    }

    final public class BulkCreateEducationBuilder : GeneratedMessageBuilder {
      private var builderResult:ResumeService.BulkCreateEducation

      required override public init () {
         builderResult = ResumeService.BulkCreateEducation()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ResumeService.BulkCreateEducationBuilder {
        builderResult = ResumeService.BulkCreateEducation()
        return self
      }
      public override func clone() -> ResumeService.BulkCreateEducationBuilder {
        return ResumeService.BulkCreateEducation.builderWithPrototype(builderResult)
      }
      public override func build() -> ResumeService.BulkCreateEducation {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ResumeService.BulkCreateEducation {
        var returnMe:ResumeService.BulkCreateEducation = builderResult
        return returnMe
      }
      public func mergeFrom(other:ResumeService.BulkCreateEducation) -> ResumeService.BulkCreateEducationBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.BulkCreateEducationBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateEducationBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class BulkCreatePositions : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var positions:Array<ResumeService.Containers.Position>  = Array<ResumeService.Containers.Position>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementpositions in positions {
                output.writeMessage(1, value:oneElementpositions)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementpositions in positions {
                size += WireFormat.computeMessageSize(1, value:oneElementpositions)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ResumeService.BulkCreatePositions.Request {
            return ResumeService.BulkCreatePositions.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreatePositions.Request {
            return ResumeService.BulkCreatePositions.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ResumeService.BulkCreatePositions.Request {
            return ResumeService.BulkCreatePositions.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.BulkCreatePositions.Request {
            return ResumeService.BulkCreatePositions.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.BulkCreatePositions.Request {
            return ResumeService.BulkCreatePositions.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreatePositions.Request {
            return ResumeService.BulkCreatePositions.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ResumeService.BulkCreatePositions.RequestBuilder {
            return ResumeService.BulkCreatePositions.Request.classBuilder() as ResumeService.BulkCreatePositions.RequestBuilder
          }
          public func builder() -> ResumeService.BulkCreatePositions.RequestBuilder {
            return classBuilder() as ResumeService.BulkCreatePositions.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ResumeService.BulkCreatePositions.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ResumeService.BulkCreatePositions.Request.builder()
          }
          public func toBuilder() -> ResumeService.BulkCreatePositions.RequestBuilder {
            return ResumeService.BulkCreatePositions.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ResumeService.BulkCreatePositions.Request) -> ResumeService.BulkCreatePositions.RequestBuilder {
            return ResumeService.BulkCreatePositions.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var positionsElementIndex:Int = 0
            for oneElementpositions in positions {
                output += "\(indent) positions[\(positionsElementIndex)] {\n"
                oneElementpositions.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                positionsElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementpositions in positions {
                      hashCode = (hashCode &* 31) &+ oneElementpositions.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ResumeService.BulkCreatePositions.Request"
          }
          override public func className() -> String {
              return "ResumeService.BulkCreatePositions.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ResumeService.BulkCreatePositions.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ResumeService.BulkCreatePositions.Request

          required override public init () {
             builderResult = ResumeService.BulkCreatePositions.Request()
             super.init()
          }
          public var positions:Array<ResumeService.Containers.Position> {
               get {
                   return builderResult.positions
               }
               set (value) {
                   builderResult.positions = value
               }
          }
          public func clearPositions() -> ResumeService.BulkCreatePositions.RequestBuilder {
            builderResult.positions.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ResumeService.BulkCreatePositions.RequestBuilder {
            builderResult = ResumeService.BulkCreatePositions.Request()
            return self
          }
          public override func clone() -> ResumeService.BulkCreatePositions.RequestBuilder {
            return ResumeService.BulkCreatePositions.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ResumeService.BulkCreatePositions.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ResumeService.BulkCreatePositions.Request {
            var returnMe:ResumeService.BulkCreatePositions.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ResumeService.BulkCreatePositions.Request) -> ResumeService.BulkCreatePositions.RequestBuilder {
            if !other.positions.isEmpty  {
               builderResult.positions += other.positions
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.BulkCreatePositions.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreatePositions.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = ResumeService.Containers.Position.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                positions += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var positions:Array<ResumeService.Containers.Position>  = Array<ResumeService.Containers.Position>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementpositions in positions {
                output.writeMessage(1, value:oneElementpositions)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementpositions in positions {
                size += WireFormat.computeMessageSize(1, value:oneElementpositions)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ResumeService.BulkCreatePositions.Response {
            return ResumeService.BulkCreatePositions.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreatePositions.Response {
            return ResumeService.BulkCreatePositions.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ResumeService.BulkCreatePositions.Response {
            return ResumeService.BulkCreatePositions.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.BulkCreatePositions.Response {
            return ResumeService.BulkCreatePositions.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.BulkCreatePositions.Response {
            return ResumeService.BulkCreatePositions.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreatePositions.Response {
            return ResumeService.BulkCreatePositions.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ResumeService.BulkCreatePositions.ResponseBuilder {
            return ResumeService.BulkCreatePositions.Response.classBuilder() as ResumeService.BulkCreatePositions.ResponseBuilder
          }
          public func builder() -> ResumeService.BulkCreatePositions.ResponseBuilder {
            return classBuilder() as ResumeService.BulkCreatePositions.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ResumeService.BulkCreatePositions.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ResumeService.BulkCreatePositions.Response.builder()
          }
          public func toBuilder() -> ResumeService.BulkCreatePositions.ResponseBuilder {
            return ResumeService.BulkCreatePositions.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ResumeService.BulkCreatePositions.Response) -> ResumeService.BulkCreatePositions.ResponseBuilder {
            return ResumeService.BulkCreatePositions.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var positionsElementIndex:Int = 0
            for oneElementpositions in positions {
                output += "\(indent) positions[\(positionsElementIndex)] {\n"
                oneElementpositions.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                positionsElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementpositions in positions {
                      hashCode = (hashCode &* 31) &+ oneElementpositions.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ResumeService.BulkCreatePositions.Response"
          }
          override public func className() -> String {
              return "ResumeService.BulkCreatePositions.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ResumeService.BulkCreatePositions.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ResumeService.BulkCreatePositions.Response

          required override public init () {
             builderResult = ResumeService.BulkCreatePositions.Response()
             super.init()
          }
          public var positions:Array<ResumeService.Containers.Position> {
               get {
                   return builderResult.positions
               }
               set (value) {
                   builderResult.positions = value
               }
          }
          public func clearPositions() -> ResumeService.BulkCreatePositions.ResponseBuilder {
            builderResult.positions.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ResumeService.BulkCreatePositions.ResponseBuilder {
            builderResult = ResumeService.BulkCreatePositions.Response()
            return self
          }
          public override func clone() -> ResumeService.BulkCreatePositions.ResponseBuilder {
            return ResumeService.BulkCreatePositions.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ResumeService.BulkCreatePositions.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ResumeService.BulkCreatePositions.Response {
            var returnMe:ResumeService.BulkCreatePositions.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ResumeService.BulkCreatePositions.Response) -> ResumeService.BulkCreatePositions.ResponseBuilder {
            if !other.positions.isEmpty  {
               builderResult.positions += other.positions
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.BulkCreatePositions.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreatePositions.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = ResumeService.Containers.Position.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                positions += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ResumeService.BulkCreatePositions {
        return ResumeService.BulkCreatePositions.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreatePositions {
        return ResumeService.BulkCreatePositions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ResumeService.BulkCreatePositions {
        return ResumeService.BulkCreatePositions.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.BulkCreatePositions {
        return ResumeService.BulkCreatePositions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.BulkCreatePositions {
        return ResumeService.BulkCreatePositions.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreatePositions {
        return ResumeService.BulkCreatePositions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ResumeService.BulkCreatePositionsBuilder {
        return ResumeService.BulkCreatePositions.classBuilder() as ResumeService.BulkCreatePositionsBuilder
      }
      public func builder() -> ResumeService.BulkCreatePositionsBuilder {
        return classBuilder() as ResumeService.BulkCreatePositionsBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ResumeService.BulkCreatePositionsBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ResumeService.BulkCreatePositions.builder()
      }
      public func toBuilder() -> ResumeService.BulkCreatePositionsBuilder {
        return ResumeService.BulkCreatePositions.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ResumeService.BulkCreatePositions) -> ResumeService.BulkCreatePositionsBuilder {
        return ResumeService.BulkCreatePositions.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ResumeService.BulkCreatePositions"
      }
      override public func className() -> String {
          return "ResumeService.BulkCreatePositions"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ResumeService.BulkCreatePositions.self
      }


      //Meta information declaration end

    }

    final public class BulkCreatePositionsBuilder : GeneratedMessageBuilder {
      private var builderResult:ResumeService.BulkCreatePositions

      required override public init () {
         builderResult = ResumeService.BulkCreatePositions()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ResumeService.BulkCreatePositionsBuilder {
        builderResult = ResumeService.BulkCreatePositions()
        return self
      }
      public override func clone() -> ResumeService.BulkCreatePositionsBuilder {
        return ResumeService.BulkCreatePositions.builderWithPrototype(builderResult)
      }
      public override func build() -> ResumeService.BulkCreatePositions {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ResumeService.BulkCreatePositions {
        var returnMe:ResumeService.BulkCreatePositions = builderResult
        return returnMe
      }
      public func mergeFrom(other:ResumeService.BulkCreatePositions) -> ResumeService.BulkCreatePositionsBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.BulkCreatePositionsBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreatePositionsBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class CreateCompany : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "company": return company
                 default: return nil
                 }
          }

          public private(set) var hasCompany:Bool = false
          public private(set) var company:ResumeService.Containers.Company = ResumeService.Containers.Company()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasCompany {
              output.writeMessage(1, value:company)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasCompany {
              size += WireFormat.computeMessageSize(1, value:company)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ResumeService.CreateCompany.Request {
            return ResumeService.CreateCompany.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.CreateCompany.Request {
            return ResumeService.CreateCompany.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ResumeService.CreateCompany.Request {
            return ResumeService.CreateCompany.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.CreateCompany.Request {
            return ResumeService.CreateCompany.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.CreateCompany.Request {
            return ResumeService.CreateCompany.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.CreateCompany.Request {
            return ResumeService.CreateCompany.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ResumeService.CreateCompany.RequestBuilder {
            return ResumeService.CreateCompany.Request.classBuilder() as ResumeService.CreateCompany.RequestBuilder
          }
          public func builder() -> ResumeService.CreateCompany.RequestBuilder {
            return classBuilder() as ResumeService.CreateCompany.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ResumeService.CreateCompany.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ResumeService.CreateCompany.Request.builder()
          }
          public func toBuilder() -> ResumeService.CreateCompany.RequestBuilder {
            return ResumeService.CreateCompany.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ResumeService.CreateCompany.Request) -> ResumeService.CreateCompany.RequestBuilder {
            return ResumeService.CreateCompany.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasCompany {
              output += "\(indent) company {\n"
              company.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasCompany {
                    hashCode = (hashCode &* 31) &+ company.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ResumeService.CreateCompany.Request"
          }
          override public func className() -> String {
              return "ResumeService.CreateCompany.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ResumeService.CreateCompany.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ResumeService.CreateCompany.Request

          required override public init () {
             builderResult = ResumeService.CreateCompany.Request()
             super.init()
          }
          public var hasCompany:Bool {
               get {
                   return builderResult.hasCompany
               }
          }
          public var company:ResumeService.Containers.Company {
               get {
                   return builderResult.company
               }
               set (value) {
                   builderResult.hasCompany = true
                   builderResult.company = value
               }
          }
          public func setCompanyBuilder(builderForValue:ResumeService.Containers.CompanyBuilder) -> ResumeService.CreateCompany.RequestBuilder {
            company = builderForValue.build()
            return self
          }
          public func mergeCompany(value:ResumeService.Containers.Company) -> ResumeService.CreateCompany.RequestBuilder {
            if (builderResult.hasCompany) {
              builderResult.company = ResumeService.Containers.Company.builderWithPrototype(builderResult.company).mergeFrom(value).buildPartial()
            } else {
              builderResult.company = value
            }
            builderResult.hasCompany = true
            return self
          }
          public func clearCompany() -> ResumeService.CreateCompany.RequestBuilder {
            builderResult.hasCompany = false
            builderResult.company = ResumeService.Containers.Company()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ResumeService.CreateCompany.RequestBuilder {
            builderResult = ResumeService.CreateCompany.Request()
            return self
          }
          public override func clone() -> ResumeService.CreateCompany.RequestBuilder {
            return ResumeService.CreateCompany.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ResumeService.CreateCompany.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ResumeService.CreateCompany.Request {
            var returnMe:ResumeService.CreateCompany.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ResumeService.CreateCompany.Request) -> ResumeService.CreateCompany.RequestBuilder {
            if (other.hasCompany) {
                mergeCompany(other.company)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.CreateCompany.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.CreateCompany.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:ResumeService.Containers.CompanyBuilder = ResumeService.Containers.Company.builder()
                if hasCompany {
                  subBuilder.mergeFrom(company)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                company = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "company": return company
                 default: return nil
                 }
          }

          public private(set) var hasCompany:Bool = false
          public private(set) var company:ResumeService.Containers.Company = ResumeService.Containers.Company()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasCompany {
              output.writeMessage(1, value:company)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasCompany {
              size += WireFormat.computeMessageSize(1, value:company)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ResumeService.CreateCompany.Response {
            return ResumeService.CreateCompany.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.CreateCompany.Response {
            return ResumeService.CreateCompany.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ResumeService.CreateCompany.Response {
            return ResumeService.CreateCompany.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.CreateCompany.Response {
            return ResumeService.CreateCompany.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.CreateCompany.Response {
            return ResumeService.CreateCompany.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.CreateCompany.Response {
            return ResumeService.CreateCompany.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ResumeService.CreateCompany.ResponseBuilder {
            return ResumeService.CreateCompany.Response.classBuilder() as ResumeService.CreateCompany.ResponseBuilder
          }
          public func builder() -> ResumeService.CreateCompany.ResponseBuilder {
            return classBuilder() as ResumeService.CreateCompany.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ResumeService.CreateCompany.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ResumeService.CreateCompany.Response.builder()
          }
          public func toBuilder() -> ResumeService.CreateCompany.ResponseBuilder {
            return ResumeService.CreateCompany.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ResumeService.CreateCompany.Response) -> ResumeService.CreateCompany.ResponseBuilder {
            return ResumeService.CreateCompany.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasCompany {
              output += "\(indent) company {\n"
              company.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasCompany {
                    hashCode = (hashCode &* 31) &+ company.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ResumeService.CreateCompany.Response"
          }
          override public func className() -> String {
              return "ResumeService.CreateCompany.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ResumeService.CreateCompany.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ResumeService.CreateCompany.Response

          required override public init () {
             builderResult = ResumeService.CreateCompany.Response()
             super.init()
          }
          public var hasCompany:Bool {
               get {
                   return builderResult.hasCompany
               }
          }
          public var company:ResumeService.Containers.Company {
               get {
                   return builderResult.company
               }
               set (value) {
                   builderResult.hasCompany = true
                   builderResult.company = value
               }
          }
          public func setCompanyBuilder(builderForValue:ResumeService.Containers.CompanyBuilder) -> ResumeService.CreateCompany.ResponseBuilder {
            company = builderForValue.build()
            return self
          }
          public func mergeCompany(value:ResumeService.Containers.Company) -> ResumeService.CreateCompany.ResponseBuilder {
            if (builderResult.hasCompany) {
              builderResult.company = ResumeService.Containers.Company.builderWithPrototype(builderResult.company).mergeFrom(value).buildPartial()
            } else {
              builderResult.company = value
            }
            builderResult.hasCompany = true
            return self
          }
          public func clearCompany() -> ResumeService.CreateCompany.ResponseBuilder {
            builderResult.hasCompany = false
            builderResult.company = ResumeService.Containers.Company()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ResumeService.CreateCompany.ResponseBuilder {
            builderResult = ResumeService.CreateCompany.Response()
            return self
          }
          public override func clone() -> ResumeService.CreateCompany.ResponseBuilder {
            return ResumeService.CreateCompany.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ResumeService.CreateCompany.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ResumeService.CreateCompany.Response {
            var returnMe:ResumeService.CreateCompany.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ResumeService.CreateCompany.Response) -> ResumeService.CreateCompany.ResponseBuilder {
            if (other.hasCompany) {
                mergeCompany(other.company)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.CreateCompany.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.CreateCompany.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:ResumeService.Containers.CompanyBuilder = ResumeService.Containers.Company.builder()
                if hasCompany {
                  subBuilder.mergeFrom(company)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                company = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ResumeService.CreateCompany {
        return ResumeService.CreateCompany.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.CreateCompany {
        return ResumeService.CreateCompany.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ResumeService.CreateCompany {
        return ResumeService.CreateCompany.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.CreateCompany {
        return ResumeService.CreateCompany.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.CreateCompany {
        return ResumeService.CreateCompany.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.CreateCompany {
        return ResumeService.CreateCompany.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ResumeService.CreateCompanyBuilder {
        return ResumeService.CreateCompany.classBuilder() as ResumeService.CreateCompanyBuilder
      }
      public func builder() -> ResumeService.CreateCompanyBuilder {
        return classBuilder() as ResumeService.CreateCompanyBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ResumeService.CreateCompanyBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ResumeService.CreateCompany.builder()
      }
      public func toBuilder() -> ResumeService.CreateCompanyBuilder {
        return ResumeService.CreateCompany.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ResumeService.CreateCompany) -> ResumeService.CreateCompanyBuilder {
        return ResumeService.CreateCompany.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ResumeService.CreateCompany"
      }
      override public func className() -> String {
          return "ResumeService.CreateCompany"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ResumeService.CreateCompany.self
      }


      //Meta information declaration end

    }

    final public class CreateCompanyBuilder : GeneratedMessageBuilder {
      private var builderResult:ResumeService.CreateCompany

      required override public init () {
         builderResult = ResumeService.CreateCompany()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ResumeService.CreateCompanyBuilder {
        builderResult = ResumeService.CreateCompany()
        return self
      }
      public override func clone() -> ResumeService.CreateCompanyBuilder {
        return ResumeService.CreateCompany.builderWithPrototype(builderResult)
      }
      public override func build() -> ResumeService.CreateCompany {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ResumeService.CreateCompany {
        var returnMe:ResumeService.CreateCompany = builderResult
        return returnMe
      }
      public func mergeFrom(other:ResumeService.CreateCompany) -> ResumeService.CreateCompanyBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.CreateCompanyBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.CreateCompanyBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class BulkCreateCompanies : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var companies:Array<ResumeService.Containers.Company>  = Array<ResumeService.Containers.Company>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementcompanies in companies {
                output.writeMessage(1, value:oneElementcompanies)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementcompanies in companies {
                size += WireFormat.computeMessageSize(1, value:oneElementcompanies)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ResumeService.BulkCreateCompanies.Request {
            return ResumeService.BulkCreateCompanies.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateCompanies.Request {
            return ResumeService.BulkCreateCompanies.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ResumeService.BulkCreateCompanies.Request {
            return ResumeService.BulkCreateCompanies.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.BulkCreateCompanies.Request {
            return ResumeService.BulkCreateCompanies.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.BulkCreateCompanies.Request {
            return ResumeService.BulkCreateCompanies.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateCompanies.Request {
            return ResumeService.BulkCreateCompanies.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ResumeService.BulkCreateCompanies.RequestBuilder {
            return ResumeService.BulkCreateCompanies.Request.classBuilder() as ResumeService.BulkCreateCompanies.RequestBuilder
          }
          public func builder() -> ResumeService.BulkCreateCompanies.RequestBuilder {
            return classBuilder() as ResumeService.BulkCreateCompanies.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ResumeService.BulkCreateCompanies.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ResumeService.BulkCreateCompanies.Request.builder()
          }
          public func toBuilder() -> ResumeService.BulkCreateCompanies.RequestBuilder {
            return ResumeService.BulkCreateCompanies.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ResumeService.BulkCreateCompanies.Request) -> ResumeService.BulkCreateCompanies.RequestBuilder {
            return ResumeService.BulkCreateCompanies.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var companiesElementIndex:Int = 0
            for oneElementcompanies in companies {
                output += "\(indent) companies[\(companiesElementIndex)] {\n"
                oneElementcompanies.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                companiesElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementcompanies in companies {
                      hashCode = (hashCode &* 31) &+ oneElementcompanies.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ResumeService.BulkCreateCompanies.Request"
          }
          override public func className() -> String {
              return "ResumeService.BulkCreateCompanies.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ResumeService.BulkCreateCompanies.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ResumeService.BulkCreateCompanies.Request

          required override public init () {
             builderResult = ResumeService.BulkCreateCompanies.Request()
             super.init()
          }
          public var companies:Array<ResumeService.Containers.Company> {
               get {
                   return builderResult.companies
               }
               set (value) {
                   builderResult.companies = value
               }
          }
          public func clearCompanies() -> ResumeService.BulkCreateCompanies.RequestBuilder {
            builderResult.companies.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ResumeService.BulkCreateCompanies.RequestBuilder {
            builderResult = ResumeService.BulkCreateCompanies.Request()
            return self
          }
          public override func clone() -> ResumeService.BulkCreateCompanies.RequestBuilder {
            return ResumeService.BulkCreateCompanies.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ResumeService.BulkCreateCompanies.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ResumeService.BulkCreateCompanies.Request {
            var returnMe:ResumeService.BulkCreateCompanies.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ResumeService.BulkCreateCompanies.Request) -> ResumeService.BulkCreateCompanies.RequestBuilder {
            if !other.companies.isEmpty  {
               builderResult.companies += other.companies
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.BulkCreateCompanies.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateCompanies.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = ResumeService.Containers.Company.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                companies += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var companies:Array<ResumeService.Containers.Company>  = Array<ResumeService.Containers.Company>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementcompanies in companies {
                output.writeMessage(1, value:oneElementcompanies)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementcompanies in companies {
                size += WireFormat.computeMessageSize(1, value:oneElementcompanies)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ResumeService.BulkCreateCompanies.Response {
            return ResumeService.BulkCreateCompanies.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateCompanies.Response {
            return ResumeService.BulkCreateCompanies.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ResumeService.BulkCreateCompanies.Response {
            return ResumeService.BulkCreateCompanies.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.BulkCreateCompanies.Response {
            return ResumeService.BulkCreateCompanies.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.BulkCreateCompanies.Response {
            return ResumeService.BulkCreateCompanies.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateCompanies.Response {
            return ResumeService.BulkCreateCompanies.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ResumeService.BulkCreateCompanies.ResponseBuilder {
            return ResumeService.BulkCreateCompanies.Response.classBuilder() as ResumeService.BulkCreateCompanies.ResponseBuilder
          }
          public func builder() -> ResumeService.BulkCreateCompanies.ResponseBuilder {
            return classBuilder() as ResumeService.BulkCreateCompanies.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ResumeService.BulkCreateCompanies.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ResumeService.BulkCreateCompanies.Response.builder()
          }
          public func toBuilder() -> ResumeService.BulkCreateCompanies.ResponseBuilder {
            return ResumeService.BulkCreateCompanies.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ResumeService.BulkCreateCompanies.Response) -> ResumeService.BulkCreateCompanies.ResponseBuilder {
            return ResumeService.BulkCreateCompanies.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var companiesElementIndex:Int = 0
            for oneElementcompanies in companies {
                output += "\(indent) companies[\(companiesElementIndex)] {\n"
                oneElementcompanies.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                companiesElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementcompanies in companies {
                      hashCode = (hashCode &* 31) &+ oneElementcompanies.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ResumeService.BulkCreateCompanies.Response"
          }
          override public func className() -> String {
              return "ResumeService.BulkCreateCompanies.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ResumeService.BulkCreateCompanies.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ResumeService.BulkCreateCompanies.Response

          required override public init () {
             builderResult = ResumeService.BulkCreateCompanies.Response()
             super.init()
          }
          public var companies:Array<ResumeService.Containers.Company> {
               get {
                   return builderResult.companies
               }
               set (value) {
                   builderResult.companies = value
               }
          }
          public func clearCompanies() -> ResumeService.BulkCreateCompanies.ResponseBuilder {
            builderResult.companies.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ResumeService.BulkCreateCompanies.ResponseBuilder {
            builderResult = ResumeService.BulkCreateCompanies.Response()
            return self
          }
          public override func clone() -> ResumeService.BulkCreateCompanies.ResponseBuilder {
            return ResumeService.BulkCreateCompanies.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ResumeService.BulkCreateCompanies.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ResumeService.BulkCreateCompanies.Response {
            var returnMe:ResumeService.BulkCreateCompanies.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ResumeService.BulkCreateCompanies.Response) -> ResumeService.BulkCreateCompanies.ResponseBuilder {
            if !other.companies.isEmpty  {
               builderResult.companies += other.companies
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.BulkCreateCompanies.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateCompanies.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = ResumeService.Containers.Company.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                companies += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ResumeService.BulkCreateCompanies {
        return ResumeService.BulkCreateCompanies.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateCompanies {
        return ResumeService.BulkCreateCompanies.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ResumeService.BulkCreateCompanies {
        return ResumeService.BulkCreateCompanies.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.BulkCreateCompanies {
        return ResumeService.BulkCreateCompanies.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.BulkCreateCompanies {
        return ResumeService.BulkCreateCompanies.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateCompanies {
        return ResumeService.BulkCreateCompanies.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ResumeService.BulkCreateCompaniesBuilder {
        return ResumeService.BulkCreateCompanies.classBuilder() as ResumeService.BulkCreateCompaniesBuilder
      }
      public func builder() -> ResumeService.BulkCreateCompaniesBuilder {
        return classBuilder() as ResumeService.BulkCreateCompaniesBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ResumeService.BulkCreateCompaniesBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ResumeService.BulkCreateCompanies.builder()
      }
      public func toBuilder() -> ResumeService.BulkCreateCompaniesBuilder {
        return ResumeService.BulkCreateCompanies.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ResumeService.BulkCreateCompanies) -> ResumeService.BulkCreateCompaniesBuilder {
        return ResumeService.BulkCreateCompanies.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ResumeService.BulkCreateCompanies"
      }
      override public func className() -> String {
          return "ResumeService.BulkCreateCompanies"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ResumeService.BulkCreateCompanies.self
      }


      //Meta information declaration end

    }

    final public class BulkCreateCompaniesBuilder : GeneratedMessageBuilder {
      private var builderResult:ResumeService.BulkCreateCompanies

      required override public init () {
         builderResult = ResumeService.BulkCreateCompanies()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ResumeService.BulkCreateCompaniesBuilder {
        builderResult = ResumeService.BulkCreateCompanies()
        return self
      }
      public override func clone() -> ResumeService.BulkCreateCompaniesBuilder {
        return ResumeService.BulkCreateCompanies.builderWithPrototype(builderResult)
      }
      public override func build() -> ResumeService.BulkCreateCompanies {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ResumeService.BulkCreateCompanies {
        var returnMe:ResumeService.BulkCreateCompanies = builderResult
        return returnMe
      }
      public func mergeFrom(other:ResumeService.BulkCreateCompanies) -> ResumeService.BulkCreateCompaniesBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.BulkCreateCompaniesBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateCompaniesBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetResume : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "user_id": return user_id
                 default: return nil
                 }
          }

          public private(set) var hasUserId:Bool = false
          public private(set) var user_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUserId {
              output.writeString(1, value:user_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUserId {
              size += WireFormat.computeStringSize(1, value:user_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ResumeService.GetResume.Request {
            return ResumeService.GetResume.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.GetResume.Request {
            return ResumeService.GetResume.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ResumeService.GetResume.Request {
            return ResumeService.GetResume.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.GetResume.Request {
            return ResumeService.GetResume.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.GetResume.Request {
            return ResumeService.GetResume.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.GetResume.Request {
            return ResumeService.GetResume.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ResumeService.GetResume.RequestBuilder {
            return ResumeService.GetResume.Request.classBuilder() as ResumeService.GetResume.RequestBuilder
          }
          public func builder() -> ResumeService.GetResume.RequestBuilder {
            return classBuilder() as ResumeService.GetResume.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ResumeService.GetResume.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ResumeService.GetResume.Request.builder()
          }
          public func toBuilder() -> ResumeService.GetResume.RequestBuilder {
            return ResumeService.GetResume.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ResumeService.GetResume.Request) -> ResumeService.GetResume.RequestBuilder {
            return ResumeService.GetResume.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ResumeService.GetResume.Request"
          }
          override public func className() -> String {
              return "ResumeService.GetResume.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ResumeService.GetResume.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ResumeService.GetResume.Request

          required override public init () {
             builderResult = ResumeService.GetResume.Request()
             super.init()
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> ResumeService.GetResume.RequestBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ResumeService.GetResume.RequestBuilder {
            builderResult = ResumeService.GetResume.Request()
            return self
          }
          public override func clone() -> ResumeService.GetResume.RequestBuilder {
            return ResumeService.GetResume.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ResumeService.GetResume.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ResumeService.GetResume.Request {
            var returnMe:ResumeService.GetResume.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ResumeService.GetResume.Request) -> ResumeService.GetResume.RequestBuilder {
            if other.hasUserId {
                 user_id = other.user_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.GetResume.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.GetResume.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                user_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "resume": return resume
                 default: return nil
                 }
          }

          public private(set) var hasResume:Bool = false
          public private(set) var resume:ResumeService.Containers.Resume = ResumeService.Containers.Resume()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasResume {
              output.writeMessage(1, value:resume)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasResume {
              size += WireFormat.computeMessageSize(1, value:resume)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ResumeService.GetResume.Response {
            return ResumeService.GetResume.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.GetResume.Response {
            return ResumeService.GetResume.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ResumeService.GetResume.Response {
            return ResumeService.GetResume.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.GetResume.Response {
            return ResumeService.GetResume.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.GetResume.Response {
            return ResumeService.GetResume.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.GetResume.Response {
            return ResumeService.GetResume.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ResumeService.GetResume.ResponseBuilder {
            return ResumeService.GetResume.Response.classBuilder() as ResumeService.GetResume.ResponseBuilder
          }
          public func builder() -> ResumeService.GetResume.ResponseBuilder {
            return classBuilder() as ResumeService.GetResume.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ResumeService.GetResume.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ResumeService.GetResume.Response.builder()
          }
          public func toBuilder() -> ResumeService.GetResume.ResponseBuilder {
            return ResumeService.GetResume.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ResumeService.GetResume.Response) -> ResumeService.GetResume.ResponseBuilder {
            return ResumeService.GetResume.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasResume {
              output += "\(indent) resume {\n"
              resume.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasResume {
                    hashCode = (hashCode &* 31) &+ resume.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ResumeService.GetResume.Response"
          }
          override public func className() -> String {
              return "ResumeService.GetResume.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ResumeService.GetResume.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ResumeService.GetResume.Response

          required override public init () {
             builderResult = ResumeService.GetResume.Response()
             super.init()
          }
          public var hasResume:Bool {
               get {
                   return builderResult.hasResume
               }
          }
          public var resume:ResumeService.Containers.Resume {
               get {
                   return builderResult.resume
               }
               set (value) {
                   builderResult.hasResume = true
                   builderResult.resume = value
               }
          }
          public func setResumeBuilder(builderForValue:ResumeService.Containers.ResumeBuilder) -> ResumeService.GetResume.ResponseBuilder {
            resume = builderForValue.build()
            return self
          }
          public func mergeResume(value:ResumeService.Containers.Resume) -> ResumeService.GetResume.ResponseBuilder {
            if (builderResult.hasResume) {
              builderResult.resume = ResumeService.Containers.Resume.builderWithPrototype(builderResult.resume).mergeFrom(value).buildPartial()
            } else {
              builderResult.resume = value
            }
            builderResult.hasResume = true
            return self
          }
          public func clearResume() -> ResumeService.GetResume.ResponseBuilder {
            builderResult.hasResume = false
            builderResult.resume = ResumeService.Containers.Resume()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ResumeService.GetResume.ResponseBuilder {
            builderResult = ResumeService.GetResume.Response()
            return self
          }
          public override func clone() -> ResumeService.GetResume.ResponseBuilder {
            return ResumeService.GetResume.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ResumeService.GetResume.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ResumeService.GetResume.Response {
            var returnMe:ResumeService.GetResume.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ResumeService.GetResume.Response) -> ResumeService.GetResume.ResponseBuilder {
            if (other.hasResume) {
                mergeResume(other.resume)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.GetResume.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.GetResume.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:ResumeService.Containers.ResumeBuilder = ResumeService.Containers.Resume.builder()
                if hasResume {
                  subBuilder.mergeFrom(resume)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                resume = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ResumeService.GetResume {
        return ResumeService.GetResume.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService.GetResume {
        return ResumeService.GetResume.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ResumeService.GetResume {
        return ResumeService.GetResume.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService.GetResume {
        return ResumeService.GetResume.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService.GetResume {
        return ResumeService.GetResume.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.GetResume {
        return ResumeService.GetResume.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ResumeService.GetResumeBuilder {
        return ResumeService.GetResume.classBuilder() as ResumeService.GetResumeBuilder
      }
      public func builder() -> ResumeService.GetResumeBuilder {
        return classBuilder() as ResumeService.GetResumeBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ResumeService.GetResumeBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ResumeService.GetResume.builder()
      }
      public func toBuilder() -> ResumeService.GetResumeBuilder {
        return ResumeService.GetResume.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ResumeService.GetResume) -> ResumeService.GetResumeBuilder {
        return ResumeService.GetResume.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ResumeService.GetResume"
      }
      override public func className() -> String {
          return "ResumeService.GetResume"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ResumeService.GetResume.self
      }


      //Meta information declaration end

    }

    final public class GetResumeBuilder : GeneratedMessageBuilder {
      private var builderResult:ResumeService.GetResume

      required override public init () {
         builderResult = ResumeService.GetResume()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ResumeService.GetResumeBuilder {
        builderResult = ResumeService.GetResume()
        return self
      }
      public override func clone() -> ResumeService.GetResumeBuilder {
        return ResumeService.GetResume.builderWithPrototype(builderResult)
      }
      public override func build() -> ResumeService.GetResume {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ResumeService.GetResume {
        var returnMe:ResumeService.GetResume = builderResult
        return returnMe
      }
      public func mergeFrom(other:ResumeService.GetResume) -> ResumeService.GetResumeBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeService.GetResumeBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService.GetResumeBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end

  override public subscript (key: String) -> Any? {
         switch key {
         default: return nil
         }
  }

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  public class func parseFromData(data:[Byte]) -> ResumeService {
    return ResumeService.builder().mergeFromData(data).build()
  }
  public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ResumeService {
    return ResumeService.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> ResumeService {
    return ResumeService.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ResumeService {
    return ResumeService.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> ResumeService {
    return ResumeService.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeService {
    return ResumeService.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> ResumeServiceBuilder {
    return ResumeService.classBuilder() as ResumeServiceBuilder
  }
  public func builder() -> ResumeServiceBuilder {
    return classBuilder() as ResumeServiceBuilder
  }
  public override class func classBuilder() -> MessageBuilder {
    return ResumeServiceBuilder()
  }
  public override func classBuilder() -> MessageBuilder {
    return ResumeService.builder()
  }
  public func toBuilder() -> ResumeServiceBuilder {
    return ResumeService.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:ResumeService) -> ResumeServiceBuilder {
    return ResumeService.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "ResumeService"
  }
  override public func className() -> String {
      return "ResumeService"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return ResumeService.self
  }


  //Meta information declaration end

}

final public class ResumeServiceBuilder : GeneratedMessageBuilder {
  private var builderResult:ResumeService

  required override public init () {
     builderResult = ResumeService()
     super.init()
  }
  override public var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  public override func clear() -> ResumeServiceBuilder {
    builderResult = ResumeService()
    return self
  }
  public override func clone() -> ResumeServiceBuilder {
    return ResumeService.builderWithPrototype(builderResult)
  }
  public override func build() -> ResumeService {
       checkInitialized()
       return buildPartial()
  }
  public func buildPartial() -> ResumeService {
    var returnMe:ResumeService = builderResult
    return returnMe
  }
  public func mergeFrom(other:ResumeService) -> ResumeServiceBuilder {
    mergeUnknownFields(other.unknownFields)
    return self
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream) ->ResumeServiceBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ResumeServiceBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


public extension ResumeService.Containers.ApproximateDate {
    class func parseFromNSData(data:NSData) -> ResumeService.Containers.ApproximateDate {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.Containers.ApproximateDate.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.ApproximateDate {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.Containers.ApproximateDate.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.Containers.Resume {
    class func parseFromNSData(data:NSData) -> ResumeService.Containers.Resume {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.Containers.Resume.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.Resume {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.Containers.Resume.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.Containers.Education {
    class func parseFromNSData(data:NSData) -> ResumeService.Containers.Education {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.Containers.Education.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.Education {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.Containers.Education.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.Containers.Position {
    class func parseFromNSData(data:NSData) -> ResumeService.Containers.Position {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.Containers.Position.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.Position {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.Containers.Position.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.Containers.Company {
    class func parseFromNSData(data:NSData) -> ResumeService.Containers.Company {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.Containers.Company.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.Containers.Company {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.Containers.Company.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.Containers {
    class func parseFromNSData(data:NSData) -> ResumeService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.Containers.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.Containers.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.BulkCreateEducation.Request {
    class func parseFromNSData(data:NSData) -> ResumeService.BulkCreateEducation.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreateEducation.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateEducation.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreateEducation.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.BulkCreateEducation.Response {
    class func parseFromNSData(data:NSData) -> ResumeService.BulkCreateEducation.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreateEducation.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateEducation.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreateEducation.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.BulkCreateEducation {
    class func parseFromNSData(data:NSData) -> ResumeService.BulkCreateEducation {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreateEducation.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateEducation {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreateEducation.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.BulkCreatePositions.Request {
    class func parseFromNSData(data:NSData) -> ResumeService.BulkCreatePositions.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreatePositions.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreatePositions.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreatePositions.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.BulkCreatePositions.Response {
    class func parseFromNSData(data:NSData) -> ResumeService.BulkCreatePositions.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreatePositions.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreatePositions.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreatePositions.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.BulkCreatePositions {
    class func parseFromNSData(data:NSData) -> ResumeService.BulkCreatePositions {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreatePositions.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreatePositions {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreatePositions.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.CreateCompany.Request {
    class func parseFromNSData(data:NSData) -> ResumeService.CreateCompany.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.CreateCompany.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.CreateCompany.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.CreateCompany.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.CreateCompany.Response {
    class func parseFromNSData(data:NSData) -> ResumeService.CreateCompany.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.CreateCompany.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.CreateCompany.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.CreateCompany.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.CreateCompany {
    class func parseFromNSData(data:NSData) -> ResumeService.CreateCompany {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.CreateCompany.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.CreateCompany {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.CreateCompany.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.BulkCreateCompanies.Request {
    class func parseFromNSData(data:NSData) -> ResumeService.BulkCreateCompanies.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreateCompanies.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateCompanies.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreateCompanies.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.BulkCreateCompanies.Response {
    class func parseFromNSData(data:NSData) -> ResumeService.BulkCreateCompanies.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreateCompanies.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateCompanies.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreateCompanies.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.BulkCreateCompanies {
    class func parseFromNSData(data:NSData) -> ResumeService.BulkCreateCompanies {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreateCompanies.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.BulkCreateCompanies {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.BulkCreateCompanies.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.GetResume.Request {
    class func parseFromNSData(data:NSData) -> ResumeService.GetResume.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.GetResume.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.GetResume.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.GetResume.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.GetResume.Response {
    class func parseFromNSData(data:NSData) -> ResumeService.GetResume.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.GetResume.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.GetResume.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.GetResume.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService.GetResume {
    class func parseFromNSData(data:NSData) -> ResumeService.GetResume {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.GetResume.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService.GetResume {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.GetResume.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ResumeService {
    class func parseFromNSData(data:NSData) -> ResumeService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ResumeService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ResumeService.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
