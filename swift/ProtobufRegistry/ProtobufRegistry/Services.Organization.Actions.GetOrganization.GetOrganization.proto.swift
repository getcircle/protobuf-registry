// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file get_organization.proto

import Foundation

public extension Services.Organization.Actions{ public struct GetOrganization { }}

public func == (lhs: Services.Organization.Actions.GetOrganization.RequestV1, rhs: Services.Organization.Actions.GetOrganization.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasDomain == rhs.hasDomain) && (!lhs.hasDomain || lhs.domain == rhs.domain)
  fieldCheck = fieldCheck && (lhs.hasInflations == rhs.hasInflations) && (!lhs.hasInflations || lhs.inflations == rhs.inflations)
  fieldCheck = fieldCheck && (lhs.hasFields == rhs.hasFields) && (!lhs.hasFields || lhs.fields == rhs.fields)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Organization.Actions.GetOrganization.ResponseV1, rhs: Services.Organization.Actions.GetOrganization.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasOrganization == rhs.hasOrganization) && (!lhs.hasOrganization || lhs.organization == rhs.organization)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Organization.Actions.GetOrganization {
  public struct GetOrganizationRoot {
    public static var sharedInstance : GetOrganizationRoot {
     struct Static {
         static let instance : GetOrganizationRoot = GetOrganizationRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Common.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Organization.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasDomain:Bool = false
    public private(set) var domain:String = ""

    public private(set) var hasInflations:Bool = false
    public private(set) var inflations:Services.Common.Containers.InflationsV1!
    public private(set) var hasFields:Bool = false
    public private(set) var fields:Services.Common.Containers.FieldsV1!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasDomain {
        try output.writeString(2, value:domain)
      }
      if hasInflations {
        try output.writeMessage(3, value:inflations)
      }
      if hasFields {
        try output.writeMessage(4, value:fields)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasDomain {
        serialize_size += domain.computeStringSize(2)
      }
      if hasInflations {
          if let varSizeinflations = inflations?.computeMessageSize(3) {
              serialize_size += varSizeinflations
          }
      }
      if hasFields {
          if let varSizefields = fields?.computeMessageSize(4) {
              serialize_size += varSizefields
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Actions.GetOrganization.RequestV1> {
      var mergedArray = Array<Services.Organization.Actions.GetOrganization.RequestV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetOrganization.RequestV1? {
      return try Services.Organization.Actions.GetOrganization.RequestV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Actions.GetOrganization.RequestV1 {
      return try Services.Organization.Actions.GetOrganization.RequestV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Actions.GetOrganization.GetOrganizationRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetOrganization.RequestV1 {
      return try Services.Organization.Actions.GetOrganization.RequestV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetOrganization.RequestV1 {
      return try Services.Organization.Actions.GetOrganization.RequestV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetOrganization.RequestV1 {
      return try Services.Organization.Actions.GetOrganization.RequestV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetOrganization.RequestV1 {
      return try Services.Organization.Actions.GetOrganization.RequestV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetOrganization.RequestV1 {
      return try Services.Organization.Actions.GetOrganization.RequestV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Actions.GetOrganization.RequestV1.Builder {
      return Services.Organization.Actions.GetOrganization.RequestV1.classBuilder() as! Services.Organization.Actions.GetOrganization.RequestV1.Builder
    }
    public func getBuilder() -> Services.Organization.Actions.GetOrganization.RequestV1.Builder {
      return classBuilder() as! Services.Organization.Actions.GetOrganization.RequestV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetOrganization.RequestV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetOrganization.RequestV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Actions.GetOrganization.RequestV1.Builder {
      return try Services.Organization.Actions.GetOrganization.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Actions.GetOrganization.RequestV1) throws -> Services.Organization.Actions.GetOrganization.RequestV1.Builder {
      return try Services.Organization.Actions.GetOrganization.RequestV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasDomain {
        output += "\(indent) domain: \(domain) \n"
      }
      if hasInflations {
        output += "\(indent) inflations {\n"
        try inflations?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasFields {
        output += "\(indent) fields {\n"
        try fields?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasDomain {
               hashCode = (hashCode &* 31) &+ domain.hashValue
            }
            if hasInflations {
                if let hashValueinflations = inflations?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueinflations
                }
            }
            if hasFields {
                if let hashValuefields = fields?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefields
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Actions.GetOrganization.RequestV1"
    }
    override public func className() -> String {
        return "Services.Organization.Actions.GetOrganization.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Actions.GetOrganization.RequestV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Actions.GetOrganization.RequestV1 = Services.Organization.Actions.GetOrganization.RequestV1()
      public func getMessage() -> Services.Organization.Actions.GetOrganization.RequestV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Organization.Actions.GetOrganization.RequestV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Organization.Actions.GetOrganization.RequestV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasDomain:Bool {
           get {
                return builderResult.hasDomain
           }
      }
      public var domain:String {
           get {
                return builderResult.domain
           }
           set (value) {
               builderResult.hasDomain = true
               builderResult.domain = value
           }
      }
      public func setDomain(value:String) -> Services.Organization.Actions.GetOrganization.RequestV1.Builder {
        self.domain = value
        return self
      }
      public func clearDomain() -> Services.Organization.Actions.GetOrganization.RequestV1.Builder{
           builderResult.hasDomain = false
           builderResult.domain = ""
           return self
      }
      public var hasInflations:Bool {
           get {
               return builderResult.hasInflations
           }
      }
      public var inflations:Services.Common.Containers.InflationsV1! {
           get {
               if inflationsBuilder_ != nil {
                  builderResult.inflations = inflationsBuilder_.getMessage()
               }
               return builderResult.inflations
           }
           set (value) {
               builderResult.hasInflations = true
               builderResult.inflations = value
           }
      }
      private var inflationsBuilder_:Services.Common.Containers.InflationsV1.Builder! {
           didSet {
              builderResult.hasInflations = true
           }
      }
      public func getInflationsBuilder() -> Services.Common.Containers.InflationsV1.Builder {
        if inflationsBuilder_ == nil {
           inflationsBuilder_ = Services.Common.Containers.InflationsV1.Builder()
           builderResult.inflations = inflationsBuilder_.getMessage()
           if inflations != nil {
              try! inflationsBuilder_.mergeFrom(inflations)
           }
        }
        return inflationsBuilder_
      }
      public func setInflations(value:Services.Common.Containers.InflationsV1!) -> Services.Organization.Actions.GetOrganization.RequestV1.Builder {
        self.inflations = value
        return self
      }
      public func mergeInflations(value:Services.Common.Containers.InflationsV1) throws -> Services.Organization.Actions.GetOrganization.RequestV1.Builder {
        if builderResult.hasInflations {
          builderResult.inflations = try Services.Common.Containers.InflationsV1.builderWithPrototype(builderResult.inflations).mergeFrom(value).buildPartial()
        } else {
          builderResult.inflations = value
        }
        builderResult.hasInflations = true
        return self
      }
      public func clearInflations() -> Services.Organization.Actions.GetOrganization.RequestV1.Builder {
        inflationsBuilder_ = nil
        builderResult.hasInflations = false
        builderResult.inflations = nil
        return self
      }
      public var hasFields:Bool {
           get {
               return builderResult.hasFields
           }
      }
      public var fields:Services.Common.Containers.FieldsV1! {
           get {
               if fieldsBuilder_ != nil {
                  builderResult.fields = fieldsBuilder_.getMessage()
               }
               return builderResult.fields
           }
           set (value) {
               builderResult.hasFields = true
               builderResult.fields = value
           }
      }
      private var fieldsBuilder_:Services.Common.Containers.FieldsV1.Builder! {
           didSet {
              builderResult.hasFields = true
           }
      }
      public func getFieldsBuilder() -> Services.Common.Containers.FieldsV1.Builder {
        if fieldsBuilder_ == nil {
           fieldsBuilder_ = Services.Common.Containers.FieldsV1.Builder()
           builderResult.fields = fieldsBuilder_.getMessage()
           if fields != nil {
              try! fieldsBuilder_.mergeFrom(fields)
           }
        }
        return fieldsBuilder_
      }
      public func setFields(value:Services.Common.Containers.FieldsV1!) -> Services.Organization.Actions.GetOrganization.RequestV1.Builder {
        self.fields = value
        return self
      }
      public func mergeFields(value:Services.Common.Containers.FieldsV1) throws -> Services.Organization.Actions.GetOrganization.RequestV1.Builder {
        if builderResult.hasFields {
          builderResult.fields = try Services.Common.Containers.FieldsV1.builderWithPrototype(builderResult.fields).mergeFrom(value).buildPartial()
        } else {
          builderResult.fields = value
        }
        builderResult.hasFields = true
        return self
      }
      public func clearFields() -> Services.Organization.Actions.GetOrganization.RequestV1.Builder {
        fieldsBuilder_ = nil
        builderResult.hasFields = false
        builderResult.fields = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Actions.GetOrganization.RequestV1.Builder {
        builderResult = Services.Organization.Actions.GetOrganization.RequestV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Actions.GetOrganization.RequestV1.Builder {
        return try Services.Organization.Actions.GetOrganization.RequestV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Actions.GetOrganization.RequestV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Actions.GetOrganization.RequestV1 {
        let returnMe:Services.Organization.Actions.GetOrganization.RequestV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Actions.GetOrganization.RequestV1) throws -> Services.Organization.Actions.GetOrganization.RequestV1.Builder {
        if other == Services.Organization.Actions.GetOrganization.RequestV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasDomain {
             domain = other.domain
        }
        if (other.hasInflations) {
            try mergeInflations(other.inflations)
        }
        if (other.hasFields) {
            try mergeFields(other.fields)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetOrganization.RequestV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetOrganization.RequestV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            domain = try input.readString()

          case 26 :
            let subBuilder:Services.Common.Containers.InflationsV1.Builder = Services.Common.Containers.InflationsV1.Builder()
            if hasInflations {
              try subBuilder.mergeFrom(inflations)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            inflations = subBuilder.buildPartial()

          case 34 :
            let subBuilder:Services.Common.Containers.FieldsV1.Builder = Services.Common.Containers.FieldsV1.Builder()
            if hasFields {
              try subBuilder.mergeFrom(fields)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            fields = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasOrganization:Bool = false
    public private(set) var organization:Services.Organization.Containers.OrganizationV1!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasOrganization {
        try output.writeMessage(2, value:organization)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasOrganization {
          if let varSizeorganization = organization?.computeMessageSize(2) {
              serialize_size += varSizeorganization
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Actions.GetOrganization.ResponseV1> {
      var mergedArray = Array<Services.Organization.Actions.GetOrganization.ResponseV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetOrganization.ResponseV1? {
      return try Services.Organization.Actions.GetOrganization.ResponseV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Actions.GetOrganization.ResponseV1 {
      return try Services.Organization.Actions.GetOrganization.ResponseV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Actions.GetOrganization.GetOrganizationRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetOrganization.ResponseV1 {
      return try Services.Organization.Actions.GetOrganization.ResponseV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetOrganization.ResponseV1 {
      return try Services.Organization.Actions.GetOrganization.ResponseV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetOrganization.ResponseV1 {
      return try Services.Organization.Actions.GetOrganization.ResponseV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetOrganization.ResponseV1 {
      return try Services.Organization.Actions.GetOrganization.ResponseV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetOrganization.ResponseV1 {
      return try Services.Organization.Actions.GetOrganization.ResponseV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Actions.GetOrganization.ResponseV1.Builder {
      return Services.Organization.Actions.GetOrganization.ResponseV1.classBuilder() as! Services.Organization.Actions.GetOrganization.ResponseV1.Builder
    }
    public func getBuilder() -> Services.Organization.Actions.GetOrganization.ResponseV1.Builder {
      return classBuilder() as! Services.Organization.Actions.GetOrganization.ResponseV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetOrganization.ResponseV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetOrganization.ResponseV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Actions.GetOrganization.ResponseV1.Builder {
      return try Services.Organization.Actions.GetOrganization.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Actions.GetOrganization.ResponseV1) throws -> Services.Organization.Actions.GetOrganization.ResponseV1.Builder {
      return try Services.Organization.Actions.GetOrganization.ResponseV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasOrganization {
        output += "\(indent) organization {\n"
        try organization?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasOrganization {
                if let hashValueorganization = organization?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueorganization
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Actions.GetOrganization.ResponseV1"
    }
    override public func className() -> String {
        return "Services.Organization.Actions.GetOrganization.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Actions.GetOrganization.ResponseV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Actions.GetOrganization.ResponseV1 = Services.Organization.Actions.GetOrganization.ResponseV1()
      public func getMessage() -> Services.Organization.Actions.GetOrganization.ResponseV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Organization.Actions.GetOrganization.ResponseV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Organization.Actions.GetOrganization.ResponseV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasOrganization:Bool {
           get {
               return builderResult.hasOrganization
           }
      }
      public var organization:Services.Organization.Containers.OrganizationV1! {
           get {
               if organizationBuilder_ != nil {
                  builderResult.organization = organizationBuilder_.getMessage()
               }
               return builderResult.organization
           }
           set (value) {
               builderResult.hasOrganization = true
               builderResult.organization = value
           }
      }
      private var organizationBuilder_:Services.Organization.Containers.OrganizationV1.Builder! {
           didSet {
              builderResult.hasOrganization = true
           }
      }
      public func getOrganizationBuilder() -> Services.Organization.Containers.OrganizationV1.Builder {
        if organizationBuilder_ == nil {
           organizationBuilder_ = Services.Organization.Containers.OrganizationV1.Builder()
           builderResult.organization = organizationBuilder_.getMessage()
           if organization != nil {
              try! organizationBuilder_.mergeFrom(organization)
           }
        }
        return organizationBuilder_
      }
      public func setOrganization(value:Services.Organization.Containers.OrganizationV1!) -> Services.Organization.Actions.GetOrganization.ResponseV1.Builder {
        self.organization = value
        return self
      }
      public func mergeOrganization(value:Services.Organization.Containers.OrganizationV1) throws -> Services.Organization.Actions.GetOrganization.ResponseV1.Builder {
        if builderResult.hasOrganization {
          builderResult.organization = try Services.Organization.Containers.OrganizationV1.builderWithPrototype(builderResult.organization).mergeFrom(value).buildPartial()
        } else {
          builderResult.organization = value
        }
        builderResult.hasOrganization = true
        return self
      }
      public func clearOrganization() -> Services.Organization.Actions.GetOrganization.ResponseV1.Builder {
        organizationBuilder_ = nil
        builderResult.hasOrganization = false
        builderResult.organization = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Actions.GetOrganization.ResponseV1.Builder {
        builderResult = Services.Organization.Actions.GetOrganization.ResponseV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Actions.GetOrganization.ResponseV1.Builder {
        return try Services.Organization.Actions.GetOrganization.ResponseV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Actions.GetOrganization.ResponseV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Actions.GetOrganization.ResponseV1 {
        let returnMe:Services.Organization.Actions.GetOrganization.ResponseV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Actions.GetOrganization.ResponseV1) throws -> Services.Organization.Actions.GetOrganization.ResponseV1.Builder {
        if other == Services.Organization.Actions.GetOrganization.ResponseV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if (other.hasOrganization) {
            try mergeOrganization(other.organization)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetOrganization.ResponseV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetOrganization.ResponseV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            let subBuilder:Services.Organization.Containers.OrganizationV1.Builder = Services.Organization.Containers.OrganizationV1.Builder()
            if hasOrganization {
              try subBuilder.mergeFrom(organization)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            organization = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
