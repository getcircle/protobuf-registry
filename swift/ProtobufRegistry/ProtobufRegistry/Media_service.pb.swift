// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

public struct MediaServiceRoot {
  public static var sharedInstance : MediaServiceRoot {
   struct Static {
       static let instance : MediaServiceRoot = MediaServiceRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

public func == (lhs: MediaService.Containers, rhs: MediaService.Containers) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: MediaService.UploadImage, rhs: MediaService.UploadImage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: MediaService.CompleteImageUpload, rhs: MediaService.CompleteImageUpload) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: MediaService, rhs: MediaService) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final public class MediaService : GeneratedMessage {


  //Nested type declaration start

    final public class Containers : GeneratedMessage {


      //Nested type declaration start

        final public class UploadInstructions : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "upload_id": return upload_id
                 case "upload_url": return upload_url
                 default: return nil
                 }
          }

          public private(set) var hasUploadId:Bool = false
          public private(set) var upload_id:String = ""

          public private(set) var hasUploadUrl:Bool = false
          public private(set) var upload_url:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUploadId {
              output.writeString(1, value:upload_id)
            }
            if hasUploadUrl {
              output.writeString(2, value:upload_url)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUploadId {
              size += WireFormat.computeStringSize(1, value:upload_id)
            }
            if hasUploadUrl {
              size += WireFormat.computeStringSize(2, value:upload_url)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> MediaService.Containers.UploadInstructions {
            return MediaService.Containers.UploadInstructions.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> MediaService.Containers.UploadInstructions {
            return MediaService.Containers.UploadInstructions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> MediaService.Containers.UploadInstructions {
            return MediaService.Containers.UploadInstructions.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->MediaService.Containers.UploadInstructions {
            return MediaService.Containers.UploadInstructions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> MediaService.Containers.UploadInstructions {
            return MediaService.Containers.UploadInstructions.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaService.Containers.UploadInstructions {
            return MediaService.Containers.UploadInstructions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> MediaService.Containers.UploadInstructionsBuilder {
            return MediaService.Containers.UploadInstructions.classBuilder() as MediaService.Containers.UploadInstructionsBuilder
          }
          public func builder() -> MediaService.Containers.UploadInstructionsBuilder {
            return classBuilder() as MediaService.Containers.UploadInstructionsBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return MediaService.Containers.UploadInstructionsBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return MediaService.Containers.UploadInstructions.builder()
          }
          public func toBuilder() -> MediaService.Containers.UploadInstructionsBuilder {
            return MediaService.Containers.UploadInstructions.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:MediaService.Containers.UploadInstructions) -> MediaService.Containers.UploadInstructionsBuilder {
            return MediaService.Containers.UploadInstructions.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUploadId {
              output += "\(indent) upload_id: \(upload_id) \n"
            }
            if hasUploadUrl {
              output += "\(indent) upload_url: \(upload_url) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUploadId {
                     hashCode = (hashCode &* 31) &+ upload_id.hashValue
                  }
                  if hasUploadUrl {
                     hashCode = (hashCode &* 31) &+ upload_url.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "MediaService.Containers.UploadInstructions"
          }
          override public func className() -> String {
              return "MediaService.Containers.UploadInstructions"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return MediaService.Containers.UploadInstructions.self
          }


          //Meta information declaration end

        }

        final public class UploadInstructionsBuilder : GeneratedMessageBuilder {
          private var builderResult:MediaService.Containers.UploadInstructions

          required override public init () {
             builderResult = MediaService.Containers.UploadInstructions()
             super.init()
          }
          public var hasUploadId:Bool {
               get {
                    return builderResult.hasUploadId
               }
          }
          public var upload_id:String {
               get {
                    return builderResult.upload_id
               }
               set (value) {
                   builderResult.hasUploadId = true
                   builderResult.upload_id = value
               }
          }
          public func clearUploadId() -> MediaService.Containers.UploadInstructionsBuilder{
               builderResult.hasUploadId = false
               builderResult.upload_id = ""
               return self
          }
          public var hasUploadUrl:Bool {
               get {
                    return builderResult.hasUploadUrl
               }
          }
          public var upload_url:String {
               get {
                    return builderResult.upload_url
               }
               set (value) {
                   builderResult.hasUploadUrl = true
                   builderResult.upload_url = value
               }
          }
          public func clearUploadUrl() -> MediaService.Containers.UploadInstructionsBuilder{
               builderResult.hasUploadUrl = false
               builderResult.upload_url = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> MediaService.Containers.UploadInstructionsBuilder {
            builderResult = MediaService.Containers.UploadInstructions()
            return self
          }
          public override func clone() -> MediaService.Containers.UploadInstructionsBuilder {
            return MediaService.Containers.UploadInstructions.builderWithPrototype(builderResult)
          }
          public override func build() -> MediaService.Containers.UploadInstructions {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> MediaService.Containers.UploadInstructions {
            var returnMe:MediaService.Containers.UploadInstructions = builderResult
            return returnMe
          }
          public func mergeFrom(other:MediaService.Containers.UploadInstructions) -> MediaService.Containers.UploadInstructionsBuilder {
            if (other == MediaService.Containers.UploadInstructions()) {
             return self
            }
            if other.hasUploadId {
                 upload_id = other.upload_id
            }
            if other.hasUploadUrl {
                 upload_url = other.upload_url
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->MediaService.Containers.UploadInstructionsBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaService.Containers.UploadInstructionsBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                upload_id = input.readString()

              case 18 :
                upload_url = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> MediaService.Containers {
        return MediaService.Containers.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> MediaService.Containers {
        return MediaService.Containers.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> MediaService.Containers {
        return MediaService.Containers.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->MediaService.Containers {
        return MediaService.Containers.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> MediaService.Containers {
        return MediaService.Containers.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaService.Containers {
        return MediaService.Containers.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> MediaService.ContainersBuilder {
        return MediaService.Containers.classBuilder() as MediaService.ContainersBuilder
      }
      public func builder() -> MediaService.ContainersBuilder {
        return classBuilder() as MediaService.ContainersBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return MediaService.ContainersBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return MediaService.Containers.builder()
      }
      public func toBuilder() -> MediaService.ContainersBuilder {
        return MediaService.Containers.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:MediaService.Containers) -> MediaService.ContainersBuilder {
        return MediaService.Containers.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "MediaService.Containers"
      }
      override public func className() -> String {
          return "MediaService.Containers"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return MediaService.Containers.self
      }


      //Meta information declaration end

    }

    final public class ContainersBuilder : GeneratedMessageBuilder {
      private var builderResult:MediaService.Containers

      required override public init () {
         builderResult = MediaService.Containers()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> MediaService.ContainersBuilder {
        builderResult = MediaService.Containers()
        return self
      }
      public override func clone() -> MediaService.ContainersBuilder {
        return MediaService.Containers.builderWithPrototype(builderResult)
      }
      public override func build() -> MediaService.Containers {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> MediaService.Containers {
        var returnMe:MediaService.Containers = builderResult
        return returnMe
      }
      public func mergeFrom(other:MediaService.Containers) -> MediaService.ContainersBuilder {
        if (other == MediaService.Containers()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->MediaService.ContainersBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaService.ContainersBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class UploadImage : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "media_object": return Int(self.media_object.rawValue)
                 case "key": return key
                 default: return nil
                 }
          }

          public private(set) var media_object:MediaService.MediaObject = MediaService.MediaObject.Profile
          public private(set) var hasMediaObject:Bool = false
          public private(set) var hasKey:Bool = false
          public private(set) var key:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasMediaObject {
              output.writeEnum(1, value:media_object.rawValue)
            }
            if hasKey {
              output.writeString(2, value:key)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if (hasMediaObject) {
              size += WireFormat.computeEnumSize(1, value:media_object.rawValue)
            }
            if hasKey {
              size += WireFormat.computeStringSize(2, value:key)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> MediaService.UploadImage.Request {
            return MediaService.UploadImage.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> MediaService.UploadImage.Request {
            return MediaService.UploadImage.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> MediaService.UploadImage.Request {
            return MediaService.UploadImage.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->MediaService.UploadImage.Request {
            return MediaService.UploadImage.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> MediaService.UploadImage.Request {
            return MediaService.UploadImage.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaService.UploadImage.Request {
            return MediaService.UploadImage.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> MediaService.UploadImage.RequestBuilder {
            return MediaService.UploadImage.Request.classBuilder() as MediaService.UploadImage.RequestBuilder
          }
          public func builder() -> MediaService.UploadImage.RequestBuilder {
            return classBuilder() as MediaService.UploadImage.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return MediaService.UploadImage.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return MediaService.UploadImage.Request.builder()
          }
          public func toBuilder() -> MediaService.UploadImage.RequestBuilder {
            return MediaService.UploadImage.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:MediaService.UploadImage.Request) -> MediaService.UploadImage.RequestBuilder {
            return MediaService.UploadImage.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if (hasMediaObject) {
              output += "\(indent) media_object: \(media_object.rawValue)\n"
            }
            if hasKey {
              output += "\(indent) key: \(key) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasMediaObject {
                     hashCode = (hashCode &* 31) &+ Int(media_object.rawValue)
                  }
                  if hasKey {
                     hashCode = (hashCode &* 31) &+ key.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "MediaService.UploadImage.Request"
          }
          override public func className() -> String {
              return "MediaService.UploadImage.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return MediaService.UploadImage.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:MediaService.UploadImage.Request

          required override public init () {
             builderResult = MediaService.UploadImage.Request()
             super.init()
          }
            public var hasMediaObject:Bool{
                get {
                    return builderResult.hasMediaObject
                }
            }
            public var media_object:MediaService.MediaObject {
                get {
                    return builderResult.media_object
                }
                set (value) {
                    builderResult.hasMediaObject = true
                    builderResult.media_object = value
                }
            }
            public func clearMediaObject() -> MediaService.UploadImage.RequestBuilder {
               builderResult.hasMediaObject = false
               builderResult.media_object = .Profile
               return self
            }
          public var hasKey:Bool {
               get {
                    return builderResult.hasKey
               }
          }
          public var key:String {
               get {
                    return builderResult.key
               }
               set (value) {
                   builderResult.hasKey = true
                   builderResult.key = value
               }
          }
          public func clearKey() -> MediaService.UploadImage.RequestBuilder{
               builderResult.hasKey = false
               builderResult.key = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> MediaService.UploadImage.RequestBuilder {
            builderResult = MediaService.UploadImage.Request()
            return self
          }
          public override func clone() -> MediaService.UploadImage.RequestBuilder {
            return MediaService.UploadImage.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> MediaService.UploadImage.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> MediaService.UploadImage.Request {
            var returnMe:MediaService.UploadImage.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:MediaService.UploadImage.Request) -> MediaService.UploadImage.RequestBuilder {
            if (other == MediaService.UploadImage.Request()) {
             return self
            }
            if other.hasMediaObject {
                 media_object = other.media_object
            }
            if other.hasKey {
                 key = other.key
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->MediaService.UploadImage.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaService.UploadImage.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 8 :
                let valueIntmedia_object = input.readEnum()
                if let enumsmedia_object = MediaService.MediaObject(rawValue:valueIntmedia_object){
                     media_object = enumsmedia_object
                } else {
                     unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntmedia_object))
                }

              case 18 :
                key = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "upload_instructions": return upload_instructions
                 default: return nil
                 }
          }

          public private(set) var hasUploadInstructions:Bool = false
          public private(set) var upload_instructions:MediaService.Containers.UploadInstructions = MediaService.Containers.UploadInstructions()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUploadInstructions {
              output.writeMessage(1, value:upload_instructions)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUploadInstructions {
              size += WireFormat.computeMessageSize(1, value:upload_instructions)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> MediaService.UploadImage.Response {
            return MediaService.UploadImage.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> MediaService.UploadImage.Response {
            return MediaService.UploadImage.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> MediaService.UploadImage.Response {
            return MediaService.UploadImage.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->MediaService.UploadImage.Response {
            return MediaService.UploadImage.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> MediaService.UploadImage.Response {
            return MediaService.UploadImage.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaService.UploadImage.Response {
            return MediaService.UploadImage.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> MediaService.UploadImage.ResponseBuilder {
            return MediaService.UploadImage.Response.classBuilder() as MediaService.UploadImage.ResponseBuilder
          }
          public func builder() -> MediaService.UploadImage.ResponseBuilder {
            return classBuilder() as MediaService.UploadImage.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return MediaService.UploadImage.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return MediaService.UploadImage.Response.builder()
          }
          public func toBuilder() -> MediaService.UploadImage.ResponseBuilder {
            return MediaService.UploadImage.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:MediaService.UploadImage.Response) -> MediaService.UploadImage.ResponseBuilder {
            return MediaService.UploadImage.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUploadInstructions {
              output += "\(indent) upload_instructions {\n"
              upload_instructions.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUploadInstructions {
                    hashCode = (hashCode &* 31) &+ upload_instructions.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "MediaService.UploadImage.Response"
          }
          override public func className() -> String {
              return "MediaService.UploadImage.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return MediaService.UploadImage.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:MediaService.UploadImage.Response

          required override public init () {
             builderResult = MediaService.UploadImage.Response()
             super.init()
          }
          public var hasUploadInstructions:Bool {
               get {
                   return builderResult.hasUploadInstructions
               }
          }
          public var upload_instructions:MediaService.Containers.UploadInstructions {
               get {
                   return builderResult.upload_instructions
               }
               set (value) {
                   builderResult.hasUploadInstructions = true
                   builderResult.upload_instructions = value
               }
          }
          public func setUploadInstructionsBuilder(builderForValue:MediaService.Containers.UploadInstructionsBuilder) -> MediaService.UploadImage.ResponseBuilder {
            upload_instructions = builderForValue.build()
            return self
          }
          public func mergeUploadInstructions(value:MediaService.Containers.UploadInstructions) -> MediaService.UploadImage.ResponseBuilder {
            if (builderResult.hasUploadInstructions) {
              builderResult.upload_instructions = MediaService.Containers.UploadInstructions.builderWithPrototype(builderResult.upload_instructions).mergeFrom(value).buildPartial()
            } else {
              builderResult.upload_instructions = value
            }
            builderResult.hasUploadInstructions = true
            return self
          }
          public func clearUploadInstructions() -> MediaService.UploadImage.ResponseBuilder {
            builderResult.hasUploadInstructions = false
            builderResult.upload_instructions = MediaService.Containers.UploadInstructions()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> MediaService.UploadImage.ResponseBuilder {
            builderResult = MediaService.UploadImage.Response()
            return self
          }
          public override func clone() -> MediaService.UploadImage.ResponseBuilder {
            return MediaService.UploadImage.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> MediaService.UploadImage.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> MediaService.UploadImage.Response {
            var returnMe:MediaService.UploadImage.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:MediaService.UploadImage.Response) -> MediaService.UploadImage.ResponseBuilder {
            if (other == MediaService.UploadImage.Response()) {
             return self
            }
            if (other.hasUploadInstructions) {
                mergeUploadInstructions(other.upload_instructions)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->MediaService.UploadImage.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaService.UploadImage.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:MediaService.Containers.UploadInstructionsBuilder = MediaService.Containers.UploadInstructions.builder()
                if hasUploadInstructions {
                  subBuilder.mergeFrom(upload_instructions)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                upload_instructions = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> MediaService.UploadImage {
        return MediaService.UploadImage.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> MediaService.UploadImage {
        return MediaService.UploadImage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> MediaService.UploadImage {
        return MediaService.UploadImage.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->MediaService.UploadImage {
        return MediaService.UploadImage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> MediaService.UploadImage {
        return MediaService.UploadImage.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaService.UploadImage {
        return MediaService.UploadImage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> MediaService.UploadImageBuilder {
        return MediaService.UploadImage.classBuilder() as MediaService.UploadImageBuilder
      }
      public func builder() -> MediaService.UploadImageBuilder {
        return classBuilder() as MediaService.UploadImageBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return MediaService.UploadImageBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return MediaService.UploadImage.builder()
      }
      public func toBuilder() -> MediaService.UploadImageBuilder {
        return MediaService.UploadImage.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:MediaService.UploadImage) -> MediaService.UploadImageBuilder {
        return MediaService.UploadImage.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "MediaService.UploadImage"
      }
      override public func className() -> String {
          return "MediaService.UploadImage"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return MediaService.UploadImage.self
      }


      //Meta information declaration end

    }

    final public class UploadImageBuilder : GeneratedMessageBuilder {
      private var builderResult:MediaService.UploadImage

      required override public init () {
         builderResult = MediaService.UploadImage()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> MediaService.UploadImageBuilder {
        builderResult = MediaService.UploadImage()
        return self
      }
      public override func clone() -> MediaService.UploadImageBuilder {
        return MediaService.UploadImage.builderWithPrototype(builderResult)
      }
      public override func build() -> MediaService.UploadImage {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> MediaService.UploadImage {
        var returnMe:MediaService.UploadImage = builderResult
        return returnMe
      }
      public func mergeFrom(other:MediaService.UploadImage) -> MediaService.UploadImageBuilder {
        if (other == MediaService.UploadImage()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->MediaService.UploadImageBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaService.UploadImageBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class CompleteImageUpload : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "object": return Int(self.object.rawValue)
                 case "key": return key
                 case "upload_id": return upload_id
                 default: return nil
                 }
          }

          public private(set) var object:MediaService.MediaObject = MediaService.MediaObject.Profile
          public private(set) var hasObject:Bool = false
          public private(set) var hasKey:Bool = false
          public private(set) var key:String = ""

          public private(set) var hasUploadId:Bool = false
          public private(set) var upload_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasObject {
              output.writeEnum(1, value:object.rawValue)
            }
            if hasKey {
              output.writeString(2, value:key)
            }
            if hasUploadId {
              output.writeString(3, value:upload_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if (hasObject) {
              size += WireFormat.computeEnumSize(1, value:object.rawValue)
            }
            if hasKey {
              size += WireFormat.computeStringSize(2, value:key)
            }
            if hasUploadId {
              size += WireFormat.computeStringSize(3, value:upload_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> MediaService.CompleteImageUpload.Request {
            return MediaService.CompleteImageUpload.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> MediaService.CompleteImageUpload.Request {
            return MediaService.CompleteImageUpload.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> MediaService.CompleteImageUpload.Request {
            return MediaService.CompleteImageUpload.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->MediaService.CompleteImageUpload.Request {
            return MediaService.CompleteImageUpload.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> MediaService.CompleteImageUpload.Request {
            return MediaService.CompleteImageUpload.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaService.CompleteImageUpload.Request {
            return MediaService.CompleteImageUpload.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> MediaService.CompleteImageUpload.RequestBuilder {
            return MediaService.CompleteImageUpload.Request.classBuilder() as MediaService.CompleteImageUpload.RequestBuilder
          }
          public func builder() -> MediaService.CompleteImageUpload.RequestBuilder {
            return classBuilder() as MediaService.CompleteImageUpload.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return MediaService.CompleteImageUpload.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return MediaService.CompleteImageUpload.Request.builder()
          }
          public func toBuilder() -> MediaService.CompleteImageUpload.RequestBuilder {
            return MediaService.CompleteImageUpload.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:MediaService.CompleteImageUpload.Request) -> MediaService.CompleteImageUpload.RequestBuilder {
            return MediaService.CompleteImageUpload.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if (hasObject) {
              output += "\(indent) object: \(object.rawValue)\n"
            }
            if hasKey {
              output += "\(indent) key: \(key) \n"
            }
            if hasUploadId {
              output += "\(indent) upload_id: \(upload_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasObject {
                     hashCode = (hashCode &* 31) &+ Int(object.rawValue)
                  }
                  if hasKey {
                     hashCode = (hashCode &* 31) &+ key.hashValue
                  }
                  if hasUploadId {
                     hashCode = (hashCode &* 31) &+ upload_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "MediaService.CompleteImageUpload.Request"
          }
          override public func className() -> String {
              return "MediaService.CompleteImageUpload.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return MediaService.CompleteImageUpload.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:MediaService.CompleteImageUpload.Request

          required override public init () {
             builderResult = MediaService.CompleteImageUpload.Request()
             super.init()
          }
            public var hasObject:Bool{
                get {
                    return builderResult.hasObject
                }
            }
            public var object:MediaService.MediaObject {
                get {
                    return builderResult.object
                }
                set (value) {
                    builderResult.hasObject = true
                    builderResult.object = value
                }
            }
            public func clearObject() -> MediaService.CompleteImageUpload.RequestBuilder {
               builderResult.hasObject = false
               builderResult.object = .Profile
               return self
            }
          public var hasKey:Bool {
               get {
                    return builderResult.hasKey
               }
          }
          public var key:String {
               get {
                    return builderResult.key
               }
               set (value) {
                   builderResult.hasKey = true
                   builderResult.key = value
               }
          }
          public func clearKey() -> MediaService.CompleteImageUpload.RequestBuilder{
               builderResult.hasKey = false
               builderResult.key = ""
               return self
          }
          public var hasUploadId:Bool {
               get {
                    return builderResult.hasUploadId
               }
          }
          public var upload_id:String {
               get {
                    return builderResult.upload_id
               }
               set (value) {
                   builderResult.hasUploadId = true
                   builderResult.upload_id = value
               }
          }
          public func clearUploadId() -> MediaService.CompleteImageUpload.RequestBuilder{
               builderResult.hasUploadId = false
               builderResult.upload_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> MediaService.CompleteImageUpload.RequestBuilder {
            builderResult = MediaService.CompleteImageUpload.Request()
            return self
          }
          public override func clone() -> MediaService.CompleteImageUpload.RequestBuilder {
            return MediaService.CompleteImageUpload.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> MediaService.CompleteImageUpload.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> MediaService.CompleteImageUpload.Request {
            var returnMe:MediaService.CompleteImageUpload.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:MediaService.CompleteImageUpload.Request) -> MediaService.CompleteImageUpload.RequestBuilder {
            if (other == MediaService.CompleteImageUpload.Request()) {
             return self
            }
            if other.hasObject {
                 object = other.object
            }
            if other.hasKey {
                 key = other.key
            }
            if other.hasUploadId {
                 upload_id = other.upload_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->MediaService.CompleteImageUpload.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaService.CompleteImageUpload.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 8 :
                let valueIntobject = input.readEnum()
                if let enumsobject = MediaService.MediaObject(rawValue:valueIntobject){
                     object = enumsobject
                } else {
                     unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntobject))
                }

              case 18 :
                key = input.readString()

              case 26 :
                upload_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "media_url": return media_url
                 default: return nil
                 }
          }

          public private(set) var hasMediaUrl:Bool = false
          public private(set) var media_url:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasMediaUrl {
              output.writeString(1, value:media_url)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasMediaUrl {
              size += WireFormat.computeStringSize(1, value:media_url)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> MediaService.CompleteImageUpload.Response {
            return MediaService.CompleteImageUpload.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> MediaService.CompleteImageUpload.Response {
            return MediaService.CompleteImageUpload.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> MediaService.CompleteImageUpload.Response {
            return MediaService.CompleteImageUpload.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->MediaService.CompleteImageUpload.Response {
            return MediaService.CompleteImageUpload.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> MediaService.CompleteImageUpload.Response {
            return MediaService.CompleteImageUpload.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaService.CompleteImageUpload.Response {
            return MediaService.CompleteImageUpload.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> MediaService.CompleteImageUpload.ResponseBuilder {
            return MediaService.CompleteImageUpload.Response.classBuilder() as MediaService.CompleteImageUpload.ResponseBuilder
          }
          public func builder() -> MediaService.CompleteImageUpload.ResponseBuilder {
            return classBuilder() as MediaService.CompleteImageUpload.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return MediaService.CompleteImageUpload.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return MediaService.CompleteImageUpload.Response.builder()
          }
          public func toBuilder() -> MediaService.CompleteImageUpload.ResponseBuilder {
            return MediaService.CompleteImageUpload.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:MediaService.CompleteImageUpload.Response) -> MediaService.CompleteImageUpload.ResponseBuilder {
            return MediaService.CompleteImageUpload.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasMediaUrl {
              output += "\(indent) media_url: \(media_url) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasMediaUrl {
                     hashCode = (hashCode &* 31) &+ media_url.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "MediaService.CompleteImageUpload.Response"
          }
          override public func className() -> String {
              return "MediaService.CompleteImageUpload.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return MediaService.CompleteImageUpload.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:MediaService.CompleteImageUpload.Response

          required override public init () {
             builderResult = MediaService.CompleteImageUpload.Response()
             super.init()
          }
          public var hasMediaUrl:Bool {
               get {
                    return builderResult.hasMediaUrl
               }
          }
          public var media_url:String {
               get {
                    return builderResult.media_url
               }
               set (value) {
                   builderResult.hasMediaUrl = true
                   builderResult.media_url = value
               }
          }
          public func clearMediaUrl() -> MediaService.CompleteImageUpload.ResponseBuilder{
               builderResult.hasMediaUrl = false
               builderResult.media_url = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> MediaService.CompleteImageUpload.ResponseBuilder {
            builderResult = MediaService.CompleteImageUpload.Response()
            return self
          }
          public override func clone() -> MediaService.CompleteImageUpload.ResponseBuilder {
            return MediaService.CompleteImageUpload.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> MediaService.CompleteImageUpload.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> MediaService.CompleteImageUpload.Response {
            var returnMe:MediaService.CompleteImageUpload.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:MediaService.CompleteImageUpload.Response) -> MediaService.CompleteImageUpload.ResponseBuilder {
            if (other == MediaService.CompleteImageUpload.Response()) {
             return self
            }
            if other.hasMediaUrl {
                 media_url = other.media_url
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->MediaService.CompleteImageUpload.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaService.CompleteImageUpload.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                media_url = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> MediaService.CompleteImageUpload {
        return MediaService.CompleteImageUpload.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> MediaService.CompleteImageUpload {
        return MediaService.CompleteImageUpload.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> MediaService.CompleteImageUpload {
        return MediaService.CompleteImageUpload.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->MediaService.CompleteImageUpload {
        return MediaService.CompleteImageUpload.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> MediaService.CompleteImageUpload {
        return MediaService.CompleteImageUpload.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaService.CompleteImageUpload {
        return MediaService.CompleteImageUpload.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> MediaService.CompleteImageUploadBuilder {
        return MediaService.CompleteImageUpload.classBuilder() as MediaService.CompleteImageUploadBuilder
      }
      public func builder() -> MediaService.CompleteImageUploadBuilder {
        return classBuilder() as MediaService.CompleteImageUploadBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return MediaService.CompleteImageUploadBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return MediaService.CompleteImageUpload.builder()
      }
      public func toBuilder() -> MediaService.CompleteImageUploadBuilder {
        return MediaService.CompleteImageUpload.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:MediaService.CompleteImageUpload) -> MediaService.CompleteImageUploadBuilder {
        return MediaService.CompleteImageUpload.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "MediaService.CompleteImageUpload"
      }
      override public func className() -> String {
          return "MediaService.CompleteImageUpload"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return MediaService.CompleteImageUpload.self
      }


      //Meta information declaration end

    }

    final public class CompleteImageUploadBuilder : GeneratedMessageBuilder {
      private var builderResult:MediaService.CompleteImageUpload

      required override public init () {
         builderResult = MediaService.CompleteImageUpload()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> MediaService.CompleteImageUploadBuilder {
        builderResult = MediaService.CompleteImageUpload()
        return self
      }
      public override func clone() -> MediaService.CompleteImageUploadBuilder {
        return MediaService.CompleteImageUpload.builderWithPrototype(builderResult)
      }
      public override func build() -> MediaService.CompleteImageUpload {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> MediaService.CompleteImageUpload {
        var returnMe:MediaService.CompleteImageUpload = builderResult
        return returnMe
      }
      public func mergeFrom(other:MediaService.CompleteImageUpload) -> MediaService.CompleteImageUploadBuilder {
        if (other == MediaService.CompleteImageUpload()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->MediaService.CompleteImageUploadBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaService.CompleteImageUploadBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



    //Enum type declaration start 

    public enum MediaObject:Int32 {
      case Profile = 1

      public static func IsValidValue(value:Int32) ->Bool {
          if let check = MediaObject(rawValue:value) {
              return true
          }
          return false
      }
    }



    //Enum type declaration end 

  public subscript(key: String) -> AnyObject? {
         switch key {
         default: return nil
         }
  }

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  public class func parseFromData(data:[Byte]) -> MediaService {
    return MediaService.builder().mergeFromData(data).build()
  }
  public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> MediaService {
    return MediaService.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> MediaService {
    return MediaService.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->MediaService {
    return MediaService.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> MediaService {
    return MediaService.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaService {
    return MediaService.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> MediaServiceBuilder {
    return MediaService.classBuilder() as MediaServiceBuilder
  }
  public func builder() -> MediaServiceBuilder {
    return classBuilder() as MediaServiceBuilder
  }
  public override class func classBuilder() -> MessageBuilder {
    return MediaServiceBuilder()
  }
  public override func classBuilder() -> MessageBuilder {
    return MediaService.builder()
  }
  public func toBuilder() -> MediaServiceBuilder {
    return MediaService.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:MediaService) -> MediaServiceBuilder {
    return MediaService.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "MediaService"
  }
  override public func className() -> String {
      return "MediaService"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return MediaService.self
  }


  //Meta information declaration end

}

final public class MediaServiceBuilder : GeneratedMessageBuilder {
  private var builderResult:MediaService

  required override public init () {
     builderResult = MediaService()
     super.init()
  }
  override public var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  public override func clear() -> MediaServiceBuilder {
    builderResult = MediaService()
    return self
  }
  public override func clone() -> MediaServiceBuilder {
    return MediaService.builderWithPrototype(builderResult)
  }
  public override func build() -> MediaService {
       checkInitialized()
       return buildPartial()
  }
  public func buildPartial() -> MediaService {
    var returnMe:MediaService = builderResult
    return returnMe
  }
  public func mergeFrom(other:MediaService) -> MediaServiceBuilder {
    if (other == MediaService()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream) ->MediaServiceBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MediaServiceBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


public extension MediaService.Containers.UploadInstructions {
    class func parseFromNSData(data:NSData) -> MediaService.Containers.UploadInstructions {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.Containers.UploadInstructions.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> MediaService.Containers.UploadInstructions {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.Containers.UploadInstructions.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension MediaService.Containers {
    class func parseFromNSData(data:NSData) -> MediaService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.Containers.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> MediaService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.Containers.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension MediaService.UploadImage.Request {
    class func parseFromNSData(data:NSData) -> MediaService.UploadImage.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.UploadImage.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> MediaService.UploadImage.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.UploadImage.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension MediaService.UploadImage.Response {
    class func parseFromNSData(data:NSData) -> MediaService.UploadImage.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.UploadImage.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> MediaService.UploadImage.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.UploadImage.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension MediaService.UploadImage {
    class func parseFromNSData(data:NSData) -> MediaService.UploadImage {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.UploadImage.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> MediaService.UploadImage {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.UploadImage.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension MediaService.CompleteImageUpload.Request {
    class func parseFromNSData(data:NSData) -> MediaService.CompleteImageUpload.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.CompleteImageUpload.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> MediaService.CompleteImageUpload.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.CompleteImageUpload.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension MediaService.CompleteImageUpload.Response {
    class func parseFromNSData(data:NSData) -> MediaService.CompleteImageUpload.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.CompleteImageUpload.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> MediaService.CompleteImageUpload.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.CompleteImageUpload.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension MediaService.CompleteImageUpload {
    class func parseFromNSData(data:NSData) -> MediaService.CompleteImageUpload {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.CompleteImageUpload.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> MediaService.CompleteImageUpload {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.CompleteImageUpload.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension MediaService {
    class func parseFromNSData(data:NSData) -> MediaService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> MediaService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MediaService.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
