// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file sso.proto

import Foundation

public extension Services.Organization.Containers{ public struct Sso { }}

public func == (lhs: Services.Organization.Containers.Sso.SSOV1, rhs: Services.Organization.Containers.Sso.SSOV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
  fieldCheck = fieldCheck && (lhs.hasSaml == rhs.hasSaml) && (!lhs.hasSaml || lhs.saml == rhs.saml)
  fieldCheck = fieldCheck && (lhs.hasGoogle == rhs.hasGoogle) && (!lhs.hasGoogle || lhs.google == rhs.google)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Organization.Containers.Sso.SAMLDetailsV1, rhs: Services.Organization.Containers.Sso.SAMLDetailsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMetadataUrl == rhs.hasMetadataUrl) && (!lhs.hasMetadataUrl || lhs.metadataUrl == rhs.metadataUrl)
  fieldCheck = fieldCheck && (lhs.hasMetadata == rhs.hasMetadata) && (!lhs.hasMetadata || lhs.metadata == rhs.metadata)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Organization.Containers.Sso.GoogleDetailsV1, rhs: Services.Organization.Containers.Sso.GoogleDetailsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.domains == rhs.domains)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Organization.Containers.Sso {
  public struct SsoRoot {
    public static var sharedInstance : SsoRoot {
     struct Static {
         static let instance : SsoRoot = SsoRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  public enum ProviderV1:Int32 {
    case Okta = 0
    case Google = 1

  }

  //Enum type declaration end 

  final public class SSOV1 : GeneratedMessage, GeneratedMessageProtocol {


    //OneOf declaration start

    public enum Details {
      case DetailsOneOfNotSet

      public func checkOneOfIsSet() -> Bool {
           switch self {
           case .DetailsOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case Saml(Services.Organization.Containers.Sso.SAMLDetailsV1)

      public static func getSaml(value:Details) -> Services.Organization.Containers.Sso.SAMLDetailsV1? {
           switch value {
           case .Saml(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case Google(Services.Organization.Containers.Sso.GoogleDetailsV1)

      public static func getGoogle(value:Details) -> Services.Organization.Containers.Sso.GoogleDetailsV1? {
           switch value {
           case .Google(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageDetails:SSOV1.Details =  SSOV1.Details.DetailsOneOfNotSet
    public private(set) var provider:Services.Organization.Containers.Sso.ProviderV1 = Services.Organization.Containers.Sso.ProviderV1.Okta
    public private(set) var hasProvider:Bool = false
    public private(set) var hasSaml:Bool {
          get {
               if SSOV1.Details.getSaml(storageDetails) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var saml:Services.Organization.Containers.Sso.SAMLDetailsV1!{
         get {
              return SSOV1.Details.getSaml(storageDetails)
         }
         set (newvalue) {
              storageDetails = SSOV1.Details.Saml(newvalue)
         }
    }
    public private(set) var hasGoogle:Bool {
          get {
               if SSOV1.Details.getGoogle(storageDetails) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var google:Services.Organization.Containers.Sso.GoogleDetailsV1!{
         get {
              return SSOV1.Details.getGoogle(storageDetails)
         }
         set (newvalue) {
              storageDetails = SSOV1.Details.Google(newvalue)
         }
    }
    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasProvider {
        try output.writeEnum(1, value:provider.rawValue)
      }
      if hasSaml {
        try output.writeMessage(2, value:saml)
      }
      if hasGoogle {
        try output.writeMessage(3, value:google)
      }
      if hasOrganizationId {
        try output.writeString(4, value:organizationId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasProvider) {
        serialize_size += provider.rawValue.computeEnumSize(1)
      }
      if hasSaml {
          if let varSizesaml = saml?.computeMessageSize(2) {
              serialize_size += varSizesaml
          }
      }
      if hasGoogle {
          if let varSizegoogle = google?.computeMessageSize(3) {
              serialize_size += varSizegoogle
          }
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Containers.Sso.SSOV1> {
      var mergedArray = Array<Services.Organization.Containers.Sso.SSOV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.Sso.SSOV1? {
      return try Services.Organization.Containers.Sso.SSOV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Containers.Sso.SSOV1 {
      return try Services.Organization.Containers.Sso.SSOV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.Sso.SsoRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Sso.SSOV1 {
      return try Services.Organization.Containers.Sso.SSOV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.Sso.SSOV1 {
      return try Services.Organization.Containers.Sso.SSOV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Sso.SSOV1 {
      return try Services.Organization.Containers.Sso.SSOV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.Sso.SSOV1 {
      return try Services.Organization.Containers.Sso.SSOV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Sso.SSOV1 {
      return try Services.Organization.Containers.Sso.SSOV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Containers.Sso.SSOV1.Builder {
      return Services.Organization.Containers.Sso.SSOV1.classBuilder() as! Services.Organization.Containers.Sso.SSOV1.Builder
    }
    public func getBuilder() -> Services.Organization.Containers.Sso.SSOV1.Builder {
      return classBuilder() as! Services.Organization.Containers.Sso.SSOV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Sso.SSOV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Sso.SSOV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Containers.Sso.SSOV1.Builder {
      return try Services.Organization.Containers.Sso.SSOV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.Sso.SSOV1) throws -> Services.Organization.Containers.Sso.SSOV1.Builder {
      return try Services.Organization.Containers.Sso.SSOV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if (hasProvider) {
        output += "\(indent) provider: \(provider.rawValue)\n"
      }
      if hasSaml {
        output += "\(indent) saml {\n"
        try saml?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasGoogle {
        output += "\(indent) google {\n"
        try google?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasProvider {
               hashCode = (hashCode &* 31) &+ Int(provider.rawValue)
            }
            if hasSaml {
                if let hashValuesaml = saml?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesaml
                }
            }
            if hasGoogle {
                if let hashValuegoogle = google?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuegoogle
                }
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.Sso.SSOV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.Sso.SSOV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.Sso.SSOV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Containers.Sso.SSOV1 = Services.Organization.Containers.Sso.SSOV1()
      public func getMessage() -> Services.Organization.Containers.Sso.SSOV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasProvider:Bool{
            get {
                return builderResult.hasProvider
            }
        }
        public var provider:Services.Organization.Containers.Sso.ProviderV1 {
            get {
                return builderResult.provider
            }
            set (value) {
                builderResult.hasProvider = true
                builderResult.provider = value
            }
        }
        public func setProvider(value:Services.Organization.Containers.Sso.ProviderV1) -> Services.Organization.Containers.Sso.SSOV1.Builder {
          self.provider = value
          return self
        }
        public func clearProvider() -> Services.Organization.Containers.Sso.SSOV1.Builder {
           builderResult.hasProvider = false
           builderResult.provider = .Okta
           return self
        }
      public var hasSaml:Bool {
           get {
               return builderResult.hasSaml
           }
      }
      public var saml:Services.Organization.Containers.Sso.SAMLDetailsV1! {
           get {
               if samlBuilder_ != nil {
                  builderResult.saml = samlBuilder_.getMessage()
               }
               return builderResult.saml
           }
           set (value) {
               builderResult.hasSaml = true
               builderResult.saml = value
           }
      }
      private var samlBuilder_:Services.Organization.Containers.Sso.SAMLDetailsV1.Builder! {
           didSet {
              builderResult.hasSaml = true
           }
      }
      public func getSamlBuilder() -> Services.Organization.Containers.Sso.SAMLDetailsV1.Builder {
        if samlBuilder_ == nil {
           samlBuilder_ = Services.Organization.Containers.Sso.SAMLDetailsV1.Builder()
           builderResult.saml = samlBuilder_.getMessage()
           if saml != nil {
              try! samlBuilder_.mergeFrom(saml)
           }
        }
        return samlBuilder_
      }
      public func setSaml(value:Services.Organization.Containers.Sso.SAMLDetailsV1!) -> Services.Organization.Containers.Sso.SSOV1.Builder {
        self.saml = value
        return self
      }
      public func mergeSaml(value:Services.Organization.Containers.Sso.SAMLDetailsV1) throws -> Services.Organization.Containers.Sso.SSOV1.Builder {
        if builderResult.hasSaml {
          builderResult.saml = try Services.Organization.Containers.Sso.SAMLDetailsV1.builderWithPrototype(builderResult.saml).mergeFrom(value).buildPartial()
        } else {
          builderResult.saml = value
        }
        builderResult.hasSaml = true
        return self
      }
      public func clearSaml() -> Services.Organization.Containers.Sso.SSOV1.Builder {
        samlBuilder_ = nil
        builderResult.hasSaml = false
        builderResult.saml = nil
        return self
      }
      public var hasGoogle:Bool {
           get {
               return builderResult.hasGoogle
           }
      }
      public var google:Services.Organization.Containers.Sso.GoogleDetailsV1! {
           get {
               if googleBuilder_ != nil {
                  builderResult.google = googleBuilder_.getMessage()
               }
               return builderResult.google
           }
           set (value) {
               builderResult.hasGoogle = true
               builderResult.google = value
           }
      }
      private var googleBuilder_:Services.Organization.Containers.Sso.GoogleDetailsV1.Builder! {
           didSet {
              builderResult.hasGoogle = true
           }
      }
      public func getGoogleBuilder() -> Services.Organization.Containers.Sso.GoogleDetailsV1.Builder {
        if googleBuilder_ == nil {
           googleBuilder_ = Services.Organization.Containers.Sso.GoogleDetailsV1.Builder()
           builderResult.google = googleBuilder_.getMessage()
           if google != nil {
              try! googleBuilder_.mergeFrom(google)
           }
        }
        return googleBuilder_
      }
      public func setGoogle(value:Services.Organization.Containers.Sso.GoogleDetailsV1!) -> Services.Organization.Containers.Sso.SSOV1.Builder {
        self.google = value
        return self
      }
      public func mergeGoogle(value:Services.Organization.Containers.Sso.GoogleDetailsV1) throws -> Services.Organization.Containers.Sso.SSOV1.Builder {
        if builderResult.hasGoogle {
          builderResult.google = try Services.Organization.Containers.Sso.GoogleDetailsV1.builderWithPrototype(builderResult.google).mergeFrom(value).buildPartial()
        } else {
          builderResult.google = value
        }
        builderResult.hasGoogle = true
        return self
      }
      public func clearGoogle() -> Services.Organization.Containers.Sso.SSOV1.Builder {
        googleBuilder_ = nil
        builderResult.hasGoogle = false
        builderResult.google = nil
        return self
      }
      public var hasOrganizationId:Bool {
           get {
                return builderResult.hasOrganizationId
           }
      }
      public var organizationId:String {
           get {
                return builderResult.organizationId
           }
           set (value) {
               builderResult.hasOrganizationId = true
               builderResult.organizationId = value
           }
      }
      public func setOrganizationId(value:String) -> Services.Organization.Containers.Sso.SSOV1.Builder {
        self.organizationId = value
        return self
      }
      public func clearOrganizationId() -> Services.Organization.Containers.Sso.SSOV1.Builder{
           builderResult.hasOrganizationId = false
           builderResult.organizationId = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Containers.Sso.SSOV1.Builder {
        builderResult = Services.Organization.Containers.Sso.SSOV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Containers.Sso.SSOV1.Builder {
        return try Services.Organization.Containers.Sso.SSOV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Containers.Sso.SSOV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Containers.Sso.SSOV1 {
        let returnMe:Services.Organization.Containers.Sso.SSOV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Containers.Sso.SSOV1) throws -> Services.Organization.Containers.Sso.SSOV1.Builder {
        if other == Services.Organization.Containers.Sso.SSOV1() {
         return self
        }
        if other.hasProvider {
             provider = other.provider
        }
        if (other.hasSaml) {
            try mergeSaml(other.saml)
        }
        if (other.hasGoogle) {
            try mergeGoogle(other.google)
        }
        if other.hasOrganizationId {
             organizationId = other.organizationId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.Sso.SSOV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Sso.SSOV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            let valueIntprovider = try input.readEnum()
            if let enumsprovider = Services.Organization.Containers.Sso.ProviderV1(rawValue:valueIntprovider){
                 provider = enumsprovider
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntprovider))
            }

          case 18 :
            let subBuilder:Services.Organization.Containers.Sso.SAMLDetailsV1.Builder = Services.Organization.Containers.Sso.SAMLDetailsV1.Builder()
            if hasSaml {
              try subBuilder.mergeFrom(saml)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            saml = subBuilder.buildPartial()

          case 26 :
            let subBuilder:Services.Organization.Containers.Sso.GoogleDetailsV1.Builder = Services.Organization.Containers.Sso.GoogleDetailsV1.Builder()
            if hasGoogle {
              try subBuilder.mergeFrom(google)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            google = subBuilder.buildPartial()

          case 34 :
            organizationId = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class SAMLDetailsV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasMetadataUrl:Bool = false
    public private(set) var metadataUrl:String = ""

    public private(set) var hasMetadata:Bool = false
    public private(set) var metadata:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasMetadataUrl {
        try output.writeString(1, value:metadataUrl)
      }
      if hasMetadata {
        try output.writeString(2, value:metadata)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasMetadataUrl {
        serialize_size += metadataUrl.computeStringSize(1)
      }
      if hasMetadata {
        serialize_size += metadata.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Containers.Sso.SAMLDetailsV1> {
      var mergedArray = Array<Services.Organization.Containers.Sso.SAMLDetailsV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.Sso.SAMLDetailsV1? {
      return try Services.Organization.Containers.Sso.SAMLDetailsV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Containers.Sso.SAMLDetailsV1 {
      return try Services.Organization.Containers.Sso.SAMLDetailsV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.Sso.SsoRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Sso.SAMLDetailsV1 {
      return try Services.Organization.Containers.Sso.SAMLDetailsV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.Sso.SAMLDetailsV1 {
      return try Services.Organization.Containers.Sso.SAMLDetailsV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Sso.SAMLDetailsV1 {
      return try Services.Organization.Containers.Sso.SAMLDetailsV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.Sso.SAMLDetailsV1 {
      return try Services.Organization.Containers.Sso.SAMLDetailsV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Sso.SAMLDetailsV1 {
      return try Services.Organization.Containers.Sso.SAMLDetailsV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Containers.Sso.SAMLDetailsV1.Builder {
      return Services.Organization.Containers.Sso.SAMLDetailsV1.classBuilder() as! Services.Organization.Containers.Sso.SAMLDetailsV1.Builder
    }
    public func getBuilder() -> Services.Organization.Containers.Sso.SAMLDetailsV1.Builder {
      return classBuilder() as! Services.Organization.Containers.Sso.SAMLDetailsV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Sso.SAMLDetailsV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Sso.SAMLDetailsV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Containers.Sso.SAMLDetailsV1.Builder {
      return try Services.Organization.Containers.Sso.SAMLDetailsV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.Sso.SAMLDetailsV1) throws -> Services.Organization.Containers.Sso.SAMLDetailsV1.Builder {
      return try Services.Organization.Containers.Sso.SAMLDetailsV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasMetadataUrl {
        output += "\(indent) metadataUrl: \(metadataUrl) \n"
      }
      if hasMetadata {
        output += "\(indent) metadata: \(metadata) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMetadataUrl {
               hashCode = (hashCode &* 31) &+ metadataUrl.hashValue
            }
            if hasMetadata {
               hashCode = (hashCode &* 31) &+ metadata.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.Sso.SAMLDetailsV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.Sso.SAMLDetailsV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.Sso.SAMLDetailsV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Containers.Sso.SAMLDetailsV1 = Services.Organization.Containers.Sso.SAMLDetailsV1()
      public func getMessage() -> Services.Organization.Containers.Sso.SAMLDetailsV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasMetadataUrl:Bool {
           get {
                return builderResult.hasMetadataUrl
           }
      }
      public var metadataUrl:String {
           get {
                return builderResult.metadataUrl
           }
           set (value) {
               builderResult.hasMetadataUrl = true
               builderResult.metadataUrl = value
           }
      }
      public func setMetadataUrl(value:String) -> Services.Organization.Containers.Sso.SAMLDetailsV1.Builder {
        self.metadataUrl = value
        return self
      }
      public func clearMetadataUrl() -> Services.Organization.Containers.Sso.SAMLDetailsV1.Builder{
           builderResult.hasMetadataUrl = false
           builderResult.metadataUrl = ""
           return self
      }
      public var hasMetadata:Bool {
           get {
                return builderResult.hasMetadata
           }
      }
      public var metadata:String {
           get {
                return builderResult.metadata
           }
           set (value) {
               builderResult.hasMetadata = true
               builderResult.metadata = value
           }
      }
      public func setMetadata(value:String) -> Services.Organization.Containers.Sso.SAMLDetailsV1.Builder {
        self.metadata = value
        return self
      }
      public func clearMetadata() -> Services.Organization.Containers.Sso.SAMLDetailsV1.Builder{
           builderResult.hasMetadata = false
           builderResult.metadata = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Containers.Sso.SAMLDetailsV1.Builder {
        builderResult = Services.Organization.Containers.Sso.SAMLDetailsV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Containers.Sso.SAMLDetailsV1.Builder {
        return try Services.Organization.Containers.Sso.SAMLDetailsV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Containers.Sso.SAMLDetailsV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Containers.Sso.SAMLDetailsV1 {
        let returnMe:Services.Organization.Containers.Sso.SAMLDetailsV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Containers.Sso.SAMLDetailsV1) throws -> Services.Organization.Containers.Sso.SAMLDetailsV1.Builder {
        if other == Services.Organization.Containers.Sso.SAMLDetailsV1() {
         return self
        }
        if other.hasMetadataUrl {
             metadataUrl = other.metadataUrl
        }
        if other.hasMetadata {
             metadata = other.metadata
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.Sso.SAMLDetailsV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Sso.SAMLDetailsV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            metadataUrl = try input.readString()

          case 18 :
            metadata = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class GoogleDetailsV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var domains:Array<String> = Array<String>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if !domains.isEmpty {
        for oneValuedomains in domains {
          try output.writeString(1, value:oneValuedomains)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeDomains:Int32 = 0
      for oneValuedomains in domains {
          dataSizeDomains += oneValuedomains.computeStringSizeNoTag()
      }
      serialize_size += dataSizeDomains
      serialize_size += 1 * Int32(domains.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Containers.Sso.GoogleDetailsV1> {
      var mergedArray = Array<Services.Organization.Containers.Sso.GoogleDetailsV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.Sso.GoogleDetailsV1? {
      return try Services.Organization.Containers.Sso.GoogleDetailsV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Containers.Sso.GoogleDetailsV1 {
      return try Services.Organization.Containers.Sso.GoogleDetailsV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.Sso.SsoRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Sso.GoogleDetailsV1 {
      return try Services.Organization.Containers.Sso.GoogleDetailsV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.Sso.GoogleDetailsV1 {
      return try Services.Organization.Containers.Sso.GoogleDetailsV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Sso.GoogleDetailsV1 {
      return try Services.Organization.Containers.Sso.GoogleDetailsV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.Sso.GoogleDetailsV1 {
      return try Services.Organization.Containers.Sso.GoogleDetailsV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Sso.GoogleDetailsV1 {
      return try Services.Organization.Containers.Sso.GoogleDetailsV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Containers.Sso.GoogleDetailsV1.Builder {
      return Services.Organization.Containers.Sso.GoogleDetailsV1.classBuilder() as! Services.Organization.Containers.Sso.GoogleDetailsV1.Builder
    }
    public func getBuilder() -> Services.Organization.Containers.Sso.GoogleDetailsV1.Builder {
      return classBuilder() as! Services.Organization.Containers.Sso.GoogleDetailsV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Sso.GoogleDetailsV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Sso.GoogleDetailsV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Containers.Sso.GoogleDetailsV1.Builder {
      return try Services.Organization.Containers.Sso.GoogleDetailsV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.Sso.GoogleDetailsV1) throws -> Services.Organization.Containers.Sso.GoogleDetailsV1.Builder {
      return try Services.Organization.Containers.Sso.GoogleDetailsV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      var domainsElementIndex:Int = 0
      for oneValuedomains in domains  {
          output += "\(indent) domains[\(domainsElementIndex)]: \(oneValuedomains)\n"
          domainsElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValuedomains in domains {
                hashCode = (hashCode &* 31) &+ oneValuedomains.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.Sso.GoogleDetailsV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.Sso.GoogleDetailsV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.Sso.GoogleDetailsV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Containers.Sso.GoogleDetailsV1 = Services.Organization.Containers.Sso.GoogleDetailsV1()
      public func getMessage() -> Services.Organization.Containers.Sso.GoogleDetailsV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var domains:Array<String> {
           get {
               return builderResult.domains
           }
           set (array) {
               builderResult.domains = array
           }
      }
      public func setDomains(value:Array<String>) -> Services.Organization.Containers.Sso.GoogleDetailsV1.Builder {
        self.domains = value
        return self
      }
      public func clearDomains() -> Services.Organization.Containers.Sso.GoogleDetailsV1.Builder {
         builderResult.domains.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Containers.Sso.GoogleDetailsV1.Builder {
        builderResult = Services.Organization.Containers.Sso.GoogleDetailsV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Containers.Sso.GoogleDetailsV1.Builder {
        return try Services.Organization.Containers.Sso.GoogleDetailsV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Containers.Sso.GoogleDetailsV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Containers.Sso.GoogleDetailsV1 {
        let returnMe:Services.Organization.Containers.Sso.GoogleDetailsV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Containers.Sso.GoogleDetailsV1) throws -> Services.Organization.Containers.Sso.GoogleDetailsV1.Builder {
        if other == Services.Organization.Containers.Sso.GoogleDetailsV1() {
         return self
        }
        if !other.domains.isEmpty {
            builderResult.domains += other.domains
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.Sso.GoogleDetailsV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Sso.GoogleDetailsV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            domains += [try input.readString()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
