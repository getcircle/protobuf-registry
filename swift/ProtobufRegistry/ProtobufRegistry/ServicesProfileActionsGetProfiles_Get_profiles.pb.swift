// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
import ProtocolBuffers


internal extension Services.Profile.Actions{ internal struct GetProfiles { }}

internal func == (lhs: Services.Profile.Actions.GetProfiles.RequestV1, rhs: Services.Profile.Actions.GetProfiles.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasTeamId == rhs.hasTeamId) && (!lhs.hasTeamId || lhs.teamId == rhs.teamId)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.hasTagId == rhs.hasTagId) && (!lhs.hasTagId || lhs.tagId == rhs.tagId)
  fieldCheck = fieldCheck && (lhs.hasAddressId == rhs.hasAddressId) && (!lhs.hasAddressId || lhs.addressId == rhs.addressId)
  fieldCheck = fieldCheck && (lhs.ids == rhs.ids)
  fieldCheck = fieldCheck && (lhs.hasLocationId == rhs.hasLocationId) && (!lhs.hasLocationId || lhs.locationId == rhs.locationId)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Services.Profile.Actions.GetProfiles.ResponseV1, rhs: Services.Profile.Actions.GetProfiles.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.profiles == rhs.profiles)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal extension Services.Profile.Actions.GetProfiles {
  internal struct GetProfilesRoot {
    internal static var sharedInstance : GetProfilesRoot {
     struct Static {
         static let instance : GetProfilesRoot = GetProfilesRoot()
     }
     return Static.instance
    }
    internal var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Profile.Containers.Profile.ProfileRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    internal func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final internal class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasVersion:Bool = false
    private(set) var version:UInt32 = UInt32(1)

    private(set) var hasTeamId:Bool = false
    private(set) var teamId:String = ""

    private(set) var hasOrganizationId:Bool = false
    private(set) var organizationId:String = ""

    private(set) var hasTagId:Bool = false
    private(set) var tagId:String = ""

    private(set) var hasAddressId:Bool = false
    private(set) var addressId:String = ""

    private(set) var hasLocationId:Bool = false
    private(set) var locationId:String = ""

    private(set) var ids:Array<String> = Array<String>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasTeamId {
        output.writeString(2, value:teamId)
      }
      if hasOrganizationId {
        output.writeString(3, value:organizationId)
      }
      if hasTagId {
        output.writeString(4, value:tagId)
      }
      if hasAddressId {
        output.writeString(5, value:addressId)
      }
      if !ids.isEmpty {
        for oneValueids in ids {
          output.writeString(6, value:oneValueids)
        }
      }
      if hasLocationId {
        output.writeString(7, value:locationId)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasTeamId {
        serialize_size += teamId.computeStringSize(2)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(3)
      }
      if hasTagId {
        serialize_size += tagId.computeStringSize(4)
      }
      if hasAddressId {
        serialize_size += addressId.computeStringSize(5)
      }
      var dataSizeIds:Int32 = 0
      for oneValueids in ids {
          dataSizeIds += oneValueids.computeStringSizeNoTag()
      }
      serialize_size += dataSizeIds
      serialize_size += 1 * Int32(ids.count)
      if hasLocationId {
        serialize_size += locationId.computeStringSize(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Services.Profile.Actions.GetProfiles.RequestV1 {
      return Services.Profile.Actions.GetProfiles.RequestV1.builder().mergeFromData(data, extensionRegistry:Services.Profile.Actions.GetProfiles.GetProfilesRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Profile.Actions.GetProfiles.RequestV1 {
      return Services.Profile.Actions.GetProfiles.RequestV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Services.Profile.Actions.GetProfiles.RequestV1 {
      return Services.Profile.Actions.GetProfiles.RequestV1.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Profile.Actions.GetProfiles.RequestV1 {
      return Services.Profile.Actions.GetProfiles.RequestV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Profile.Actions.GetProfiles.RequestV1 {
      return Services.Profile.Actions.GetProfiles.RequestV1.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Actions.GetProfiles.RequestV1 {
      return Services.Profile.Actions.GetProfiles.RequestV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Services.Profile.Actions.GetProfiles.RequestV1Builder {
      return Services.Profile.Actions.GetProfiles.RequestV1.classBuilder() as! Services.Profile.Actions.GetProfiles.RequestV1Builder
    }
    internal func builder() -> Services.Profile.Actions.GetProfiles.RequestV1Builder {
      return classBuilder() as! Services.Profile.Actions.GetProfiles.RequestV1Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Actions.GetProfiles.RequestV1Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Services.Profile.Actions.GetProfiles.RequestV1.builder()
    }
    internal func toBuilder() -> Services.Profile.Actions.GetProfiles.RequestV1Builder {
      return Services.Profile.Actions.GetProfiles.RequestV1.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Services.Profile.Actions.GetProfiles.RequestV1) -> Services.Profile.Actions.GetProfiles.RequestV1Builder {
      return Services.Profile.Actions.GetProfiles.RequestV1.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasTeamId {
        output += "\(indent) teamId: \(teamId) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      if hasTagId {
        output += "\(indent) tagId: \(tagId) \n"
      }
      if hasAddressId {
        output += "\(indent) addressId: \(addressId) \n"
      }
      var idsElementIndex:Int = 0
      for oneValueids in ids  {
          output += "\(indent) ids[\(idsElementIndex)]: \(oneValueids)\n"
          idsElementIndex++
      }
      if hasLocationId {
        output += "\(indent) locationId: \(locationId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasTeamId {
               hashCode = (hashCode &* 31) &+ teamId.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            if hasTagId {
               hashCode = (hashCode &* 31) &+ tagId.hashValue
            }
            if hasAddressId {
               hashCode = (hashCode &* 31) &+ addressId.hashValue
            }
            for oneValueids in ids {
                hashCode = (hashCode &* 31) &+ oneValueids.hashValue
            }
            if hasLocationId {
               hashCode = (hashCode &* 31) &+ locationId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Services.Profile.Actions.GetProfiles.RequestV1"
    }
    override internal func className() -> String {
        return "Services.Profile.Actions.GetProfiles.RequestV1"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Actions.GetProfiles.RequestV1.self
    }
    //Meta information declaration end

  }

  final internal class RequestV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Profile.Actions.GetProfiles.RequestV1

    required override internal init () {
       builderResult = Services.Profile.Actions.GetProfiles.RequestV1()
       super.init()
    }
    var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    func setVersion(value:UInt32)-> Services.Profile.Actions.GetProfiles.RequestV1Builder {
      self.version = value
      return self
    }
    internal func clearVersion() -> Services.Profile.Actions.GetProfiles.RequestV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    var hasTeamId:Bool {
         get {
              return builderResult.hasTeamId
         }
    }
    var teamId:String {
         get {
              return builderResult.teamId
         }
         set (value) {
             builderResult.hasTeamId = true
             builderResult.teamId = value
         }
    }
    func setTeamId(value:String)-> Services.Profile.Actions.GetProfiles.RequestV1Builder {
      self.teamId = value
      return self
    }
    internal func clearTeamId() -> Services.Profile.Actions.GetProfiles.RequestV1Builder{
         builderResult.hasTeamId = false
         builderResult.teamId = ""
         return self
    }
    var hasOrganizationId:Bool {
         get {
              return builderResult.hasOrganizationId
         }
    }
    var organizationId:String {
         get {
              return builderResult.organizationId
         }
         set (value) {
             builderResult.hasOrganizationId = true
             builderResult.organizationId = value
         }
    }
    func setOrganizationId(value:String)-> Services.Profile.Actions.GetProfiles.RequestV1Builder {
      self.organizationId = value
      return self
    }
    internal func clearOrganizationId() -> Services.Profile.Actions.GetProfiles.RequestV1Builder{
         builderResult.hasOrganizationId = false
         builderResult.organizationId = ""
         return self
    }
    var hasTagId:Bool {
         get {
              return builderResult.hasTagId
         }
    }
    var tagId:String {
         get {
              return builderResult.tagId
         }
         set (value) {
             builderResult.hasTagId = true
             builderResult.tagId = value
         }
    }
    func setTagId(value:String)-> Services.Profile.Actions.GetProfiles.RequestV1Builder {
      self.tagId = value
      return self
    }
    internal func clearTagId() -> Services.Profile.Actions.GetProfiles.RequestV1Builder{
         builderResult.hasTagId = false
         builderResult.tagId = ""
         return self
    }
    var hasAddressId:Bool {
         get {
              return builderResult.hasAddressId
         }
    }
    var addressId:String {
         get {
              return builderResult.addressId
         }
         set (value) {
             builderResult.hasAddressId = true
             builderResult.addressId = value
         }
    }
    func setAddressId(value:String)-> Services.Profile.Actions.GetProfiles.RequestV1Builder {
      self.addressId = value
      return self
    }
    internal func clearAddressId() -> Services.Profile.Actions.GetProfiles.RequestV1Builder{
         builderResult.hasAddressId = false
         builderResult.addressId = ""
         return self
    }
    var ids:Array<String> {
         get {
             return builderResult.ids
         }
         set (array) {
             builderResult.ids = array
         }
    }
    func setIds(value:Array<String>)-> Services.Profile.Actions.GetProfiles.RequestV1Builder {
      self.ids = value
      return self
    }
    internal func clearIds() -> Services.Profile.Actions.GetProfiles.RequestV1Builder {
       builderResult.ids.removeAll(keepCapacity: false)
       return self
    }
    var hasLocationId:Bool {
         get {
              return builderResult.hasLocationId
         }
    }
    var locationId:String {
         get {
              return builderResult.locationId
         }
         set (value) {
             builderResult.hasLocationId = true
             builderResult.locationId = value
         }
    }
    func setLocationId(value:String)-> Services.Profile.Actions.GetProfiles.RequestV1Builder {
      self.locationId = value
      return self
    }
    internal func clearLocationId() -> Services.Profile.Actions.GetProfiles.RequestV1Builder{
         builderResult.hasLocationId = false
         builderResult.locationId = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Services.Profile.Actions.GetProfiles.RequestV1Builder {
      builderResult = Services.Profile.Actions.GetProfiles.RequestV1()
      return self
    }
    internal override func clone() -> Services.Profile.Actions.GetProfiles.RequestV1Builder {
      return Services.Profile.Actions.GetProfiles.RequestV1.builderWithPrototype(builderResult)
    }
    internal override func build() -> Services.Profile.Actions.GetProfiles.RequestV1 {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Services.Profile.Actions.GetProfiles.RequestV1 {
      var returnMe:Services.Profile.Actions.GetProfiles.RequestV1 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Services.Profile.Actions.GetProfiles.RequestV1) -> Services.Profile.Actions.GetProfiles.RequestV1Builder {
      if (other == Services.Profile.Actions.GetProfiles.RequestV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasTeamId {
           teamId = other.teamId
      }
      if other.hasOrganizationId {
           organizationId = other.organizationId
      }
      if other.hasTagId {
           tagId = other.tagId
      }
      if other.hasAddressId {
           addressId = other.addressId
      }
      if !other.ids.isEmpty {
          builderResult.ids += other.ids
      }
      if other.hasLocationId {
           locationId = other.locationId
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Profile.Actions.GetProfiles.RequestV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Actions.GetProfiles.RequestV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          teamId = input.readString()

        case 26 :
          organizationId = input.readString()

        case 34 :
          tagId = input.readString()

        case 42 :
          addressId = input.readString()

        case 50 :
          ids += [input.readString()]

        case 58 :
          locationId = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasVersion:Bool = false
    private(set) var version:UInt32 = UInt32(1)

    private(set) var profiles:Array<Services.Profile.Containers.Profile.ProfileV1>  = Array<Services.Profile.Containers.Profile.ProfileV1>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      for oneElementprofiles in profiles {
          output.writeMessage(2, value:oneElementprofiles)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      for oneElementprofiles in profiles {
          serialize_size += oneElementprofiles.computeMessageSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Services.Profile.Actions.GetProfiles.ResponseV1 {
      return Services.Profile.Actions.GetProfiles.ResponseV1.builder().mergeFromData(data, extensionRegistry:Services.Profile.Actions.GetProfiles.GetProfilesRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Profile.Actions.GetProfiles.ResponseV1 {
      return Services.Profile.Actions.GetProfiles.ResponseV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Services.Profile.Actions.GetProfiles.ResponseV1 {
      return Services.Profile.Actions.GetProfiles.ResponseV1.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Profile.Actions.GetProfiles.ResponseV1 {
      return Services.Profile.Actions.GetProfiles.ResponseV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Profile.Actions.GetProfiles.ResponseV1 {
      return Services.Profile.Actions.GetProfiles.ResponseV1.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Actions.GetProfiles.ResponseV1 {
      return Services.Profile.Actions.GetProfiles.ResponseV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Services.Profile.Actions.GetProfiles.ResponseV1Builder {
      return Services.Profile.Actions.GetProfiles.ResponseV1.classBuilder() as! Services.Profile.Actions.GetProfiles.ResponseV1Builder
    }
    internal func builder() -> Services.Profile.Actions.GetProfiles.ResponseV1Builder {
      return classBuilder() as! Services.Profile.Actions.GetProfiles.ResponseV1Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Actions.GetProfiles.ResponseV1Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Services.Profile.Actions.GetProfiles.ResponseV1.builder()
    }
    internal func toBuilder() -> Services.Profile.Actions.GetProfiles.ResponseV1Builder {
      return Services.Profile.Actions.GetProfiles.ResponseV1.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Services.Profile.Actions.GetProfiles.ResponseV1) -> Services.Profile.Actions.GetProfiles.ResponseV1Builder {
      return Services.Profile.Actions.GetProfiles.ResponseV1.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      var profilesElementIndex:Int = 0
      for oneElementprofiles in profiles {
          output += "\(indent) profiles[\(profilesElementIndex)] {\n"
          oneElementprofiles.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          profilesElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            for oneElementprofiles in profiles {
                hashCode = (hashCode &* 31) &+ oneElementprofiles.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Services.Profile.Actions.GetProfiles.ResponseV1"
    }
    override internal func className() -> String {
        return "Services.Profile.Actions.GetProfiles.ResponseV1"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Actions.GetProfiles.ResponseV1.self
    }
    //Meta information declaration end

  }

  final internal class ResponseV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Profile.Actions.GetProfiles.ResponseV1

    required override internal init () {
       builderResult = Services.Profile.Actions.GetProfiles.ResponseV1()
       super.init()
    }
    var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    func setVersion(value:UInt32)-> Services.Profile.Actions.GetProfiles.ResponseV1Builder {
      self.version = value
      return self
    }
    internal func clearVersion() -> Services.Profile.Actions.GetProfiles.ResponseV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    var profiles:Array<Services.Profile.Containers.Profile.ProfileV1> {
         get {
             return builderResult.profiles
         }
         set (value) {
             builderResult.profiles = value
         }
    }
    func setProfiles(value:Array<Services.Profile.Containers.Profile.ProfileV1>)-> Services.Profile.Actions.GetProfiles.ResponseV1Builder {
      self.profiles = value
      return self
    }
    internal func clearProfiles() -> Services.Profile.Actions.GetProfiles.ResponseV1Builder {
      builderResult.profiles.removeAll(keepCapacity: false)
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Services.Profile.Actions.GetProfiles.ResponseV1Builder {
      builderResult = Services.Profile.Actions.GetProfiles.ResponseV1()
      return self
    }
    internal override func clone() -> Services.Profile.Actions.GetProfiles.ResponseV1Builder {
      return Services.Profile.Actions.GetProfiles.ResponseV1.builderWithPrototype(builderResult)
    }
    internal override func build() -> Services.Profile.Actions.GetProfiles.ResponseV1 {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Services.Profile.Actions.GetProfiles.ResponseV1 {
      var returnMe:Services.Profile.Actions.GetProfiles.ResponseV1 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Services.Profile.Actions.GetProfiles.ResponseV1) -> Services.Profile.Actions.GetProfiles.ResponseV1Builder {
      if (other == Services.Profile.Actions.GetProfiles.ResponseV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if !other.profiles.isEmpty  {
         builderResult.profiles += other.profiles
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Profile.Actions.GetProfiles.ResponseV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Actions.GetProfiles.ResponseV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          var subBuilder = Services.Profile.Containers.Profile.ProfileV1.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          profiles += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
