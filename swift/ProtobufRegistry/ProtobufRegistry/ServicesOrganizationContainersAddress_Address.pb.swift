// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

public extension Services.Organization{ public struct Containers { public struct Address { }}}

public func == (lhs: Services.Organization.Containers.Address.AddressV1, rhs: Services.Organization.Containers.Address.AddressV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasAddress1 == rhs.hasAddress1) && (!lhs.hasAddress1 || lhs.address1 == rhs.address1)
  fieldCheck = fieldCheck && (lhs.hasAddress2 == rhs.hasAddress2) && (!lhs.hasAddress2 || lhs.address2 == rhs.address2)
  fieldCheck = fieldCheck && (lhs.hasCity == rhs.hasCity) && (!lhs.hasCity || lhs.city == rhs.city)
  fieldCheck = fieldCheck && (lhs.hasRegion == rhs.hasRegion) && (!lhs.hasRegion || lhs.region == rhs.region)
  fieldCheck = fieldCheck && (lhs.hasPostalCode == rhs.hasPostalCode) && (!lhs.hasPostalCode || lhs.postalCode == rhs.postalCode)
  fieldCheck = fieldCheck && (lhs.hasCountryCode == rhs.hasCountryCode) && (!lhs.hasCountryCode || lhs.countryCode == rhs.countryCode)
  fieldCheck = fieldCheck && (lhs.hasProfileCount == rhs.hasProfileCount) && (!lhs.hasProfileCount || lhs.profileCount == rhs.profileCount)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = fieldCheck && (lhs.hasTimezone == rhs.hasTimezone) && (!lhs.hasTimezone || lhs.timezone == rhs.timezone)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.Organization.Containers.Address {
  public struct AddressRoot {
    public static var sharedInstance : AddressRoot {
     struct Static {
         static let instance : AddressRoot = AddressRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Google.Protobuf.SwiftDescriptorRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class AddressV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasAddress1:Bool = false
    public private(set) var address1:String = ""

    public private(set) var hasAddress2:Bool = false
    public private(set) var address2:String = ""

    public private(set) var hasCity:Bool = false
    public private(set) var city:String = ""

    public private(set) var hasRegion:Bool = false
    public private(set) var region:String = ""

    public private(set) var hasPostalCode:Bool = false
    public private(set) var postalCode:String = ""

    public private(set) var hasCountryCode:Bool = false
    public private(set) var countryCode:String = ""

    public private(set) var hasProfileCount:Bool = false
    public private(set) var profileCount:String = ""

    public private(set) var hasLatitude:Bool = false
    public private(set) var latitude:String = ""

    public private(set) var hasLongitude:Bool = false
    public private(set) var longitude:String = ""

    public private(set) var hasTimezone:Bool = false
    public private(set) var timezone:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasOrganizationId {
        output.writeString(3, value:organizationId)
      }
      if hasName {
        output.writeString(4, value:name)
      }
      if hasAddress1 {
        output.writeString(5, value:address1)
      }
      if hasAddress2 {
        output.writeString(6, value:address2)
      }
      if hasCity {
        output.writeString(7, value:city)
      }
      if hasRegion {
        output.writeString(8, value:region)
      }
      if hasPostalCode {
        output.writeString(9, value:postalCode)
      }
      if hasCountryCode {
        output.writeString(10, value:countryCode)
      }
      if hasProfileCount {
        output.writeString(11, value:profileCount)
      }
      if hasLatitude {
        output.writeString(12, value:latitude)
      }
      if hasLongitude {
        output.writeString(13, value:longitude)
      }
      if hasTimezone {
        output.writeString(14, value:timezone)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(3)
      }
      if hasName {
        serialize_size += name.computeStringSize(4)
      }
      if hasAddress1 {
        serialize_size += address1.computeStringSize(5)
      }
      if hasAddress2 {
        serialize_size += address2.computeStringSize(6)
      }
      if hasCity {
        serialize_size += city.computeStringSize(7)
      }
      if hasRegion {
        serialize_size += region.computeStringSize(8)
      }
      if hasPostalCode {
        serialize_size += postalCode.computeStringSize(9)
      }
      if hasCountryCode {
        serialize_size += countryCode.computeStringSize(10)
      }
      if hasProfileCount {
        serialize_size += profileCount.computeStringSize(11)
      }
      if hasLatitude {
        serialize_size += latitude.computeStringSize(12)
      }
      if hasLongitude {
        serialize_size += longitude.computeStringSize(13)
      }
      if hasTimezone {
        serialize_size += timezone.computeStringSize(14)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.Address.AddressV1 {
      return Services.Organization.Containers.Address.AddressV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.Address.AddressRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.Address.AddressV1 {
      return Services.Organization.Containers.Address.AddressV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.Address.AddressV1 {
      return Services.Organization.Containers.Address.AddressV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.Address.AddressV1 {
      return Services.Organization.Containers.Address.AddressV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.Address.AddressV1 {
      return Services.Organization.Containers.Address.AddressV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.Address.AddressV1 {
      return Services.Organization.Containers.Address.AddressV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.Address.AddressV1Builder {
      return Services.Organization.Containers.Address.AddressV1.classBuilder() as! Services.Organization.Containers.Address.AddressV1Builder
    }
    public func builder() -> Services.Organization.Containers.Address.AddressV1Builder {
      return classBuilder() as! Services.Organization.Containers.Address.AddressV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Address.AddressV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Address.AddressV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.Address.AddressV1Builder {
      return Services.Organization.Containers.Address.AddressV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.Address.AddressV1) -> Services.Organization.Containers.Address.AddressV1Builder {
      return Services.Organization.Containers.Address.AddressV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasAddress1 {
        output += "\(indent) address1: \(address1) \n"
      }
      if hasAddress2 {
        output += "\(indent) address2: \(address2) \n"
      }
      if hasCity {
        output += "\(indent) city: \(city) \n"
      }
      if hasRegion {
        output += "\(indent) region: \(region) \n"
      }
      if hasPostalCode {
        output += "\(indent) postalCode: \(postalCode) \n"
      }
      if hasCountryCode {
        output += "\(indent) countryCode: \(countryCode) \n"
      }
      if hasProfileCount {
        output += "\(indent) profileCount: \(profileCount) \n"
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      if hasTimezone {
        output += "\(indent) timezone: \(timezone) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasAddress1 {
               hashCode = (hashCode &* 31) &+ address1.hashValue
            }
            if hasAddress2 {
               hashCode = (hashCode &* 31) &+ address2.hashValue
            }
            if hasCity {
               hashCode = (hashCode &* 31) &+ city.hashValue
            }
            if hasRegion {
               hashCode = (hashCode &* 31) &+ region.hashValue
            }
            if hasPostalCode {
               hashCode = (hashCode &* 31) &+ postalCode.hashValue
            }
            if hasCountryCode {
               hashCode = (hashCode &* 31) &+ countryCode.hashValue
            }
            if hasProfileCount {
               hashCode = (hashCode &* 31) &+ profileCount.hashValue
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            if hasTimezone {
               hashCode = (hashCode &* 31) &+ timezone.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.Address.AddressV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.Address.AddressV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.Address.AddressV1.self
    }
    //Meta information declaration end

  }

  final public class AddressV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.Address.AddressV1

    required override public init () {
       builderResult = Services.Organization.Containers.Address.AddressV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.Address.AddressV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.Address.AddressV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Organization.Containers.Address.AddressV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Organization.Containers.Address.AddressV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasOrganizationId:Bool {
         get {
              return builderResult.hasOrganizationId
         }
    }
    public var organizationId:String {
         get {
              return builderResult.organizationId
         }
         set (value) {
             builderResult.hasOrganizationId = true
             builderResult.organizationId = value
         }
    }
    public func setOrganizationId(value:String)-> Services.Organization.Containers.Address.AddressV1Builder {
      self.organizationId = value
      return self
    }
    public func clearOrganizationId() -> Services.Organization.Containers.Address.AddressV1Builder{
         builderResult.hasOrganizationId = false
         builderResult.organizationId = ""
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String)-> Services.Organization.Containers.Address.AddressV1Builder {
      self.name = value
      return self
    }
    public func clearName() -> Services.Organization.Containers.Address.AddressV1Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasAddress1:Bool {
         get {
              return builderResult.hasAddress1
         }
    }
    public var address1:String {
         get {
              return builderResult.address1
         }
         set (value) {
             builderResult.hasAddress1 = true
             builderResult.address1 = value
         }
    }
    public func setAddress1(value:String)-> Services.Organization.Containers.Address.AddressV1Builder {
      self.address1 = value
      return self
    }
    public func clearAddress1() -> Services.Organization.Containers.Address.AddressV1Builder{
         builderResult.hasAddress1 = false
         builderResult.address1 = ""
         return self
    }
    public var hasAddress2:Bool {
         get {
              return builderResult.hasAddress2
         }
    }
    public var address2:String {
         get {
              return builderResult.address2
         }
         set (value) {
             builderResult.hasAddress2 = true
             builderResult.address2 = value
         }
    }
    public func setAddress2(value:String)-> Services.Organization.Containers.Address.AddressV1Builder {
      self.address2 = value
      return self
    }
    public func clearAddress2() -> Services.Organization.Containers.Address.AddressV1Builder{
         builderResult.hasAddress2 = false
         builderResult.address2 = ""
         return self
    }
    public var hasCity:Bool {
         get {
              return builderResult.hasCity
         }
    }
    public var city:String {
         get {
              return builderResult.city
         }
         set (value) {
             builderResult.hasCity = true
             builderResult.city = value
         }
    }
    public func setCity(value:String)-> Services.Organization.Containers.Address.AddressV1Builder {
      self.city = value
      return self
    }
    public func clearCity() -> Services.Organization.Containers.Address.AddressV1Builder{
         builderResult.hasCity = false
         builderResult.city = ""
         return self
    }
    public var hasRegion:Bool {
         get {
              return builderResult.hasRegion
         }
    }
    public var region:String {
         get {
              return builderResult.region
         }
         set (value) {
             builderResult.hasRegion = true
             builderResult.region = value
         }
    }
    public func setRegion(value:String)-> Services.Organization.Containers.Address.AddressV1Builder {
      self.region = value
      return self
    }
    public func clearRegion() -> Services.Organization.Containers.Address.AddressV1Builder{
         builderResult.hasRegion = false
         builderResult.region = ""
         return self
    }
    public var hasPostalCode:Bool {
         get {
              return builderResult.hasPostalCode
         }
    }
    public var postalCode:String {
         get {
              return builderResult.postalCode
         }
         set (value) {
             builderResult.hasPostalCode = true
             builderResult.postalCode = value
         }
    }
    public func setPostalCode(value:String)-> Services.Organization.Containers.Address.AddressV1Builder {
      self.postalCode = value
      return self
    }
    public func clearPostalCode() -> Services.Organization.Containers.Address.AddressV1Builder{
         builderResult.hasPostalCode = false
         builderResult.postalCode = ""
         return self
    }
    public var hasCountryCode:Bool {
         get {
              return builderResult.hasCountryCode
         }
    }
    public var countryCode:String {
         get {
              return builderResult.countryCode
         }
         set (value) {
             builderResult.hasCountryCode = true
             builderResult.countryCode = value
         }
    }
    public func setCountryCode(value:String)-> Services.Organization.Containers.Address.AddressV1Builder {
      self.countryCode = value
      return self
    }
    public func clearCountryCode() -> Services.Organization.Containers.Address.AddressV1Builder{
         builderResult.hasCountryCode = false
         builderResult.countryCode = ""
         return self
    }
    public var hasProfileCount:Bool {
         get {
              return builderResult.hasProfileCount
         }
    }
    public var profileCount:String {
         get {
              return builderResult.profileCount
         }
         set (value) {
             builderResult.hasProfileCount = true
             builderResult.profileCount = value
         }
    }
    public func setProfileCount(value:String)-> Services.Organization.Containers.Address.AddressV1Builder {
      self.profileCount = value
      return self
    }
    public func clearProfileCount() -> Services.Organization.Containers.Address.AddressV1Builder{
         builderResult.hasProfileCount = false
         builderResult.profileCount = ""
         return self
    }
    public var hasLatitude:Bool {
         get {
              return builderResult.hasLatitude
         }
    }
    public var latitude:String {
         get {
              return builderResult.latitude
         }
         set (value) {
             builderResult.hasLatitude = true
             builderResult.latitude = value
         }
    }
    public func setLatitude(value:String)-> Services.Organization.Containers.Address.AddressV1Builder {
      self.latitude = value
      return self
    }
    public func clearLatitude() -> Services.Organization.Containers.Address.AddressV1Builder{
         builderResult.hasLatitude = false
         builderResult.latitude = ""
         return self
    }
    public var hasLongitude:Bool {
         get {
              return builderResult.hasLongitude
         }
    }
    public var longitude:String {
         get {
              return builderResult.longitude
         }
         set (value) {
             builderResult.hasLongitude = true
             builderResult.longitude = value
         }
    }
    public func setLongitude(value:String)-> Services.Organization.Containers.Address.AddressV1Builder {
      self.longitude = value
      return self
    }
    public func clearLongitude() -> Services.Organization.Containers.Address.AddressV1Builder{
         builderResult.hasLongitude = false
         builderResult.longitude = ""
         return self
    }
    public var hasTimezone:Bool {
         get {
              return builderResult.hasTimezone
         }
    }
    public var timezone:String {
         get {
              return builderResult.timezone
         }
         set (value) {
             builderResult.hasTimezone = true
             builderResult.timezone = value
         }
    }
    public func setTimezone(value:String)-> Services.Organization.Containers.Address.AddressV1Builder {
      self.timezone = value
      return self
    }
    public func clearTimezone() -> Services.Organization.Containers.Address.AddressV1Builder{
         builderResult.hasTimezone = false
         builderResult.timezone = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.Address.AddressV1Builder {
      builderResult = Services.Organization.Containers.Address.AddressV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.Address.AddressV1Builder {
      return Services.Organization.Containers.Address.AddressV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.Address.AddressV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.Address.AddressV1 {
      var returnMe:Services.Organization.Containers.Address.AddressV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.Address.AddressV1) -> Services.Organization.Containers.Address.AddressV1Builder {
      if (other == Services.Organization.Containers.Address.AddressV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasOrganizationId {
           organizationId = other.organizationId
      }
      if other.hasName {
           name = other.name
      }
      if other.hasAddress1 {
           address1 = other.address1
      }
      if other.hasAddress2 {
           address2 = other.address2
      }
      if other.hasCity {
           city = other.city
      }
      if other.hasRegion {
           region = other.region
      }
      if other.hasPostalCode {
           postalCode = other.postalCode
      }
      if other.hasCountryCode {
           countryCode = other.countryCode
      }
      if other.hasProfileCount {
           profileCount = other.profileCount
      }
      if other.hasLatitude {
           latitude = other.latitude
      }
      if other.hasLongitude {
           longitude = other.longitude
      }
      if other.hasTimezone {
           timezone = other.timezone
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.Address.AddressV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.Address.AddressV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          organizationId = input.readString()

        case 34 :
          name = input.readString()

        case 42 :
          address1 = input.readString()

        case 50 :
          address2 = input.readString()

        case 58 :
          city = input.readString()

        case 66 :
          region = input.readString()

        case 74 :
          postalCode = input.readString()

        case 82 :
          countryCode = input.readString()

        case 90 :
          profileCount = input.readString()

        case 98 :
          latitude = input.readString()

        case 106 :
          longitude = input.readString()

        case 114 :
          timezone = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
