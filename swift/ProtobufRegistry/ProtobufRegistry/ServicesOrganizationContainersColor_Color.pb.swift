// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.Organization.Containers{ public struct Color { }}

public func == (lhs: Services.Organization.Containers.Color.ColorV1, rhs: Services.Organization.Containers.Color.ColorV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasRed == rhs.hasRed) && (!lhs.hasRed || lhs.red == rhs.red)
  fieldCheck = fieldCheck && (lhs.hasGreen == rhs.hasGreen) && (!lhs.hasGreen || lhs.green == rhs.green)
  fieldCheck = fieldCheck && (lhs.hasBlue == rhs.hasBlue) && (!lhs.hasBlue || lhs.blue == rhs.blue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.Organization.Containers.Color {
  public struct ColorRoot {
    public static var sharedInstance : ColorRoot {
     struct Static {
         static let instance : ColorRoot = ColorRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class ColorV1 : GeneratedMessage, GeneratedMessageProtocol {
    public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "red": return red
           case "green": return green
           case "blue": return blue
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(0)

    public private(set) var hasRed:Bool = false
    public private(set) var red:UInt32 = UInt32(0)

    public private(set) var hasGreen:Bool = false
    public private(set) var green:UInt32 = UInt32(0)

    public private(set) var hasBlue:Bool = false
    public private(set) var blue:UInt32 = UInt32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasRed {
        output.writeUInt32(2, value:red)
      }
      if hasGreen {
        output.writeUInt32(3, value:green)
      }
      if hasBlue {
        output.writeUInt32(4, value:blue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasRed {
        serialize_size += red.computeUInt32Size(2)
      }
      if hasGreen {
        serialize_size += green.computeUInt32Size(3)
      }
      if hasBlue {
        serialize_size += blue.computeUInt32Size(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.Color.ColorV1 {
      return Services.Organization.Containers.Color.ColorV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.Color.ColorRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.Color.ColorV1 {
      return Services.Organization.Containers.Color.ColorV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.Color.ColorV1 {
      return Services.Organization.Containers.Color.ColorV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.Color.ColorV1 {
      return Services.Organization.Containers.Color.ColorV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.Color.ColorV1 {
      return Services.Organization.Containers.Color.ColorV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.Color.ColorV1 {
      return Services.Organization.Containers.Color.ColorV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.Color.ColorV1Builder {
      return Services.Organization.Containers.Color.ColorV1.classBuilder() as! Services.Organization.Containers.Color.ColorV1Builder
    }
    public func builder() -> Services.Organization.Containers.Color.ColorV1Builder {
      return classBuilder() as! Services.Organization.Containers.Color.ColorV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Color.ColorV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Color.ColorV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.Color.ColorV1Builder {
      return Services.Organization.Containers.Color.ColorV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.Color.ColorV1) -> Services.Organization.Containers.Color.ColorV1Builder {
      return Services.Organization.Containers.Color.ColorV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasRed {
        output += "\(indent) red: \(red) \n"
      }
      if hasGreen {
        output += "\(indent) green: \(green) \n"
      }
      if hasBlue {
        output += "\(indent) blue: \(blue) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasRed {
               hashCode = (hashCode &* 31) &+ red.hashValue
            }
            if hasGreen {
               hashCode = (hashCode &* 31) &+ green.hashValue
            }
            if hasBlue {
               hashCode = (hashCode &* 31) &+ blue.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.Color.ColorV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.Color.ColorV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.Color.ColorV1.self
    }
    //Meta information declaration end

  }

  final public class ColorV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.Color.ColorV1

    required override public init () {
       builderResult = Services.Organization.Containers.Color.ColorV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.Color.ColorV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.Color.ColorV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(0)
         return self
    }
    public var hasRed:Bool {
         get {
              return builderResult.hasRed
         }
    }
    public var red:UInt32 {
         get {
              return builderResult.red
         }
         set (value) {
             builderResult.hasRed = true
             builderResult.red = value
         }
    }
    public func setRed(value:UInt32)-> Services.Organization.Containers.Color.ColorV1Builder {
      self.red = value
      return self
    }
    public func clearRed() -> Services.Organization.Containers.Color.ColorV1Builder{
         builderResult.hasRed = false
         builderResult.red = UInt32(0)
         return self
    }
    public var hasGreen:Bool {
         get {
              return builderResult.hasGreen
         }
    }
    public var green:UInt32 {
         get {
              return builderResult.green
         }
         set (value) {
             builderResult.hasGreen = true
             builderResult.green = value
         }
    }
    public func setGreen(value:UInt32)-> Services.Organization.Containers.Color.ColorV1Builder {
      self.green = value
      return self
    }
    public func clearGreen() -> Services.Organization.Containers.Color.ColorV1Builder{
         builderResult.hasGreen = false
         builderResult.green = UInt32(0)
         return self
    }
    public var hasBlue:Bool {
         get {
              return builderResult.hasBlue
         }
    }
    public var blue:UInt32 {
         get {
              return builderResult.blue
         }
         set (value) {
             builderResult.hasBlue = true
             builderResult.blue = value
         }
    }
    public func setBlue(value:UInt32)-> Services.Organization.Containers.Color.ColorV1Builder {
      self.blue = value
      return self
    }
    public func clearBlue() -> Services.Organization.Containers.Color.ColorV1Builder{
         builderResult.hasBlue = false
         builderResult.blue = UInt32(0)
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.Color.ColorV1Builder {
      builderResult = Services.Organization.Containers.Color.ColorV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.Color.ColorV1Builder {
      return Services.Organization.Containers.Color.ColorV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.Color.ColorV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.Color.ColorV1 {
      var returnMe:Services.Organization.Containers.Color.ColorV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.Color.ColorV1) -> Services.Organization.Containers.Color.ColorV1Builder {
      if (other == Services.Organization.Containers.Color.ColorV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasRed {
           red = other.red
      }
      if other.hasGreen {
           green = other.green
      }
      if other.hasBlue {
           blue = other.blue
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.Color.ColorV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.Color.ColorV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 16 :
          red = input.readUInt32()

        case 24 :
          green = input.readUInt32()

        case 32 :
          blue = input.readUInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
