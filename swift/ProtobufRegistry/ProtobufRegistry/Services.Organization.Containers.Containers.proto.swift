// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file containers.proto

import Foundation

public extension Services.Organization.Containers{}

public func == (lhs: Services.Organization.Containers.LocationV1, rhs: Services.Organization.Containers.LocationV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasAddress1 == rhs.hasAddress1) && (!lhs.hasAddress1 || lhs.address1 == rhs.address1)
  fieldCheck = fieldCheck && (lhs.hasAddress2 == rhs.hasAddress2) && (!lhs.hasAddress2 || lhs.address2 == rhs.address2)
  fieldCheck = fieldCheck && (lhs.hasCity == rhs.hasCity) && (!lhs.hasCity || lhs.city == rhs.city)
  fieldCheck = fieldCheck && (lhs.hasRegion == rhs.hasRegion) && (!lhs.hasRegion || lhs.region == rhs.region)
  fieldCheck = fieldCheck && (lhs.hasPostalCode == rhs.hasPostalCode) && (!lhs.hasPostalCode || lhs.postalCode == rhs.postalCode)
  fieldCheck = fieldCheck && (lhs.hasCountryCode == rhs.hasCountryCode) && (!lhs.hasCountryCode || lhs.countryCode == rhs.countryCode)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = fieldCheck && (lhs.hasTimezone == rhs.hasTimezone) && (!lhs.hasTimezone || lhs.timezone == rhs.timezone)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.hasProfileCount == rhs.hasProfileCount) && (!lhs.hasProfileCount || lhs.profileCount == rhs.profileCount)
  fieldCheck = fieldCheck && (lhs.hasImageUrl == rhs.hasImageUrl) && (!lhs.hasImageUrl || lhs.imageUrl == rhs.imageUrl)
  fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
  fieldCheck = fieldCheck && (lhs.hasEstablishedDate == rhs.hasEstablishedDate) && (!lhs.hasEstablishedDate || lhs.establishedDate == rhs.establishedDate)
  fieldCheck = fieldCheck && (lhs.pointsOfContact == rhs.pointsOfContact)
  fieldCheck = fieldCheck && (lhs.hasPermissions == rhs.hasPermissions) && (!lhs.hasPermissions || lhs.permissions == rhs.permissions)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Organization.Containers.OrganizationV1, rhs: Services.Organization.Containers.OrganizationV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasDomain == rhs.hasDomain) && (!lhs.hasDomain || lhs.domain == rhs.domain)
  fieldCheck = fieldCheck && (lhs.hasImageUrl == rhs.hasImageUrl) && (!lhs.hasImageUrl || lhs.imageUrl == rhs.imageUrl)
  fieldCheck = fieldCheck && (lhs.hasProfileCount == rhs.hasProfileCount) && (!lhs.hasProfileCount || lhs.profileCount == rhs.profileCount)
  fieldCheck = fieldCheck && (lhs.hasTeamCount == rhs.hasTeamCount) && (!lhs.hasTeamCount || lhs.teamCount == rhs.teamCount)
  fieldCheck = fieldCheck && (lhs.hasLocationCount == rhs.hasLocationCount) && (!lhs.hasLocationCount || lhs.locationCount == rhs.locationCount)
  fieldCheck = fieldCheck && (lhs.hasPostCount == rhs.hasPostCount) && (!lhs.hasPostCount || lhs.postCount == rhs.postCount)
  fieldCheck = fieldCheck && (lhs.hasInflations == rhs.hasInflations) && (!lhs.hasInflations || lhs.inflations == rhs.inflations)
  fieldCheck = fieldCheck && (lhs.hasFields == rhs.hasFields) && (!lhs.hasFields || lhs.fields == rhs.fields)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Organization.Containers.TeamV1, rhs: Services.Organization.Containers.TeamV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.hasManagerProfileId == rhs.hasManagerProfileId) && (!lhs.hasManagerProfileId || lhs.managerProfileId == rhs.managerProfileId)
  fieldCheck = fieldCheck && (lhs.hasManager == rhs.hasManager) && (!lhs.hasManager || lhs.manager == rhs.manager)
  fieldCheck = fieldCheck && (lhs.hasPermissions == rhs.hasPermissions) && (!lhs.hasPermissions || lhs.permissions == rhs.permissions)
  fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
  fieldCheck = fieldCheck && (lhs.hasImageUrl == rhs.hasImageUrl) && (!lhs.hasImageUrl || lhs.imageUrl == rhs.imageUrl)
  fieldCheck = fieldCheck && (lhs.hasChildTeamCount == rhs.hasChildTeamCount) && (!lhs.hasChildTeamCount || lhs.childTeamCount == rhs.childTeamCount)
  fieldCheck = fieldCheck && (lhs.hasProfileCount == rhs.hasProfileCount) && (!lhs.hasProfileCount || lhs.profileCount == rhs.profileCount)
  fieldCheck = fieldCheck && (lhs.hasDisplayName == rhs.hasDisplayName) && (!lhs.hasDisplayName || lhs.displayName == rhs.displayName)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Organization.Containers.TokenV1, rhs: Services.Organization.Containers.TokenV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasRequestedByUserId == rhs.hasRequestedByUserId) && (!lhs.hasRequestedByUserId || lhs.requestedByUserId == rhs.requestedByUserId)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Organization.Containers.SSOV1, rhs: Services.Organization.Containers.SSOV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasMetadataUrl == rhs.hasMetadataUrl) && (!lhs.hasMetadataUrl || lhs.metadataUrl == rhs.metadataUrl)
  fieldCheck = fieldCheck && (lhs.hasMetadata == rhs.hasMetadata) && (!lhs.hasMetadata || lhs.metadata == rhs.metadata)
  fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Organization.Containers {
  public struct ContainersRoot {
    public static var sharedInstance : ContainersRoot {
     struct Static {
         static let instance : ContainersRoot = ContainersRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Common.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Common.Containers.Description.DescriptionRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Profile.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class LocationV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasAddress1:Bool = false
    public private(set) var address1:String = ""

    public private(set) var hasAddress2:Bool = false
    public private(set) var address2:String = ""

    public private(set) var hasCity:Bool = false
    public private(set) var city:String = ""

    public private(set) var hasRegion:Bool = false
    public private(set) var region:String = ""

    public private(set) var hasPostalCode:Bool = false
    public private(set) var postalCode:String = ""

    public private(set) var hasCountryCode:Bool = false
    public private(set) var countryCode:String = ""

    public private(set) var hasLatitude:Bool = false
    public private(set) var latitude:String = ""

    public private(set) var hasLongitude:Bool = false
    public private(set) var longitude:String = ""

    public private(set) var hasTimezone:Bool = false
    public private(set) var timezone:String = ""

    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    public private(set) var hasProfileCount:Bool = false
    public private(set) var profileCount:UInt32 = UInt32(0)

    public private(set) var hasImageUrl:Bool = false
    public private(set) var imageUrl:String = ""

    public private(set) var hasDescription:Bool = false
    public private(set) var description_:Services.Common.Containers.Description.DescriptionV1!
    public private(set) var hasEstablishedDate:Bool = false
    public private(set) var establishedDate:String = ""

    public private(set) var pointsOfContact:Array<Services.Profile.Containers.ProfileV1>  = Array<Services.Profile.Containers.ProfileV1>()
    public private(set) var hasPermissions:Bool = false
    public private(set) var permissions:Services.Common.Containers.PermissionsV1!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasId {
        try output.writeString(2, value:id)
      }
      if hasName {
        try output.writeString(3, value:name)
      }
      if hasAddress1 {
        try output.writeString(4, value:address1)
      }
      if hasAddress2 {
        try output.writeString(5, value:address2)
      }
      if hasCity {
        try output.writeString(6, value:city)
      }
      if hasRegion {
        try output.writeString(7, value:region)
      }
      if hasPostalCode {
        try output.writeString(8, value:postalCode)
      }
      if hasCountryCode {
        try output.writeString(9, value:countryCode)
      }
      if hasLatitude {
        try output.writeString(10, value:latitude)
      }
      if hasLongitude {
        try output.writeString(11, value:longitude)
      }
      if hasTimezone {
        try output.writeString(12, value:timezone)
      }
      if hasOrganizationId {
        try output.writeString(13, value:organizationId)
      }
      if hasProfileCount {
        try output.writeUInt32(14, value:profileCount)
      }
      if hasImageUrl {
        try output.writeString(15, value:imageUrl)
      }
      if hasDescription {
        try output.writeMessage(16, value:description_)
      }
      if hasEstablishedDate {
        try output.writeString(17, value:establishedDate)
      }
      for oneElementpointsOfContact in pointsOfContact {
          try output.writeMessage(18, value:oneElementpointsOfContact)
      }
      if hasPermissions {
        try output.writeMessage(19, value:permissions)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if hasAddress1 {
        serialize_size += address1.computeStringSize(4)
      }
      if hasAddress2 {
        serialize_size += address2.computeStringSize(5)
      }
      if hasCity {
        serialize_size += city.computeStringSize(6)
      }
      if hasRegion {
        serialize_size += region.computeStringSize(7)
      }
      if hasPostalCode {
        serialize_size += postalCode.computeStringSize(8)
      }
      if hasCountryCode {
        serialize_size += countryCode.computeStringSize(9)
      }
      if hasLatitude {
        serialize_size += latitude.computeStringSize(10)
      }
      if hasLongitude {
        serialize_size += longitude.computeStringSize(11)
      }
      if hasTimezone {
        serialize_size += timezone.computeStringSize(12)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(13)
      }
      if hasProfileCount {
        serialize_size += profileCount.computeUInt32Size(14)
      }
      if hasImageUrl {
        serialize_size += imageUrl.computeStringSize(15)
      }
      if hasDescription {
          if let varSizedescription_ = description_?.computeMessageSize(16) {
              serialize_size += varSizedescription_
          }
      }
      if hasEstablishedDate {
        serialize_size += establishedDate.computeStringSize(17)
      }
      for oneElementpointsOfContact in pointsOfContact {
          serialize_size += oneElementpointsOfContact.computeMessageSize(18)
      }
      if hasPermissions {
          if let varSizepermissions = permissions?.computeMessageSize(19) {
              serialize_size += varSizepermissions
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Containers.LocationV1> {
      var mergedArray = Array<Services.Organization.Containers.LocationV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.LocationV1? {
      return try Services.Organization.Containers.LocationV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Containers.LocationV1 {
      return try Services.Organization.Containers.LocationV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.LocationV1 {
      return try Services.Organization.Containers.LocationV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.LocationV1 {
      return try Services.Organization.Containers.LocationV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.LocationV1 {
      return try Services.Organization.Containers.LocationV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.LocationV1 {
      return try Services.Organization.Containers.LocationV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.LocationV1 {
      return try Services.Organization.Containers.LocationV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Containers.LocationV1.Builder {
      return Services.Organization.Containers.LocationV1.classBuilder() as! Services.Organization.Containers.LocationV1.Builder
    }
    public func getBuilder() -> Services.Organization.Containers.LocationV1.Builder {
      return classBuilder() as! Services.Organization.Containers.LocationV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.LocationV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.LocationV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Containers.LocationV1.Builder {
      return try Services.Organization.Containers.LocationV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.LocationV1) throws -> Services.Organization.Containers.LocationV1.Builder {
      return try Services.Organization.Containers.LocationV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasAddress1 {
        output += "\(indent) address1: \(address1) \n"
      }
      if hasAddress2 {
        output += "\(indent) address2: \(address2) \n"
      }
      if hasCity {
        output += "\(indent) city: \(city) \n"
      }
      if hasRegion {
        output += "\(indent) region: \(region) \n"
      }
      if hasPostalCode {
        output += "\(indent) postalCode: \(postalCode) \n"
      }
      if hasCountryCode {
        output += "\(indent) countryCode: \(countryCode) \n"
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      if hasTimezone {
        output += "\(indent) timezone: \(timezone) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      if hasProfileCount {
        output += "\(indent) profileCount: \(profileCount) \n"
      }
      if hasImageUrl {
        output += "\(indent) imageUrl: \(imageUrl) \n"
      }
      if hasDescription {
        output += "\(indent) description_ {\n"
        try description_?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasEstablishedDate {
        output += "\(indent) establishedDate: \(establishedDate) \n"
      }
      var pointsOfContactElementIndex:Int = 0
      for oneElementpointsOfContact in pointsOfContact {
          output += "\(indent) pointsOfContact[\(pointsOfContactElementIndex)] {\n"
          try oneElementpointsOfContact.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          pointsOfContactElementIndex++
      }
      if hasPermissions {
        output += "\(indent) permissions {\n"
        try permissions?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasAddress1 {
               hashCode = (hashCode &* 31) &+ address1.hashValue
            }
            if hasAddress2 {
               hashCode = (hashCode &* 31) &+ address2.hashValue
            }
            if hasCity {
               hashCode = (hashCode &* 31) &+ city.hashValue
            }
            if hasRegion {
               hashCode = (hashCode &* 31) &+ region.hashValue
            }
            if hasPostalCode {
               hashCode = (hashCode &* 31) &+ postalCode.hashValue
            }
            if hasCountryCode {
               hashCode = (hashCode &* 31) &+ countryCode.hashValue
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            if hasTimezone {
               hashCode = (hashCode &* 31) &+ timezone.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            if hasProfileCount {
               hashCode = (hashCode &* 31) &+ profileCount.hashValue
            }
            if hasImageUrl {
               hashCode = (hashCode &* 31) &+ imageUrl.hashValue
            }
            if hasDescription {
                if let hashValuedescription_ = description_?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuedescription_
                }
            }
            if hasEstablishedDate {
               hashCode = (hashCode &* 31) &+ establishedDate.hashValue
            }
            for oneElementpointsOfContact in pointsOfContact {
                hashCode = (hashCode &* 31) &+ oneElementpointsOfContact.hashValue
            }
            if hasPermissions {
                if let hashValuepermissions = permissions?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepermissions
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.LocationV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.LocationV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.LocationV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Containers.LocationV1 = Services.Organization.Containers.LocationV1()
      public func getMessage() -> Services.Organization.Containers.LocationV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Organization.Containers.LocationV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Organization.Containers.LocationV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Services.Organization.Containers.LocationV1.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.Organization.Containers.LocationV1.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(value:String) -> Services.Organization.Containers.LocationV1.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Services.Organization.Containers.LocationV1.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasAddress1:Bool {
           get {
                return builderResult.hasAddress1
           }
      }
      public var address1:String {
           get {
                return builderResult.address1
           }
           set (value) {
               builderResult.hasAddress1 = true
               builderResult.address1 = value
           }
      }
      public func setAddress1(value:String) -> Services.Organization.Containers.LocationV1.Builder {
        self.address1 = value
        return self
      }
      public func clearAddress1() -> Services.Organization.Containers.LocationV1.Builder{
           builderResult.hasAddress1 = false
           builderResult.address1 = ""
           return self
      }
      public var hasAddress2:Bool {
           get {
                return builderResult.hasAddress2
           }
      }
      public var address2:String {
           get {
                return builderResult.address2
           }
           set (value) {
               builderResult.hasAddress2 = true
               builderResult.address2 = value
           }
      }
      public func setAddress2(value:String) -> Services.Organization.Containers.LocationV1.Builder {
        self.address2 = value
        return self
      }
      public func clearAddress2() -> Services.Organization.Containers.LocationV1.Builder{
           builderResult.hasAddress2 = false
           builderResult.address2 = ""
           return self
      }
      public var hasCity:Bool {
           get {
                return builderResult.hasCity
           }
      }
      public var city:String {
           get {
                return builderResult.city
           }
           set (value) {
               builderResult.hasCity = true
               builderResult.city = value
           }
      }
      public func setCity(value:String) -> Services.Organization.Containers.LocationV1.Builder {
        self.city = value
        return self
      }
      public func clearCity() -> Services.Organization.Containers.LocationV1.Builder{
           builderResult.hasCity = false
           builderResult.city = ""
           return self
      }
      public var hasRegion:Bool {
           get {
                return builderResult.hasRegion
           }
      }
      public var region:String {
           get {
                return builderResult.region
           }
           set (value) {
               builderResult.hasRegion = true
               builderResult.region = value
           }
      }
      public func setRegion(value:String) -> Services.Organization.Containers.LocationV1.Builder {
        self.region = value
        return self
      }
      public func clearRegion() -> Services.Organization.Containers.LocationV1.Builder{
           builderResult.hasRegion = false
           builderResult.region = ""
           return self
      }
      public var hasPostalCode:Bool {
           get {
                return builderResult.hasPostalCode
           }
      }
      public var postalCode:String {
           get {
                return builderResult.postalCode
           }
           set (value) {
               builderResult.hasPostalCode = true
               builderResult.postalCode = value
           }
      }
      public func setPostalCode(value:String) -> Services.Organization.Containers.LocationV1.Builder {
        self.postalCode = value
        return self
      }
      public func clearPostalCode() -> Services.Organization.Containers.LocationV1.Builder{
           builderResult.hasPostalCode = false
           builderResult.postalCode = ""
           return self
      }
      public var hasCountryCode:Bool {
           get {
                return builderResult.hasCountryCode
           }
      }
      public var countryCode:String {
           get {
                return builderResult.countryCode
           }
           set (value) {
               builderResult.hasCountryCode = true
               builderResult.countryCode = value
           }
      }
      public func setCountryCode(value:String) -> Services.Organization.Containers.LocationV1.Builder {
        self.countryCode = value
        return self
      }
      public func clearCountryCode() -> Services.Organization.Containers.LocationV1.Builder{
           builderResult.hasCountryCode = false
           builderResult.countryCode = ""
           return self
      }
      public var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      public var latitude:String {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      public func setLatitude(value:String) -> Services.Organization.Containers.LocationV1.Builder {
        self.latitude = value
        return self
      }
      public func clearLatitude() -> Services.Organization.Containers.LocationV1.Builder{
           builderResult.hasLatitude = false
           builderResult.latitude = ""
           return self
      }
      public var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      public var longitude:String {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      public func setLongitude(value:String) -> Services.Organization.Containers.LocationV1.Builder {
        self.longitude = value
        return self
      }
      public func clearLongitude() -> Services.Organization.Containers.LocationV1.Builder{
           builderResult.hasLongitude = false
           builderResult.longitude = ""
           return self
      }
      public var hasTimezone:Bool {
           get {
                return builderResult.hasTimezone
           }
      }
      public var timezone:String {
           get {
                return builderResult.timezone
           }
           set (value) {
               builderResult.hasTimezone = true
               builderResult.timezone = value
           }
      }
      public func setTimezone(value:String) -> Services.Organization.Containers.LocationV1.Builder {
        self.timezone = value
        return self
      }
      public func clearTimezone() -> Services.Organization.Containers.LocationV1.Builder{
           builderResult.hasTimezone = false
           builderResult.timezone = ""
           return self
      }
      public var hasOrganizationId:Bool {
           get {
                return builderResult.hasOrganizationId
           }
      }
      public var organizationId:String {
           get {
                return builderResult.organizationId
           }
           set (value) {
               builderResult.hasOrganizationId = true
               builderResult.organizationId = value
           }
      }
      public func setOrganizationId(value:String) -> Services.Organization.Containers.LocationV1.Builder {
        self.organizationId = value
        return self
      }
      public func clearOrganizationId() -> Services.Organization.Containers.LocationV1.Builder{
           builderResult.hasOrganizationId = false
           builderResult.organizationId = ""
           return self
      }
      public var hasProfileCount:Bool {
           get {
                return builderResult.hasProfileCount
           }
      }
      public var profileCount:UInt32 {
           get {
                return builderResult.profileCount
           }
           set (value) {
               builderResult.hasProfileCount = true
               builderResult.profileCount = value
           }
      }
      public func setProfileCount(value:UInt32) -> Services.Organization.Containers.LocationV1.Builder {
        self.profileCount = value
        return self
      }
      public func clearProfileCount() -> Services.Organization.Containers.LocationV1.Builder{
           builderResult.hasProfileCount = false
           builderResult.profileCount = UInt32(0)
           return self
      }
      public var hasImageUrl:Bool {
           get {
                return builderResult.hasImageUrl
           }
      }
      public var imageUrl:String {
           get {
                return builderResult.imageUrl
           }
           set (value) {
               builderResult.hasImageUrl = true
               builderResult.imageUrl = value
           }
      }
      public func setImageUrl(value:String) -> Services.Organization.Containers.LocationV1.Builder {
        self.imageUrl = value
        return self
      }
      public func clearImageUrl() -> Services.Organization.Containers.LocationV1.Builder{
           builderResult.hasImageUrl = false
           builderResult.imageUrl = ""
           return self
      }
      public var hasDescription:Bool {
           get {
               return builderResult.hasDescription
           }
      }
      public var description_:Services.Common.Containers.Description.DescriptionV1! {
           get {
               if description_Builder_ != nil {
                  builderResult.description_ = description_Builder_.getMessage()
               }
               return builderResult.description_
           }
           set (value) {
               builderResult.hasDescription = true
               builderResult.description_ = value
           }
      }
      private var description_Builder_:Services.Common.Containers.Description.DescriptionV1.Builder! {
           didSet {
              builderResult.hasDescription = true
           }
      }
      public func getDescriptionBuilder() -> Services.Common.Containers.Description.DescriptionV1.Builder {
        if description_Builder_ == nil {
           description_Builder_ = Services.Common.Containers.Description.DescriptionV1.Builder()
           builderResult.description_ = description_Builder_.getMessage()
           if description_ != nil {
              try! description_Builder_.mergeFrom(description_)
           }
        }
        return description_Builder_
      }
      public func setDescription(value:Services.Common.Containers.Description.DescriptionV1!) -> Services.Organization.Containers.LocationV1.Builder {
        self.description_ = value
        return self
      }
      public func mergeDescription(value:Services.Common.Containers.Description.DescriptionV1) throws -> Services.Organization.Containers.LocationV1.Builder {
        if builderResult.hasDescription {
          builderResult.description_ = try Services.Common.Containers.Description.DescriptionV1.builderWithPrototype(builderResult.description_).mergeFrom(value).buildPartial()
        } else {
          builderResult.description_ = value
        }
        builderResult.hasDescription = true
        return self
      }
      public func clearDescription() -> Services.Organization.Containers.LocationV1.Builder {
        description_Builder_ = nil
        builderResult.hasDescription = false
        builderResult.description_ = nil
        return self
      }
      public var hasEstablishedDate:Bool {
           get {
                return builderResult.hasEstablishedDate
           }
      }
      public var establishedDate:String {
           get {
                return builderResult.establishedDate
           }
           set (value) {
               builderResult.hasEstablishedDate = true
               builderResult.establishedDate = value
           }
      }
      public func setEstablishedDate(value:String) -> Services.Organization.Containers.LocationV1.Builder {
        self.establishedDate = value
        return self
      }
      public func clearEstablishedDate() -> Services.Organization.Containers.LocationV1.Builder{
           builderResult.hasEstablishedDate = false
           builderResult.establishedDate = ""
           return self
      }
      public var pointsOfContact:Array<Services.Profile.Containers.ProfileV1> {
           get {
               return builderResult.pointsOfContact
           }
           set (value) {
               builderResult.pointsOfContact = value
           }
      }
      public func setPointsOfContact(value:Array<Services.Profile.Containers.ProfileV1>) -> Services.Organization.Containers.LocationV1.Builder {
        self.pointsOfContact = value
        return self
      }
      public func clearPointsOfContact() -> Services.Organization.Containers.LocationV1.Builder {
        builderResult.pointsOfContact.removeAll(keepCapacity: false)
        return self
      }
      public var hasPermissions:Bool {
           get {
               return builderResult.hasPermissions
           }
      }
      public var permissions:Services.Common.Containers.PermissionsV1! {
           get {
               if permissionsBuilder_ != nil {
                  builderResult.permissions = permissionsBuilder_.getMessage()
               }
               return builderResult.permissions
           }
           set (value) {
               builderResult.hasPermissions = true
               builderResult.permissions = value
           }
      }
      private var permissionsBuilder_:Services.Common.Containers.PermissionsV1.Builder! {
           didSet {
              builderResult.hasPermissions = true
           }
      }
      public func getPermissionsBuilder() -> Services.Common.Containers.PermissionsV1.Builder {
        if permissionsBuilder_ == nil {
           permissionsBuilder_ = Services.Common.Containers.PermissionsV1.Builder()
           builderResult.permissions = permissionsBuilder_.getMessage()
           if permissions != nil {
              try! permissionsBuilder_.mergeFrom(permissions)
           }
        }
        return permissionsBuilder_
      }
      public func setPermissions(value:Services.Common.Containers.PermissionsV1!) -> Services.Organization.Containers.LocationV1.Builder {
        self.permissions = value
        return self
      }
      public func mergePermissions(value:Services.Common.Containers.PermissionsV1) throws -> Services.Organization.Containers.LocationV1.Builder {
        if builderResult.hasPermissions {
          builderResult.permissions = try Services.Common.Containers.PermissionsV1.builderWithPrototype(builderResult.permissions).mergeFrom(value).buildPartial()
        } else {
          builderResult.permissions = value
        }
        builderResult.hasPermissions = true
        return self
      }
      public func clearPermissions() -> Services.Organization.Containers.LocationV1.Builder {
        permissionsBuilder_ = nil
        builderResult.hasPermissions = false
        builderResult.permissions = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Containers.LocationV1.Builder {
        builderResult = Services.Organization.Containers.LocationV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Containers.LocationV1.Builder {
        return try Services.Organization.Containers.LocationV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Containers.LocationV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Containers.LocationV1 {
        let returnMe:Services.Organization.Containers.LocationV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Containers.LocationV1) throws -> Services.Organization.Containers.LocationV1.Builder {
        if other == Services.Organization.Containers.LocationV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasId {
             id = other.id
        }
        if other.hasName {
             name = other.name
        }
        if other.hasAddress1 {
             address1 = other.address1
        }
        if other.hasAddress2 {
             address2 = other.address2
        }
        if other.hasCity {
             city = other.city
        }
        if other.hasRegion {
             region = other.region
        }
        if other.hasPostalCode {
             postalCode = other.postalCode
        }
        if other.hasCountryCode {
             countryCode = other.countryCode
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        if other.hasTimezone {
             timezone = other.timezone
        }
        if other.hasOrganizationId {
             organizationId = other.organizationId
        }
        if other.hasProfileCount {
             profileCount = other.profileCount
        }
        if other.hasImageUrl {
             imageUrl = other.imageUrl
        }
        if (other.hasDescription) {
            try mergeDescription(other.description_)
        }
        if other.hasEstablishedDate {
             establishedDate = other.establishedDate
        }
        if !other.pointsOfContact.isEmpty  {
           builderResult.pointsOfContact += other.pointsOfContact
        }
        if (other.hasPermissions) {
            try mergePermissions(other.permissions)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.LocationV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.LocationV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            id = try input.readString()

          case 26 :
            name = try input.readString()

          case 34 :
            address1 = try input.readString()

          case 42 :
            address2 = try input.readString()

          case 50 :
            city = try input.readString()

          case 58 :
            region = try input.readString()

          case 66 :
            postalCode = try input.readString()

          case 74 :
            countryCode = try input.readString()

          case 82 :
            latitude = try input.readString()

          case 90 :
            longitude = try input.readString()

          case 98 :
            timezone = try input.readString()

          case 106 :
            organizationId = try input.readString()

          case 112 :
            profileCount = try input.readUInt32()

          case 122 :
            imageUrl = try input.readString()

          case 130 :
            let subBuilder:Services.Common.Containers.Description.DescriptionV1.Builder = Services.Common.Containers.Description.DescriptionV1.Builder()
            if hasDescription {
              try subBuilder.mergeFrom(description_)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            description_ = subBuilder.buildPartial()

          case 138 :
            establishedDate = try input.readString()

          case 146 :
            let subBuilder = Services.Profile.Containers.ProfileV1.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            pointsOfContact += [subBuilder.buildPartial()]

          case 154 :
            let subBuilder:Services.Common.Containers.PermissionsV1.Builder = Services.Common.Containers.PermissionsV1.Builder()
            if hasPermissions {
              try subBuilder.mergeFrom(permissions)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            permissions = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class OrganizationV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasDomain:Bool = false
    public private(set) var domain:String = ""

    public private(set) var hasImageUrl:Bool = false
    public private(set) var imageUrl:String = ""

    public private(set) var hasProfileCount:Bool = false
    public private(set) var profileCount:UInt32 = UInt32(0)

    public private(set) var hasTeamCount:Bool = false
    public private(set) var teamCount:UInt32 = UInt32(0)

    public private(set) var hasLocationCount:Bool = false
    public private(set) var locationCount:UInt32 = UInt32(0)

    public private(set) var hasPostCount:Bool = false
    public private(set) var postCount:UInt32 = UInt32(0)

    public private(set) var hasInflations:Bool = false
    public private(set) var inflations:Services.Common.Containers.InflationsV1!
    public private(set) var hasFields:Bool = false
    public private(set) var fields:Services.Common.Containers.FieldsV1!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasId {
        try output.writeString(2, value:id)
      }
      if hasName {
        try output.writeString(3, value:name)
      }
      if hasDomain {
        try output.writeString(4, value:domain)
      }
      if hasImageUrl {
        try output.writeString(5, value:imageUrl)
      }
      if hasProfileCount {
        try output.writeUInt32(6, value:profileCount)
      }
      if hasTeamCount {
        try output.writeUInt32(7, value:teamCount)
      }
      if hasLocationCount {
        try output.writeUInt32(8, value:locationCount)
      }
      if hasPostCount {
        try output.writeUInt32(9, value:postCount)
      }
      if hasInflations {
        try output.writeMessage(10, value:inflations)
      }
      if hasFields {
        try output.writeMessage(11, value:fields)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if hasDomain {
        serialize_size += domain.computeStringSize(4)
      }
      if hasImageUrl {
        serialize_size += imageUrl.computeStringSize(5)
      }
      if hasProfileCount {
        serialize_size += profileCount.computeUInt32Size(6)
      }
      if hasTeamCount {
        serialize_size += teamCount.computeUInt32Size(7)
      }
      if hasLocationCount {
        serialize_size += locationCount.computeUInt32Size(8)
      }
      if hasPostCount {
        serialize_size += postCount.computeUInt32Size(9)
      }
      if hasInflations {
          if let varSizeinflations = inflations?.computeMessageSize(10) {
              serialize_size += varSizeinflations
          }
      }
      if hasFields {
          if let varSizefields = fields?.computeMessageSize(11) {
              serialize_size += varSizefields
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Containers.OrganizationV1> {
      var mergedArray = Array<Services.Organization.Containers.OrganizationV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.OrganizationV1? {
      return try Services.Organization.Containers.OrganizationV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Containers.OrganizationV1 {
      return try Services.Organization.Containers.OrganizationV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.OrganizationV1 {
      return try Services.Organization.Containers.OrganizationV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.OrganizationV1 {
      return try Services.Organization.Containers.OrganizationV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.OrganizationV1 {
      return try Services.Organization.Containers.OrganizationV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.OrganizationV1 {
      return try Services.Organization.Containers.OrganizationV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.OrganizationV1 {
      return try Services.Organization.Containers.OrganizationV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Containers.OrganizationV1.Builder {
      return Services.Organization.Containers.OrganizationV1.classBuilder() as! Services.Organization.Containers.OrganizationV1.Builder
    }
    public func getBuilder() -> Services.Organization.Containers.OrganizationV1.Builder {
      return classBuilder() as! Services.Organization.Containers.OrganizationV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.OrganizationV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.OrganizationV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Containers.OrganizationV1.Builder {
      return try Services.Organization.Containers.OrganizationV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.OrganizationV1) throws -> Services.Organization.Containers.OrganizationV1.Builder {
      return try Services.Organization.Containers.OrganizationV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasDomain {
        output += "\(indent) domain: \(domain) \n"
      }
      if hasImageUrl {
        output += "\(indent) imageUrl: \(imageUrl) \n"
      }
      if hasProfileCount {
        output += "\(indent) profileCount: \(profileCount) \n"
      }
      if hasTeamCount {
        output += "\(indent) teamCount: \(teamCount) \n"
      }
      if hasLocationCount {
        output += "\(indent) locationCount: \(locationCount) \n"
      }
      if hasPostCount {
        output += "\(indent) postCount: \(postCount) \n"
      }
      if hasInflations {
        output += "\(indent) inflations {\n"
        try inflations?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasFields {
        output += "\(indent) fields {\n"
        try fields?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasDomain {
               hashCode = (hashCode &* 31) &+ domain.hashValue
            }
            if hasImageUrl {
               hashCode = (hashCode &* 31) &+ imageUrl.hashValue
            }
            if hasProfileCount {
               hashCode = (hashCode &* 31) &+ profileCount.hashValue
            }
            if hasTeamCount {
               hashCode = (hashCode &* 31) &+ teamCount.hashValue
            }
            if hasLocationCount {
               hashCode = (hashCode &* 31) &+ locationCount.hashValue
            }
            if hasPostCount {
               hashCode = (hashCode &* 31) &+ postCount.hashValue
            }
            if hasInflations {
                if let hashValueinflations = inflations?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueinflations
                }
            }
            if hasFields {
                if let hashValuefields = fields?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefields
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.OrganizationV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.OrganizationV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.OrganizationV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Containers.OrganizationV1 = Services.Organization.Containers.OrganizationV1()
      public func getMessage() -> Services.Organization.Containers.OrganizationV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Organization.Containers.OrganizationV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Organization.Containers.OrganizationV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Services.Organization.Containers.OrganizationV1.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.Organization.Containers.OrganizationV1.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(value:String) -> Services.Organization.Containers.OrganizationV1.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Services.Organization.Containers.OrganizationV1.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasDomain:Bool {
           get {
                return builderResult.hasDomain
           }
      }
      public var domain:String {
           get {
                return builderResult.domain
           }
           set (value) {
               builderResult.hasDomain = true
               builderResult.domain = value
           }
      }
      public func setDomain(value:String) -> Services.Organization.Containers.OrganizationV1.Builder {
        self.domain = value
        return self
      }
      public func clearDomain() -> Services.Organization.Containers.OrganizationV1.Builder{
           builderResult.hasDomain = false
           builderResult.domain = ""
           return self
      }
      public var hasImageUrl:Bool {
           get {
                return builderResult.hasImageUrl
           }
      }
      public var imageUrl:String {
           get {
                return builderResult.imageUrl
           }
           set (value) {
               builderResult.hasImageUrl = true
               builderResult.imageUrl = value
           }
      }
      public func setImageUrl(value:String) -> Services.Organization.Containers.OrganizationV1.Builder {
        self.imageUrl = value
        return self
      }
      public func clearImageUrl() -> Services.Organization.Containers.OrganizationV1.Builder{
           builderResult.hasImageUrl = false
           builderResult.imageUrl = ""
           return self
      }
      public var hasProfileCount:Bool {
           get {
                return builderResult.hasProfileCount
           }
      }
      public var profileCount:UInt32 {
           get {
                return builderResult.profileCount
           }
           set (value) {
               builderResult.hasProfileCount = true
               builderResult.profileCount = value
           }
      }
      public func setProfileCount(value:UInt32) -> Services.Organization.Containers.OrganizationV1.Builder {
        self.profileCount = value
        return self
      }
      public func clearProfileCount() -> Services.Organization.Containers.OrganizationV1.Builder{
           builderResult.hasProfileCount = false
           builderResult.profileCount = UInt32(0)
           return self
      }
      public var hasTeamCount:Bool {
           get {
                return builderResult.hasTeamCount
           }
      }
      public var teamCount:UInt32 {
           get {
                return builderResult.teamCount
           }
           set (value) {
               builderResult.hasTeamCount = true
               builderResult.teamCount = value
           }
      }
      public func setTeamCount(value:UInt32) -> Services.Organization.Containers.OrganizationV1.Builder {
        self.teamCount = value
        return self
      }
      public func clearTeamCount() -> Services.Organization.Containers.OrganizationV1.Builder{
           builderResult.hasTeamCount = false
           builderResult.teamCount = UInt32(0)
           return self
      }
      public var hasLocationCount:Bool {
           get {
                return builderResult.hasLocationCount
           }
      }
      public var locationCount:UInt32 {
           get {
                return builderResult.locationCount
           }
           set (value) {
               builderResult.hasLocationCount = true
               builderResult.locationCount = value
           }
      }
      public func setLocationCount(value:UInt32) -> Services.Organization.Containers.OrganizationV1.Builder {
        self.locationCount = value
        return self
      }
      public func clearLocationCount() -> Services.Organization.Containers.OrganizationV1.Builder{
           builderResult.hasLocationCount = false
           builderResult.locationCount = UInt32(0)
           return self
      }
      public var hasPostCount:Bool {
           get {
                return builderResult.hasPostCount
           }
      }
      public var postCount:UInt32 {
           get {
                return builderResult.postCount
           }
           set (value) {
               builderResult.hasPostCount = true
               builderResult.postCount = value
           }
      }
      public func setPostCount(value:UInt32) -> Services.Organization.Containers.OrganizationV1.Builder {
        self.postCount = value
        return self
      }
      public func clearPostCount() -> Services.Organization.Containers.OrganizationV1.Builder{
           builderResult.hasPostCount = false
           builderResult.postCount = UInt32(0)
           return self
      }
      public var hasInflations:Bool {
           get {
               return builderResult.hasInflations
           }
      }
      public var inflations:Services.Common.Containers.InflationsV1! {
           get {
               if inflationsBuilder_ != nil {
                  builderResult.inflations = inflationsBuilder_.getMessage()
               }
               return builderResult.inflations
           }
           set (value) {
               builderResult.hasInflations = true
               builderResult.inflations = value
           }
      }
      private var inflationsBuilder_:Services.Common.Containers.InflationsV1.Builder! {
           didSet {
              builderResult.hasInflations = true
           }
      }
      public func getInflationsBuilder() -> Services.Common.Containers.InflationsV1.Builder {
        if inflationsBuilder_ == nil {
           inflationsBuilder_ = Services.Common.Containers.InflationsV1.Builder()
           builderResult.inflations = inflationsBuilder_.getMessage()
           if inflations != nil {
              try! inflationsBuilder_.mergeFrom(inflations)
           }
        }
        return inflationsBuilder_
      }
      public func setInflations(value:Services.Common.Containers.InflationsV1!) -> Services.Organization.Containers.OrganizationV1.Builder {
        self.inflations = value
        return self
      }
      public func mergeInflations(value:Services.Common.Containers.InflationsV1) throws -> Services.Organization.Containers.OrganizationV1.Builder {
        if builderResult.hasInflations {
          builderResult.inflations = try Services.Common.Containers.InflationsV1.builderWithPrototype(builderResult.inflations).mergeFrom(value).buildPartial()
        } else {
          builderResult.inflations = value
        }
        builderResult.hasInflations = true
        return self
      }
      public func clearInflations() -> Services.Organization.Containers.OrganizationV1.Builder {
        inflationsBuilder_ = nil
        builderResult.hasInflations = false
        builderResult.inflations = nil
        return self
      }
      public var hasFields:Bool {
           get {
               return builderResult.hasFields
           }
      }
      public var fields:Services.Common.Containers.FieldsV1! {
           get {
               if fieldsBuilder_ != nil {
                  builderResult.fields = fieldsBuilder_.getMessage()
               }
               return builderResult.fields
           }
           set (value) {
               builderResult.hasFields = true
               builderResult.fields = value
           }
      }
      private var fieldsBuilder_:Services.Common.Containers.FieldsV1.Builder! {
           didSet {
              builderResult.hasFields = true
           }
      }
      public func getFieldsBuilder() -> Services.Common.Containers.FieldsV1.Builder {
        if fieldsBuilder_ == nil {
           fieldsBuilder_ = Services.Common.Containers.FieldsV1.Builder()
           builderResult.fields = fieldsBuilder_.getMessage()
           if fields != nil {
              try! fieldsBuilder_.mergeFrom(fields)
           }
        }
        return fieldsBuilder_
      }
      public func setFields(value:Services.Common.Containers.FieldsV1!) -> Services.Organization.Containers.OrganizationV1.Builder {
        self.fields = value
        return self
      }
      public func mergeFields(value:Services.Common.Containers.FieldsV1) throws -> Services.Organization.Containers.OrganizationV1.Builder {
        if builderResult.hasFields {
          builderResult.fields = try Services.Common.Containers.FieldsV1.builderWithPrototype(builderResult.fields).mergeFrom(value).buildPartial()
        } else {
          builderResult.fields = value
        }
        builderResult.hasFields = true
        return self
      }
      public func clearFields() -> Services.Organization.Containers.OrganizationV1.Builder {
        fieldsBuilder_ = nil
        builderResult.hasFields = false
        builderResult.fields = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Containers.OrganizationV1.Builder {
        builderResult = Services.Organization.Containers.OrganizationV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Containers.OrganizationV1.Builder {
        return try Services.Organization.Containers.OrganizationV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Containers.OrganizationV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Containers.OrganizationV1 {
        let returnMe:Services.Organization.Containers.OrganizationV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Containers.OrganizationV1) throws -> Services.Organization.Containers.OrganizationV1.Builder {
        if other == Services.Organization.Containers.OrganizationV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasId {
             id = other.id
        }
        if other.hasName {
             name = other.name
        }
        if other.hasDomain {
             domain = other.domain
        }
        if other.hasImageUrl {
             imageUrl = other.imageUrl
        }
        if other.hasProfileCount {
             profileCount = other.profileCount
        }
        if other.hasTeamCount {
             teamCount = other.teamCount
        }
        if other.hasLocationCount {
             locationCount = other.locationCount
        }
        if other.hasPostCount {
             postCount = other.postCount
        }
        if (other.hasInflations) {
            try mergeInflations(other.inflations)
        }
        if (other.hasFields) {
            try mergeFields(other.fields)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.OrganizationV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.OrganizationV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            id = try input.readString()

          case 26 :
            name = try input.readString()

          case 34 :
            domain = try input.readString()

          case 42 :
            imageUrl = try input.readString()

          case 48 :
            profileCount = try input.readUInt32()

          case 56 :
            teamCount = try input.readUInt32()

          case 64 :
            locationCount = try input.readUInt32()

          case 72 :
            postCount = try input.readUInt32()

          case 82 :
            let subBuilder:Services.Common.Containers.InflationsV1.Builder = Services.Common.Containers.InflationsV1.Builder()
            if hasInflations {
              try subBuilder.mergeFrom(inflations)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            inflations = subBuilder.buildPartial()

          case 90 :
            let subBuilder:Services.Common.Containers.FieldsV1.Builder = Services.Common.Containers.FieldsV1.Builder()
            if hasFields {
              try subBuilder.mergeFrom(fields)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            fields = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TeamV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    public private(set) var hasManagerProfileId:Bool = false
    public private(set) var managerProfileId:String = ""

    public private(set) var hasManager:Bool = false
    public private(set) var manager:Services.Profile.Containers.ProfileV1!
    public private(set) var hasPermissions:Bool = false
    public private(set) var permissions:Services.Common.Containers.PermissionsV1!
    public private(set) var hasDescription:Bool = false
    public private(set) var description_:Services.Common.Containers.Description.DescriptionV1!
    public private(set) var hasImageUrl:Bool = false
    public private(set) var imageUrl:String = ""

    public private(set) var hasChildTeamCount:Bool = false
    public private(set) var childTeamCount:UInt32 = UInt32(0)

    public private(set) var hasProfileCount:Bool = false
    public private(set) var profileCount:UInt32 = UInt32(0)

    public private(set) var hasDisplayName:Bool = false
    public private(set) var displayName:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasId {
        try output.writeString(2, value:id)
      }
      if hasName {
        try output.writeString(3, value:name)
      }
      if hasOrganizationId {
        try output.writeString(4, value:organizationId)
      }
      if hasManagerProfileId {
        try output.writeString(5, value:managerProfileId)
      }
      if hasManager {
        try output.writeMessage(6, value:manager)
      }
      if hasPermissions {
        try output.writeMessage(7, value:permissions)
      }
      if hasDescription {
        try output.writeMessage(8, value:description_)
      }
      if hasImageUrl {
        try output.writeString(10, value:imageUrl)
      }
      if hasChildTeamCount {
        try output.writeUInt32(11, value:childTeamCount)
      }
      if hasProfileCount {
        try output.writeUInt32(12, value:profileCount)
      }
      if hasDisplayName {
        try output.writeString(13, value:displayName)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(4)
      }
      if hasManagerProfileId {
        serialize_size += managerProfileId.computeStringSize(5)
      }
      if hasManager {
          if let varSizemanager = manager?.computeMessageSize(6) {
              serialize_size += varSizemanager
          }
      }
      if hasPermissions {
          if let varSizepermissions = permissions?.computeMessageSize(7) {
              serialize_size += varSizepermissions
          }
      }
      if hasDescription {
          if let varSizedescription_ = description_?.computeMessageSize(8) {
              serialize_size += varSizedescription_
          }
      }
      if hasImageUrl {
        serialize_size += imageUrl.computeStringSize(10)
      }
      if hasChildTeamCount {
        serialize_size += childTeamCount.computeUInt32Size(11)
      }
      if hasProfileCount {
        serialize_size += profileCount.computeUInt32Size(12)
      }
      if hasDisplayName {
        serialize_size += displayName.computeStringSize(13)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Containers.TeamV1> {
      var mergedArray = Array<Services.Organization.Containers.TeamV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.TeamV1? {
      return try Services.Organization.Containers.TeamV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Containers.TeamV1 {
      return try Services.Organization.Containers.TeamV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.TeamV1 {
      return try Services.Organization.Containers.TeamV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.TeamV1 {
      return try Services.Organization.Containers.TeamV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.TeamV1 {
      return try Services.Organization.Containers.TeamV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.TeamV1 {
      return try Services.Organization.Containers.TeamV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.TeamV1 {
      return try Services.Organization.Containers.TeamV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Containers.TeamV1.Builder {
      return Services.Organization.Containers.TeamV1.classBuilder() as! Services.Organization.Containers.TeamV1.Builder
    }
    public func getBuilder() -> Services.Organization.Containers.TeamV1.Builder {
      return classBuilder() as! Services.Organization.Containers.TeamV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.TeamV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.TeamV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Containers.TeamV1.Builder {
      return try Services.Organization.Containers.TeamV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.TeamV1) throws -> Services.Organization.Containers.TeamV1.Builder {
      return try Services.Organization.Containers.TeamV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      if hasManagerProfileId {
        output += "\(indent) managerProfileId: \(managerProfileId) \n"
      }
      if hasManager {
        output += "\(indent) manager {\n"
        try manager?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasPermissions {
        output += "\(indent) permissions {\n"
        try permissions?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasDescription {
        output += "\(indent) description_ {\n"
        try description_?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasImageUrl {
        output += "\(indent) imageUrl: \(imageUrl) \n"
      }
      if hasChildTeamCount {
        output += "\(indent) childTeamCount: \(childTeamCount) \n"
      }
      if hasProfileCount {
        output += "\(indent) profileCount: \(profileCount) \n"
      }
      if hasDisplayName {
        output += "\(indent) displayName: \(displayName) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            if hasManagerProfileId {
               hashCode = (hashCode &* 31) &+ managerProfileId.hashValue
            }
            if hasManager {
                if let hashValuemanager = manager?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuemanager
                }
            }
            if hasPermissions {
                if let hashValuepermissions = permissions?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepermissions
                }
            }
            if hasDescription {
                if let hashValuedescription_ = description_?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuedescription_
                }
            }
            if hasImageUrl {
               hashCode = (hashCode &* 31) &+ imageUrl.hashValue
            }
            if hasChildTeamCount {
               hashCode = (hashCode &* 31) &+ childTeamCount.hashValue
            }
            if hasProfileCount {
               hashCode = (hashCode &* 31) &+ profileCount.hashValue
            }
            if hasDisplayName {
               hashCode = (hashCode &* 31) &+ displayName.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.TeamV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.TeamV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.TeamV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Containers.TeamV1 = Services.Organization.Containers.TeamV1()
      public func getMessage() -> Services.Organization.Containers.TeamV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Organization.Containers.TeamV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Organization.Containers.TeamV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Services.Organization.Containers.TeamV1.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.Organization.Containers.TeamV1.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(value:String) -> Services.Organization.Containers.TeamV1.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Services.Organization.Containers.TeamV1.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasOrganizationId:Bool {
           get {
                return builderResult.hasOrganizationId
           }
      }
      public var organizationId:String {
           get {
                return builderResult.organizationId
           }
           set (value) {
               builderResult.hasOrganizationId = true
               builderResult.organizationId = value
           }
      }
      public func setOrganizationId(value:String) -> Services.Organization.Containers.TeamV1.Builder {
        self.organizationId = value
        return self
      }
      public func clearOrganizationId() -> Services.Organization.Containers.TeamV1.Builder{
           builderResult.hasOrganizationId = false
           builderResult.organizationId = ""
           return self
      }
      public var hasManagerProfileId:Bool {
           get {
                return builderResult.hasManagerProfileId
           }
      }
      public var managerProfileId:String {
           get {
                return builderResult.managerProfileId
           }
           set (value) {
               builderResult.hasManagerProfileId = true
               builderResult.managerProfileId = value
           }
      }
      public func setManagerProfileId(value:String) -> Services.Organization.Containers.TeamV1.Builder {
        self.managerProfileId = value
        return self
      }
      public func clearManagerProfileId() -> Services.Organization.Containers.TeamV1.Builder{
           builderResult.hasManagerProfileId = false
           builderResult.managerProfileId = ""
           return self
      }
      public var hasManager:Bool {
           get {
               return builderResult.hasManager
           }
      }
      public var manager:Services.Profile.Containers.ProfileV1! {
           get {
               if managerBuilder_ != nil {
                  builderResult.manager = managerBuilder_.getMessage()
               }
               return builderResult.manager
           }
           set (value) {
               builderResult.hasManager = true
               builderResult.manager = value
           }
      }
      private var managerBuilder_:Services.Profile.Containers.ProfileV1.Builder! {
           didSet {
              builderResult.hasManager = true
           }
      }
      public func getManagerBuilder() -> Services.Profile.Containers.ProfileV1.Builder {
        if managerBuilder_ == nil {
           managerBuilder_ = Services.Profile.Containers.ProfileV1.Builder()
           builderResult.manager = managerBuilder_.getMessage()
           if manager != nil {
              try! managerBuilder_.mergeFrom(manager)
           }
        }
        return managerBuilder_
      }
      public func setManager(value:Services.Profile.Containers.ProfileV1!) -> Services.Organization.Containers.TeamV1.Builder {
        self.manager = value
        return self
      }
      public func mergeManager(value:Services.Profile.Containers.ProfileV1) throws -> Services.Organization.Containers.TeamV1.Builder {
        if builderResult.hasManager {
          builderResult.manager = try Services.Profile.Containers.ProfileV1.builderWithPrototype(builderResult.manager).mergeFrom(value).buildPartial()
        } else {
          builderResult.manager = value
        }
        builderResult.hasManager = true
        return self
      }
      public func clearManager() -> Services.Organization.Containers.TeamV1.Builder {
        managerBuilder_ = nil
        builderResult.hasManager = false
        builderResult.manager = nil
        return self
      }
      public var hasPermissions:Bool {
           get {
               return builderResult.hasPermissions
           }
      }
      public var permissions:Services.Common.Containers.PermissionsV1! {
           get {
               if permissionsBuilder_ != nil {
                  builderResult.permissions = permissionsBuilder_.getMessage()
               }
               return builderResult.permissions
           }
           set (value) {
               builderResult.hasPermissions = true
               builderResult.permissions = value
           }
      }
      private var permissionsBuilder_:Services.Common.Containers.PermissionsV1.Builder! {
           didSet {
              builderResult.hasPermissions = true
           }
      }
      public func getPermissionsBuilder() -> Services.Common.Containers.PermissionsV1.Builder {
        if permissionsBuilder_ == nil {
           permissionsBuilder_ = Services.Common.Containers.PermissionsV1.Builder()
           builderResult.permissions = permissionsBuilder_.getMessage()
           if permissions != nil {
              try! permissionsBuilder_.mergeFrom(permissions)
           }
        }
        return permissionsBuilder_
      }
      public func setPermissions(value:Services.Common.Containers.PermissionsV1!) -> Services.Organization.Containers.TeamV1.Builder {
        self.permissions = value
        return self
      }
      public func mergePermissions(value:Services.Common.Containers.PermissionsV1) throws -> Services.Organization.Containers.TeamV1.Builder {
        if builderResult.hasPermissions {
          builderResult.permissions = try Services.Common.Containers.PermissionsV1.builderWithPrototype(builderResult.permissions).mergeFrom(value).buildPartial()
        } else {
          builderResult.permissions = value
        }
        builderResult.hasPermissions = true
        return self
      }
      public func clearPermissions() -> Services.Organization.Containers.TeamV1.Builder {
        permissionsBuilder_ = nil
        builderResult.hasPermissions = false
        builderResult.permissions = nil
        return self
      }
      public var hasDescription:Bool {
           get {
               return builderResult.hasDescription
           }
      }
      public var description_:Services.Common.Containers.Description.DescriptionV1! {
           get {
               if description_Builder_ != nil {
                  builderResult.description_ = description_Builder_.getMessage()
               }
               return builderResult.description_
           }
           set (value) {
               builderResult.hasDescription = true
               builderResult.description_ = value
           }
      }
      private var description_Builder_:Services.Common.Containers.Description.DescriptionV1.Builder! {
           didSet {
              builderResult.hasDescription = true
           }
      }
      public func getDescriptionBuilder() -> Services.Common.Containers.Description.DescriptionV1.Builder {
        if description_Builder_ == nil {
           description_Builder_ = Services.Common.Containers.Description.DescriptionV1.Builder()
           builderResult.description_ = description_Builder_.getMessage()
           if description_ != nil {
              try! description_Builder_.mergeFrom(description_)
           }
        }
        return description_Builder_
      }
      public func setDescription(value:Services.Common.Containers.Description.DescriptionV1!) -> Services.Organization.Containers.TeamV1.Builder {
        self.description_ = value
        return self
      }
      public func mergeDescription(value:Services.Common.Containers.Description.DescriptionV1) throws -> Services.Organization.Containers.TeamV1.Builder {
        if builderResult.hasDescription {
          builderResult.description_ = try Services.Common.Containers.Description.DescriptionV1.builderWithPrototype(builderResult.description_).mergeFrom(value).buildPartial()
        } else {
          builderResult.description_ = value
        }
        builderResult.hasDescription = true
        return self
      }
      public func clearDescription() -> Services.Organization.Containers.TeamV1.Builder {
        description_Builder_ = nil
        builderResult.hasDescription = false
        builderResult.description_ = nil
        return self
      }
      public var hasImageUrl:Bool {
           get {
                return builderResult.hasImageUrl
           }
      }
      public var imageUrl:String {
           get {
                return builderResult.imageUrl
           }
           set (value) {
               builderResult.hasImageUrl = true
               builderResult.imageUrl = value
           }
      }
      public func setImageUrl(value:String) -> Services.Organization.Containers.TeamV1.Builder {
        self.imageUrl = value
        return self
      }
      public func clearImageUrl() -> Services.Organization.Containers.TeamV1.Builder{
           builderResult.hasImageUrl = false
           builderResult.imageUrl = ""
           return self
      }
      public var hasChildTeamCount:Bool {
           get {
                return builderResult.hasChildTeamCount
           }
      }
      public var childTeamCount:UInt32 {
           get {
                return builderResult.childTeamCount
           }
           set (value) {
               builderResult.hasChildTeamCount = true
               builderResult.childTeamCount = value
           }
      }
      public func setChildTeamCount(value:UInt32) -> Services.Organization.Containers.TeamV1.Builder {
        self.childTeamCount = value
        return self
      }
      public func clearChildTeamCount() -> Services.Organization.Containers.TeamV1.Builder{
           builderResult.hasChildTeamCount = false
           builderResult.childTeamCount = UInt32(0)
           return self
      }
      public var hasProfileCount:Bool {
           get {
                return builderResult.hasProfileCount
           }
      }
      public var profileCount:UInt32 {
           get {
                return builderResult.profileCount
           }
           set (value) {
               builderResult.hasProfileCount = true
               builderResult.profileCount = value
           }
      }
      public func setProfileCount(value:UInt32) -> Services.Organization.Containers.TeamV1.Builder {
        self.profileCount = value
        return self
      }
      public func clearProfileCount() -> Services.Organization.Containers.TeamV1.Builder{
           builderResult.hasProfileCount = false
           builderResult.profileCount = UInt32(0)
           return self
      }
      public var hasDisplayName:Bool {
           get {
                return builderResult.hasDisplayName
           }
      }
      public var displayName:String {
           get {
                return builderResult.displayName
           }
           set (value) {
               builderResult.hasDisplayName = true
               builderResult.displayName = value
           }
      }
      public func setDisplayName(value:String) -> Services.Organization.Containers.TeamV1.Builder {
        self.displayName = value
        return self
      }
      public func clearDisplayName() -> Services.Organization.Containers.TeamV1.Builder{
           builderResult.hasDisplayName = false
           builderResult.displayName = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Containers.TeamV1.Builder {
        builderResult = Services.Organization.Containers.TeamV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Containers.TeamV1.Builder {
        return try Services.Organization.Containers.TeamV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Containers.TeamV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Containers.TeamV1 {
        let returnMe:Services.Organization.Containers.TeamV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Containers.TeamV1) throws -> Services.Organization.Containers.TeamV1.Builder {
        if other == Services.Organization.Containers.TeamV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasId {
             id = other.id
        }
        if other.hasName {
             name = other.name
        }
        if other.hasOrganizationId {
             organizationId = other.organizationId
        }
        if other.hasManagerProfileId {
             managerProfileId = other.managerProfileId
        }
        if (other.hasManager) {
            try mergeManager(other.manager)
        }
        if (other.hasPermissions) {
            try mergePermissions(other.permissions)
        }
        if (other.hasDescription) {
            try mergeDescription(other.description_)
        }
        if other.hasImageUrl {
             imageUrl = other.imageUrl
        }
        if other.hasChildTeamCount {
             childTeamCount = other.childTeamCount
        }
        if other.hasProfileCount {
             profileCount = other.profileCount
        }
        if other.hasDisplayName {
             displayName = other.displayName
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.TeamV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.TeamV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            id = try input.readString()

          case 26 :
            name = try input.readString()

          case 34 :
            organizationId = try input.readString()

          case 42 :
            managerProfileId = try input.readString()

          case 50 :
            let subBuilder:Services.Profile.Containers.ProfileV1.Builder = Services.Profile.Containers.ProfileV1.Builder()
            if hasManager {
              try subBuilder.mergeFrom(manager)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            manager = subBuilder.buildPartial()

          case 58 :
            let subBuilder:Services.Common.Containers.PermissionsV1.Builder = Services.Common.Containers.PermissionsV1.Builder()
            if hasPermissions {
              try subBuilder.mergeFrom(permissions)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            permissions = subBuilder.buildPartial()

          case 66 :
            let subBuilder:Services.Common.Containers.Description.DescriptionV1.Builder = Services.Common.Containers.Description.DescriptionV1.Builder()
            if hasDescription {
              try subBuilder.mergeFrom(description_)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            description_ = subBuilder.buildPartial()

          case 82 :
            imageUrl = try input.readString()

          case 88 :
            childTeamCount = try input.readUInt32()

          case 96 :
            profileCount = try input.readUInt32()

          case 106 :
            displayName = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TokenV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasKey:Bool = false
    public private(set) var key:String = ""

    public private(set) var hasRequestedByUserId:Bool = false
    public private(set) var requestedByUserId:String = ""

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasKey {
        try output.writeString(2, value:key)
      }
      if hasRequestedByUserId {
        try output.writeString(3, value:requestedByUserId)
      }
      if hasId {
        try output.writeString(4, value:id)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasKey {
        serialize_size += key.computeStringSize(2)
      }
      if hasRequestedByUserId {
        serialize_size += requestedByUserId.computeStringSize(3)
      }
      if hasId {
        serialize_size += id.computeStringSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Containers.TokenV1> {
      var mergedArray = Array<Services.Organization.Containers.TokenV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.TokenV1? {
      return try Services.Organization.Containers.TokenV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Containers.TokenV1 {
      return try Services.Organization.Containers.TokenV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.TokenV1 {
      return try Services.Organization.Containers.TokenV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.TokenV1 {
      return try Services.Organization.Containers.TokenV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.TokenV1 {
      return try Services.Organization.Containers.TokenV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.TokenV1 {
      return try Services.Organization.Containers.TokenV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.TokenV1 {
      return try Services.Organization.Containers.TokenV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Containers.TokenV1.Builder {
      return Services.Organization.Containers.TokenV1.classBuilder() as! Services.Organization.Containers.TokenV1.Builder
    }
    public func getBuilder() -> Services.Organization.Containers.TokenV1.Builder {
      return classBuilder() as! Services.Organization.Containers.TokenV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.TokenV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.TokenV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Containers.TokenV1.Builder {
      return try Services.Organization.Containers.TokenV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.TokenV1) throws -> Services.Organization.Containers.TokenV1.Builder {
      return try Services.Organization.Containers.TokenV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasKey {
        output += "\(indent) key: \(key) \n"
      }
      if hasRequestedByUserId {
        output += "\(indent) requestedByUserId: \(requestedByUserId) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasKey {
               hashCode = (hashCode &* 31) &+ key.hashValue
            }
            if hasRequestedByUserId {
               hashCode = (hashCode &* 31) &+ requestedByUserId.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.TokenV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.TokenV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.TokenV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Containers.TokenV1 = Services.Organization.Containers.TokenV1()
      public func getMessage() -> Services.Organization.Containers.TokenV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Organization.Containers.TokenV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Organization.Containers.TokenV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasKey:Bool {
           get {
                return builderResult.hasKey
           }
      }
      public var key:String {
           get {
                return builderResult.key
           }
           set (value) {
               builderResult.hasKey = true
               builderResult.key = value
           }
      }
      public func setKey(value:String) -> Services.Organization.Containers.TokenV1.Builder {
        self.key = value
        return self
      }
      public func clearKey() -> Services.Organization.Containers.TokenV1.Builder{
           builderResult.hasKey = false
           builderResult.key = ""
           return self
      }
      public var hasRequestedByUserId:Bool {
           get {
                return builderResult.hasRequestedByUserId
           }
      }
      public var requestedByUserId:String {
           get {
                return builderResult.requestedByUserId
           }
           set (value) {
               builderResult.hasRequestedByUserId = true
               builderResult.requestedByUserId = value
           }
      }
      public func setRequestedByUserId(value:String) -> Services.Organization.Containers.TokenV1.Builder {
        self.requestedByUserId = value
        return self
      }
      public func clearRequestedByUserId() -> Services.Organization.Containers.TokenV1.Builder{
           builderResult.hasRequestedByUserId = false
           builderResult.requestedByUserId = ""
           return self
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Services.Organization.Containers.TokenV1.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.Organization.Containers.TokenV1.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Containers.TokenV1.Builder {
        builderResult = Services.Organization.Containers.TokenV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Containers.TokenV1.Builder {
        return try Services.Organization.Containers.TokenV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Containers.TokenV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Containers.TokenV1 {
        let returnMe:Services.Organization.Containers.TokenV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Containers.TokenV1) throws -> Services.Organization.Containers.TokenV1.Builder {
        if other == Services.Organization.Containers.TokenV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasKey {
             key = other.key
        }
        if other.hasRequestedByUserId {
             requestedByUserId = other.requestedByUserId
        }
        if other.hasId {
             id = other.id
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.TokenV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.TokenV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            key = try input.readString()

          case 26 :
            requestedByUserId = try input.readString()

          case 34 :
            id = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class SSOV1 : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum ProviderV1:Int32 {
        case Okta = 0

      }

      //Enum type declaration end 

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasMetadataUrl:Bool = false
    public private(set) var metadataUrl:String = ""

    public private(set) var hasMetadata:Bool = false
    public private(set) var metadata:String = ""

    public private(set) var provider:Services.Organization.Containers.SSOV1.ProviderV1 = Services.Organization.Containers.SSOV1.ProviderV1.Okta
    public private(set) var hasProvider:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasMetadataUrl {
        try output.writeString(2, value:metadataUrl)
      }
      if hasMetadata {
        try output.writeString(3, value:metadata)
      }
      if hasProvider {
        try output.writeEnum(4, value:provider.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasMetadataUrl {
        serialize_size += metadataUrl.computeStringSize(2)
      }
      if hasMetadata {
        serialize_size += metadata.computeStringSize(3)
      }
      if (hasProvider) {
        serialize_size += provider.rawValue.computeEnumSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Containers.SSOV1> {
      var mergedArray = Array<Services.Organization.Containers.SSOV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.SSOV1? {
      return try Services.Organization.Containers.SSOV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Containers.SSOV1 {
      return try Services.Organization.Containers.SSOV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.SSOV1 {
      return try Services.Organization.Containers.SSOV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.SSOV1 {
      return try Services.Organization.Containers.SSOV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.SSOV1 {
      return try Services.Organization.Containers.SSOV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.SSOV1 {
      return try Services.Organization.Containers.SSOV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.SSOV1 {
      return try Services.Organization.Containers.SSOV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Containers.SSOV1.Builder {
      return Services.Organization.Containers.SSOV1.classBuilder() as! Services.Organization.Containers.SSOV1.Builder
    }
    public func getBuilder() -> Services.Organization.Containers.SSOV1.Builder {
      return classBuilder() as! Services.Organization.Containers.SSOV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.SSOV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.SSOV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Containers.SSOV1.Builder {
      return try Services.Organization.Containers.SSOV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.SSOV1) throws -> Services.Organization.Containers.SSOV1.Builder {
      return try Services.Organization.Containers.SSOV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasMetadataUrl {
        output += "\(indent) metadataUrl: \(metadataUrl) \n"
      }
      if hasMetadata {
        output += "\(indent) metadata: \(metadata) \n"
      }
      if (hasProvider) {
        output += "\(indent) provider: \(provider.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasMetadataUrl {
               hashCode = (hashCode &* 31) &+ metadataUrl.hashValue
            }
            if hasMetadata {
               hashCode = (hashCode &* 31) &+ metadata.hashValue
            }
            if hasProvider {
               hashCode = (hashCode &* 31) &+ Int(provider.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.SSOV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.SSOV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.SSOV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Containers.SSOV1 = Services.Organization.Containers.SSOV1()
      public func getMessage() -> Services.Organization.Containers.SSOV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Organization.Containers.SSOV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Organization.Containers.SSOV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasMetadataUrl:Bool {
           get {
                return builderResult.hasMetadataUrl
           }
      }
      public var metadataUrl:String {
           get {
                return builderResult.metadataUrl
           }
           set (value) {
               builderResult.hasMetadataUrl = true
               builderResult.metadataUrl = value
           }
      }
      public func setMetadataUrl(value:String) -> Services.Organization.Containers.SSOV1.Builder {
        self.metadataUrl = value
        return self
      }
      public func clearMetadataUrl() -> Services.Organization.Containers.SSOV1.Builder{
           builderResult.hasMetadataUrl = false
           builderResult.metadataUrl = ""
           return self
      }
      public var hasMetadata:Bool {
           get {
                return builderResult.hasMetadata
           }
      }
      public var metadata:String {
           get {
                return builderResult.metadata
           }
           set (value) {
               builderResult.hasMetadata = true
               builderResult.metadata = value
           }
      }
      public func setMetadata(value:String) -> Services.Organization.Containers.SSOV1.Builder {
        self.metadata = value
        return self
      }
      public func clearMetadata() -> Services.Organization.Containers.SSOV1.Builder{
           builderResult.hasMetadata = false
           builderResult.metadata = ""
           return self
      }
        public var hasProvider:Bool{
            get {
                return builderResult.hasProvider
            }
        }
        public var provider:Services.Organization.Containers.SSOV1.ProviderV1 {
            get {
                return builderResult.provider
            }
            set (value) {
                builderResult.hasProvider = true
                builderResult.provider = value
            }
        }
        public func setProvider(value:Services.Organization.Containers.SSOV1.ProviderV1) -> Services.Organization.Containers.SSOV1.Builder {
          self.provider = value
          return self
        }
        public func clearProvider() -> Services.Organization.Containers.SSOV1.Builder {
           builderResult.hasProvider = false
           builderResult.provider = .Okta
           return self
        }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Containers.SSOV1.Builder {
        builderResult = Services.Organization.Containers.SSOV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Containers.SSOV1.Builder {
        return try Services.Organization.Containers.SSOV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Containers.SSOV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Containers.SSOV1 {
        let returnMe:Services.Organization.Containers.SSOV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Containers.SSOV1) throws -> Services.Organization.Containers.SSOV1.Builder {
        if other == Services.Organization.Containers.SSOV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasMetadataUrl {
             metadataUrl = other.metadataUrl
        }
        if other.hasMetadata {
             metadata = other.metadata
        }
        if other.hasProvider {
             provider = other.provider
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.SSOV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.SSOV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            metadataUrl = try input.readString()

          case 26 :
            metadata = try input.readString()

          case 32 :
            let valueIntprovider = try input.readEnum()
            if let enumsprovider = Services.Organization.Containers.SSOV1.ProviderV1(rawValue:valueIntprovider){
                 provider = enumsprovider
            } else {
                 try unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntprovider))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
