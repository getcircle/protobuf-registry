// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
import ProtocolBuffers


internal extension Services{ internal struct User { internal struct Actions { internal struct AuthenticateUser { }}}}

internal func == (lhs: Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1, rhs: Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasSecret == rhs.hasSecret) && (!lhs.hasSecret || lhs.secret == rhs.secret)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Services.User.Actions.AuthenticateUser.RequestV1, rhs: Services.User.Actions.AuthenticateUser.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasBackend == rhs.hasBackend) && (!lhs.hasBackend || lhs.backend == rhs.backend)
  fieldCheck = fieldCheck && (lhs.hasCredentials == rhs.hasCredentials) && (!lhs.hasCredentials || lhs.credentials == rhs.credentials)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Services.User.Actions.AuthenticateUser.ResponseV1, rhs: Services.User.Actions.AuthenticateUser.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
  fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
  fieldCheck = fieldCheck && (lhs.hasNewUser == rhs.hasNewUser) && (!lhs.hasNewUser || lhs.newUser == rhs.newUser)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal extension Services.User.Actions.AuthenticateUser {
  internal struct AuthenticateUserRoot {
    internal static var sharedInstance : AuthenticateUserRoot {
     struct Static {
         static let instance : AuthenticateUserRoot = AuthenticateUserRoot()
     }
     return Static.instance
    }
    internal var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.User.Containers.User.UserRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    internal func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final internal class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final internal class CredentialsV1 : GeneratedMessage, GeneratedMessageProtocol {
        private(set) var hasVersion:Bool = false
        private(set) var version:UInt32 = UInt32(1)

        private(set) var hasKey:Bool = false
        private(set) var key:String = ""

        private(set) var hasSecret:Bool = false
        private(set) var secret:String = ""

        required internal init() {
             super.init()
        }
        override internal func isInitialized() -> Bool {
         return true
        }
        override internal func writeToCodedOutputStream(output:CodedOutputStream) {
          if hasVersion {
            output.writeUInt32(1, value:version)
          }
          if hasKey {
            output.writeString(2, value:key)
          }
          if hasSecret {
            output.writeString(3, value:secret)
          }
          unknownFields.writeToCodedOutputStream(output)
        }
        override internal func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasVersion {
            serialize_size += version.computeUInt32Size(1)
          }
          if hasKey {
            serialize_size += key.computeStringSize(2)
          }
          if hasSecret {
            serialize_size += secret.computeStringSize(3)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        internal class func parseFromData(data:NSData) -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 {
          return Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.builder().mergeFromData(data, extensionRegistry:Services.User.Actions.AuthenticateUser.AuthenticateUserRoot.sharedInstance.extensionRegistry).build()
        }
        internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 {
          return Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromInputStream(input:NSInputStream) -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 {
          return Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.builder().mergeFromInputStream(input).build()
        }
        internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 {
          return Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream) -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 {
          return Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.builder().mergeFromCodedInputStream(input).build()
        }
        internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 {
          return Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        internal class func builder() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder {
          return Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.classBuilder() as! Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder
        }
        internal func builder() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder {
          return classBuilder() as! Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder
        }
        internal override class func classBuilder() -> MessageBuilder {
          return Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder()
        }
        internal override func classBuilder() -> MessageBuilder {
          return Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.builder()
        }
        internal func toBuilder() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder {
          return Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.builderWithPrototype(self)
        }
        internal class func builderWithPrototype(prototype:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1) -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder {
          return Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.builder().mergeFrom(prototype)
        }
        override internal func writeDescriptionTo(inout output:String, indent:String) {
          if hasVersion {
            output += "\(indent) version: \(version) \n"
          }
          if hasKey {
            output += "\(indent) key: \(key) \n"
          }
          if hasSecret {
            output += "\(indent) secret: \(secret) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override internal var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasVersion {
                   hashCode = (hashCode &* 31) &+ version.hashValue
                }
                if hasKey {
                   hashCode = (hashCode &* 31) &+ key.hashValue
                }
                if hasSecret {
                   hashCode = (hashCode &* 31) &+ secret.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override internal class func className() -> String {
            return "Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1"
        }
        override internal func className() -> String {
            return "Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1"
        }
        override internal func classMetaType() -> GeneratedMessage.Type {
            return Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.self
        }
        //Meta information declaration end

      }

      final internal class CredentialsV1Builder : GeneratedMessageBuilder {
        private var builderResult:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1

        required override internal init () {
           builderResult = Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1()
           super.init()
        }
        var hasVersion:Bool {
             get {
                  return builderResult.hasVersion
             }
        }
        var version:UInt32 {
             get {
                  return builderResult.version
             }
             set (value) {
                 builderResult.hasVersion = true
                 builderResult.version = value
             }
        }
        func setVersion(value:UInt32)-> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder {
          self.version = value
          return self
        }
        internal func clearVersion() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder{
             builderResult.hasVersion = false
             builderResult.version = UInt32(1)
             return self
        }
        var hasKey:Bool {
             get {
                  return builderResult.hasKey
             }
        }
        var key:String {
             get {
                  return builderResult.key
             }
             set (value) {
                 builderResult.hasKey = true
                 builderResult.key = value
             }
        }
        func setKey(value:String)-> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder {
          self.key = value
          return self
        }
        internal func clearKey() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder{
             builderResult.hasKey = false
             builderResult.key = ""
             return self
        }
        var hasSecret:Bool {
             get {
                  return builderResult.hasSecret
             }
        }
        var secret:String {
             get {
                  return builderResult.secret
             }
             set (value) {
                 builderResult.hasSecret = true
                 builderResult.secret = value
             }
        }
        func setSecret(value:String)-> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder {
          self.secret = value
          return self
        }
        internal func clearSecret() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder{
             builderResult.hasSecret = false
             builderResult.secret = ""
             return self
        }
        override internal var internalGetResult:GeneratedMessage {
             get {
                return builderResult
             }
        }
        internal override func clear() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder {
          builderResult = Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1()
          return self
        }
        internal override func clone() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder {
          return Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.builderWithPrototype(builderResult)
        }
        internal override func build() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 {
             checkInitialized()
             return buildPartial()
        }
        internal func buildPartial() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 {
          var returnMe:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 = builderResult
          return returnMe
        }
        internal func mergeFrom(other:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1) -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder {
          if (other == Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1()) {
           return self
          }
          if other.hasVersion {
               version = other.version
          }
          if other.hasKey {
               key = other.key
          }
          if other.hasSecret {
               secret = other.secret
          }
          mergeUnknownFields(other.unknownFields)
          return self
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder {
             return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
        }
        internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder {
          var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
          while (true) {
            var tag = input.readTag()
            switch tag {
            case 0: 
              self.unknownFields = unknownFieldsBuilder.build()
              return self

            case 8 :
              version = input.readUInt32()

            case 18 :
              key = input.readString()

            case 26 :
              secret = input.readString()

            default:
              if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                 unknownFields = unknownFieldsBuilder.build()
                 return self
              }
            }
          }
        }
      }

    //Nested type declaration end



      //Enum type declaration start 

      internal enum AuthBackendV1:Int32 {
        case Internal = 0
        case Google = 1

      }

      //Enum type declaration end 

    private(set) var hasVersion:Bool = false
    private(set) var version:UInt32 = UInt32(1)

    private(set) var backend:Services.User.Actions.AuthenticateUser.RequestV1.AuthBackendV1 = Services.User.Actions.AuthenticateUser.RequestV1.AuthBackendV1.Internal
    private(set) var hasBackend:Bool = false
    private(set) var hasCredentials:Bool = false
    private(set) var credentials:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1!
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasBackend {
        output.writeEnum(2, value:backend.rawValue)
      }
      if hasCredentials {
        output.writeMessage(3, value:credentials)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if (hasBackend) {
        serialize_size += backend.rawValue.computeEnumSize(2)
      }
      if hasCredentials {
          if let varSizecredentials = credentials?.computeMessageSize(3) {
              serialize_size += varSizecredentials
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Services.User.Actions.AuthenticateUser.RequestV1 {
      return Services.User.Actions.AuthenticateUser.RequestV1.builder().mergeFromData(data, extensionRegistry:Services.User.Actions.AuthenticateUser.AuthenticateUserRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.User.Actions.AuthenticateUser.RequestV1 {
      return Services.User.Actions.AuthenticateUser.RequestV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Services.User.Actions.AuthenticateUser.RequestV1 {
      return Services.User.Actions.AuthenticateUser.RequestV1.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.User.Actions.AuthenticateUser.RequestV1 {
      return Services.User.Actions.AuthenticateUser.RequestV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Services.User.Actions.AuthenticateUser.RequestV1 {
      return Services.User.Actions.AuthenticateUser.RequestV1.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Actions.AuthenticateUser.RequestV1 {
      return Services.User.Actions.AuthenticateUser.RequestV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Services.User.Actions.AuthenticateUser.RequestV1Builder {
      return Services.User.Actions.AuthenticateUser.RequestV1.classBuilder() as! Services.User.Actions.AuthenticateUser.RequestV1Builder
    }
    internal func builder() -> Services.User.Actions.AuthenticateUser.RequestV1Builder {
      return classBuilder() as! Services.User.Actions.AuthenticateUser.RequestV1Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Services.User.Actions.AuthenticateUser.RequestV1Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Services.User.Actions.AuthenticateUser.RequestV1.builder()
    }
    internal func toBuilder() -> Services.User.Actions.AuthenticateUser.RequestV1Builder {
      return Services.User.Actions.AuthenticateUser.RequestV1.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Services.User.Actions.AuthenticateUser.RequestV1) -> Services.User.Actions.AuthenticateUser.RequestV1Builder {
      return Services.User.Actions.AuthenticateUser.RequestV1.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if (hasBackend) {
        output += "\(indent) backend: \(backend.rawValue)\n"
      }
      if hasCredentials {
        output += "\(indent) credentials {\n"
        credentials?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasBackend {
               hashCode = (hashCode &* 31) &+ Int(backend.rawValue)
            }
            if hasCredentials {
                if let hashValuecredentials = credentials?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuecredentials
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Services.User.Actions.AuthenticateUser.RequestV1"
    }
    override internal func className() -> String {
        return "Services.User.Actions.AuthenticateUser.RequestV1"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Actions.AuthenticateUser.RequestV1.self
    }
    //Meta information declaration end

  }

  final internal class RequestV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.User.Actions.AuthenticateUser.RequestV1

    required override internal init () {
       builderResult = Services.User.Actions.AuthenticateUser.RequestV1()
       super.init()
    }
    var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    func setVersion(value:UInt32)-> Services.User.Actions.AuthenticateUser.RequestV1Builder {
      self.version = value
      return self
    }
    internal func clearVersion() -> Services.User.Actions.AuthenticateUser.RequestV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
      var hasBackend:Bool{
          get {
              return builderResult.hasBackend
          }
      }
      var backend:Services.User.Actions.AuthenticateUser.RequestV1.AuthBackendV1 {
          get {
              return builderResult.backend
          }
          set (value) {
              builderResult.hasBackend = true
              builderResult.backend = value
          }
      }
      internal func setBackend(value:Services.User.Actions.AuthenticateUser.RequestV1.AuthBackendV1)-> Services.User.Actions.AuthenticateUser.RequestV1Builder {
        self.backend = value
        return self
      }
      internal func clearBackend() -> Services.User.Actions.AuthenticateUser.RequestV1Builder {
         builderResult.hasBackend = false
         builderResult.backend = .Internal
         return self
      }
    var hasCredentials:Bool {
         get {
             return builderResult.hasCredentials
         }
    }
    var credentials:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1! {
         get {
             return builderResult.credentials
         }
         set (value) {
             builderResult.hasCredentials = true
             builderResult.credentials = value
         }
    }
    func setCredentials(value:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1!)-> Services.User.Actions.AuthenticateUser.RequestV1Builder {
      self.credentials = value
      return self
    }
    internal func mergeCredentials(value:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1) -> Services.User.Actions.AuthenticateUser.RequestV1Builder {
      if (builderResult.hasCredentials) {
        builderResult.credentials = Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.builderWithPrototype(builderResult.credentials).mergeFrom(value).buildPartial()
      } else {
        builderResult.credentials = value
      }
      builderResult.hasCredentials = true
      return self
    }
    internal func clearCredentials() -> Services.User.Actions.AuthenticateUser.RequestV1Builder {
      builderResult.hasCredentials = false
      builderResult.credentials = nil
      return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Services.User.Actions.AuthenticateUser.RequestV1Builder {
      builderResult = Services.User.Actions.AuthenticateUser.RequestV1()
      return self
    }
    internal override func clone() -> Services.User.Actions.AuthenticateUser.RequestV1Builder {
      return Services.User.Actions.AuthenticateUser.RequestV1.builderWithPrototype(builderResult)
    }
    internal override func build() -> Services.User.Actions.AuthenticateUser.RequestV1 {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Services.User.Actions.AuthenticateUser.RequestV1 {
      var returnMe:Services.User.Actions.AuthenticateUser.RequestV1 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Services.User.Actions.AuthenticateUser.RequestV1) -> Services.User.Actions.AuthenticateUser.RequestV1Builder {
      if (other == Services.User.Actions.AuthenticateUser.RequestV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasBackend {
           backend = other.backend
      }
      if (other.hasCredentials) {
          mergeCredentials(other.credentials)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.User.Actions.AuthenticateUser.RequestV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Actions.AuthenticateUser.RequestV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 16 :
          let valueIntbackend = input.readEnum()
          if let enumsbackend = Services.User.Actions.AuthenticateUser.RequestV1.AuthBackendV1(rawValue:valueIntbackend){
               backend = enumsbackend
          } else {
               unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntbackend))
          }

        case 26 :
          var subBuilder:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1Builder = Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.builder()
          if hasCredentials {
            subBuilder.mergeFrom(credentials)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          credentials = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasVersion:Bool = false
    private(set) var version:UInt32 = UInt32(1)

    private(set) var hasUser:Bool = false
    private(set) var user:Services.User.Containers.User.UserV1!
    private(set) var hasToken:Bool = false
    private(set) var token:String = ""

    private(set) var hasNewUser:Bool = false
    private(set) var newUser:Bool = false

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasUser {
        output.writeMessage(2, value:user)
      }
      if hasToken {
        output.writeString(3, value:token)
      }
      if hasNewUser {
        output.writeBool(4, value:newUser)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasUser {
          if let varSizeuser = user?.computeMessageSize(2) {
              serialize_size += varSizeuser
          }
      }
      if hasToken {
        serialize_size += token.computeStringSize(3)
      }
      if hasNewUser {
        serialize_size += newUser.computeBoolSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Services.User.Actions.AuthenticateUser.ResponseV1 {
      return Services.User.Actions.AuthenticateUser.ResponseV1.builder().mergeFromData(data, extensionRegistry:Services.User.Actions.AuthenticateUser.AuthenticateUserRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.User.Actions.AuthenticateUser.ResponseV1 {
      return Services.User.Actions.AuthenticateUser.ResponseV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Services.User.Actions.AuthenticateUser.ResponseV1 {
      return Services.User.Actions.AuthenticateUser.ResponseV1.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.User.Actions.AuthenticateUser.ResponseV1 {
      return Services.User.Actions.AuthenticateUser.ResponseV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Services.User.Actions.AuthenticateUser.ResponseV1 {
      return Services.User.Actions.AuthenticateUser.ResponseV1.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Actions.AuthenticateUser.ResponseV1 {
      return Services.User.Actions.AuthenticateUser.ResponseV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Services.User.Actions.AuthenticateUser.ResponseV1Builder {
      return Services.User.Actions.AuthenticateUser.ResponseV1.classBuilder() as! Services.User.Actions.AuthenticateUser.ResponseV1Builder
    }
    internal func builder() -> Services.User.Actions.AuthenticateUser.ResponseV1Builder {
      return classBuilder() as! Services.User.Actions.AuthenticateUser.ResponseV1Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Services.User.Actions.AuthenticateUser.ResponseV1Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Services.User.Actions.AuthenticateUser.ResponseV1.builder()
    }
    internal func toBuilder() -> Services.User.Actions.AuthenticateUser.ResponseV1Builder {
      return Services.User.Actions.AuthenticateUser.ResponseV1.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Services.User.Actions.AuthenticateUser.ResponseV1) -> Services.User.Actions.AuthenticateUser.ResponseV1Builder {
      return Services.User.Actions.AuthenticateUser.ResponseV1.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasUser {
        output += "\(indent) user {\n"
        user?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasToken {
        output += "\(indent) token: \(token) \n"
      }
      if hasNewUser {
        output += "\(indent) newUser: \(newUser) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasUser {
                if let hashValueuser = user?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuser
                }
            }
            if hasToken {
               hashCode = (hashCode &* 31) &+ token.hashValue
            }
            if hasNewUser {
               hashCode = (hashCode &* 31) &+ newUser.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Services.User.Actions.AuthenticateUser.ResponseV1"
    }
    override internal func className() -> String {
        return "Services.User.Actions.AuthenticateUser.ResponseV1"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Actions.AuthenticateUser.ResponseV1.self
    }
    //Meta information declaration end

  }

  final internal class ResponseV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.User.Actions.AuthenticateUser.ResponseV1

    required override internal init () {
       builderResult = Services.User.Actions.AuthenticateUser.ResponseV1()
       super.init()
    }
    var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    func setVersion(value:UInt32)-> Services.User.Actions.AuthenticateUser.ResponseV1Builder {
      self.version = value
      return self
    }
    internal func clearVersion() -> Services.User.Actions.AuthenticateUser.ResponseV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    var hasUser:Bool {
         get {
             return builderResult.hasUser
         }
    }
    var user:Services.User.Containers.User.UserV1! {
         get {
             return builderResult.user
         }
         set (value) {
             builderResult.hasUser = true
             builderResult.user = value
         }
    }
    func setUser(value:Services.User.Containers.User.UserV1!)-> Services.User.Actions.AuthenticateUser.ResponseV1Builder {
      self.user = value
      return self
    }
    internal func mergeUser(value:Services.User.Containers.User.UserV1) -> Services.User.Actions.AuthenticateUser.ResponseV1Builder {
      if (builderResult.hasUser) {
        builderResult.user = Services.User.Containers.User.UserV1.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
      } else {
        builderResult.user = value
      }
      builderResult.hasUser = true
      return self
    }
    internal func clearUser() -> Services.User.Actions.AuthenticateUser.ResponseV1Builder {
      builderResult.hasUser = false
      builderResult.user = nil
      return self
    }
    var hasToken:Bool {
         get {
              return builderResult.hasToken
         }
    }
    var token:String {
         get {
              return builderResult.token
         }
         set (value) {
             builderResult.hasToken = true
             builderResult.token = value
         }
    }
    func setToken(value:String)-> Services.User.Actions.AuthenticateUser.ResponseV1Builder {
      self.token = value
      return self
    }
    internal func clearToken() -> Services.User.Actions.AuthenticateUser.ResponseV1Builder{
         builderResult.hasToken = false
         builderResult.token = ""
         return self
    }
    var hasNewUser:Bool {
         get {
              return builderResult.hasNewUser
         }
    }
    var newUser:Bool {
         get {
              return builderResult.newUser
         }
         set (value) {
             builderResult.hasNewUser = true
             builderResult.newUser = value
         }
    }
    func setNewUser(value:Bool)-> Services.User.Actions.AuthenticateUser.ResponseV1Builder {
      self.newUser = value
      return self
    }
    internal func clearNewUser() -> Services.User.Actions.AuthenticateUser.ResponseV1Builder{
         builderResult.hasNewUser = false
         builderResult.newUser = false
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Services.User.Actions.AuthenticateUser.ResponseV1Builder {
      builderResult = Services.User.Actions.AuthenticateUser.ResponseV1()
      return self
    }
    internal override func clone() -> Services.User.Actions.AuthenticateUser.ResponseV1Builder {
      return Services.User.Actions.AuthenticateUser.ResponseV1.builderWithPrototype(builderResult)
    }
    internal override func build() -> Services.User.Actions.AuthenticateUser.ResponseV1 {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Services.User.Actions.AuthenticateUser.ResponseV1 {
      var returnMe:Services.User.Actions.AuthenticateUser.ResponseV1 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Services.User.Actions.AuthenticateUser.ResponseV1) -> Services.User.Actions.AuthenticateUser.ResponseV1Builder {
      if (other == Services.User.Actions.AuthenticateUser.ResponseV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if (other.hasUser) {
          mergeUser(other.user)
      }
      if other.hasToken {
           token = other.token
      }
      if other.hasNewUser {
           newUser = other.newUser
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.User.Actions.AuthenticateUser.ResponseV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Actions.AuthenticateUser.ResponseV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          var subBuilder:Services.User.Containers.User.UserV1Builder = Services.User.Containers.User.UserV1.builder()
          if hasUser {
            subBuilder.mergeFrom(user)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          user = subBuilder.buildPartial()

        case 26 :
          token = input.readString()

        case 32 :
          newUser = input.readBool()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
