// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file create_user.proto

import Foundation

public extension Services.User.Actions{ public struct CreateUser { }}

public func == (lhs: Services.User.Actions.CreateUser.RequestV1, rhs: Services.User.Actions.CreateUser.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
  fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.User.Actions.CreateUser.ResponseV1, rhs: Services.User.Actions.CreateUser.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.User.Actions.CreateUser {
  public struct CreateUserRoot {
    public static var sharedInstance : CreateUserRoot {
     struct Static {
         static let instance : CreateUserRoot = CreateUserRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.User.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasPassword:Bool = false
    public private(set) var password:String = ""

    public private(set) var hasEmail:Bool = false
    public private(set) var email:String = ""

    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasPassword {
        try output.writeString(1, value:password)
      }
      if hasEmail {
        try output.writeString(2, value:email)
      }
      if hasOrganizationId {
        try output.writeString(3, value:organizationId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasPassword {
        serialize_size += password.computeStringSize(1)
      }
      if hasEmail {
        serialize_size += email.computeStringSize(2)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.User.Actions.CreateUser.RequestV1> {
      var mergedArray = Array<Services.User.Actions.CreateUser.RequestV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.User.Actions.CreateUser.RequestV1? {
      return try Services.User.Actions.CreateUser.RequestV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.User.Actions.CreateUser.RequestV1 {
      return try Services.User.Actions.CreateUser.RequestV1.Builder().mergeFromData(data, extensionRegistry:Services.User.Actions.CreateUser.CreateUserRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.CreateUser.RequestV1 {
      return try Services.User.Actions.CreateUser.RequestV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.User.Actions.CreateUser.RequestV1 {
      return try Services.User.Actions.CreateUser.RequestV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.CreateUser.RequestV1 {
      return try Services.User.Actions.CreateUser.RequestV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Actions.CreateUser.RequestV1 {
      return try Services.User.Actions.CreateUser.RequestV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.CreateUser.RequestV1 {
      return try Services.User.Actions.CreateUser.RequestV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.User.Actions.CreateUser.RequestV1.Builder {
      return Services.User.Actions.CreateUser.RequestV1.classBuilder() as! Services.User.Actions.CreateUser.RequestV1.Builder
    }
    public func getBuilder() -> Services.User.Actions.CreateUser.RequestV1.Builder {
      return classBuilder() as! Services.User.Actions.CreateUser.RequestV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Actions.CreateUser.RequestV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Actions.CreateUser.RequestV1.Builder()
    }
    public func toBuilder() throws -> Services.User.Actions.CreateUser.RequestV1.Builder {
      return try Services.User.Actions.CreateUser.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Actions.CreateUser.RequestV1) throws -> Services.User.Actions.CreateUser.RequestV1.Builder {
      return try Services.User.Actions.CreateUser.RequestV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasPassword {
        output += "\(indent) password: \(password) \n"
      }
      if hasEmail {
        output += "\(indent) email: \(email) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasPassword {
               hashCode = (hashCode &* 31) &+ password.hashValue
            }
            if hasEmail {
               hashCode = (hashCode &* 31) &+ email.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Actions.CreateUser.RequestV1"
    }
    override public func className() -> String {
        return "Services.User.Actions.CreateUser.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Actions.CreateUser.RequestV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.User.Actions.CreateUser.RequestV1 = Services.User.Actions.CreateUser.RequestV1()
      public func getMessage() -> Services.User.Actions.CreateUser.RequestV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasPassword:Bool {
           get {
                return builderResult.hasPassword
           }
      }
      public var password:String {
           get {
                return builderResult.password
           }
           set (value) {
               builderResult.hasPassword = true
               builderResult.password = value
           }
      }
      public func setPassword(value:String) -> Services.User.Actions.CreateUser.RequestV1.Builder {
        self.password = value
        return self
      }
      public func clearPassword() -> Services.User.Actions.CreateUser.RequestV1.Builder{
           builderResult.hasPassword = false
           builderResult.password = ""
           return self
      }
      public var hasEmail:Bool {
           get {
                return builderResult.hasEmail
           }
      }
      public var email:String {
           get {
                return builderResult.email
           }
           set (value) {
               builderResult.hasEmail = true
               builderResult.email = value
           }
      }
      public func setEmail(value:String) -> Services.User.Actions.CreateUser.RequestV1.Builder {
        self.email = value
        return self
      }
      public func clearEmail() -> Services.User.Actions.CreateUser.RequestV1.Builder{
           builderResult.hasEmail = false
           builderResult.email = ""
           return self
      }
      public var hasOrganizationId:Bool {
           get {
                return builderResult.hasOrganizationId
           }
      }
      public var organizationId:String {
           get {
                return builderResult.organizationId
           }
           set (value) {
               builderResult.hasOrganizationId = true
               builderResult.organizationId = value
           }
      }
      public func setOrganizationId(value:String) -> Services.User.Actions.CreateUser.RequestV1.Builder {
        self.organizationId = value
        return self
      }
      public func clearOrganizationId() -> Services.User.Actions.CreateUser.RequestV1.Builder{
           builderResult.hasOrganizationId = false
           builderResult.organizationId = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.User.Actions.CreateUser.RequestV1.Builder {
        builderResult = Services.User.Actions.CreateUser.RequestV1()
        return self
      }
      public override func clone() throws -> Services.User.Actions.CreateUser.RequestV1.Builder {
        return try Services.User.Actions.CreateUser.RequestV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.User.Actions.CreateUser.RequestV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.User.Actions.CreateUser.RequestV1 {
        let returnMe:Services.User.Actions.CreateUser.RequestV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.User.Actions.CreateUser.RequestV1) throws -> Services.User.Actions.CreateUser.RequestV1.Builder {
        if other == Services.User.Actions.CreateUser.RequestV1() {
         return self
        }
        if other.hasPassword {
             password = other.password
        }
        if other.hasEmail {
             email = other.email
        }
        if other.hasOrganizationId {
             organizationId = other.organizationId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Actions.CreateUser.RequestV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.CreateUser.RequestV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            password = try input.readString()

          case 18 :
            email = try input.readString()

          case 26 :
            organizationId = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasUser:Bool = false
    public private(set) var user:Services.User.Containers.UserV1!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasUser {
        try output.writeMessage(1, value:user)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUser {
          if let varSizeuser = user?.computeMessageSize(1) {
              serialize_size += varSizeuser
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.User.Actions.CreateUser.ResponseV1> {
      var mergedArray = Array<Services.User.Actions.CreateUser.ResponseV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.User.Actions.CreateUser.ResponseV1? {
      return try Services.User.Actions.CreateUser.ResponseV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.User.Actions.CreateUser.ResponseV1 {
      return try Services.User.Actions.CreateUser.ResponseV1.Builder().mergeFromData(data, extensionRegistry:Services.User.Actions.CreateUser.CreateUserRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.CreateUser.ResponseV1 {
      return try Services.User.Actions.CreateUser.ResponseV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.User.Actions.CreateUser.ResponseV1 {
      return try Services.User.Actions.CreateUser.ResponseV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.CreateUser.ResponseV1 {
      return try Services.User.Actions.CreateUser.ResponseV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Actions.CreateUser.ResponseV1 {
      return try Services.User.Actions.CreateUser.ResponseV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.CreateUser.ResponseV1 {
      return try Services.User.Actions.CreateUser.ResponseV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.User.Actions.CreateUser.ResponseV1.Builder {
      return Services.User.Actions.CreateUser.ResponseV1.classBuilder() as! Services.User.Actions.CreateUser.ResponseV1.Builder
    }
    public func getBuilder() -> Services.User.Actions.CreateUser.ResponseV1.Builder {
      return classBuilder() as! Services.User.Actions.CreateUser.ResponseV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Actions.CreateUser.ResponseV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Actions.CreateUser.ResponseV1.Builder()
    }
    public func toBuilder() throws -> Services.User.Actions.CreateUser.ResponseV1.Builder {
      return try Services.User.Actions.CreateUser.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Actions.CreateUser.ResponseV1) throws -> Services.User.Actions.CreateUser.ResponseV1.Builder {
      return try Services.User.Actions.CreateUser.ResponseV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasUser {
        output += "\(indent) user {\n"
        try user?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUser {
                if let hashValueuser = user?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuser
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Actions.CreateUser.ResponseV1"
    }
    override public func className() -> String {
        return "Services.User.Actions.CreateUser.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Actions.CreateUser.ResponseV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.User.Actions.CreateUser.ResponseV1 = Services.User.Actions.CreateUser.ResponseV1()
      public func getMessage() -> Services.User.Actions.CreateUser.ResponseV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasUser:Bool {
           get {
               return builderResult.hasUser
           }
      }
      public var user:Services.User.Containers.UserV1! {
           get {
               if userBuilder_ != nil {
                  builderResult.user = userBuilder_.getMessage()
               }
               return builderResult.user
           }
           set (value) {
               builderResult.hasUser = true
               builderResult.user = value
           }
      }
      private var userBuilder_:Services.User.Containers.UserV1.Builder! {
           didSet {
              builderResult.hasUser = true
           }
      }
      public func getUserBuilder() -> Services.User.Containers.UserV1.Builder {
        if userBuilder_ == nil {
           userBuilder_ = Services.User.Containers.UserV1.Builder()
           builderResult.user = userBuilder_.getMessage()
           if user != nil {
              try! userBuilder_.mergeFrom(user)
           }
        }
        return userBuilder_
      }
      public func setUser(value:Services.User.Containers.UserV1!) -> Services.User.Actions.CreateUser.ResponseV1.Builder {
        self.user = value
        return self
      }
      public func mergeUser(value:Services.User.Containers.UserV1) throws -> Services.User.Actions.CreateUser.ResponseV1.Builder {
        if builderResult.hasUser {
          builderResult.user = try Services.User.Containers.UserV1.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
        } else {
          builderResult.user = value
        }
        builderResult.hasUser = true
        return self
      }
      public func clearUser() -> Services.User.Actions.CreateUser.ResponseV1.Builder {
        userBuilder_ = nil
        builderResult.hasUser = false
        builderResult.user = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.User.Actions.CreateUser.ResponseV1.Builder {
        builderResult = Services.User.Actions.CreateUser.ResponseV1()
        return self
      }
      public override func clone() throws -> Services.User.Actions.CreateUser.ResponseV1.Builder {
        return try Services.User.Actions.CreateUser.ResponseV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.User.Actions.CreateUser.ResponseV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.User.Actions.CreateUser.ResponseV1 {
        let returnMe:Services.User.Actions.CreateUser.ResponseV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.User.Actions.CreateUser.ResponseV1) throws -> Services.User.Actions.CreateUser.ResponseV1.Builder {
        if other == Services.User.Actions.CreateUser.ResponseV1() {
         return self
        }
        if (other.hasUser) {
            try mergeUser(other.user)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Actions.CreateUser.ResponseV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.CreateUser.ResponseV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:Services.User.Containers.UserV1.Builder = Services.User.Containers.UserV1.Builder()
            if hasUser {
              try subBuilder.mergeFrom(user)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            user = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
