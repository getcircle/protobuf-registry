// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file containers.proto

import Foundation

public extension Services.Media.Containers{}

public func == (lhs: Services.Media.Containers.UploadInstructionsV1, rhs: Services.Media.Containers.UploadInstructionsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasUploadId == rhs.hasUploadId) && (!lhs.hasUploadId || lhs.uploadId == rhs.uploadId)
  fieldCheck = fieldCheck && (lhs.hasUploadUrl == rhs.hasUploadUrl) && (!lhs.hasUploadUrl || lhs.uploadUrl == rhs.uploadUrl)
  fieldCheck = fieldCheck && (lhs.hasUploadKey == rhs.hasUploadKey) && (!lhs.hasUploadKey || lhs.uploadKey == rhs.uploadKey)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Media.Containers {
  public struct ContainersRoot {
    public static var sharedInstance : ContainersRoot {
     struct Static {
         static let instance : ContainersRoot = ContainersRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class UploadInstructionsV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasUploadId:Bool = false
    public private(set) var uploadId:String = ""

    public private(set) var hasUploadUrl:Bool = false
    public private(set) var uploadUrl:String = ""

    public private(set) var hasUploadKey:Bool = false
    public private(set) var uploadKey:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasUploadId {
        try output.writeString(2, value:uploadId)
      }
      if hasUploadUrl {
        try output.writeString(3, value:uploadUrl)
      }
      if hasUploadKey {
        try output.writeString(4, value:uploadKey)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasUploadId {
        serialize_size += uploadId.computeStringSize(2)
      }
      if hasUploadUrl {
        serialize_size += uploadUrl.computeStringSize(3)
      }
      if hasUploadKey {
        serialize_size += uploadKey.computeStringSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Media.Containers.UploadInstructionsV1> {
      var mergedArray = Array<Services.Media.Containers.UploadInstructionsV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Media.Containers.UploadInstructionsV1? {
      return try Services.Media.Containers.UploadInstructionsV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Media.Containers.UploadInstructionsV1 {
      return try Services.Media.Containers.UploadInstructionsV1.Builder().mergeFromData(data, extensionRegistry:Services.Media.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Media.Containers.UploadInstructionsV1 {
      return try Services.Media.Containers.UploadInstructionsV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Media.Containers.UploadInstructionsV1 {
      return try Services.Media.Containers.UploadInstructionsV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Media.Containers.UploadInstructionsV1 {
      return try Services.Media.Containers.UploadInstructionsV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Media.Containers.UploadInstructionsV1 {
      return try Services.Media.Containers.UploadInstructionsV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Media.Containers.UploadInstructionsV1 {
      return try Services.Media.Containers.UploadInstructionsV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Media.Containers.UploadInstructionsV1.Builder {
      return Services.Media.Containers.UploadInstructionsV1.classBuilder() as! Services.Media.Containers.UploadInstructionsV1.Builder
    }
    public func getBuilder() -> Services.Media.Containers.UploadInstructionsV1.Builder {
      return classBuilder() as! Services.Media.Containers.UploadInstructionsV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Media.Containers.UploadInstructionsV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Media.Containers.UploadInstructionsV1.Builder()
    }
    public func toBuilder() throws -> Services.Media.Containers.UploadInstructionsV1.Builder {
      return try Services.Media.Containers.UploadInstructionsV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Media.Containers.UploadInstructionsV1) throws -> Services.Media.Containers.UploadInstructionsV1.Builder {
      return try Services.Media.Containers.UploadInstructionsV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasUploadId {
        output += "\(indent) uploadId: \(uploadId) \n"
      }
      if hasUploadUrl {
        output += "\(indent) uploadUrl: \(uploadUrl) \n"
      }
      if hasUploadKey {
        output += "\(indent) uploadKey: \(uploadKey) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasUploadId {
               hashCode = (hashCode &* 31) &+ uploadId.hashValue
            }
            if hasUploadUrl {
               hashCode = (hashCode &* 31) &+ uploadUrl.hashValue
            }
            if hasUploadKey {
               hashCode = (hashCode &* 31) &+ uploadKey.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Media.Containers.UploadInstructionsV1"
    }
    override public func className() -> String {
        return "Services.Media.Containers.UploadInstructionsV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Media.Containers.UploadInstructionsV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Media.Containers.UploadInstructionsV1 = Services.Media.Containers.UploadInstructionsV1()
      public func getMessage() -> Services.Media.Containers.UploadInstructionsV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Media.Containers.UploadInstructionsV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Media.Containers.UploadInstructionsV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasUploadId:Bool {
           get {
                return builderResult.hasUploadId
           }
      }
      public var uploadId:String {
           get {
                return builderResult.uploadId
           }
           set (value) {
               builderResult.hasUploadId = true
               builderResult.uploadId = value
           }
      }
      public func setUploadId(value:String) -> Services.Media.Containers.UploadInstructionsV1.Builder {
        self.uploadId = value
        return self
      }
      public func clearUploadId() -> Services.Media.Containers.UploadInstructionsV1.Builder{
           builderResult.hasUploadId = false
           builderResult.uploadId = ""
           return self
      }
      public var hasUploadUrl:Bool {
           get {
                return builderResult.hasUploadUrl
           }
      }
      public var uploadUrl:String {
           get {
                return builderResult.uploadUrl
           }
           set (value) {
               builderResult.hasUploadUrl = true
               builderResult.uploadUrl = value
           }
      }
      public func setUploadUrl(value:String) -> Services.Media.Containers.UploadInstructionsV1.Builder {
        self.uploadUrl = value
        return self
      }
      public func clearUploadUrl() -> Services.Media.Containers.UploadInstructionsV1.Builder{
           builderResult.hasUploadUrl = false
           builderResult.uploadUrl = ""
           return self
      }
      public var hasUploadKey:Bool {
           get {
                return builderResult.hasUploadKey
           }
      }
      public var uploadKey:String {
           get {
                return builderResult.uploadKey
           }
           set (value) {
               builderResult.hasUploadKey = true
               builderResult.uploadKey = value
           }
      }
      public func setUploadKey(value:String) -> Services.Media.Containers.UploadInstructionsV1.Builder {
        self.uploadKey = value
        return self
      }
      public func clearUploadKey() -> Services.Media.Containers.UploadInstructionsV1.Builder{
           builderResult.hasUploadKey = false
           builderResult.uploadKey = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Media.Containers.UploadInstructionsV1.Builder {
        builderResult = Services.Media.Containers.UploadInstructionsV1()
        return self
      }
      public override func clone() throws -> Services.Media.Containers.UploadInstructionsV1.Builder {
        return try Services.Media.Containers.UploadInstructionsV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Media.Containers.UploadInstructionsV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Media.Containers.UploadInstructionsV1 {
        let returnMe:Services.Media.Containers.UploadInstructionsV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Media.Containers.UploadInstructionsV1) throws -> Services.Media.Containers.UploadInstructionsV1.Builder {
        if other == Services.Media.Containers.UploadInstructionsV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasUploadId {
             uploadId = other.uploadId
        }
        if other.hasUploadUrl {
             uploadUrl = other.uploadUrl
        }
        if other.hasUploadKey {
             uploadKey = other.uploadKey
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Media.Containers.UploadInstructionsV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Media.Containers.UploadInstructionsV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            uploadId = try input.readString()

          case 26 :
            uploadUrl = try input.readString()

          case 34 :
            uploadKey = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
