// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
import ProtocolBuffers

internal struct IdentityRoot {
  internal static var sharedInstance : IdentityRoot {
   struct Static {
       static let instance : IdentityRoot = IdentityRoot()
   }
   return Static.instance
  }
  var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  internal func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

internal func == (lhs: Identity, rhs: Identity) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  fieldCheck = fieldCheck && (lhs.hasFirstName == rhs.hasFirstName) && (!lhs.hasFirstName || lhs.firstName == rhs.firstName)
  fieldCheck = fieldCheck && (lhs.hasLastName == rhs.hasLastName) && (!lhs.hasLastName || lhs.lastName == rhs.lastName)
  fieldCheck = fieldCheck && (lhs.hasTypes == rhs.hasTypes) && (!lhs.hasTypes || lhs.types == rhs.types)
  fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
  fieldCheck = fieldCheck && (lhs.hasPhoneNumber == rhs.hasPhoneNumber) && (!lhs.hasPhoneNumber || lhs.phoneNumber == rhs.phoneNumber)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final internal class Identity : GeneratedMessage {


    //Enum type declaration start 

    internal enum Types:Int32 {
      case Internal = 0

      internal static func IsValidValue(value:Int32) ->Bool {
          if let check = Types(rawValue:value) {
              return true
          }
          return false
      }
    }



    //Enum type declaration end 

  private(set) var hasId:Bool = false
  private(set) var id:String = ""

  private(set) var hasUserId:Bool = false
  private(set) var userId:String = ""

  private(set) var hasFirstName:Bool = false
  private(set) var firstName:String = ""

  private(set) var hasLastName:Bool = false
  private(set) var lastName:String = ""

  private(set) var types:Identity.Types = Identity.Types.Internal
  private(set) var hasTypes:Bool = false
  private(set) var hasEmail:Bool = false
  private(set) var email:String = ""

  private(set) var hasPhoneNumber:Bool = false
  private(set) var phoneNumber:String = ""

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasId {
      output.writeString(1, value:id)
    }
    if hasUserId {
      output.writeString(2, value:userId)
    }
    if hasFirstName {
      output.writeString(3, value:firstName)
    }
    if hasLastName {
      output.writeString(4, value:lastName)
    }
    if hasTypes {
      output.writeEnum(5, value:types.rawValue)
    }
    if hasEmail {
      output.writeString(6, value:email)
    }
    if hasPhoneNumber {
      output.writeString(7, value:phoneNumber)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasId {
      size += WireFormat.computeStringSize(1, value:id)
    }
    if hasUserId {
      size += WireFormat.computeStringSize(2, value:userId)
    }
    if hasFirstName {
      size += WireFormat.computeStringSize(3, value:firstName)
    }
    if hasLastName {
      size += WireFormat.computeStringSize(4, value:lastName)
    }
    if (hasTypes) {
      size += WireFormat.computeEnumSize(5, value:types.rawValue)
    }
    if hasEmail {
      size += WireFormat.computeStringSize(6, value:email)
    }
    if hasPhoneNumber {
      size += WireFormat.computeStringSize(7, value:phoneNumber)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> Identity {
    return Identity.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> Identity {
    return Identity.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> Identity {
    return Identity.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Identity {
    return Identity.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> Identity {
    return Identity.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Identity {
    return Identity.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> IdentityBuilder {
    return Identity.classBuilder() as IdentityBuilder
  }
  internal func builder() -> IdentityBuilder {
    return classBuilder() as IdentityBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return IdentityBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return Identity.builder()
  }
  internal func toBuilder() -> IdentityBuilder {
    return Identity.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:Identity) -> IdentityBuilder {
    return Identity.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasId {
      output += "\(indent) id: \(id) \n"
    }
    if hasUserId {
      output += "\(indent) userId: \(userId) \n"
    }
    if hasFirstName {
      output += "\(indent) firstName: \(firstName) \n"
    }
    if hasLastName {
      output += "\(indent) lastName: \(lastName) \n"
    }
    if (hasTypes) {
      output += "\(indent) types: \(types.rawValue)\n"
    }
    if hasEmail {
      output += "\(indent) email: \(email) \n"
    }
    if hasPhoneNumber {
      output += "\(indent) phoneNumber: \(phoneNumber) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasId {
             hashCode = (hashCode &* 31) &+ id.hashValue
          }
          if hasUserId {
             hashCode = (hashCode &* 31) &+ userId.hashValue
          }
          if hasFirstName {
             hashCode = (hashCode &* 31) &+ firstName.hashValue
          }
          if hasLastName {
             hashCode = (hashCode &* 31) &+ lastName.hashValue
          }
          if hasTypes {
             hashCode = (hashCode &* 31) &+ Int(types.rawValue)
          }
          if hasEmail {
             hashCode = (hashCode &* 31) &+ email.hashValue
          }
          if hasPhoneNumber {
             hashCode = (hashCode &* 31) &+ phoneNumber.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "Identity"
  }
  override internal func className() -> String {
      return "Identity"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return Identity.self
  }


  //Meta information declaration end

}

final internal class IdentityBuilder : GeneratedMessageBuilder {
  private var builderResult:Identity

  required override internal init () {
     builderResult = Identity()
     super.init()
  }
  var hasId:Bool {
       get {
            return builderResult.hasId
       }
  }
  var id:String {
       get {
            return builderResult.id
       }
       set (value) {
           builderResult.hasId = true
           builderResult.id = value
       }
  }
  internal func clearId() -> IdentityBuilder{
       builderResult.hasId = false
       builderResult.id = ""
       return self
  }
  var hasUserId:Bool {
       get {
            return builderResult.hasUserId
       }
  }
  var userId:String {
       get {
            return builderResult.userId
       }
       set (value) {
           builderResult.hasUserId = true
           builderResult.userId = value
       }
  }
  internal func clearUserId() -> IdentityBuilder{
       builderResult.hasUserId = false
       builderResult.userId = ""
       return self
  }
  var hasFirstName:Bool {
       get {
            return builderResult.hasFirstName
       }
  }
  var firstName:String {
       get {
            return builderResult.firstName
       }
       set (value) {
           builderResult.hasFirstName = true
           builderResult.firstName = value
       }
  }
  internal func clearFirstName() -> IdentityBuilder{
       builderResult.hasFirstName = false
       builderResult.firstName = ""
       return self
  }
  var hasLastName:Bool {
       get {
            return builderResult.hasLastName
       }
  }
  var lastName:String {
       get {
            return builderResult.lastName
       }
       set (value) {
           builderResult.hasLastName = true
           builderResult.lastName = value
       }
  }
  internal func clearLastName() -> IdentityBuilder{
       builderResult.hasLastName = false
       builderResult.lastName = ""
       return self
  }
    var hasTypes:Bool{
        get {
            return builderResult.hasTypes
        }
    }
    var types:Identity.Types {
        get {
            return builderResult.types
        }
        set (value) {
            builderResult.hasTypes = true
            builderResult.types = value
        }
    }
    internal func clearTypes() -> IdentityBuilder {
       builderResult.hasTypes = false
       builderResult.types = .Internal
       return self
    }
  var hasEmail:Bool {
       get {
            return builderResult.hasEmail
       }
  }
  var email:String {
       get {
            return builderResult.email
       }
       set (value) {
           builderResult.hasEmail = true
           builderResult.email = value
       }
  }
  internal func clearEmail() -> IdentityBuilder{
       builderResult.hasEmail = false
       builderResult.email = ""
       return self
  }
  var hasPhoneNumber:Bool {
       get {
            return builderResult.hasPhoneNumber
       }
  }
  var phoneNumber:String {
       get {
            return builderResult.phoneNumber
       }
       set (value) {
           builderResult.hasPhoneNumber = true
           builderResult.phoneNumber = value
       }
  }
  internal func clearPhoneNumber() -> IdentityBuilder{
       builderResult.hasPhoneNumber = false
       builderResult.phoneNumber = ""
       return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> IdentityBuilder {
    builderResult = Identity()
    return self
  }
  internal override func clone() -> IdentityBuilder {
    return Identity.builderWithPrototype(builderResult)
  }
  internal override func build() -> Identity {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> Identity {
    var returnMe:Identity = builderResult
    return returnMe
  }
  internal func mergeFrom(other:Identity) -> IdentityBuilder {
    if (other == Identity()) {
     return self
    }
    if other.hasId {
         id = other.id
    }
    if other.hasUserId {
         userId = other.userId
    }
    if other.hasFirstName {
         firstName = other.firstName
    }
    if other.hasLastName {
         lastName = other.lastName
    }
    if other.hasTypes {
         types = other.types
    }
    if other.hasEmail {
         email = other.email
    }
    if other.hasPhoneNumber {
         phoneNumber = other.phoneNumber
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IdentityBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        id = input.readString()

      case 18 :
        userId = input.readString()

      case 26 :
        firstName = input.readString()

      case 34 :
        lastName = input.readString()

      case 40 :
        let valueInttypes = input.readEnum()
        if let enumstypes = Identity.Types(rawValue:valueInttypes){
             types = enumstypes
        } else {
             unknownFieldsBuilder.mergeVarintField(5, value:Int64(valueInttypes))
        }

      case 50 :
        email = input.readString()

      case 58 :
        phoneNumber = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


internal extension Identity {
    class func parseFromNSData(data:NSData) -> Identity {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return Identity.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> Identity {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return Identity.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
