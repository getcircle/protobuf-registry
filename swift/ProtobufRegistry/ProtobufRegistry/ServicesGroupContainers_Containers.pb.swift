// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.Group.Containers{}

public func == (lhs: Services.Group.Containers.GroupV1, rhs: Services.Group.Containers.GroupV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasDisplayName == rhs.hasDisplayName) && (!lhs.hasDisplayName || lhs.displayName == rhs.displayName)
  fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
  fieldCheck = fieldCheck && (lhs.aliases == rhs.aliases)
  fieldCheck = fieldCheck && (lhs.hasMembersCount == rhs.hasMembersCount) && (!lhs.hasMembersCount || lhs.membersCount == rhs.membersCount)
  fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
  fieldCheck = fieldCheck && (lhs.hasCanJoin == rhs.hasCanJoin) && (!lhs.hasCanJoin || lhs.canJoin == rhs.canJoin)
  fieldCheck = fieldCheck && (lhs.hasIsMember == rhs.hasIsMember) && (!lhs.hasIsMember || lhs.isMember == rhs.isMember)
  fieldCheck = fieldCheck && (lhs.hasCanRequest == rhs.hasCanRequest) && (!lhs.hasCanRequest || lhs.canRequest == rhs.canRequest)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Group.Containers.GroupSettingsV1, rhs: Services.Group.Containers.GroupSettingsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasGroupId == rhs.hasGroupId) && (!lhs.hasGroupId || lhs.groupId == rhs.groupId)
  fieldCheck = fieldCheck && (lhs.hasWhoCanJoin == rhs.hasWhoCanJoin) && (!lhs.hasWhoCanJoin || lhs.whoCanJoin == rhs.whoCanJoin)
  fieldCheck = fieldCheck && (lhs.hasWhoCanViewMembership == rhs.hasWhoCanViewMembership) && (!lhs.hasWhoCanViewMembership || lhs.whoCanViewMembership == rhs.whoCanViewMembership)
  fieldCheck = fieldCheck && (lhs.hasWhoCanViewGroup == rhs.hasWhoCanViewGroup) && (!lhs.hasWhoCanViewGroup || lhs.whoCanViewGroup == rhs.whoCanViewGroup)
  fieldCheck = fieldCheck && (lhs.hasWhoCanInvite == rhs.hasWhoCanInvite) && (!lhs.hasWhoCanInvite || lhs.whoCanInvite == rhs.whoCanInvite)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Group.Containers.MemberV1, rhs: Services.Group.Containers.MemberV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasProfile == rhs.hasProfile) && (!lhs.hasProfile || lhs.profile == rhs.profile)
  fieldCheck = fieldCheck && (lhs.hasRole == rhs.hasRole) && (!lhs.hasRole || lhs.role == rhs.role)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.Group.Containers {
  public struct ContainersRoot {
    public static var sharedInstance : ContainersRoot {
     struct Static {
         static let instance : ContainersRoot = ContainersRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Group.Containers.Permissions.WhoCanJoin.WhoCanJoinRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Group.Containers.Permissions.WhoCanViewMembership.WhoCanViewMembershipRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Group.Containers.Permissions.WhoCanViewGroup.WhoCanViewGroupRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Group.Containers.Permissions.WhoCanInvite.WhoCanInviteRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Profile.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  public enum GroupProviderV1:Int32 {
    case Google = 0

  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum RoleV1:Int32 {
    case Owner = 0
    case Manager = 1
    case Member = 2

  }

  //Enum type declaration end 

  final public class GroupV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "email": return email
           case "name": return name
           case "displayName": return displayName
           case "description_": return description_
           case "membersCount": return membersCount
           case "provider": return self.provider
           case "canJoin": return canJoin
           case "isMember": return isMember
           case "canRequest": return canRequest
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasEmail:Bool = false
    public private(set) var email:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasDisplayName:Bool = false
    public private(set) var displayName:String = ""

    public private(set) var hasDescription:Bool = false
    public private(set) var description_:String = ""

    public private(set) var hasMembersCount:Bool = false
    public private(set) var membersCount:UInt32 = UInt32(0)

    public private(set) var provider:Services.Group.Containers.GroupProviderV1 = Services.Group.Containers.GroupProviderV1.Google
    public private(set) var hasProvider:Bool = false
    public private(set) var hasCanJoin:Bool = false
    public private(set) var canJoin:Bool = false

    public private(set) var hasIsMember:Bool = false
    public private(set) var isMember:Bool = false

    public private(set) var hasCanRequest:Bool = false
    public private(set) var canRequest:Bool = false

    public private(set) var aliases:Array<String> = Array<String>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasEmail {
        output.writeString(3, value:email)
      }
      if hasName {
        output.writeString(4, value:name)
      }
      if hasDisplayName {
        output.writeString(5, value:displayName)
      }
      if hasDescription {
        output.writeString(6, value:description_)
      }
      if !aliases.isEmpty {
        for oneValuealiases in aliases {
          output.writeString(7, value:oneValuealiases)
        }
      }
      if hasMembersCount {
        output.writeUInt32(8, value:membersCount)
      }
      if hasProvider {
        output.writeEnum(9, value:provider.rawValue)
      }
      if hasCanJoin {
        output.writeBool(10, value:canJoin)
      }
      if hasIsMember {
        output.writeBool(11, value:isMember)
      }
      if hasCanRequest {
        output.writeBool(12, value:canRequest)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasEmail {
        serialize_size += email.computeStringSize(3)
      }
      if hasName {
        serialize_size += name.computeStringSize(4)
      }
      if hasDisplayName {
        serialize_size += displayName.computeStringSize(5)
      }
      if hasDescription {
        serialize_size += description_.computeStringSize(6)
      }
      var dataSizeAliases:Int32 = 0
      for oneValuealiases in aliases {
          dataSizeAliases += oneValuealiases.computeStringSizeNoTag()
      }
      serialize_size += dataSizeAliases
      serialize_size += 1 * Int32(aliases.count)
      if hasMembersCount {
        serialize_size += membersCount.computeUInt32Size(8)
      }
      if (hasProvider) {
        serialize_size += provider.rawValue.computeEnumSize(9)
      }
      if hasCanJoin {
        serialize_size += canJoin.computeBoolSize(10)
      }
      if hasIsMember {
        serialize_size += isMember.computeBoolSize(11)
      }
      if hasCanRequest {
        serialize_size += canRequest.computeBoolSize(12)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Group.Containers.GroupV1 {
      return Services.Group.Containers.GroupV1.builder().mergeFromData(data, extensionRegistry:Services.Group.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Group.Containers.GroupV1 {
      return Services.Group.Containers.GroupV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Group.Containers.GroupV1 {
      return Services.Group.Containers.GroupV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Group.Containers.GroupV1 {
      return Services.Group.Containers.GroupV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Group.Containers.GroupV1 {
      return Services.Group.Containers.GroupV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Group.Containers.GroupV1 {
      return Services.Group.Containers.GroupV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Group.Containers.GroupV1Builder {
      return Services.Group.Containers.GroupV1.classBuilder() as! Services.Group.Containers.GroupV1Builder
    }
    public func builder() -> Services.Group.Containers.GroupV1Builder {
      return classBuilder() as! Services.Group.Containers.GroupV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Group.Containers.GroupV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Group.Containers.GroupV1.builder()
    }
    public func toBuilder() -> Services.Group.Containers.GroupV1Builder {
      return Services.Group.Containers.GroupV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Group.Containers.GroupV1) -> Services.Group.Containers.GroupV1Builder {
      return Services.Group.Containers.GroupV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasEmail {
        output += "\(indent) email: \(email) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasDisplayName {
        output += "\(indent) displayName: \(displayName) \n"
      }
      if hasDescription {
        output += "\(indent) description_: \(description_) \n"
      }
      var aliasesElementIndex:Int = 0
      for oneValuealiases in aliases  {
          output += "\(indent) aliases[\(aliasesElementIndex)]: \(oneValuealiases)\n"
          aliasesElementIndex++
      }
      if hasMembersCount {
        output += "\(indent) membersCount: \(membersCount) \n"
      }
      if (hasProvider) {
        output += "\(indent) provider: \(provider.rawValue)\n"
      }
      if hasCanJoin {
        output += "\(indent) canJoin: \(canJoin) \n"
      }
      if hasIsMember {
        output += "\(indent) isMember: \(isMember) \n"
      }
      if hasCanRequest {
        output += "\(indent) canRequest: \(canRequest) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasEmail {
               hashCode = (hashCode &* 31) &+ email.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasDisplayName {
               hashCode = (hashCode &* 31) &+ displayName.hashValue
            }
            if hasDescription {
               hashCode = (hashCode &* 31) &+ description_.hashValue
            }
            for oneValuealiases in aliases {
                hashCode = (hashCode &* 31) &+ oneValuealiases.hashValue
            }
            if hasMembersCount {
               hashCode = (hashCode &* 31) &+ membersCount.hashValue
            }
            if hasProvider {
               hashCode = (hashCode &* 31) &+ Int(provider.rawValue)
            }
            if hasCanJoin {
               hashCode = (hashCode &* 31) &+ canJoin.hashValue
            }
            if hasIsMember {
               hashCode = (hashCode &* 31) &+ isMember.hashValue
            }
            if hasCanRequest {
               hashCode = (hashCode &* 31) &+ canRequest.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Group.Containers.GroupV1"
    }
    override public func className() -> String {
        return "Services.Group.Containers.GroupV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Group.Containers.GroupV1.self
    }
    //Meta information declaration end

  }

  final public class GroupV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Group.Containers.GroupV1

    required override public init () {
       builderResult = Services.Group.Containers.GroupV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Group.Containers.GroupV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Group.Containers.GroupV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Group.Containers.GroupV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Group.Containers.GroupV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasEmail:Bool {
         get {
              return builderResult.hasEmail
         }
    }
    public var email:String {
         get {
              return builderResult.email
         }
         set (value) {
             builderResult.hasEmail = true
             builderResult.email = value
         }
    }
    public func setEmail(value:String)-> Services.Group.Containers.GroupV1Builder {
      self.email = value
      return self
    }
    public func clearEmail() -> Services.Group.Containers.GroupV1Builder{
         builderResult.hasEmail = false
         builderResult.email = ""
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String)-> Services.Group.Containers.GroupV1Builder {
      self.name = value
      return self
    }
    public func clearName() -> Services.Group.Containers.GroupV1Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasDisplayName:Bool {
         get {
              return builderResult.hasDisplayName
         }
    }
    public var displayName:String {
         get {
              return builderResult.displayName
         }
         set (value) {
             builderResult.hasDisplayName = true
             builderResult.displayName = value
         }
    }
    public func setDisplayName(value:String)-> Services.Group.Containers.GroupV1Builder {
      self.displayName = value
      return self
    }
    public func clearDisplayName() -> Services.Group.Containers.GroupV1Builder{
         builderResult.hasDisplayName = false
         builderResult.displayName = ""
         return self
    }
    public var hasDescription:Bool {
         get {
              return builderResult.hasDescription
         }
    }
    public var description_:String {
         get {
              return builderResult.description_
         }
         set (value) {
             builderResult.hasDescription = true
             builderResult.description_ = value
         }
    }
    public func setDescription(value:String)-> Services.Group.Containers.GroupV1Builder {
      self.description_ = value
      return self
    }
    public func clearDescription() -> Services.Group.Containers.GroupV1Builder{
         builderResult.hasDescription = false
         builderResult.description_ = ""
         return self
    }
    public var aliases:Array<String> {
         get {
             return builderResult.aliases
         }
         set (array) {
             builderResult.aliases = array
         }
    }
    public func setAliases(value:Array<String>)-> Services.Group.Containers.GroupV1Builder {
      self.aliases = value
      return self
    }
    public func clearAliases() -> Services.Group.Containers.GroupV1Builder {
       builderResult.aliases.removeAll(keepCapacity: false)
       return self
    }
    public var hasMembersCount:Bool {
         get {
              return builderResult.hasMembersCount
         }
    }
    public var membersCount:UInt32 {
         get {
              return builderResult.membersCount
         }
         set (value) {
             builderResult.hasMembersCount = true
             builderResult.membersCount = value
         }
    }
    public func setMembersCount(value:UInt32)-> Services.Group.Containers.GroupV1Builder {
      self.membersCount = value
      return self
    }
    public func clearMembersCount() -> Services.Group.Containers.GroupV1Builder{
         builderResult.hasMembersCount = false
         builderResult.membersCount = UInt32(0)
         return self
    }
      public var hasProvider:Bool{
          get {
              return builderResult.hasProvider
          }
      }
      public var provider:Services.Group.Containers.GroupProviderV1 {
          get {
              return builderResult.provider
          }
          set (value) {
              builderResult.hasProvider = true
              builderResult.provider = value
          }
      }
      public func setProvider(value:Services.Group.Containers.GroupProviderV1)-> Services.Group.Containers.GroupV1Builder {
        self.provider = value
        return self
      }
      public func clearProvider() -> Services.Group.Containers.GroupV1Builder {
         builderResult.hasProvider = false
         builderResult.provider = .Google
         return self
      }
    public var hasCanJoin:Bool {
         get {
              return builderResult.hasCanJoin
         }
    }
    public var canJoin:Bool {
         get {
              return builderResult.canJoin
         }
         set (value) {
             builderResult.hasCanJoin = true
             builderResult.canJoin = value
         }
    }
    public func setCanJoin(value:Bool)-> Services.Group.Containers.GroupV1Builder {
      self.canJoin = value
      return self
    }
    public func clearCanJoin() -> Services.Group.Containers.GroupV1Builder{
         builderResult.hasCanJoin = false
         builderResult.canJoin = false
         return self
    }
    public var hasIsMember:Bool {
         get {
              return builderResult.hasIsMember
         }
    }
    public var isMember:Bool {
         get {
              return builderResult.isMember
         }
         set (value) {
             builderResult.hasIsMember = true
             builderResult.isMember = value
         }
    }
    public func setIsMember(value:Bool)-> Services.Group.Containers.GroupV1Builder {
      self.isMember = value
      return self
    }
    public func clearIsMember() -> Services.Group.Containers.GroupV1Builder{
         builderResult.hasIsMember = false
         builderResult.isMember = false
         return self
    }
    public var hasCanRequest:Bool {
         get {
              return builderResult.hasCanRequest
         }
    }
    public var canRequest:Bool {
         get {
              return builderResult.canRequest
         }
         set (value) {
             builderResult.hasCanRequest = true
             builderResult.canRequest = value
         }
    }
    public func setCanRequest(value:Bool)-> Services.Group.Containers.GroupV1Builder {
      self.canRequest = value
      return self
    }
    public func clearCanRequest() -> Services.Group.Containers.GroupV1Builder{
         builderResult.hasCanRequest = false
         builderResult.canRequest = false
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Group.Containers.GroupV1Builder {
      builderResult = Services.Group.Containers.GroupV1()
      return self
    }
    public override func clone() -> Services.Group.Containers.GroupV1Builder {
      return Services.Group.Containers.GroupV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Group.Containers.GroupV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Group.Containers.GroupV1 {
      var returnMe:Services.Group.Containers.GroupV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Group.Containers.GroupV1) -> Services.Group.Containers.GroupV1Builder {
      if (other == Services.Group.Containers.GroupV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasEmail {
           email = other.email
      }
      if other.hasName {
           name = other.name
      }
      if other.hasDisplayName {
           displayName = other.displayName
      }
      if other.hasDescription {
           description_ = other.description_
      }
      if !other.aliases.isEmpty {
          builderResult.aliases += other.aliases
      }
      if other.hasMembersCount {
           membersCount = other.membersCount
      }
      if other.hasProvider {
           provider = other.provider
      }
      if other.hasCanJoin {
           canJoin = other.canJoin
      }
      if other.hasIsMember {
           isMember = other.isMember
      }
      if other.hasCanRequest {
           canRequest = other.canRequest
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Group.Containers.GroupV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Group.Containers.GroupV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          email = input.readString()

        case 34 :
          name = input.readString()

        case 42 :
          displayName = input.readString()

        case 50 :
          description_ = input.readString()

        case 58 :
          aliases += [input.readString()]

        case 64 :
          membersCount = input.readUInt32()

        case 72 :
          let valueIntprovider = input.readEnum()
          if let enumsprovider = Services.Group.Containers.GroupProviderV1(rawValue:valueIntprovider){
               provider = enumsprovider
          } else {
               unknownFieldsBuilder.mergeVarintField(9, value:Int64(valueIntprovider))
          }

        case 80 :
          canJoin = input.readBool()

        case 88 :
          isMember = input.readBool()

        case 96 :
          canRequest = input.readBool()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class GroupSettingsV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "groupId": return groupId
           case "whoCanJoin": return self.whoCanJoin
           case "whoCanViewMembership": return self.whoCanViewMembership
           case "whoCanViewGroup": return self.whoCanViewGroup
           case "whoCanInvite": return self.whoCanInvite
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasGroupId:Bool = false
    public private(set) var groupId:String = ""

    public private(set) var whoCanJoin:Services.Group.Containers.Permissions.WhoCanJoin.WhoCanJoinPermissionsV1 = Services.Group.Containers.Permissions.WhoCanJoin.WhoCanJoinPermissionsV1.Anyone
    public private(set) var hasWhoCanJoin:Bool = false
    public private(set) var whoCanViewMembership:Services.Group.Containers.Permissions.WhoCanViewMembership.WhoCanViewMembershipPermissionsV1 = Services.Group.Containers.Permissions.WhoCanViewMembership.WhoCanViewMembershipPermissionsV1.AllInDomain
    public private(set) var hasWhoCanViewMembership:Bool = false
    public private(set) var whoCanViewGroup:Services.Group.Containers.Permissions.WhoCanViewGroup.WhoCanViewGroupPermissionsV1 = Services.Group.Containers.Permissions.WhoCanViewGroup.WhoCanViewGroupPermissionsV1.Anyone
    public private(set) var hasWhoCanViewGroup:Bool = false
    public private(set) var whoCanInvite:Services.Group.Containers.Permissions.WhoCanInvite.WhoCanInvitePermissionsV1 = Services.Group.Containers.Permissions.WhoCanInvite.WhoCanInvitePermissionsV1.AllMembers
    public private(set) var hasWhoCanInvite:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasGroupId {
        output.writeString(3, value:groupId)
      }
      if hasWhoCanJoin {
        output.writeEnum(4, value:whoCanJoin.rawValue)
      }
      if hasWhoCanViewMembership {
        output.writeEnum(5, value:whoCanViewMembership.rawValue)
      }
      if hasWhoCanViewGroup {
        output.writeEnum(6, value:whoCanViewGroup.rawValue)
      }
      if hasWhoCanInvite {
        output.writeEnum(7, value:whoCanInvite.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasGroupId {
        serialize_size += groupId.computeStringSize(3)
      }
      if (hasWhoCanJoin) {
        serialize_size += whoCanJoin.rawValue.computeEnumSize(4)
      }
      if (hasWhoCanViewMembership) {
        serialize_size += whoCanViewMembership.rawValue.computeEnumSize(5)
      }
      if (hasWhoCanViewGroup) {
        serialize_size += whoCanViewGroup.rawValue.computeEnumSize(6)
      }
      if (hasWhoCanInvite) {
        serialize_size += whoCanInvite.rawValue.computeEnumSize(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Group.Containers.GroupSettingsV1 {
      return Services.Group.Containers.GroupSettingsV1.builder().mergeFromData(data, extensionRegistry:Services.Group.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Group.Containers.GroupSettingsV1 {
      return Services.Group.Containers.GroupSettingsV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Group.Containers.GroupSettingsV1 {
      return Services.Group.Containers.GroupSettingsV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Group.Containers.GroupSettingsV1 {
      return Services.Group.Containers.GroupSettingsV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Group.Containers.GroupSettingsV1 {
      return Services.Group.Containers.GroupSettingsV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Group.Containers.GroupSettingsV1 {
      return Services.Group.Containers.GroupSettingsV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Group.Containers.GroupSettingsV1Builder {
      return Services.Group.Containers.GroupSettingsV1.classBuilder() as! Services.Group.Containers.GroupSettingsV1Builder
    }
    public func builder() -> Services.Group.Containers.GroupSettingsV1Builder {
      return classBuilder() as! Services.Group.Containers.GroupSettingsV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Group.Containers.GroupSettingsV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Group.Containers.GroupSettingsV1.builder()
    }
    public func toBuilder() -> Services.Group.Containers.GroupSettingsV1Builder {
      return Services.Group.Containers.GroupSettingsV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Group.Containers.GroupSettingsV1) -> Services.Group.Containers.GroupSettingsV1Builder {
      return Services.Group.Containers.GroupSettingsV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasGroupId {
        output += "\(indent) groupId: \(groupId) \n"
      }
      if (hasWhoCanJoin) {
        output += "\(indent) whoCanJoin: \(whoCanJoin.rawValue)\n"
      }
      if (hasWhoCanViewMembership) {
        output += "\(indent) whoCanViewMembership: \(whoCanViewMembership.rawValue)\n"
      }
      if (hasWhoCanViewGroup) {
        output += "\(indent) whoCanViewGroup: \(whoCanViewGroup.rawValue)\n"
      }
      if (hasWhoCanInvite) {
        output += "\(indent) whoCanInvite: \(whoCanInvite.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasGroupId {
               hashCode = (hashCode &* 31) &+ groupId.hashValue
            }
            if hasWhoCanJoin {
               hashCode = (hashCode &* 31) &+ Int(whoCanJoin.rawValue)
            }
            if hasWhoCanViewMembership {
               hashCode = (hashCode &* 31) &+ Int(whoCanViewMembership.rawValue)
            }
            if hasWhoCanViewGroup {
               hashCode = (hashCode &* 31) &+ Int(whoCanViewGroup.rawValue)
            }
            if hasWhoCanInvite {
               hashCode = (hashCode &* 31) &+ Int(whoCanInvite.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Group.Containers.GroupSettingsV1"
    }
    override public func className() -> String {
        return "Services.Group.Containers.GroupSettingsV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Group.Containers.GroupSettingsV1.self
    }
    //Meta information declaration end

  }

  final public class GroupSettingsV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Group.Containers.GroupSettingsV1

    required override public init () {
       builderResult = Services.Group.Containers.GroupSettingsV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Group.Containers.GroupSettingsV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Group.Containers.GroupSettingsV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Group.Containers.GroupSettingsV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Group.Containers.GroupSettingsV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasGroupId:Bool {
         get {
              return builderResult.hasGroupId
         }
    }
    public var groupId:String {
         get {
              return builderResult.groupId
         }
         set (value) {
             builderResult.hasGroupId = true
             builderResult.groupId = value
         }
    }
    public func setGroupId(value:String)-> Services.Group.Containers.GroupSettingsV1Builder {
      self.groupId = value
      return self
    }
    public func clearGroupId() -> Services.Group.Containers.GroupSettingsV1Builder{
         builderResult.hasGroupId = false
         builderResult.groupId = ""
         return self
    }
      public var hasWhoCanJoin:Bool{
          get {
              return builderResult.hasWhoCanJoin
          }
      }
      public var whoCanJoin:Services.Group.Containers.Permissions.WhoCanJoin.WhoCanJoinPermissionsV1 {
          get {
              return builderResult.whoCanJoin
          }
          set (value) {
              builderResult.hasWhoCanJoin = true
              builderResult.whoCanJoin = value
          }
      }
      public func setWhoCanJoin(value:Services.Group.Containers.Permissions.WhoCanJoin.WhoCanJoinPermissionsV1)-> Services.Group.Containers.GroupSettingsV1Builder {
        self.whoCanJoin = value
        return self
      }
      public func clearWhoCanJoin() -> Services.Group.Containers.GroupSettingsV1Builder {
         builderResult.hasWhoCanJoin = false
         builderResult.whoCanJoin = .Anyone
         return self
      }
      public var hasWhoCanViewMembership:Bool{
          get {
              return builderResult.hasWhoCanViewMembership
          }
      }
      public var whoCanViewMembership:Services.Group.Containers.Permissions.WhoCanViewMembership.WhoCanViewMembershipPermissionsV1 {
          get {
              return builderResult.whoCanViewMembership
          }
          set (value) {
              builderResult.hasWhoCanViewMembership = true
              builderResult.whoCanViewMembership = value
          }
      }
      public func setWhoCanViewMembership(value:Services.Group.Containers.Permissions.WhoCanViewMembership.WhoCanViewMembershipPermissionsV1)-> Services.Group.Containers.GroupSettingsV1Builder {
        self.whoCanViewMembership = value
        return self
      }
      public func clearWhoCanViewMembership() -> Services.Group.Containers.GroupSettingsV1Builder {
         builderResult.hasWhoCanViewMembership = false
         builderResult.whoCanViewMembership = .AllInDomain
         return self
      }
      public var hasWhoCanViewGroup:Bool{
          get {
              return builderResult.hasWhoCanViewGroup
          }
      }
      public var whoCanViewGroup:Services.Group.Containers.Permissions.WhoCanViewGroup.WhoCanViewGroupPermissionsV1 {
          get {
              return builderResult.whoCanViewGroup
          }
          set (value) {
              builderResult.hasWhoCanViewGroup = true
              builderResult.whoCanViewGroup = value
          }
      }
      public func setWhoCanViewGroup(value:Services.Group.Containers.Permissions.WhoCanViewGroup.WhoCanViewGroupPermissionsV1)-> Services.Group.Containers.GroupSettingsV1Builder {
        self.whoCanViewGroup = value
        return self
      }
      public func clearWhoCanViewGroup() -> Services.Group.Containers.GroupSettingsV1Builder {
         builderResult.hasWhoCanViewGroup = false
         builderResult.whoCanViewGroup = .Anyone
         return self
      }
      public var hasWhoCanInvite:Bool{
          get {
              return builderResult.hasWhoCanInvite
          }
      }
      public var whoCanInvite:Services.Group.Containers.Permissions.WhoCanInvite.WhoCanInvitePermissionsV1 {
          get {
              return builderResult.whoCanInvite
          }
          set (value) {
              builderResult.hasWhoCanInvite = true
              builderResult.whoCanInvite = value
          }
      }
      public func setWhoCanInvite(value:Services.Group.Containers.Permissions.WhoCanInvite.WhoCanInvitePermissionsV1)-> Services.Group.Containers.GroupSettingsV1Builder {
        self.whoCanInvite = value
        return self
      }
      public func clearWhoCanInvite() -> Services.Group.Containers.GroupSettingsV1Builder {
         builderResult.hasWhoCanInvite = false
         builderResult.whoCanInvite = .AllMembers
         return self
      }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Group.Containers.GroupSettingsV1Builder {
      builderResult = Services.Group.Containers.GroupSettingsV1()
      return self
    }
    public override func clone() -> Services.Group.Containers.GroupSettingsV1Builder {
      return Services.Group.Containers.GroupSettingsV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Group.Containers.GroupSettingsV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Group.Containers.GroupSettingsV1 {
      var returnMe:Services.Group.Containers.GroupSettingsV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Group.Containers.GroupSettingsV1) -> Services.Group.Containers.GroupSettingsV1Builder {
      if (other == Services.Group.Containers.GroupSettingsV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasGroupId {
           groupId = other.groupId
      }
      if other.hasWhoCanJoin {
           whoCanJoin = other.whoCanJoin
      }
      if other.hasWhoCanViewMembership {
           whoCanViewMembership = other.whoCanViewMembership
      }
      if other.hasWhoCanViewGroup {
           whoCanViewGroup = other.whoCanViewGroup
      }
      if other.hasWhoCanInvite {
           whoCanInvite = other.whoCanInvite
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Group.Containers.GroupSettingsV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Group.Containers.GroupSettingsV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          groupId = input.readString()

        case 32 :
          let valueIntwhoCanJoin = input.readEnum()
          if let enumswhoCanJoin = Services.Group.Containers.Permissions.WhoCanJoin.WhoCanJoinPermissionsV1(rawValue:valueIntwhoCanJoin){
               whoCanJoin = enumswhoCanJoin
          } else {
               unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntwhoCanJoin))
          }

        case 40 :
          let valueIntwhoCanViewMembership = input.readEnum()
          if let enumswhoCanViewMembership = Services.Group.Containers.Permissions.WhoCanViewMembership.WhoCanViewMembershipPermissionsV1(rawValue:valueIntwhoCanViewMembership){
               whoCanViewMembership = enumswhoCanViewMembership
          } else {
               unknownFieldsBuilder.mergeVarintField(5, value:Int64(valueIntwhoCanViewMembership))
          }

        case 48 :
          let valueIntwhoCanViewGroup = input.readEnum()
          if let enumswhoCanViewGroup = Services.Group.Containers.Permissions.WhoCanViewGroup.WhoCanViewGroupPermissionsV1(rawValue:valueIntwhoCanViewGroup){
               whoCanViewGroup = enumswhoCanViewGroup
          } else {
               unknownFieldsBuilder.mergeVarintField(6, value:Int64(valueIntwhoCanViewGroup))
          }

        case 56 :
          let valueIntwhoCanInvite = input.readEnum()
          if let enumswhoCanInvite = Services.Group.Containers.Permissions.WhoCanInvite.WhoCanInvitePermissionsV1(rawValue:valueIntwhoCanInvite){
               whoCanInvite = enumswhoCanInvite
          } else {
               unknownFieldsBuilder.mergeVarintField(7, value:Int64(valueIntwhoCanInvite))
          }

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class MemberV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "profile": return profile
           case "role": return self.role
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasProfile:Bool = false
    public private(set) var profile:Services.Profile.Containers.ProfileV1!
    public private(set) var role:Services.Group.Containers.RoleV1 = Services.Group.Containers.RoleV1.Owner
    public private(set) var hasRole:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasProfile {
        output.writeMessage(3, value:profile)
      }
      if hasRole {
        output.writeEnum(4, value:role.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasProfile {
          if let varSizeprofile = profile?.computeMessageSize(3) {
              serialize_size += varSizeprofile
          }
      }
      if (hasRole) {
        serialize_size += role.rawValue.computeEnumSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Group.Containers.MemberV1 {
      return Services.Group.Containers.MemberV1.builder().mergeFromData(data, extensionRegistry:Services.Group.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Group.Containers.MemberV1 {
      return Services.Group.Containers.MemberV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Group.Containers.MemberV1 {
      return Services.Group.Containers.MemberV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Group.Containers.MemberV1 {
      return Services.Group.Containers.MemberV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Group.Containers.MemberV1 {
      return Services.Group.Containers.MemberV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Group.Containers.MemberV1 {
      return Services.Group.Containers.MemberV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Group.Containers.MemberV1Builder {
      return Services.Group.Containers.MemberV1.classBuilder() as! Services.Group.Containers.MemberV1Builder
    }
    public func builder() -> Services.Group.Containers.MemberV1Builder {
      return classBuilder() as! Services.Group.Containers.MemberV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Group.Containers.MemberV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Group.Containers.MemberV1.builder()
    }
    public func toBuilder() -> Services.Group.Containers.MemberV1Builder {
      return Services.Group.Containers.MemberV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Group.Containers.MemberV1) -> Services.Group.Containers.MemberV1Builder {
      return Services.Group.Containers.MemberV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasProfile {
        output += "\(indent) profile {\n"
        profile?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if (hasRole) {
        output += "\(indent) role: \(role.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasProfile {
                if let hashValueprofile = profile?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueprofile
                }
            }
            if hasRole {
               hashCode = (hashCode &* 31) &+ Int(role.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Group.Containers.MemberV1"
    }
    override public func className() -> String {
        return "Services.Group.Containers.MemberV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Group.Containers.MemberV1.self
    }
    //Meta information declaration end

  }

  final public class MemberV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Group.Containers.MemberV1

    required override public init () {
       builderResult = Services.Group.Containers.MemberV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Group.Containers.MemberV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Group.Containers.MemberV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Group.Containers.MemberV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Group.Containers.MemberV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasProfile:Bool {
         get {
             return builderResult.hasProfile
         }
    }
    public var profile:Services.Profile.Containers.ProfileV1! {
         get {
             return builderResult.profile
         }
         set (value) {
             builderResult.hasProfile = true
             builderResult.profile = value
         }
    }
    public func setProfile(value:Services.Profile.Containers.ProfileV1!)-> Services.Group.Containers.MemberV1Builder {
      self.profile = value
      return self
    }
    public func mergeProfile(value:Services.Profile.Containers.ProfileV1) -> Services.Group.Containers.MemberV1Builder {
      if (builderResult.hasProfile) {
        builderResult.profile = Services.Profile.Containers.ProfileV1.builderWithPrototype(builderResult.profile).mergeFrom(value).buildPartial()
      } else {
        builderResult.profile = value
      }
      builderResult.hasProfile = true
      return self
    }
    public func clearProfile() -> Services.Group.Containers.MemberV1Builder {
      builderResult.hasProfile = false
      builderResult.profile = nil
      return self
    }
      public var hasRole:Bool{
          get {
              return builderResult.hasRole
          }
      }
      public var role:Services.Group.Containers.RoleV1 {
          get {
              return builderResult.role
          }
          set (value) {
              builderResult.hasRole = true
              builderResult.role = value
          }
      }
      public func setRole(value:Services.Group.Containers.RoleV1)-> Services.Group.Containers.MemberV1Builder {
        self.role = value
        return self
      }
      public func clearRole() -> Services.Group.Containers.MemberV1Builder {
         builderResult.hasRole = false
         builderResult.role = .Owner
         return self
      }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Group.Containers.MemberV1Builder {
      builderResult = Services.Group.Containers.MemberV1()
      return self
    }
    public override func clone() -> Services.Group.Containers.MemberV1Builder {
      return Services.Group.Containers.MemberV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Group.Containers.MemberV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Group.Containers.MemberV1 {
      var returnMe:Services.Group.Containers.MemberV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Group.Containers.MemberV1) -> Services.Group.Containers.MemberV1Builder {
      if (other == Services.Group.Containers.MemberV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if (other.hasProfile) {
          mergeProfile(other.profile)
      }
      if other.hasRole {
           role = other.role
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Group.Containers.MemberV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Group.Containers.MemberV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          var subBuilder:Services.Profile.Containers.ProfileV1Builder = Services.Profile.Containers.ProfileV1.builder()
          if hasProfile {
            subBuilder.mergeFrom(profile)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          profile = subBuilder.buildPartial()

        case 32 :
          let valueIntrole = input.readEnum()
          if let enumsrole = Services.Group.Containers.RoleV1(rawValue:valueIntrole){
               role = enumsrole
          } else {
               unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntrole))
          }

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
