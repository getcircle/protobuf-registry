// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.User.Containers{ public struct User { }}

public func == (lhs: Services.User.Containers.User.UserV1, rhs: Services.User.Containers.User.UserV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasPrimaryEmail == rhs.hasPrimaryEmail) && (!lhs.hasPrimaryEmail || lhs.primaryEmail == rhs.primaryEmail)
  fieldCheck = fieldCheck && (lhs.hasIsAdmin == rhs.hasIsAdmin) && (!lhs.hasIsAdmin || lhs.isAdmin == rhs.isAdmin)
  fieldCheck = fieldCheck && (lhs.hasIsActive == rhs.hasIsActive) && (!lhs.hasIsActive || lhs.isActive == rhs.isActive)
  fieldCheck = fieldCheck && (lhs.hasPhoneNumber == rhs.hasPhoneNumber) && (!lhs.hasPhoneNumber || lhs.phoneNumber == rhs.phoneNumber)
  fieldCheck = fieldCheck && (lhs.hasPhoneNumberVerified == rhs.hasPhoneNumberVerified) && (!lhs.hasPhoneNumberVerified || lhs.phoneNumberVerified == rhs.phoneNumberVerified)
  fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.User.Containers.User {
  public struct UserRoot {
    public static var sharedInstance : UserRoot {
     struct Static {
         static let instance : UserRoot = UserRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class UserV1 : GeneratedMessage, GeneratedMessageProtocol {
    public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "primaryEmail": return primaryEmail
           case "isAdmin": return isAdmin
           case "isActive": return isActive
           case "phoneNumber": return phoneNumber
           case "phoneNumberVerified": return phoneNumberVerified
           case "password": return password
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasPrimaryEmail:Bool = false
    public private(set) var primaryEmail:String = ""

    public private(set) var hasIsAdmin:Bool = false
    public private(set) var isAdmin:Bool = false

    public private(set) var hasIsActive:Bool = false
    public private(set) var isActive:Bool = false

    public private(set) var hasPhoneNumber:Bool = false
    public private(set) var phoneNumber:String = ""

    public private(set) var hasPhoneNumberVerified:Bool = false
    public private(set) var phoneNumberVerified:Bool = false

    public private(set) var hasPassword:Bool = false
    public private(set) var password:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasPrimaryEmail {
        output.writeString(3, value:primaryEmail)
      }
      if hasIsAdmin {
        output.writeBool(4, value:isAdmin)
      }
      if hasIsActive {
        output.writeBool(5, value:isActive)
      }
      if hasPhoneNumber {
        output.writeString(6, value:phoneNumber)
      }
      if hasPhoneNumberVerified {
        output.writeBool(7, value:phoneNumberVerified)
      }
      if hasPassword {
        output.writeString(8, value:password)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasPrimaryEmail {
        serialize_size += primaryEmail.computeStringSize(3)
      }
      if hasIsAdmin {
        serialize_size += isAdmin.computeBoolSize(4)
      }
      if hasIsActive {
        serialize_size += isActive.computeBoolSize(5)
      }
      if hasPhoneNumber {
        serialize_size += phoneNumber.computeStringSize(6)
      }
      if hasPhoneNumberVerified {
        serialize_size += phoneNumberVerified.computeBoolSize(7)
      }
      if hasPassword {
        serialize_size += password.computeStringSize(8)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.User.Containers.User.UserV1 {
      return Services.User.Containers.User.UserV1.builder().mergeFromData(data, extensionRegistry:Services.User.Containers.User.UserRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.User.UserV1 {
      return Services.User.Containers.User.UserV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.User.Containers.User.UserV1 {
      return Services.User.Containers.User.UserV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.User.Containers.User.UserV1 {
      return Services.User.Containers.User.UserV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.User.Containers.User.UserV1 {
      return Services.User.Containers.User.UserV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.User.UserV1 {
      return Services.User.Containers.User.UserV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.User.Containers.User.UserV1Builder {
      return Services.User.Containers.User.UserV1.classBuilder() as! Services.User.Containers.User.UserV1Builder
    }
    public func builder() -> Services.User.Containers.User.UserV1Builder {
      return classBuilder() as! Services.User.Containers.User.UserV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Containers.User.UserV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Containers.User.UserV1.builder()
    }
    public func toBuilder() -> Services.User.Containers.User.UserV1Builder {
      return Services.User.Containers.User.UserV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Containers.User.UserV1) -> Services.User.Containers.User.UserV1Builder {
      return Services.User.Containers.User.UserV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasPrimaryEmail {
        output += "\(indent) primaryEmail: \(primaryEmail) \n"
      }
      if hasIsAdmin {
        output += "\(indent) isAdmin: \(isAdmin) \n"
      }
      if hasIsActive {
        output += "\(indent) isActive: \(isActive) \n"
      }
      if hasPhoneNumber {
        output += "\(indent) phoneNumber: \(phoneNumber) \n"
      }
      if hasPhoneNumberVerified {
        output += "\(indent) phoneNumberVerified: \(phoneNumberVerified) \n"
      }
      if hasPassword {
        output += "\(indent) password: \(password) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasPrimaryEmail {
               hashCode = (hashCode &* 31) &+ primaryEmail.hashValue
            }
            if hasIsAdmin {
               hashCode = (hashCode &* 31) &+ isAdmin.hashValue
            }
            if hasIsActive {
               hashCode = (hashCode &* 31) &+ isActive.hashValue
            }
            if hasPhoneNumber {
               hashCode = (hashCode &* 31) &+ phoneNumber.hashValue
            }
            if hasPhoneNumberVerified {
               hashCode = (hashCode &* 31) &+ phoneNumberVerified.hashValue
            }
            if hasPassword {
               hashCode = (hashCode &* 31) &+ password.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Containers.User.UserV1"
    }
    override public func className() -> String {
        return "Services.User.Containers.User.UserV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Containers.User.UserV1.self
    }
    //Meta information declaration end

  }

  final public class UserV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.User.Containers.User.UserV1

    required override public init () {
       builderResult = Services.User.Containers.User.UserV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.User.Containers.User.UserV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.User.Containers.User.UserV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.User.Containers.User.UserV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.User.Containers.User.UserV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasPrimaryEmail:Bool {
         get {
              return builderResult.hasPrimaryEmail
         }
    }
    public var primaryEmail:String {
         get {
              return builderResult.primaryEmail
         }
         set (value) {
             builderResult.hasPrimaryEmail = true
             builderResult.primaryEmail = value
         }
    }
    public func setPrimaryEmail(value:String)-> Services.User.Containers.User.UserV1Builder {
      self.primaryEmail = value
      return self
    }
    public func clearPrimaryEmail() -> Services.User.Containers.User.UserV1Builder{
         builderResult.hasPrimaryEmail = false
         builderResult.primaryEmail = ""
         return self
    }
    public var hasIsAdmin:Bool {
         get {
              return builderResult.hasIsAdmin
         }
    }
    public var isAdmin:Bool {
         get {
              return builderResult.isAdmin
         }
         set (value) {
             builderResult.hasIsAdmin = true
             builderResult.isAdmin = value
         }
    }
    public func setIsAdmin(value:Bool)-> Services.User.Containers.User.UserV1Builder {
      self.isAdmin = value
      return self
    }
    public func clearIsAdmin() -> Services.User.Containers.User.UserV1Builder{
         builderResult.hasIsAdmin = false
         builderResult.isAdmin = false
         return self
    }
    public var hasIsActive:Bool {
         get {
              return builderResult.hasIsActive
         }
    }
    public var isActive:Bool {
         get {
              return builderResult.isActive
         }
         set (value) {
             builderResult.hasIsActive = true
             builderResult.isActive = value
         }
    }
    public func setIsActive(value:Bool)-> Services.User.Containers.User.UserV1Builder {
      self.isActive = value
      return self
    }
    public func clearIsActive() -> Services.User.Containers.User.UserV1Builder{
         builderResult.hasIsActive = false
         builderResult.isActive = false
         return self
    }
    public var hasPhoneNumber:Bool {
         get {
              return builderResult.hasPhoneNumber
         }
    }
    public var phoneNumber:String {
         get {
              return builderResult.phoneNumber
         }
         set (value) {
             builderResult.hasPhoneNumber = true
             builderResult.phoneNumber = value
         }
    }
    public func setPhoneNumber(value:String)-> Services.User.Containers.User.UserV1Builder {
      self.phoneNumber = value
      return self
    }
    public func clearPhoneNumber() -> Services.User.Containers.User.UserV1Builder{
         builderResult.hasPhoneNumber = false
         builderResult.phoneNumber = ""
         return self
    }
    public var hasPhoneNumberVerified:Bool {
         get {
              return builderResult.hasPhoneNumberVerified
         }
    }
    public var phoneNumberVerified:Bool {
         get {
              return builderResult.phoneNumberVerified
         }
         set (value) {
             builderResult.hasPhoneNumberVerified = true
             builderResult.phoneNumberVerified = value
         }
    }
    public func setPhoneNumberVerified(value:Bool)-> Services.User.Containers.User.UserV1Builder {
      self.phoneNumberVerified = value
      return self
    }
    public func clearPhoneNumberVerified() -> Services.User.Containers.User.UserV1Builder{
         builderResult.hasPhoneNumberVerified = false
         builderResult.phoneNumberVerified = false
         return self
    }
    public var hasPassword:Bool {
         get {
              return builderResult.hasPassword
         }
    }
    public var password:String {
         get {
              return builderResult.password
         }
         set (value) {
             builderResult.hasPassword = true
             builderResult.password = value
         }
    }
    public func setPassword(value:String)-> Services.User.Containers.User.UserV1Builder {
      self.password = value
      return self
    }
    public func clearPassword() -> Services.User.Containers.User.UserV1Builder{
         builderResult.hasPassword = false
         builderResult.password = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.User.Containers.User.UserV1Builder {
      builderResult = Services.User.Containers.User.UserV1()
      return self
    }
    public override func clone() -> Services.User.Containers.User.UserV1Builder {
      return Services.User.Containers.User.UserV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.User.Containers.User.UserV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.User.Containers.User.UserV1 {
      var returnMe:Services.User.Containers.User.UserV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.User.Containers.User.UserV1) -> Services.User.Containers.User.UserV1Builder {
      if (other == Services.User.Containers.User.UserV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasPrimaryEmail {
           primaryEmail = other.primaryEmail
      }
      if other.hasIsAdmin {
           isAdmin = other.isAdmin
      }
      if other.hasIsActive {
           isActive = other.isActive
      }
      if other.hasPhoneNumber {
           phoneNumber = other.phoneNumber
      }
      if other.hasPhoneNumberVerified {
           phoneNumberVerified = other.phoneNumberVerified
      }
      if other.hasPassword {
           password = other.password
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.User.Containers.User.UserV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.User.UserV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          primaryEmail = input.readString()

        case 32 :
          isAdmin = input.readBool()

        case 40 :
          isActive = input.readBool()

        case 50 :
          phoneNumber = input.readString()

        case 56 :
          phoneNumberVerified = input.readBool()

        case 66 :
          password = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
