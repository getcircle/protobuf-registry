// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

public struct LandingServiceRoot {
  public static var sharedInstance : LandingServiceRoot {
   struct Static {
       static let instance : LandingServiceRoot = LandingServiceRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    NoteServiceRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    OrganizationServiceRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    ProfileServiceRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

public func == (lhs: LandingService.Containers, rhs: LandingService.Containers) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: LandingService.GetCategories, rhs: LandingService.GetCategories) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: LandingService.GetOrganizationCategories, rhs: LandingService.GetOrganizationCategories) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: LandingService, rhs: LandingService) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final public class LandingService : GeneratedMessage {


  //Nested type declaration start

    final public class Containers : GeneratedMessage {


      //Nested type declaration start

        final public class Category : GeneratedMessage {


            //Enum type declaration start 

            public enum CategoryType:Int32 {
              case DirectReports = 1
              case Anniversaries = 2
              case Birthdays = 3
              case Locations = 4
              case Skills = 5
              case Peers = 6
              case NewHires = 7
              case Departments = 8
              case Executives = 9
              case Organization = 10
              case Notes = 11

              public static func IsValidValue(value:Int32) ->Bool {
                  if let check = CategoryType(rawValue:value) {
                      return true
                  }
                  return false
              }
            }



            //Enum type declaration end 

          override public subscript (key: String) -> Any? {
                 switch key {
                 case "title": return title
                 case "content_key": return content_key
                 case "type": return Int(self.type.rawValue)
                 case "total_count": return total_count
                 default: return nil
                 }
          }

          public private(set) var hasTitle:Bool = false
          public private(set) var title:String = ""

          public private(set) var hasContentKey:Bool = false
          public private(set) var content_key:String = ""

          public private(set) var type:LandingService.Containers.Category.CategoryType = LandingService.Containers.Category.CategoryType.DirectReports
          public private(set) var hasTypes:Bool = false
          public private(set) var hasTotalCount:Bool = false
          public private(set) var total_count:UInt32 = UInt32(0)

          public private(set) var profiles:Array<ProfileService.Containers.Profile>  = Array<ProfileService.Containers.Profile>()
          public private(set) var addresses:Array<OrganizationService.Containers.Address>  = Array<OrganizationService.Containers.Address>()
          public private(set) var skills:Array<ProfileService.Containers.Skill>  = Array<ProfileService.Containers.Skill>()
          public private(set) var teams:Array<OrganizationService.Containers.Team>  = Array<OrganizationService.Containers.Team>()
          public private(set) var notes:Array<NoteService.Containers.Note>  = Array<NoteService.Containers.Note>()
          public private(set) var locations:Array<OrganizationService.Containers.Location>  = Array<OrganizationService.Containers.Location>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasTitle {
              output.writeString(1, value:title)
            }
            if hasContentKey {
              output.writeString(2, value:content_key)
            }
            if hasTypes {
              output.writeEnum(3, value:type.rawValue)
            }
            if hasTotalCount {
              output.writeUInt32(4, value:total_count)
            }
            for oneElementprofiles in profiles {
                output.writeMessage(5, value:oneElementprofiles)
            }
            for oneElementaddresses in addresses {
                output.writeMessage(6, value:oneElementaddresses)
            }
            for oneElementskills in skills {
                output.writeMessage(7, value:oneElementskills)
            }
            for oneElementteams in teams {
                output.writeMessage(8, value:oneElementteams)
            }
            for oneElementnotes in notes {
                output.writeMessage(9, value:oneElementnotes)
            }
            for oneElementlocations in locations {
                output.writeMessage(10, value:oneElementlocations)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasTitle {
              size += WireFormat.computeStringSize(1, value:title)
            }
            if hasContentKey {
              size += WireFormat.computeStringSize(2, value:content_key)
            }
            if (hasTypes) {
              size += WireFormat.computeEnumSize(3, value:type.rawValue)
            }
            if hasTotalCount {
              size += WireFormat.computeUInt32Size(4, value:total_count)
            }
            for oneElementprofiles in profiles {
                size += WireFormat.computeMessageSize(5, value:oneElementprofiles)
            }
            for oneElementaddresses in addresses {
                size += WireFormat.computeMessageSize(6, value:oneElementaddresses)
            }
            for oneElementskills in skills {
                size += WireFormat.computeMessageSize(7, value:oneElementskills)
            }
            for oneElementteams in teams {
                size += WireFormat.computeMessageSize(8, value:oneElementteams)
            }
            for oneElementnotes in notes {
                size += WireFormat.computeMessageSize(9, value:oneElementnotes)
            }
            for oneElementlocations in locations {
                size += WireFormat.computeMessageSize(10, value:oneElementlocations)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> LandingService.Containers.Category {
            return LandingService.Containers.Category.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> LandingService.Containers.Category {
            return LandingService.Containers.Category.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> LandingService.Containers.Category {
            return LandingService.Containers.Category.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->LandingService.Containers.Category {
            return LandingService.Containers.Category.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> LandingService.Containers.Category {
            return LandingService.Containers.Category.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.Containers.Category {
            return LandingService.Containers.Category.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> LandingService.Containers.CategoryBuilder {
            return LandingService.Containers.Category.classBuilder() as LandingService.Containers.CategoryBuilder
          }
          public func builder() -> LandingService.Containers.CategoryBuilder {
            return classBuilder() as LandingService.Containers.CategoryBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return LandingService.Containers.CategoryBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return LandingService.Containers.Category.builder()
          }
          public func toBuilder() -> LandingService.Containers.CategoryBuilder {
            return LandingService.Containers.Category.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:LandingService.Containers.Category) -> LandingService.Containers.CategoryBuilder {
            return LandingService.Containers.Category.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasTitle {
              output += "\(indent) title: \(title) \n"
            }
            if hasContentKey {
              output += "\(indent) content_key: \(content_key) \n"
            }
            if (hasTypes) {
              output += "\(indent) type: \(type.rawValue)\n"
            }
            if hasTotalCount {
              output += "\(indent) total_count: \(total_count) \n"
            }
            var profilesElementIndex:Int = 0
            for oneElementprofiles in profiles {
                output += "\(indent) profiles[\(profilesElementIndex)] {\n"
                oneElementprofiles.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                profilesElementIndex++
            }
            var addressesElementIndex:Int = 0
            for oneElementaddresses in addresses {
                output += "\(indent) addresses[\(addressesElementIndex)] {\n"
                oneElementaddresses.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                addressesElementIndex++
            }
            var skillsElementIndex:Int = 0
            for oneElementskills in skills {
                output += "\(indent) skills[\(skillsElementIndex)] {\n"
                oneElementskills.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                skillsElementIndex++
            }
            var teamsElementIndex:Int = 0
            for oneElementteams in teams {
                output += "\(indent) teams[\(teamsElementIndex)] {\n"
                oneElementteams.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                teamsElementIndex++
            }
            var notesElementIndex:Int = 0
            for oneElementnotes in notes {
                output += "\(indent) notes[\(notesElementIndex)] {\n"
                oneElementnotes.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                notesElementIndex++
            }
            var locationsElementIndex:Int = 0
            for oneElementlocations in locations {
                output += "\(indent) locations[\(locationsElementIndex)] {\n"
                oneElementlocations.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                locationsElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasTitle {
                     hashCode = (hashCode &* 31) &+ title.hashValue
                  }
                  if hasContentKey {
                     hashCode = (hashCode &* 31) &+ content_key.hashValue
                  }
                  if hasTypes {
                     hashCode = (hashCode &* 31) &+ Int(type.rawValue)
                  }
                  if hasTotalCount {
                     hashCode = (hashCode &* 31) &+ total_count.hashValue
                  }
                  for oneElementprofiles in profiles {
                      hashCode = (hashCode &* 31) &+ oneElementprofiles.hashValue
                  }
                  for oneElementaddresses in addresses {
                      hashCode = (hashCode &* 31) &+ oneElementaddresses.hashValue
                  }
                  for oneElementskills in skills {
                      hashCode = (hashCode &* 31) &+ oneElementskills.hashValue
                  }
                  for oneElementteams in teams {
                      hashCode = (hashCode &* 31) &+ oneElementteams.hashValue
                  }
                  for oneElementnotes in notes {
                      hashCode = (hashCode &* 31) &+ oneElementnotes.hashValue
                  }
                  for oneElementlocations in locations {
                      hashCode = (hashCode &* 31) &+ oneElementlocations.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "LandingService.Containers.Category"
          }
          override public func className() -> String {
              return "LandingService.Containers.Category"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return LandingService.Containers.Category.self
          }


          //Meta information declaration end

        }

        final public class CategoryBuilder : GeneratedMessageBuilder {
          private var builderResult:LandingService.Containers.Category

          required override public init () {
             builderResult = LandingService.Containers.Category()
             super.init()
          }
          public var hasTitle:Bool {
               get {
                    return builderResult.hasTitle
               }
          }
          public var title:String {
               get {
                    return builderResult.title
               }
               set (value) {
                   builderResult.hasTitle = true
                   builderResult.title = value
               }
          }
          public func clearTitle() -> LandingService.Containers.CategoryBuilder{
               builderResult.hasTitle = false
               builderResult.title = ""
               return self
          }
          public var hasContentKey:Bool {
               get {
                    return builderResult.hasContentKey
               }
          }
          public var content_key:String {
               get {
                    return builderResult.content_key
               }
               set (value) {
                   builderResult.hasContentKey = true
                   builderResult.content_key = value
               }
          }
          public func clearContentKey() -> LandingService.Containers.CategoryBuilder{
               builderResult.hasContentKey = false
               builderResult.content_key = ""
               return self
          }
            public var hasTypes:Bool{
                get {
                    return builderResult.hasTypes
                }
            }
            public var type:LandingService.Containers.Category.CategoryType {
                get {
                    return builderResult.type
                }
                set (value) {
                    builderResult.hasTypes = true
                    builderResult.type = value
                }
            }
            public func clearTypes() -> LandingService.Containers.CategoryBuilder {
               builderResult.hasTypes = false
               builderResult.type = .DirectReports
               return self
            }
          public var hasTotalCount:Bool {
               get {
                    return builderResult.hasTotalCount
               }
          }
          public var total_count:UInt32 {
               get {
                    return builderResult.total_count
               }
               set (value) {
                   builderResult.hasTotalCount = true
                   builderResult.total_count = value
               }
          }
          public func clearTotalCount() -> LandingService.Containers.CategoryBuilder{
               builderResult.hasTotalCount = false
               builderResult.total_count = UInt32(0)
               return self
          }
          public var profiles:Array<ProfileService.Containers.Profile> {
               get {
                   return builderResult.profiles
               }
               set (value) {
                   builderResult.profiles = value
               }
          }
          public func clearProfiles() -> LandingService.Containers.CategoryBuilder {
            builderResult.profiles.removeAll(keepCapacity: false)
            return self
          }
          public var addresses:Array<OrganizationService.Containers.Address> {
               get {
                   return builderResult.addresses
               }
               set (value) {
                   builderResult.addresses = value
               }
          }
          public func clearAddresses() -> LandingService.Containers.CategoryBuilder {
            builderResult.addresses.removeAll(keepCapacity: false)
            return self
          }
          public var skills:Array<ProfileService.Containers.Skill> {
               get {
                   return builderResult.skills
               }
               set (value) {
                   builderResult.skills = value
               }
          }
          public func clearSkills() -> LandingService.Containers.CategoryBuilder {
            builderResult.skills.removeAll(keepCapacity: false)
            return self
          }
          public var teams:Array<OrganizationService.Containers.Team> {
               get {
                   return builderResult.teams
               }
               set (value) {
                   builderResult.teams = value
               }
          }
          public func clearTeams() -> LandingService.Containers.CategoryBuilder {
            builderResult.teams.removeAll(keepCapacity: false)
            return self
          }
          public var notes:Array<NoteService.Containers.Note> {
               get {
                   return builderResult.notes
               }
               set (value) {
                   builderResult.notes = value
               }
          }
          public func clearNotes() -> LandingService.Containers.CategoryBuilder {
            builderResult.notes.removeAll(keepCapacity: false)
            return self
          }
          public var locations:Array<OrganizationService.Containers.Location> {
               get {
                   return builderResult.locations
               }
               set (value) {
                   builderResult.locations = value
               }
          }
          public func clearLocations() -> LandingService.Containers.CategoryBuilder {
            builderResult.locations.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> LandingService.Containers.CategoryBuilder {
            builderResult = LandingService.Containers.Category()
            return self
          }
          public override func clone() -> LandingService.Containers.CategoryBuilder {
            return LandingService.Containers.Category.builderWithPrototype(builderResult)
          }
          public override func build() -> LandingService.Containers.Category {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> LandingService.Containers.Category {
            var returnMe:LandingService.Containers.Category = builderResult
            return returnMe
          }
          public func mergeFrom(other:LandingService.Containers.Category) -> LandingService.Containers.CategoryBuilder {
            if other.hasTitle {
                 title = other.title
            }
            if other.hasContentKey {
                 content_key = other.content_key
            }
            if other.hasTypes {
                 type = other.type
            }
            if other.hasTotalCount {
                 total_count = other.total_count
            }
            if !other.profiles.isEmpty  {
               builderResult.profiles += other.profiles
            }
            if !other.addresses.isEmpty  {
               builderResult.addresses += other.addresses
            }
            if !other.skills.isEmpty  {
               builderResult.skills += other.skills
            }
            if !other.teams.isEmpty  {
               builderResult.teams += other.teams
            }
            if !other.notes.isEmpty  {
               builderResult.notes += other.notes
            }
            if !other.locations.isEmpty  {
               builderResult.locations += other.locations
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->LandingService.Containers.CategoryBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.Containers.CategoryBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                title = input.readString()

              case 18 :
                content_key = input.readString()

              case 24 :
                let valueInttype = input.readEnum()
                if let enumstype = LandingService.Containers.Category.CategoryType(rawValue:valueInttype){
                     type = enumstype
                } else {
                     unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueInttype))
                }

              case 32 :
                total_count = input.readUInt32()

              case 42 :
                var subBuilder = ProfileService.Containers.Profile.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                profiles += [subBuilder.buildPartial()]

              case 50 :
                var subBuilder = OrganizationService.Containers.Address.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                addresses += [subBuilder.buildPartial()]

              case 58 :
                var subBuilder = ProfileService.Containers.Skill.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                skills += [subBuilder.buildPartial()]

              case 66 :
                var subBuilder = OrganizationService.Containers.Team.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                teams += [subBuilder.buildPartial()]

              case 74 :
                var subBuilder = NoteService.Containers.Note.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                notes += [subBuilder.buildPartial()]

              case 82 :
                var subBuilder = OrganizationService.Containers.Location.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                locations += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> LandingService.Containers {
        return LandingService.Containers.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> LandingService.Containers {
        return LandingService.Containers.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> LandingService.Containers {
        return LandingService.Containers.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->LandingService.Containers {
        return LandingService.Containers.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> LandingService.Containers {
        return LandingService.Containers.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.Containers {
        return LandingService.Containers.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> LandingService.ContainersBuilder {
        return LandingService.Containers.classBuilder() as LandingService.ContainersBuilder
      }
      public func builder() -> LandingService.ContainersBuilder {
        return classBuilder() as LandingService.ContainersBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return LandingService.ContainersBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return LandingService.Containers.builder()
      }
      public func toBuilder() -> LandingService.ContainersBuilder {
        return LandingService.Containers.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:LandingService.Containers) -> LandingService.ContainersBuilder {
        return LandingService.Containers.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "LandingService.Containers"
      }
      override public func className() -> String {
          return "LandingService.Containers"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return LandingService.Containers.self
      }


      //Meta information declaration end

    }

    final public class ContainersBuilder : GeneratedMessageBuilder {
      private var builderResult:LandingService.Containers

      required override public init () {
         builderResult = LandingService.Containers()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> LandingService.ContainersBuilder {
        builderResult = LandingService.Containers()
        return self
      }
      public override func clone() -> LandingService.ContainersBuilder {
        return LandingService.Containers.builderWithPrototype(builderResult)
      }
      public override func build() -> LandingService.Containers {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> LandingService.Containers {
        var returnMe:LandingService.Containers = builderResult
        return returnMe
      }
      public func mergeFrom(other:LandingService.Containers) -> LandingService.ContainersBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->LandingService.ContainersBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.ContainersBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetCategories : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "profile_id": return profile_id
                 default: return nil
                 }
          }

          public private(set) var hasProfileId:Bool = false
          public private(set) var profile_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfileId {
              output.writeString(1, value:profile_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfileId {
              size += WireFormat.computeStringSize(1, value:profile_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> LandingService.GetCategories.Request {
            return LandingService.GetCategories.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories.Request {
            return LandingService.GetCategories.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> LandingService.GetCategories.Request {
            return LandingService.GetCategories.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->LandingService.GetCategories.Request {
            return LandingService.GetCategories.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> LandingService.GetCategories.Request {
            return LandingService.GetCategories.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories.Request {
            return LandingService.GetCategories.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> LandingService.GetCategories.RequestBuilder {
            return LandingService.GetCategories.Request.classBuilder() as LandingService.GetCategories.RequestBuilder
          }
          public func builder() -> LandingService.GetCategories.RequestBuilder {
            return classBuilder() as LandingService.GetCategories.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return LandingService.GetCategories.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return LandingService.GetCategories.Request.builder()
          }
          public func toBuilder() -> LandingService.GetCategories.RequestBuilder {
            return LandingService.GetCategories.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:LandingService.GetCategories.Request) -> LandingService.GetCategories.RequestBuilder {
            return LandingService.GetCategories.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfileId {
              output += "\(indent) profile_id: \(profile_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfileId {
                     hashCode = (hashCode &* 31) &+ profile_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "LandingService.GetCategories.Request"
          }
          override public func className() -> String {
              return "LandingService.GetCategories.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return LandingService.GetCategories.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:LandingService.GetCategories.Request

          required override public init () {
             builderResult = LandingService.GetCategories.Request()
             super.init()
          }
          public var hasProfileId:Bool {
               get {
                    return builderResult.hasProfileId
               }
          }
          public var profile_id:String {
               get {
                    return builderResult.profile_id
               }
               set (value) {
                   builderResult.hasProfileId = true
                   builderResult.profile_id = value
               }
          }
          public func clearProfileId() -> LandingService.GetCategories.RequestBuilder{
               builderResult.hasProfileId = false
               builderResult.profile_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> LandingService.GetCategories.RequestBuilder {
            builderResult = LandingService.GetCategories.Request()
            return self
          }
          public override func clone() -> LandingService.GetCategories.RequestBuilder {
            return LandingService.GetCategories.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> LandingService.GetCategories.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> LandingService.GetCategories.Request {
            var returnMe:LandingService.GetCategories.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:LandingService.GetCategories.Request) -> LandingService.GetCategories.RequestBuilder {
            if other.hasProfileId {
                 profile_id = other.profile_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->LandingService.GetCategories.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                profile_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var categories:Array<LandingService.Containers.Category>  = Array<LandingService.Containers.Category>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementcategories in categories {
                output.writeMessage(1, value:oneElementcategories)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementcategories in categories {
                size += WireFormat.computeMessageSize(1, value:oneElementcategories)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> LandingService.GetCategories.Response {
            return LandingService.GetCategories.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories.Response {
            return LandingService.GetCategories.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> LandingService.GetCategories.Response {
            return LandingService.GetCategories.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->LandingService.GetCategories.Response {
            return LandingService.GetCategories.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> LandingService.GetCategories.Response {
            return LandingService.GetCategories.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories.Response {
            return LandingService.GetCategories.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> LandingService.GetCategories.ResponseBuilder {
            return LandingService.GetCategories.Response.classBuilder() as LandingService.GetCategories.ResponseBuilder
          }
          public func builder() -> LandingService.GetCategories.ResponseBuilder {
            return classBuilder() as LandingService.GetCategories.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return LandingService.GetCategories.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return LandingService.GetCategories.Response.builder()
          }
          public func toBuilder() -> LandingService.GetCategories.ResponseBuilder {
            return LandingService.GetCategories.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:LandingService.GetCategories.Response) -> LandingService.GetCategories.ResponseBuilder {
            return LandingService.GetCategories.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var categoriesElementIndex:Int = 0
            for oneElementcategories in categories {
                output += "\(indent) categories[\(categoriesElementIndex)] {\n"
                oneElementcategories.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                categoriesElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementcategories in categories {
                      hashCode = (hashCode &* 31) &+ oneElementcategories.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "LandingService.GetCategories.Response"
          }
          override public func className() -> String {
              return "LandingService.GetCategories.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return LandingService.GetCategories.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:LandingService.GetCategories.Response

          required override public init () {
             builderResult = LandingService.GetCategories.Response()
             super.init()
          }
          public var categories:Array<LandingService.Containers.Category> {
               get {
                   return builderResult.categories
               }
               set (value) {
                   builderResult.categories = value
               }
          }
          public func clearCategories() -> LandingService.GetCategories.ResponseBuilder {
            builderResult.categories.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> LandingService.GetCategories.ResponseBuilder {
            builderResult = LandingService.GetCategories.Response()
            return self
          }
          public override func clone() -> LandingService.GetCategories.ResponseBuilder {
            return LandingService.GetCategories.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> LandingService.GetCategories.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> LandingService.GetCategories.Response {
            var returnMe:LandingService.GetCategories.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:LandingService.GetCategories.Response) -> LandingService.GetCategories.ResponseBuilder {
            if !other.categories.isEmpty  {
               builderResult.categories += other.categories
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->LandingService.GetCategories.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = LandingService.Containers.Category.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                categories += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> LandingService.GetCategories {
        return LandingService.GetCategories.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories {
        return LandingService.GetCategories.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> LandingService.GetCategories {
        return LandingService.GetCategories.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->LandingService.GetCategories {
        return LandingService.GetCategories.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> LandingService.GetCategories {
        return LandingService.GetCategories.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories {
        return LandingService.GetCategories.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> LandingService.GetCategoriesBuilder {
        return LandingService.GetCategories.classBuilder() as LandingService.GetCategoriesBuilder
      }
      public func builder() -> LandingService.GetCategoriesBuilder {
        return classBuilder() as LandingService.GetCategoriesBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return LandingService.GetCategoriesBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return LandingService.GetCategories.builder()
      }
      public func toBuilder() -> LandingService.GetCategoriesBuilder {
        return LandingService.GetCategories.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:LandingService.GetCategories) -> LandingService.GetCategoriesBuilder {
        return LandingService.GetCategories.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "LandingService.GetCategories"
      }
      override public func className() -> String {
          return "LandingService.GetCategories"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return LandingService.GetCategories.self
      }


      //Meta information declaration end

    }

    final public class GetCategoriesBuilder : GeneratedMessageBuilder {
      private var builderResult:LandingService.GetCategories

      required override public init () {
         builderResult = LandingService.GetCategories()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> LandingService.GetCategoriesBuilder {
        builderResult = LandingService.GetCategories()
        return self
      }
      public override func clone() -> LandingService.GetCategoriesBuilder {
        return LandingService.GetCategories.builderWithPrototype(builderResult)
      }
      public override func build() -> LandingService.GetCategories {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> LandingService.GetCategories {
        var returnMe:LandingService.GetCategories = builderResult
        return returnMe
      }
      public func mergeFrom(other:LandingService.GetCategories) -> LandingService.GetCategoriesBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->LandingService.GetCategoriesBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategoriesBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetOrganizationCategories : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "organization_id": return organization_id
                 default: return nil
                 }
          }

          public private(set) var hasOrganizationId:Bool = false
          public private(set) var organization_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasOrganizationId {
              output.writeString(1, value:organization_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasOrganizationId {
              size += WireFormat.computeStringSize(1, value:organization_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> LandingService.GetOrganizationCategories.Request {
            return LandingService.GetOrganizationCategories.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> LandingService.GetOrganizationCategories.Request {
            return LandingService.GetOrganizationCategories.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> LandingService.GetOrganizationCategories.Request {
            return LandingService.GetOrganizationCategories.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->LandingService.GetOrganizationCategories.Request {
            return LandingService.GetOrganizationCategories.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> LandingService.GetOrganizationCategories.Request {
            return LandingService.GetOrganizationCategories.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetOrganizationCategories.Request {
            return LandingService.GetOrganizationCategories.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> LandingService.GetOrganizationCategories.RequestBuilder {
            return LandingService.GetOrganizationCategories.Request.classBuilder() as LandingService.GetOrganizationCategories.RequestBuilder
          }
          public func builder() -> LandingService.GetOrganizationCategories.RequestBuilder {
            return classBuilder() as LandingService.GetOrganizationCategories.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return LandingService.GetOrganizationCategories.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return LandingService.GetOrganizationCategories.Request.builder()
          }
          public func toBuilder() -> LandingService.GetOrganizationCategories.RequestBuilder {
            return LandingService.GetOrganizationCategories.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:LandingService.GetOrganizationCategories.Request) -> LandingService.GetOrganizationCategories.RequestBuilder {
            return LandingService.GetOrganizationCategories.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasOrganizationId {
              output += "\(indent) organization_id: \(organization_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasOrganizationId {
                     hashCode = (hashCode &* 31) &+ organization_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "LandingService.GetOrganizationCategories.Request"
          }
          override public func className() -> String {
              return "LandingService.GetOrganizationCategories.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return LandingService.GetOrganizationCategories.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:LandingService.GetOrganizationCategories.Request

          required override public init () {
             builderResult = LandingService.GetOrganizationCategories.Request()
             super.init()
          }
          public var hasOrganizationId:Bool {
               get {
                    return builderResult.hasOrganizationId
               }
          }
          public var organization_id:String {
               get {
                    return builderResult.organization_id
               }
               set (value) {
                   builderResult.hasOrganizationId = true
                   builderResult.organization_id = value
               }
          }
          public func clearOrganizationId() -> LandingService.GetOrganizationCategories.RequestBuilder{
               builderResult.hasOrganizationId = false
               builderResult.organization_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> LandingService.GetOrganizationCategories.RequestBuilder {
            builderResult = LandingService.GetOrganizationCategories.Request()
            return self
          }
          public override func clone() -> LandingService.GetOrganizationCategories.RequestBuilder {
            return LandingService.GetOrganizationCategories.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> LandingService.GetOrganizationCategories.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> LandingService.GetOrganizationCategories.Request {
            var returnMe:LandingService.GetOrganizationCategories.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:LandingService.GetOrganizationCategories.Request) -> LandingService.GetOrganizationCategories.RequestBuilder {
            if other.hasOrganizationId {
                 organization_id = other.organization_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->LandingService.GetOrganizationCategories.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetOrganizationCategories.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                organization_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "owner": return owner
                 case "organization": return organization
                 default: return nil
                 }
          }

          public private(set) var hasOwner:Bool = false
          public private(set) var owner:ProfileService.Containers.Profile = ProfileService.Containers.Profile()
          public private(set) var hasOrganization:Bool = false
          public private(set) var organization:OrganizationService.Containers.Organization = OrganizationService.Containers.Organization()
          public private(set) var categories:Array<LandingService.Containers.Category>  = Array<LandingService.Containers.Category>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementcategories in categories {
                output.writeMessage(1, value:oneElementcategories)
            }
            if hasOwner {
              output.writeMessage(2, value:owner)
            }
            if hasOrganization {
              output.writeMessage(3, value:organization)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementcategories in categories {
                size += WireFormat.computeMessageSize(1, value:oneElementcategories)
            }
            if hasOwner {
              size += WireFormat.computeMessageSize(2, value:owner)
            }
            if hasOrganization {
              size += WireFormat.computeMessageSize(3, value:organization)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> LandingService.GetOrganizationCategories.Response {
            return LandingService.GetOrganizationCategories.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> LandingService.GetOrganizationCategories.Response {
            return LandingService.GetOrganizationCategories.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> LandingService.GetOrganizationCategories.Response {
            return LandingService.GetOrganizationCategories.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->LandingService.GetOrganizationCategories.Response {
            return LandingService.GetOrganizationCategories.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> LandingService.GetOrganizationCategories.Response {
            return LandingService.GetOrganizationCategories.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetOrganizationCategories.Response {
            return LandingService.GetOrganizationCategories.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> LandingService.GetOrganizationCategories.ResponseBuilder {
            return LandingService.GetOrganizationCategories.Response.classBuilder() as LandingService.GetOrganizationCategories.ResponseBuilder
          }
          public func builder() -> LandingService.GetOrganizationCategories.ResponseBuilder {
            return classBuilder() as LandingService.GetOrganizationCategories.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return LandingService.GetOrganizationCategories.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return LandingService.GetOrganizationCategories.Response.builder()
          }
          public func toBuilder() -> LandingService.GetOrganizationCategories.ResponseBuilder {
            return LandingService.GetOrganizationCategories.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:LandingService.GetOrganizationCategories.Response) -> LandingService.GetOrganizationCategories.ResponseBuilder {
            return LandingService.GetOrganizationCategories.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var categoriesElementIndex:Int = 0
            for oneElementcategories in categories {
                output += "\(indent) categories[\(categoriesElementIndex)] {\n"
                oneElementcategories.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                categoriesElementIndex++
            }
            if hasOwner {
              output += "\(indent) owner {\n"
              owner.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasOrganization {
              output += "\(indent) organization {\n"
              organization.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementcategories in categories {
                      hashCode = (hashCode &* 31) &+ oneElementcategories.hashValue
                  }
                  if hasOwner {
                    hashCode = (hashCode &* 31) &+ owner.hashValue
                  }
                  if hasOrganization {
                    hashCode = (hashCode &* 31) &+ organization.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "LandingService.GetOrganizationCategories.Response"
          }
          override public func className() -> String {
              return "LandingService.GetOrganizationCategories.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return LandingService.GetOrganizationCategories.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:LandingService.GetOrganizationCategories.Response

          required override public init () {
             builderResult = LandingService.GetOrganizationCategories.Response()
             super.init()
          }
          public var categories:Array<LandingService.Containers.Category> {
               get {
                   return builderResult.categories
               }
               set (value) {
                   builderResult.categories = value
               }
          }
          public func clearCategories() -> LandingService.GetOrganizationCategories.ResponseBuilder {
            builderResult.categories.removeAll(keepCapacity: false)
            return self
          }
          public var hasOwner:Bool {
               get {
                   return builderResult.hasOwner
               }
          }
          public var owner:ProfileService.Containers.Profile {
               get {
                   return builderResult.owner
               }
               set (value) {
                   builderResult.hasOwner = true
                   builderResult.owner = value
               }
          }
          public func setOwnerBuilder(builderForValue:ProfileService.Containers.ProfileBuilder) -> LandingService.GetOrganizationCategories.ResponseBuilder {
            owner = builderForValue.build()
            return self
          }
          public func mergeOwner(value:ProfileService.Containers.Profile) -> LandingService.GetOrganizationCategories.ResponseBuilder {
            if (builderResult.hasOwner) {
              builderResult.owner = ProfileService.Containers.Profile.builderWithPrototype(builderResult.owner).mergeFrom(value).buildPartial()
            } else {
              builderResult.owner = value
            }
            builderResult.hasOwner = true
            return self
          }
          public func clearOwner() -> LandingService.GetOrganizationCategories.ResponseBuilder {
            builderResult.hasOwner = false
            builderResult.owner = ProfileService.Containers.Profile()
            return self
          }
          public var hasOrganization:Bool {
               get {
                   return builderResult.hasOrganization
               }
          }
          public var organization:OrganizationService.Containers.Organization {
               get {
                   return builderResult.organization
               }
               set (value) {
                   builderResult.hasOrganization = true
                   builderResult.organization = value
               }
          }
          public func setOrganizationBuilder(builderForValue:OrganizationService.Containers.OrganizationBuilder) -> LandingService.GetOrganizationCategories.ResponseBuilder {
            organization = builderForValue.build()
            return self
          }
          public func mergeOrganization(value:OrganizationService.Containers.Organization) -> LandingService.GetOrganizationCategories.ResponseBuilder {
            if (builderResult.hasOrganization) {
              builderResult.organization = OrganizationService.Containers.Organization.builderWithPrototype(builderResult.organization).mergeFrom(value).buildPartial()
            } else {
              builderResult.organization = value
            }
            builderResult.hasOrganization = true
            return self
          }
          public func clearOrganization() -> LandingService.GetOrganizationCategories.ResponseBuilder {
            builderResult.hasOrganization = false
            builderResult.organization = OrganizationService.Containers.Organization()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> LandingService.GetOrganizationCategories.ResponseBuilder {
            builderResult = LandingService.GetOrganizationCategories.Response()
            return self
          }
          public override func clone() -> LandingService.GetOrganizationCategories.ResponseBuilder {
            return LandingService.GetOrganizationCategories.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> LandingService.GetOrganizationCategories.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> LandingService.GetOrganizationCategories.Response {
            var returnMe:LandingService.GetOrganizationCategories.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:LandingService.GetOrganizationCategories.Response) -> LandingService.GetOrganizationCategories.ResponseBuilder {
            if !other.categories.isEmpty  {
               builderResult.categories += other.categories
            }
            if (other.hasOwner) {
                mergeOwner(other.owner)
            }
            if (other.hasOrganization) {
                mergeOrganization(other.organization)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->LandingService.GetOrganizationCategories.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetOrganizationCategories.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = LandingService.Containers.Category.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                categories += [subBuilder.buildPartial()]

              case 18 :
                var subBuilder:ProfileService.Containers.ProfileBuilder = ProfileService.Containers.Profile.builder()
                if hasOwner {
                  subBuilder.mergeFrom(owner)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                owner = subBuilder.buildPartial()

              case 26 :
                var subBuilder:OrganizationService.Containers.OrganizationBuilder = OrganizationService.Containers.Organization.builder()
                if hasOrganization {
                  subBuilder.mergeFrom(organization)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                organization = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> LandingService.GetOrganizationCategories {
        return LandingService.GetOrganizationCategories.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> LandingService.GetOrganizationCategories {
        return LandingService.GetOrganizationCategories.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> LandingService.GetOrganizationCategories {
        return LandingService.GetOrganizationCategories.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->LandingService.GetOrganizationCategories {
        return LandingService.GetOrganizationCategories.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> LandingService.GetOrganizationCategories {
        return LandingService.GetOrganizationCategories.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetOrganizationCategories {
        return LandingService.GetOrganizationCategories.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> LandingService.GetOrganizationCategoriesBuilder {
        return LandingService.GetOrganizationCategories.classBuilder() as LandingService.GetOrganizationCategoriesBuilder
      }
      public func builder() -> LandingService.GetOrganizationCategoriesBuilder {
        return classBuilder() as LandingService.GetOrganizationCategoriesBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return LandingService.GetOrganizationCategoriesBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return LandingService.GetOrganizationCategories.builder()
      }
      public func toBuilder() -> LandingService.GetOrganizationCategoriesBuilder {
        return LandingService.GetOrganizationCategories.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:LandingService.GetOrganizationCategories) -> LandingService.GetOrganizationCategoriesBuilder {
        return LandingService.GetOrganizationCategories.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "LandingService.GetOrganizationCategories"
      }
      override public func className() -> String {
          return "LandingService.GetOrganizationCategories"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return LandingService.GetOrganizationCategories.self
      }


      //Meta information declaration end

    }

    final public class GetOrganizationCategoriesBuilder : GeneratedMessageBuilder {
      private var builderResult:LandingService.GetOrganizationCategories

      required override public init () {
         builderResult = LandingService.GetOrganizationCategories()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> LandingService.GetOrganizationCategoriesBuilder {
        builderResult = LandingService.GetOrganizationCategories()
        return self
      }
      public override func clone() -> LandingService.GetOrganizationCategoriesBuilder {
        return LandingService.GetOrganizationCategories.builderWithPrototype(builderResult)
      }
      public override func build() -> LandingService.GetOrganizationCategories {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> LandingService.GetOrganizationCategories {
        var returnMe:LandingService.GetOrganizationCategories = builderResult
        return returnMe
      }
      public func mergeFrom(other:LandingService.GetOrganizationCategories) -> LandingService.GetOrganizationCategoriesBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->LandingService.GetOrganizationCategoriesBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetOrganizationCategoriesBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end

  override public subscript (key: String) -> Any? {
         switch key {
         default: return nil
         }
  }

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  public class func parseFromData(data:[Byte]) -> LandingService {
    return LandingService.builder().mergeFromData(data).build()
  }
  public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> LandingService {
    return LandingService.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> LandingService {
    return LandingService.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->LandingService {
    return LandingService.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> LandingService {
    return LandingService.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService {
    return LandingService.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> LandingServiceBuilder {
    return LandingService.classBuilder() as LandingServiceBuilder
  }
  public func builder() -> LandingServiceBuilder {
    return classBuilder() as LandingServiceBuilder
  }
  public override class func classBuilder() -> MessageBuilder {
    return LandingServiceBuilder()
  }
  public override func classBuilder() -> MessageBuilder {
    return LandingService.builder()
  }
  public func toBuilder() -> LandingServiceBuilder {
    return LandingService.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:LandingService) -> LandingServiceBuilder {
    return LandingService.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "LandingService"
  }
  override public func className() -> String {
      return "LandingService"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return LandingService.self
  }


  //Meta information declaration end

}

final public class LandingServiceBuilder : GeneratedMessageBuilder {
  private var builderResult:LandingService

  required override public init () {
     builderResult = LandingService()
     super.init()
  }
  override public var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  public override func clear() -> LandingServiceBuilder {
    builderResult = LandingService()
    return self
  }
  public override func clone() -> LandingServiceBuilder {
    return LandingService.builderWithPrototype(builderResult)
  }
  public override func build() -> LandingService {
       checkInitialized()
       return buildPartial()
  }
  public func buildPartial() -> LandingService {
    var returnMe:LandingService = builderResult
    return returnMe
  }
  public func mergeFrom(other:LandingService) -> LandingServiceBuilder {
    mergeUnknownFields(other.unknownFields)
    return self
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream) ->LandingServiceBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingServiceBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


public extension LandingService.Containers.Category {
    class func parseFromNSData(data:NSData) -> LandingService.Containers.Category {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.Containers.Category.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> LandingService.Containers.Category {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.Containers.Category.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension LandingService.Containers {
    class func parseFromNSData(data:NSData) -> LandingService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.Containers.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> LandingService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.Containers.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension LandingService.GetCategories.Request {
    class func parseFromNSData(data:NSData) -> LandingService.GetCategories.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetCategories.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetCategories.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension LandingService.GetCategories.Response {
    class func parseFromNSData(data:NSData) -> LandingService.GetCategories.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetCategories.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetCategories.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension LandingService.GetCategories {
    class func parseFromNSData(data:NSData) -> LandingService.GetCategories {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetCategories.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetCategories.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension LandingService.GetOrganizationCategories.Request {
    class func parseFromNSData(data:NSData) -> LandingService.GetOrganizationCategories.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetOrganizationCategories.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> LandingService.GetOrganizationCategories.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetOrganizationCategories.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension LandingService.GetOrganizationCategories.Response {
    class func parseFromNSData(data:NSData) -> LandingService.GetOrganizationCategories.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetOrganizationCategories.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> LandingService.GetOrganizationCategories.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetOrganizationCategories.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension LandingService.GetOrganizationCategories {
    class func parseFromNSData(data:NSData) -> LandingService.GetOrganizationCategories {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetOrganizationCategories.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> LandingService.GetOrganizationCategories {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetOrganizationCategories.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension LandingService {
    class func parseFromNSData(data:NSData) -> LandingService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> LandingService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
