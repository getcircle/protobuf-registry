// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

public struct LandingServiceRoot {
  public static var sharedInstance : LandingServiceRoot {
   struct Static {
       static let instance : LandingServiceRoot = LandingServiceRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    OrganizationServiceRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    ProfileServiceRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

public func == (lhs: LandingService.Containers, rhs: LandingService.Containers) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: LandingService.GetCategories, rhs: LandingService.GetCategories) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: LandingService, rhs: LandingService) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final public class LandingService : GeneratedMessage {


  //Nested type declaration start

    final public class Containers : GeneratedMessage {


      //Nested type declaration start

        final public class ProfileCategory : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "title": return title
                 case "content_key": return content_key
                 case "display_type": return Int(self.display_type.rawValue)
                 default: return nil
                 }
          }

          public private(set) var hasTitle:Bool = false
          public private(set) var title:String = ""

          public private(set) var hasContentKey:Bool = false
          public private(set) var content_key:String = ""

          public private(set) var display_type:LandingService.Containers.DisplayType = LandingService.Containers.DisplayType.Group
          public private(set) var hasDisplayType:Bool = false
          public private(set) var content:Array<ProfileService.Containers.Profile>  = Array<ProfileService.Containers.Profile>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasTitle {
              output.writeString(1, value:title)
            }
            for oneElementcontent in content {
                output.writeMessage(2, value:oneElementcontent)
            }
            if hasContentKey {
              output.writeString(3, value:content_key)
            }
            if hasDisplayType {
              output.writeEnum(4, value:display_type.rawValue)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasTitle {
              size += WireFormat.computeStringSize(1, value:title)
            }
            for oneElementcontent in content {
                size += WireFormat.computeMessageSize(2, value:oneElementcontent)
            }
            if hasContentKey {
              size += WireFormat.computeStringSize(3, value:content_key)
            }
            if (hasDisplayType) {
              size += WireFormat.computeEnumSize(4, value:display_type.rawValue)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> LandingService.Containers.ProfileCategory {
            return LandingService.Containers.ProfileCategory.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> LandingService.Containers.ProfileCategory {
            return LandingService.Containers.ProfileCategory.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> LandingService.Containers.ProfileCategory {
            return LandingService.Containers.ProfileCategory.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->LandingService.Containers.ProfileCategory {
            return LandingService.Containers.ProfileCategory.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> LandingService.Containers.ProfileCategory {
            return LandingService.Containers.ProfileCategory.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.Containers.ProfileCategory {
            return LandingService.Containers.ProfileCategory.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> LandingService.Containers.ProfileCategoryBuilder {
            return LandingService.Containers.ProfileCategory.classBuilder() as LandingService.Containers.ProfileCategoryBuilder
          }
          public func builder() -> LandingService.Containers.ProfileCategoryBuilder {
            return classBuilder() as LandingService.Containers.ProfileCategoryBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return LandingService.Containers.ProfileCategoryBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return LandingService.Containers.ProfileCategory.builder()
          }
          public func toBuilder() -> LandingService.Containers.ProfileCategoryBuilder {
            return LandingService.Containers.ProfileCategory.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:LandingService.Containers.ProfileCategory) -> LandingService.Containers.ProfileCategoryBuilder {
            return LandingService.Containers.ProfileCategory.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasTitle {
              output += "\(indent) title: \(title) \n"
            }
            var contentElementIndex:Int = 0
            for oneElementcontent in content {
                output += "\(indent) content[\(contentElementIndex)] {\n"
                oneElementcontent.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                contentElementIndex++
            }
            if hasContentKey {
              output += "\(indent) content_key: \(content_key) \n"
            }
            if (hasDisplayType) {
              output += "\(indent) display_type: \(display_type.rawValue)\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasTitle {
                     hashCode = (hashCode &* 31) &+ title.hashValue
                  }
                  for oneElementcontent in content {
                      hashCode = (hashCode &* 31) &+ oneElementcontent.hashValue
                  }
                  if hasContentKey {
                     hashCode = (hashCode &* 31) &+ content_key.hashValue
                  }
                  if hasDisplayType {
                     hashCode = (hashCode &* 31) &+ Int(display_type.rawValue)
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "LandingService.Containers.ProfileCategory"
          }
          override public func className() -> String {
              return "LandingService.Containers.ProfileCategory"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return LandingService.Containers.ProfileCategory.self
          }


          //Meta information declaration end

        }

        final public class ProfileCategoryBuilder : GeneratedMessageBuilder {
          private var builderResult:LandingService.Containers.ProfileCategory

          required override public init () {
             builderResult = LandingService.Containers.ProfileCategory()
             super.init()
          }
          public var hasTitle:Bool {
               get {
                    return builderResult.hasTitle
               }
          }
          public var title:String {
               get {
                    return builderResult.title
               }
               set (value) {
                   builderResult.hasTitle = true
                   builderResult.title = value
               }
          }
          public func clearTitle() -> LandingService.Containers.ProfileCategoryBuilder{
               builderResult.hasTitle = false
               builderResult.title = ""
               return self
          }
          public var content:Array<ProfileService.Containers.Profile> {
               get {
                   return builderResult.content
               }
               set (value) {
                   builderResult.content = value
               }
          }
          public func clearContent() -> LandingService.Containers.ProfileCategoryBuilder {
            builderResult.content.removeAll(keepCapacity: false)
            return self
          }
          public var hasContentKey:Bool {
               get {
                    return builderResult.hasContentKey
               }
          }
          public var content_key:String {
               get {
                    return builderResult.content_key
               }
               set (value) {
                   builderResult.hasContentKey = true
                   builderResult.content_key = value
               }
          }
          public func clearContentKey() -> LandingService.Containers.ProfileCategoryBuilder{
               builderResult.hasContentKey = false
               builderResult.content_key = ""
               return self
          }
            public var hasDisplayType:Bool{
                get {
                    return builderResult.hasDisplayType
                }
            }
            public var display_type:LandingService.Containers.DisplayType {
                get {
                    return builderResult.display_type
                }
                set (value) {
                    builderResult.hasDisplayType = true
                    builderResult.display_type = value
                }
            }
            public func clearDisplayType() -> LandingService.Containers.ProfileCategoryBuilder {
               builderResult.hasDisplayType = false
               builderResult.display_type = .Group
               return self
            }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> LandingService.Containers.ProfileCategoryBuilder {
            builderResult = LandingService.Containers.ProfileCategory()
            return self
          }
          public override func clone() -> LandingService.Containers.ProfileCategoryBuilder {
            return LandingService.Containers.ProfileCategory.builderWithPrototype(builderResult)
          }
          public override func build() -> LandingService.Containers.ProfileCategory {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> LandingService.Containers.ProfileCategory {
            var returnMe:LandingService.Containers.ProfileCategory = builderResult
            return returnMe
          }
          public func mergeFrom(other:LandingService.Containers.ProfileCategory) -> LandingService.Containers.ProfileCategoryBuilder {
            if (other == LandingService.Containers.ProfileCategory()) {
             return self
            }
            if other.hasTitle {
                 title = other.title
            }
            if !other.content.isEmpty  {
               builderResult.content += other.content
            }
            if other.hasContentKey {
                 content_key = other.content_key
            }
            if other.hasDisplayType {
                 display_type = other.display_type
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->LandingService.Containers.ProfileCategoryBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.Containers.ProfileCategoryBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                title = input.readString()

              case 18 :
                var subBuilder = ProfileService.Containers.Profile.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                content += [subBuilder.buildPartial()]

              case 26 :
                content_key = input.readString()

              case 32 :
                let valueIntdisplay_type = input.readEnum()
                if let enumsdisplay_type = LandingService.Containers.DisplayType(rawValue:valueIntdisplay_type){
                     display_type = enumsdisplay_type
                } else {
                     unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntdisplay_type))
                }

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class AddressCategory : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "title": return title
                 case "content_key": return content_key
                 case "display_type": return Int(self.display_type.rawValue)
                 default: return nil
                 }
          }

          public private(set) var hasTitle:Bool = false
          public private(set) var title:String = ""

          public private(set) var hasContentKey:Bool = false
          public private(set) var content_key:String = ""

          public private(set) var display_type:LandingService.Containers.DisplayType = LandingService.Containers.DisplayType.Detail
          public private(set) var hasDisplayType:Bool = false
          public private(set) var content:Array<OrganizationService.Containers.Address>  = Array<OrganizationService.Containers.Address>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasTitle {
              output.writeString(1, value:title)
            }
            for oneElementcontent in content {
                output.writeMessage(2, value:oneElementcontent)
            }
            if hasContentKey {
              output.writeString(3, value:content_key)
            }
            if hasDisplayType {
              output.writeEnum(4, value:display_type.rawValue)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasTitle {
              size += WireFormat.computeStringSize(1, value:title)
            }
            for oneElementcontent in content {
                size += WireFormat.computeMessageSize(2, value:oneElementcontent)
            }
            if hasContentKey {
              size += WireFormat.computeStringSize(3, value:content_key)
            }
            if (hasDisplayType) {
              size += WireFormat.computeEnumSize(4, value:display_type.rawValue)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> LandingService.Containers.AddressCategory {
            return LandingService.Containers.AddressCategory.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> LandingService.Containers.AddressCategory {
            return LandingService.Containers.AddressCategory.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> LandingService.Containers.AddressCategory {
            return LandingService.Containers.AddressCategory.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->LandingService.Containers.AddressCategory {
            return LandingService.Containers.AddressCategory.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> LandingService.Containers.AddressCategory {
            return LandingService.Containers.AddressCategory.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.Containers.AddressCategory {
            return LandingService.Containers.AddressCategory.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> LandingService.Containers.AddressCategoryBuilder {
            return LandingService.Containers.AddressCategory.classBuilder() as LandingService.Containers.AddressCategoryBuilder
          }
          public func builder() -> LandingService.Containers.AddressCategoryBuilder {
            return classBuilder() as LandingService.Containers.AddressCategoryBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return LandingService.Containers.AddressCategoryBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return LandingService.Containers.AddressCategory.builder()
          }
          public func toBuilder() -> LandingService.Containers.AddressCategoryBuilder {
            return LandingService.Containers.AddressCategory.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:LandingService.Containers.AddressCategory) -> LandingService.Containers.AddressCategoryBuilder {
            return LandingService.Containers.AddressCategory.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasTitle {
              output += "\(indent) title: \(title) \n"
            }
            var contentElementIndex:Int = 0
            for oneElementcontent in content {
                output += "\(indent) content[\(contentElementIndex)] {\n"
                oneElementcontent.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                contentElementIndex++
            }
            if hasContentKey {
              output += "\(indent) content_key: \(content_key) \n"
            }
            if (hasDisplayType) {
              output += "\(indent) display_type: \(display_type.rawValue)\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasTitle {
                     hashCode = (hashCode &* 31) &+ title.hashValue
                  }
                  for oneElementcontent in content {
                      hashCode = (hashCode &* 31) &+ oneElementcontent.hashValue
                  }
                  if hasContentKey {
                     hashCode = (hashCode &* 31) &+ content_key.hashValue
                  }
                  if hasDisplayType {
                     hashCode = (hashCode &* 31) &+ Int(display_type.rawValue)
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "LandingService.Containers.AddressCategory"
          }
          override public func className() -> String {
              return "LandingService.Containers.AddressCategory"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return LandingService.Containers.AddressCategory.self
          }


          //Meta information declaration end

        }

        final public class AddressCategoryBuilder : GeneratedMessageBuilder {
          private var builderResult:LandingService.Containers.AddressCategory

          required override public init () {
             builderResult = LandingService.Containers.AddressCategory()
             super.init()
          }
          public var hasTitle:Bool {
               get {
                    return builderResult.hasTitle
               }
          }
          public var title:String {
               get {
                    return builderResult.title
               }
               set (value) {
                   builderResult.hasTitle = true
                   builderResult.title = value
               }
          }
          public func clearTitle() -> LandingService.Containers.AddressCategoryBuilder{
               builderResult.hasTitle = false
               builderResult.title = ""
               return self
          }
          public var content:Array<OrganizationService.Containers.Address> {
               get {
                   return builderResult.content
               }
               set (value) {
                   builderResult.content = value
               }
          }
          public func clearContent() -> LandingService.Containers.AddressCategoryBuilder {
            builderResult.content.removeAll(keepCapacity: false)
            return self
          }
          public var hasContentKey:Bool {
               get {
                    return builderResult.hasContentKey
               }
          }
          public var content_key:String {
               get {
                    return builderResult.content_key
               }
               set (value) {
                   builderResult.hasContentKey = true
                   builderResult.content_key = value
               }
          }
          public func clearContentKey() -> LandingService.Containers.AddressCategoryBuilder{
               builderResult.hasContentKey = false
               builderResult.content_key = ""
               return self
          }
            public var hasDisplayType:Bool{
                get {
                    return builderResult.hasDisplayType
                }
            }
            public var display_type:LandingService.Containers.DisplayType {
                get {
                    return builderResult.display_type
                }
                set (value) {
                    builderResult.hasDisplayType = true
                    builderResult.display_type = value
                }
            }
            public func clearDisplayType() -> LandingService.Containers.AddressCategoryBuilder {
               builderResult.hasDisplayType = false
               builderResult.display_type = .Detail
               return self
            }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> LandingService.Containers.AddressCategoryBuilder {
            builderResult = LandingService.Containers.AddressCategory()
            return self
          }
          public override func clone() -> LandingService.Containers.AddressCategoryBuilder {
            return LandingService.Containers.AddressCategory.builderWithPrototype(builderResult)
          }
          public override func build() -> LandingService.Containers.AddressCategory {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> LandingService.Containers.AddressCategory {
            var returnMe:LandingService.Containers.AddressCategory = builderResult
            return returnMe
          }
          public func mergeFrom(other:LandingService.Containers.AddressCategory) -> LandingService.Containers.AddressCategoryBuilder {
            if (other == LandingService.Containers.AddressCategory()) {
             return self
            }
            if other.hasTitle {
                 title = other.title
            }
            if !other.content.isEmpty  {
               builderResult.content += other.content
            }
            if other.hasContentKey {
                 content_key = other.content_key
            }
            if other.hasDisplayType {
                 display_type = other.display_type
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->LandingService.Containers.AddressCategoryBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.Containers.AddressCategoryBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                title = input.readString()

              case 18 :
                var subBuilder = OrganizationService.Containers.Address.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                content += [subBuilder.buildPartial()]

              case 26 :
                content_key = input.readString()

              case 32 :
                let valueIntdisplay_type = input.readEnum()
                if let enumsdisplay_type = LandingService.Containers.DisplayType(rawValue:valueIntdisplay_type){
                     display_type = enumsdisplay_type
                } else {
                     unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntdisplay_type))
                }

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



        //Enum type declaration start 

        public enum DisplayType:Int32 {
          case Group = 0
          case Detail = 1

          public static func IsValidValue(value:Int32) ->Bool {
              if let check = DisplayType(rawValue:value) {
                  return true
              }
              return false
          }
        }



        //Enum type declaration end 

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> LandingService.Containers {
        return LandingService.Containers.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> LandingService.Containers {
        return LandingService.Containers.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> LandingService.Containers {
        return LandingService.Containers.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->LandingService.Containers {
        return LandingService.Containers.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> LandingService.Containers {
        return LandingService.Containers.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.Containers {
        return LandingService.Containers.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> LandingService.ContainersBuilder {
        return LandingService.Containers.classBuilder() as LandingService.ContainersBuilder
      }
      public func builder() -> LandingService.ContainersBuilder {
        return classBuilder() as LandingService.ContainersBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return LandingService.ContainersBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return LandingService.Containers.builder()
      }
      public func toBuilder() -> LandingService.ContainersBuilder {
        return LandingService.Containers.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:LandingService.Containers) -> LandingService.ContainersBuilder {
        return LandingService.Containers.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "LandingService.Containers"
      }
      override public func className() -> String {
          return "LandingService.Containers"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return LandingService.Containers.self
      }


      //Meta information declaration end

    }

    final public class ContainersBuilder : GeneratedMessageBuilder {
      private var builderResult:LandingService.Containers

      required override public init () {
         builderResult = LandingService.Containers()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> LandingService.ContainersBuilder {
        builderResult = LandingService.Containers()
        return self
      }
      public override func clone() -> LandingService.ContainersBuilder {
        return LandingService.Containers.builderWithPrototype(builderResult)
      }
      public override func build() -> LandingService.Containers {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> LandingService.Containers {
        var returnMe:LandingService.Containers = builderResult
        return returnMe
      }
      public func mergeFrom(other:LandingService.Containers) -> LandingService.ContainersBuilder {
        if (other == LandingService.Containers()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->LandingService.ContainersBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.ContainersBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetCategories : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {


          //OneOf declaration start

          public enum LookupKey {
            case LookupKeyOneOfNotSet

            public func checkOneOfIsSet() -> Bool {
                 switch self {
                 case .LookupKeyOneOfNotSet:
                      return false
                 default:
                      return true
                 }
            }
            case ProfileId(String)

            public static func getProfileId(value:LookupKey) ->String? {
                 switch value {
                 case .ProfileId(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
          }



          //OneOf declaration end

          private var storageLookupKey:LandingService.GetCategories.Request.LookupKey =  LandingService.GetCategories.Request.LookupKey.LookupKeyOneOfNotSet
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "profile_id": return profile_id
                 default: return nil
                 }
          }

          public private(set) var hasProfileId:Bool {
                get {
                     if LandingService.GetCategories.Request.LookupKey.getProfileId(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var profile_id:String!{
               get {
                    return LandingService.GetCategories.Request.LookupKey.getProfileId(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = LandingService.GetCategories.Request.LookupKey.ProfileId(newvalue)
               }
          }
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfileId {
              output.writeString(1, value:profile_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfileId {
              size += WireFormat.computeStringSize(1, value:profile_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> LandingService.GetCategories.Request {
            return LandingService.GetCategories.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories.Request {
            return LandingService.GetCategories.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> LandingService.GetCategories.Request {
            return LandingService.GetCategories.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->LandingService.GetCategories.Request {
            return LandingService.GetCategories.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> LandingService.GetCategories.Request {
            return LandingService.GetCategories.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories.Request {
            return LandingService.GetCategories.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> LandingService.GetCategories.RequestBuilder {
            return LandingService.GetCategories.Request.classBuilder() as LandingService.GetCategories.RequestBuilder
          }
          public func builder() -> LandingService.GetCategories.RequestBuilder {
            return classBuilder() as LandingService.GetCategories.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return LandingService.GetCategories.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return LandingService.GetCategories.Request.builder()
          }
          public func toBuilder() -> LandingService.GetCategories.RequestBuilder {
            return LandingService.GetCategories.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:LandingService.GetCategories.Request) -> LandingService.GetCategories.RequestBuilder {
            return LandingService.GetCategories.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfileId {
              output += "\(indent) profile_id: \(profile_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfileId {
                     hashCode = (hashCode &* 31) &+ profile_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "LandingService.GetCategories.Request"
          }
          override public func className() -> String {
              return "LandingService.GetCategories.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return LandingService.GetCategories.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:LandingService.GetCategories.Request

          required override public init () {
             builderResult = LandingService.GetCategories.Request()
             super.init()
          }
          public var hasProfileId:Bool {
               get {
                    return builderResult.hasProfileId
               }
          }
          public var profile_id:String {
               get {
                    return builderResult.profile_id
               }
               set (value) {
                   builderResult.hasProfileId = true
                   builderResult.profile_id = value
               }
          }
          public func clearProfileId() -> LandingService.GetCategories.RequestBuilder{
               builderResult.hasProfileId = false
               builderResult.profile_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> LandingService.GetCategories.RequestBuilder {
            builderResult = LandingService.GetCategories.Request()
            return self
          }
          public override func clone() -> LandingService.GetCategories.RequestBuilder {
            return LandingService.GetCategories.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> LandingService.GetCategories.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> LandingService.GetCategories.Request {
            var returnMe:LandingService.GetCategories.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:LandingService.GetCategories.Request) -> LandingService.GetCategories.RequestBuilder {
            if (other == LandingService.GetCategories.Request()) {
             return self
            }
            if other.hasProfileId {
                 profile_id = other.profile_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->LandingService.GetCategories.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                profile_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var profile_categories:Array<LandingService.Containers.ProfileCategory>  = Array<LandingService.Containers.ProfileCategory>()
          public private(set) var address_categories:Array<LandingService.Containers.AddressCategory>  = Array<LandingService.Containers.AddressCategory>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementprofile_categories in profile_categories {
                output.writeMessage(1, value:oneElementprofile_categories)
            }
            for oneElementaddress_categories in address_categories {
                output.writeMessage(2, value:oneElementaddress_categories)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementprofile_categories in profile_categories {
                size += WireFormat.computeMessageSize(1, value:oneElementprofile_categories)
            }
            for oneElementaddress_categories in address_categories {
                size += WireFormat.computeMessageSize(2, value:oneElementaddress_categories)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> LandingService.GetCategories.Response {
            return LandingService.GetCategories.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories.Response {
            return LandingService.GetCategories.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> LandingService.GetCategories.Response {
            return LandingService.GetCategories.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->LandingService.GetCategories.Response {
            return LandingService.GetCategories.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> LandingService.GetCategories.Response {
            return LandingService.GetCategories.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories.Response {
            return LandingService.GetCategories.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> LandingService.GetCategories.ResponseBuilder {
            return LandingService.GetCategories.Response.classBuilder() as LandingService.GetCategories.ResponseBuilder
          }
          public func builder() -> LandingService.GetCategories.ResponseBuilder {
            return classBuilder() as LandingService.GetCategories.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return LandingService.GetCategories.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return LandingService.GetCategories.Response.builder()
          }
          public func toBuilder() -> LandingService.GetCategories.ResponseBuilder {
            return LandingService.GetCategories.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:LandingService.GetCategories.Response) -> LandingService.GetCategories.ResponseBuilder {
            return LandingService.GetCategories.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var profile_categoriesElementIndex:Int = 0
            for oneElementprofile_categories in profile_categories {
                output += "\(indent) profile_categories[\(profile_categoriesElementIndex)] {\n"
                oneElementprofile_categories.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                profile_categoriesElementIndex++
            }
            var address_categoriesElementIndex:Int = 0
            for oneElementaddress_categories in address_categories {
                output += "\(indent) address_categories[\(address_categoriesElementIndex)] {\n"
                oneElementaddress_categories.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                address_categoriesElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementprofile_categories in profile_categories {
                      hashCode = (hashCode &* 31) &+ oneElementprofile_categories.hashValue
                  }
                  for oneElementaddress_categories in address_categories {
                      hashCode = (hashCode &* 31) &+ oneElementaddress_categories.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "LandingService.GetCategories.Response"
          }
          override public func className() -> String {
              return "LandingService.GetCategories.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return LandingService.GetCategories.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:LandingService.GetCategories.Response

          required override public init () {
             builderResult = LandingService.GetCategories.Response()
             super.init()
          }
          public var profile_categories:Array<LandingService.Containers.ProfileCategory> {
               get {
                   return builderResult.profile_categories
               }
               set (value) {
                   builderResult.profile_categories = value
               }
          }
          public func clearProfileCategories() -> LandingService.GetCategories.ResponseBuilder {
            builderResult.profile_categories.removeAll(keepCapacity: false)
            return self
          }
          public var address_categories:Array<LandingService.Containers.AddressCategory> {
               get {
                   return builderResult.address_categories
               }
               set (value) {
                   builderResult.address_categories = value
               }
          }
          public func clearAddressCategories() -> LandingService.GetCategories.ResponseBuilder {
            builderResult.address_categories.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> LandingService.GetCategories.ResponseBuilder {
            builderResult = LandingService.GetCategories.Response()
            return self
          }
          public override func clone() -> LandingService.GetCategories.ResponseBuilder {
            return LandingService.GetCategories.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> LandingService.GetCategories.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> LandingService.GetCategories.Response {
            var returnMe:LandingService.GetCategories.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:LandingService.GetCategories.Response) -> LandingService.GetCategories.ResponseBuilder {
            if (other == LandingService.GetCategories.Response()) {
             return self
            }
            if !other.profile_categories.isEmpty  {
               builderResult.profile_categories += other.profile_categories
            }
            if !other.address_categories.isEmpty  {
               builderResult.address_categories += other.address_categories
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->LandingService.GetCategories.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = LandingService.Containers.ProfileCategory.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                profile_categories += [subBuilder.buildPartial()]

              case 18 :
                var subBuilder = LandingService.Containers.AddressCategory.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                address_categories += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> LandingService.GetCategories {
        return LandingService.GetCategories.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories {
        return LandingService.GetCategories.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> LandingService.GetCategories {
        return LandingService.GetCategories.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->LandingService.GetCategories {
        return LandingService.GetCategories.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> LandingService.GetCategories {
        return LandingService.GetCategories.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories {
        return LandingService.GetCategories.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> LandingService.GetCategoriesBuilder {
        return LandingService.GetCategories.classBuilder() as LandingService.GetCategoriesBuilder
      }
      public func builder() -> LandingService.GetCategoriesBuilder {
        return classBuilder() as LandingService.GetCategoriesBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return LandingService.GetCategoriesBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return LandingService.GetCategories.builder()
      }
      public func toBuilder() -> LandingService.GetCategoriesBuilder {
        return LandingService.GetCategories.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:LandingService.GetCategories) -> LandingService.GetCategoriesBuilder {
        return LandingService.GetCategories.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "LandingService.GetCategories"
      }
      override public func className() -> String {
          return "LandingService.GetCategories"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return LandingService.GetCategories.self
      }


      //Meta information declaration end

    }

    final public class GetCategoriesBuilder : GeneratedMessageBuilder {
      private var builderResult:LandingService.GetCategories

      required override public init () {
         builderResult = LandingService.GetCategories()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> LandingService.GetCategoriesBuilder {
        builderResult = LandingService.GetCategories()
        return self
      }
      public override func clone() -> LandingService.GetCategoriesBuilder {
        return LandingService.GetCategories.builderWithPrototype(builderResult)
      }
      public override func build() -> LandingService.GetCategories {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> LandingService.GetCategories {
        var returnMe:LandingService.GetCategories = builderResult
        return returnMe
      }
      public func mergeFrom(other:LandingService.GetCategories) -> LandingService.GetCategoriesBuilder {
        if (other == LandingService.GetCategories()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->LandingService.GetCategoriesBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategoriesBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end

  public subscript(key: String) -> AnyObject? {
         switch key {
         default: return nil
         }
  }

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  public class func parseFromData(data:[Byte]) -> LandingService {
    return LandingService.builder().mergeFromData(data).build()
  }
  public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> LandingService {
    return LandingService.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> LandingService {
    return LandingService.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->LandingService {
    return LandingService.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> LandingService {
    return LandingService.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingService {
    return LandingService.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> LandingServiceBuilder {
    return LandingService.classBuilder() as LandingServiceBuilder
  }
  public func builder() -> LandingServiceBuilder {
    return classBuilder() as LandingServiceBuilder
  }
  public override class func classBuilder() -> MessageBuilder {
    return LandingServiceBuilder()
  }
  public override func classBuilder() -> MessageBuilder {
    return LandingService.builder()
  }
  public func toBuilder() -> LandingServiceBuilder {
    return LandingService.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:LandingService) -> LandingServiceBuilder {
    return LandingService.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "LandingService"
  }
  override public func className() -> String {
      return "LandingService"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return LandingService.self
  }


  //Meta information declaration end

}

final public class LandingServiceBuilder : GeneratedMessageBuilder {
  private var builderResult:LandingService

  required override public init () {
     builderResult = LandingService()
     super.init()
  }
  override public var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  public override func clear() -> LandingServiceBuilder {
    builderResult = LandingService()
    return self
  }
  public override func clone() -> LandingServiceBuilder {
    return LandingService.builderWithPrototype(builderResult)
  }
  public override func build() -> LandingService {
       checkInitialized()
       return buildPartial()
  }
  public func buildPartial() -> LandingService {
    var returnMe:LandingService = builderResult
    return returnMe
  }
  public func mergeFrom(other:LandingService) -> LandingServiceBuilder {
    if (other == LandingService()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream) ->LandingServiceBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> LandingServiceBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


public extension LandingService.Containers.ProfileCategory {
    class func parseFromNSData(data:NSData) -> LandingService.Containers.ProfileCategory {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.Containers.ProfileCategory.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> LandingService.Containers.ProfileCategory {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.Containers.ProfileCategory.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension LandingService.Containers.AddressCategory {
    class func parseFromNSData(data:NSData) -> LandingService.Containers.AddressCategory {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.Containers.AddressCategory.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> LandingService.Containers.AddressCategory {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.Containers.AddressCategory.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension LandingService.Containers {
    class func parseFromNSData(data:NSData) -> LandingService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.Containers.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> LandingService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.Containers.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension LandingService.GetCategories.Request {
    class func parseFromNSData(data:NSData) -> LandingService.GetCategories.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetCategories.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetCategories.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension LandingService.GetCategories.Response {
    class func parseFromNSData(data:NSData) -> LandingService.GetCategories.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetCategories.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetCategories.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension LandingService.GetCategories {
    class func parseFromNSData(data:NSData) -> LandingService.GetCategories {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetCategories.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> LandingService.GetCategories {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.GetCategories.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension LandingService {
    class func parseFromNSData(data:NSData) -> LandingService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> LandingService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return LandingService.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
