// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.Feed{ public struct Containers { }}

public func == (lhs: Services.Feed.Containers.CategoryV1, rhs: Services.Feed.Containers.CategoryV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
  fieldCheck = fieldCheck && (lhs.hasContentKey == rhs.hasContentKey) && (!lhs.hasContentKey || lhs.contentKey == rhs.contentKey)
  fieldCheck = fieldCheck && (lhs.hasCategoryType == rhs.hasCategoryType) && (!lhs.hasCategoryType || lhs.categoryType == rhs.categoryType)
  fieldCheck = fieldCheck && (lhs.hasTotalCount == rhs.hasTotalCount) && (!lhs.hasTotalCount || lhs.totalCount == rhs.totalCount)
  fieldCheck = fieldCheck && (lhs.profiles == rhs.profiles)
  fieldCheck = fieldCheck && (lhs.addresses == rhs.addresses)
  fieldCheck = fieldCheck && (lhs.tags == rhs.tags)
  fieldCheck = fieldCheck && (lhs.teams == rhs.teams)
  fieldCheck = fieldCheck && (lhs.notes == rhs.notes)
  fieldCheck = fieldCheck && (lhs.locations == rhs.locations)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.Feed.Containers {
  public struct ContainersRoot {
    public static var sharedInstance : ContainersRoot {
     struct Static {
         static let instance : ContainersRoot = ContainersRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Note.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Organization.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Profile.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class CategoryV1 : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum CategoryTypeV1:Int32 {
        case DirectReports = 1
        case Anniversaries = 2
        case Birthdays = 3
        case Locations = 4
        case Interests = 5
        case Peers = 6
        case NewHires = 7
        case Departments = 8
        case Executives = 9
        case Organization = 10
        case Notes = 11

      }

      //Enum type declaration end 

    public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "title": return title
           case "contentKey": return contentKey
           case "categoryType": return self.categoryType
           case "totalCount": return totalCount
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasTitle:Bool = false
    public private(set) var title:String = ""

    public private(set) var hasContentKey:Bool = false
    public private(set) var contentKey:String = ""

    public private(set) var categoryType:Services.Feed.Containers.CategoryV1.CategoryTypeV1 = Services.Feed.Containers.CategoryV1.CategoryTypeV1.DirectReports
    public private(set) var hasCategoryType:Bool = false
    public private(set) var hasTotalCount:Bool = false
    public private(set) var totalCount:UInt32 = UInt32(0)

    public private(set) var profiles:Array<Services.Profile.Containers.ProfileV1>  = Array<Services.Profile.Containers.ProfileV1>()
    public private(set) var addresses:Array<Services.Organization.Containers.AddressV1>  = Array<Services.Organization.Containers.AddressV1>()
    public private(set) var tags:Array<Services.Profile.Containers.TagV1>  = Array<Services.Profile.Containers.TagV1>()
    public private(set) var teams:Array<Services.Organization.Containers.TeamV1>  = Array<Services.Organization.Containers.TeamV1>()
    public private(set) var notes:Array<Services.Note.Containers.NoteV1>  = Array<Services.Note.Containers.NoteV1>()
    public private(set) var locations:Array<Services.Organization.Containers.LocationV1>  = Array<Services.Organization.Containers.LocationV1>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasTitle {
        output.writeString(2, value:title)
      }
      if hasContentKey {
        output.writeString(3, value:contentKey)
      }
      if hasCategoryType {
        output.writeEnum(4, value:categoryType.rawValue)
      }
      if hasTotalCount {
        output.writeUInt32(5, value:totalCount)
      }
      for oneElementprofiles in profiles {
          output.writeMessage(6, value:oneElementprofiles)
      }
      for oneElementaddresses in addresses {
          output.writeMessage(7, value:oneElementaddresses)
      }
      for oneElementtags in tags {
          output.writeMessage(8, value:oneElementtags)
      }
      for oneElementteams in teams {
          output.writeMessage(9, value:oneElementteams)
      }
      for oneElementnotes in notes {
          output.writeMessage(10, value:oneElementnotes)
      }
      for oneElementlocations in locations {
          output.writeMessage(11, value:oneElementlocations)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasTitle {
        serialize_size += title.computeStringSize(2)
      }
      if hasContentKey {
        serialize_size += contentKey.computeStringSize(3)
      }
      if (hasCategoryType) {
        serialize_size += categoryType.rawValue.computeEnumSize(4)
      }
      if hasTotalCount {
        serialize_size += totalCount.computeUInt32Size(5)
      }
      for oneElementprofiles in profiles {
          serialize_size += oneElementprofiles.computeMessageSize(6)
      }
      for oneElementaddresses in addresses {
          serialize_size += oneElementaddresses.computeMessageSize(7)
      }
      for oneElementtags in tags {
          serialize_size += oneElementtags.computeMessageSize(8)
      }
      for oneElementteams in teams {
          serialize_size += oneElementteams.computeMessageSize(9)
      }
      for oneElementnotes in notes {
          serialize_size += oneElementnotes.computeMessageSize(10)
      }
      for oneElementlocations in locations {
          serialize_size += oneElementlocations.computeMessageSize(11)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Feed.Containers.CategoryV1 {
      return Services.Feed.Containers.CategoryV1.builder().mergeFromData(data, extensionRegistry:Services.Feed.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Feed.Containers.CategoryV1 {
      return Services.Feed.Containers.CategoryV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Feed.Containers.CategoryV1 {
      return Services.Feed.Containers.CategoryV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Feed.Containers.CategoryV1 {
      return Services.Feed.Containers.CategoryV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Feed.Containers.CategoryV1 {
      return Services.Feed.Containers.CategoryV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Feed.Containers.CategoryV1 {
      return Services.Feed.Containers.CategoryV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Feed.Containers.CategoryV1Builder {
      return Services.Feed.Containers.CategoryV1.classBuilder() as! Services.Feed.Containers.CategoryV1Builder
    }
    public func builder() -> Services.Feed.Containers.CategoryV1Builder {
      return classBuilder() as! Services.Feed.Containers.CategoryV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Feed.Containers.CategoryV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Feed.Containers.CategoryV1.builder()
    }
    public func toBuilder() -> Services.Feed.Containers.CategoryV1Builder {
      return Services.Feed.Containers.CategoryV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Feed.Containers.CategoryV1) -> Services.Feed.Containers.CategoryV1Builder {
      return Services.Feed.Containers.CategoryV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasTitle {
        output += "\(indent) title: \(title) \n"
      }
      if hasContentKey {
        output += "\(indent) contentKey: \(contentKey) \n"
      }
      if (hasCategoryType) {
        output += "\(indent) categoryType: \(categoryType.rawValue)\n"
      }
      if hasTotalCount {
        output += "\(indent) totalCount: \(totalCount) \n"
      }
      var profilesElementIndex:Int = 0
      for oneElementprofiles in profiles {
          output += "\(indent) profiles[\(profilesElementIndex)] {\n"
          oneElementprofiles.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          profilesElementIndex++
      }
      var addressesElementIndex:Int = 0
      for oneElementaddresses in addresses {
          output += "\(indent) addresses[\(addressesElementIndex)] {\n"
          oneElementaddresses.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          addressesElementIndex++
      }
      var tagsElementIndex:Int = 0
      for oneElementtags in tags {
          output += "\(indent) tags[\(tagsElementIndex)] {\n"
          oneElementtags.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          tagsElementIndex++
      }
      var teamsElementIndex:Int = 0
      for oneElementteams in teams {
          output += "\(indent) teams[\(teamsElementIndex)] {\n"
          oneElementteams.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          teamsElementIndex++
      }
      var notesElementIndex:Int = 0
      for oneElementnotes in notes {
          output += "\(indent) notes[\(notesElementIndex)] {\n"
          oneElementnotes.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          notesElementIndex++
      }
      var locationsElementIndex:Int = 0
      for oneElementlocations in locations {
          output += "\(indent) locations[\(locationsElementIndex)] {\n"
          oneElementlocations.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          locationsElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasTitle {
               hashCode = (hashCode &* 31) &+ title.hashValue
            }
            if hasContentKey {
               hashCode = (hashCode &* 31) &+ contentKey.hashValue
            }
            if hasCategoryType {
               hashCode = (hashCode &* 31) &+ Int(categoryType.rawValue)
            }
            if hasTotalCount {
               hashCode = (hashCode &* 31) &+ totalCount.hashValue
            }
            for oneElementprofiles in profiles {
                hashCode = (hashCode &* 31) &+ oneElementprofiles.hashValue
            }
            for oneElementaddresses in addresses {
                hashCode = (hashCode &* 31) &+ oneElementaddresses.hashValue
            }
            for oneElementtags in tags {
                hashCode = (hashCode &* 31) &+ oneElementtags.hashValue
            }
            for oneElementteams in teams {
                hashCode = (hashCode &* 31) &+ oneElementteams.hashValue
            }
            for oneElementnotes in notes {
                hashCode = (hashCode &* 31) &+ oneElementnotes.hashValue
            }
            for oneElementlocations in locations {
                hashCode = (hashCode &* 31) &+ oneElementlocations.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Feed.Containers.CategoryV1"
    }
    override public func className() -> String {
        return "Services.Feed.Containers.CategoryV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Feed.Containers.CategoryV1.self
    }
    //Meta information declaration end

  }

  final public class CategoryV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Feed.Containers.CategoryV1

    required override public init () {
       builderResult = Services.Feed.Containers.CategoryV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Feed.Containers.CategoryV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Feed.Containers.CategoryV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasTitle:Bool {
         get {
              return builderResult.hasTitle
         }
    }
    public var title:String {
         get {
              return builderResult.title
         }
         set (value) {
             builderResult.hasTitle = true
             builderResult.title = value
         }
    }
    public func setTitle(value:String)-> Services.Feed.Containers.CategoryV1Builder {
      self.title = value
      return self
    }
    public func clearTitle() -> Services.Feed.Containers.CategoryV1Builder{
         builderResult.hasTitle = false
         builderResult.title = ""
         return self
    }
    public var hasContentKey:Bool {
         get {
              return builderResult.hasContentKey
         }
    }
    public var contentKey:String {
         get {
              return builderResult.contentKey
         }
         set (value) {
             builderResult.hasContentKey = true
             builderResult.contentKey = value
         }
    }
    public func setContentKey(value:String)-> Services.Feed.Containers.CategoryV1Builder {
      self.contentKey = value
      return self
    }
    public func clearContentKey() -> Services.Feed.Containers.CategoryV1Builder{
         builderResult.hasContentKey = false
         builderResult.contentKey = ""
         return self
    }
      public var hasCategoryType:Bool{
          get {
              return builderResult.hasCategoryType
          }
      }
      public var categoryType:Services.Feed.Containers.CategoryV1.CategoryTypeV1 {
          get {
              return builderResult.categoryType
          }
          set (value) {
              builderResult.hasCategoryType = true
              builderResult.categoryType = value
          }
      }
      public func setCategoryType(value:Services.Feed.Containers.CategoryV1.CategoryTypeV1)-> Services.Feed.Containers.CategoryV1Builder {
        self.categoryType = value
        return self
      }
      public func clearCategoryType() -> Services.Feed.Containers.CategoryV1Builder {
         builderResult.hasCategoryType = false
         builderResult.categoryType = .DirectReports
         return self
      }
    public var hasTotalCount:Bool {
         get {
              return builderResult.hasTotalCount
         }
    }
    public var totalCount:UInt32 {
         get {
              return builderResult.totalCount
         }
         set (value) {
             builderResult.hasTotalCount = true
             builderResult.totalCount = value
         }
    }
    public func setTotalCount(value:UInt32)-> Services.Feed.Containers.CategoryV1Builder {
      self.totalCount = value
      return self
    }
    public func clearTotalCount() -> Services.Feed.Containers.CategoryV1Builder{
         builderResult.hasTotalCount = false
         builderResult.totalCount = UInt32(0)
         return self
    }
    public var profiles:Array<Services.Profile.Containers.ProfileV1> {
         get {
             return builderResult.profiles
         }
         set (value) {
             builderResult.profiles = value
         }
    }
    public func setProfiles(value:Array<Services.Profile.Containers.ProfileV1>)-> Services.Feed.Containers.CategoryV1Builder {
      self.profiles = value
      return self
    }
    public func clearProfiles() -> Services.Feed.Containers.CategoryV1Builder {
      builderResult.profiles.removeAll(keepCapacity: false)
      return self
    }
    public var addresses:Array<Services.Organization.Containers.AddressV1> {
         get {
             return builderResult.addresses
         }
         set (value) {
             builderResult.addresses = value
         }
    }
    public func setAddresses(value:Array<Services.Organization.Containers.AddressV1>)-> Services.Feed.Containers.CategoryV1Builder {
      self.addresses = value
      return self
    }
    public func clearAddresses() -> Services.Feed.Containers.CategoryV1Builder {
      builderResult.addresses.removeAll(keepCapacity: false)
      return self
    }
    public var tags:Array<Services.Profile.Containers.TagV1> {
         get {
             return builderResult.tags
         }
         set (value) {
             builderResult.tags = value
         }
    }
    public func setTags(value:Array<Services.Profile.Containers.TagV1>)-> Services.Feed.Containers.CategoryV1Builder {
      self.tags = value
      return self
    }
    public func clearTags() -> Services.Feed.Containers.CategoryV1Builder {
      builderResult.tags.removeAll(keepCapacity: false)
      return self
    }
    public var teams:Array<Services.Organization.Containers.TeamV1> {
         get {
             return builderResult.teams
         }
         set (value) {
             builderResult.teams = value
         }
    }
    public func setTeams(value:Array<Services.Organization.Containers.TeamV1>)-> Services.Feed.Containers.CategoryV1Builder {
      self.teams = value
      return self
    }
    public func clearTeams() -> Services.Feed.Containers.CategoryV1Builder {
      builderResult.teams.removeAll(keepCapacity: false)
      return self
    }
    public var notes:Array<Services.Note.Containers.NoteV1> {
         get {
             return builderResult.notes
         }
         set (value) {
             builderResult.notes = value
         }
    }
    public func setNotes(value:Array<Services.Note.Containers.NoteV1>)-> Services.Feed.Containers.CategoryV1Builder {
      self.notes = value
      return self
    }
    public func clearNotes() -> Services.Feed.Containers.CategoryV1Builder {
      builderResult.notes.removeAll(keepCapacity: false)
      return self
    }
    public var locations:Array<Services.Organization.Containers.LocationV1> {
         get {
             return builderResult.locations
         }
         set (value) {
             builderResult.locations = value
         }
    }
    public func setLocations(value:Array<Services.Organization.Containers.LocationV1>)-> Services.Feed.Containers.CategoryV1Builder {
      self.locations = value
      return self
    }
    public func clearLocations() -> Services.Feed.Containers.CategoryV1Builder {
      builderResult.locations.removeAll(keepCapacity: false)
      return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Feed.Containers.CategoryV1Builder {
      builderResult = Services.Feed.Containers.CategoryV1()
      return self
    }
    public override func clone() -> Services.Feed.Containers.CategoryV1Builder {
      return Services.Feed.Containers.CategoryV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Feed.Containers.CategoryV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Feed.Containers.CategoryV1 {
      var returnMe:Services.Feed.Containers.CategoryV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Feed.Containers.CategoryV1) -> Services.Feed.Containers.CategoryV1Builder {
      if (other == Services.Feed.Containers.CategoryV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasTitle {
           title = other.title
      }
      if other.hasContentKey {
           contentKey = other.contentKey
      }
      if other.hasCategoryType {
           categoryType = other.categoryType
      }
      if other.hasTotalCount {
           totalCount = other.totalCount
      }
      if !other.profiles.isEmpty  {
         builderResult.profiles += other.profiles
      }
      if !other.addresses.isEmpty  {
         builderResult.addresses += other.addresses
      }
      if !other.tags.isEmpty  {
         builderResult.tags += other.tags
      }
      if !other.teams.isEmpty  {
         builderResult.teams += other.teams
      }
      if !other.notes.isEmpty  {
         builderResult.notes += other.notes
      }
      if !other.locations.isEmpty  {
         builderResult.locations += other.locations
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Feed.Containers.CategoryV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Feed.Containers.CategoryV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          title = input.readString()

        case 26 :
          contentKey = input.readString()

        case 32 :
          let valueIntcategoryType = input.readEnum()
          if let enumscategoryType = Services.Feed.Containers.CategoryV1.CategoryTypeV1(rawValue:valueIntcategoryType){
               categoryType = enumscategoryType
          } else {
               unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntcategoryType))
          }

        case 40 :
          totalCount = input.readUInt32()

        case 50 :
          var subBuilder = Services.Profile.Containers.ProfileV1.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          profiles += [subBuilder.buildPartial()]

        case 58 :
          var subBuilder = Services.Organization.Containers.AddressV1.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          addresses += [subBuilder.buildPartial()]

        case 66 :
          var subBuilder = Services.Profile.Containers.TagV1.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          tags += [subBuilder.buildPartial()]

        case 74 :
          var subBuilder = Services.Organization.Containers.TeamV1.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          teams += [subBuilder.buildPartial()]

        case 82 :
          var subBuilder = Services.Note.Containers.NoteV1.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          notes += [subBuilder.buildPartial()]

        case 90 :
          var subBuilder = Services.Organization.Containers.LocationV1.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          locations += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
