// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file get_profile_reporting_details.proto

import Foundation

public extension Services.Organization.Actions{ public struct GetProfileReportingDetails { }}

public func == (lhs: Services.Organization.Actions.GetProfileReportingDetails.RequestV1, rhs: Services.Organization.Actions.GetProfileReportingDetails.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasProfileId == rhs.hasProfileId) && (!lhs.hasProfileId || lhs.profileId == rhs.profileId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Organization.Actions.GetProfileReportingDetails.ResponseV1, rhs: Services.Organization.Actions.GetProfileReportingDetails.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.peersProfileIds == rhs.peersProfileIds)
  fieldCheck = fieldCheck && (lhs.hasManagerProfileId == rhs.hasManagerProfileId) && (!lhs.hasManagerProfileId || lhs.managerProfileId == rhs.managerProfileId)
  fieldCheck = fieldCheck && (lhs.directReportsProfileIds == rhs.directReportsProfileIds)
  fieldCheck = fieldCheck && (lhs.hasManagesTeam == rhs.hasManagesTeam) && (!lhs.hasManagesTeam || lhs.managesTeam == rhs.managesTeam)
  fieldCheck = fieldCheck && (lhs.hasTeam == rhs.hasTeam) && (!lhs.hasTeam || lhs.team == rhs.team)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Organization.Actions.GetProfileReportingDetails {
  public struct GetProfileReportingDetailsRoot {
    public static var sharedInstance : GetProfileReportingDetailsRoot {
     struct Static {
         static let instance : GetProfileReportingDetailsRoot = GetProfileReportingDetailsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Organization.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasProfileId:Bool = false
    public private(set) var profileId:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasProfileId {
        try output.writeString(2, value:profileId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasProfileId {
        serialize_size += profileId.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Actions.GetProfileReportingDetails.RequestV1> {
      var mergedArray = Array<Services.Organization.Actions.GetProfileReportingDetails.RequestV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1? {
      return try Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1 {
      return try Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Actions.GetProfileReportingDetails.GetProfileReportingDetailsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1 {
      return try Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1 {
      return try Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1 {
      return try Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1 {
      return try Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1 {
      return try Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder {
      return Services.Organization.Actions.GetProfileReportingDetails.RequestV1.classBuilder() as! Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder
    }
    public func getBuilder() -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder {
      return classBuilder() as! Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder {
      return try Services.Organization.Actions.GetProfileReportingDetails.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Actions.GetProfileReportingDetails.RequestV1) throws -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder {
      return try Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasProfileId {
        output += "\(indent) profileId: \(profileId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasProfileId {
               hashCode = (hashCode &* 31) &+ profileId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Actions.GetProfileReportingDetails.RequestV1"
    }
    override public func className() -> String {
        return "Services.Organization.Actions.GetProfileReportingDetails.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Actions.GetProfileReportingDetails.RequestV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Actions.GetProfileReportingDetails.RequestV1 = Services.Organization.Actions.GetProfileReportingDetails.RequestV1()
      public func getMessage() -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasProfileId:Bool {
           get {
                return builderResult.hasProfileId
           }
      }
      public var profileId:String {
           get {
                return builderResult.profileId
           }
           set (value) {
               builderResult.hasProfileId = true
               builderResult.profileId = value
           }
      }
      public func setProfileId(value:String) -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder {
        self.profileId = value
        return self
      }
      public func clearProfileId() -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder{
           builderResult.hasProfileId = false
           builderResult.profileId = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder {
        builderResult = Services.Organization.Actions.GetProfileReportingDetails.RequestV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder {
        return try Services.Organization.Actions.GetProfileReportingDetails.RequestV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1 {
        let returnMe:Services.Organization.Actions.GetProfileReportingDetails.RequestV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Actions.GetProfileReportingDetails.RequestV1) throws -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder {
        if other == Services.Organization.Actions.GetProfileReportingDetails.RequestV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasProfileId {
             profileId = other.profileId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetProfileReportingDetails.RequestV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            profileId = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var peersProfileIds:Array<String> = Array<String>()
    public private(set) var hasManagerProfileId:Bool = false
    public private(set) var managerProfileId:String = ""

    public private(set) var directReportsProfileIds:Array<String> = Array<String>()
    public private(set) var hasManagesTeam:Bool = false
    public private(set) var managesTeam:Services.Organization.Containers.TeamV1!
    public private(set) var hasTeam:Bool = false
    public private(set) var team:Services.Organization.Containers.TeamV1!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if !peersProfileIds.isEmpty {
        for oneValuepeersProfileIds in peersProfileIds {
          try output.writeString(2, value:oneValuepeersProfileIds)
        }
      }
      if hasManagerProfileId {
        try output.writeString(3, value:managerProfileId)
      }
      if !directReportsProfileIds.isEmpty {
        for oneValuedirectReportsProfileIds in directReportsProfileIds {
          try output.writeString(4, value:oneValuedirectReportsProfileIds)
        }
      }
      if hasManagesTeam {
        try output.writeMessage(5, value:managesTeam)
      }
      if hasTeam {
        try output.writeMessage(6, value:team)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      var dataSizePeersProfileIds:Int32 = 0
      for oneValuepeersProfileIds in peersProfileIds {
          dataSizePeersProfileIds += oneValuepeersProfileIds.computeStringSizeNoTag()
      }
      serialize_size += dataSizePeersProfileIds
      serialize_size += 1 * Int32(peersProfileIds.count)
      if hasManagerProfileId {
        serialize_size += managerProfileId.computeStringSize(3)
      }
      var dataSizeDirectReportsProfileIds:Int32 = 0
      for oneValuedirectReportsProfileIds in directReportsProfileIds {
          dataSizeDirectReportsProfileIds += oneValuedirectReportsProfileIds.computeStringSizeNoTag()
      }
      serialize_size += dataSizeDirectReportsProfileIds
      serialize_size += 1 * Int32(directReportsProfileIds.count)
      if hasManagesTeam {
          if let varSizemanagesTeam = managesTeam?.computeMessageSize(5) {
              serialize_size += varSizemanagesTeam
          }
      }
      if hasTeam {
          if let varSizeteam = team?.computeMessageSize(6) {
              serialize_size += varSizeteam
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Actions.GetProfileReportingDetails.ResponseV1> {
      var mergedArray = Array<Services.Organization.Actions.GetProfileReportingDetails.ResponseV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1? {
      return try Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1 {
      return try Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Actions.GetProfileReportingDetails.GetProfileReportingDetailsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1 {
      return try Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1 {
      return try Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1 {
      return try Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1 {
      return try Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1 {
      return try Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
      return Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.classBuilder() as! Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder
    }
    public func getBuilder() -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
      return classBuilder() as! Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
      return try Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Actions.GetProfileReportingDetails.ResponseV1) throws -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
      return try Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      var peersProfileIdsElementIndex:Int = 0
      for oneValuepeersProfileIds in peersProfileIds  {
          output += "\(indent) peersProfileIds[\(peersProfileIdsElementIndex)]: \(oneValuepeersProfileIds)\n"
          peersProfileIdsElementIndex++
      }
      if hasManagerProfileId {
        output += "\(indent) managerProfileId: \(managerProfileId) \n"
      }
      var directReportsProfileIdsElementIndex:Int = 0
      for oneValuedirectReportsProfileIds in directReportsProfileIds  {
          output += "\(indent) directReportsProfileIds[\(directReportsProfileIdsElementIndex)]: \(oneValuedirectReportsProfileIds)\n"
          directReportsProfileIdsElementIndex++
      }
      if hasManagesTeam {
        output += "\(indent) managesTeam {\n"
        try managesTeam?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasTeam {
        output += "\(indent) team {\n"
        try team?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            for oneValuepeersProfileIds in peersProfileIds {
                hashCode = (hashCode &* 31) &+ oneValuepeersProfileIds.hashValue
            }
            if hasManagerProfileId {
               hashCode = (hashCode &* 31) &+ managerProfileId.hashValue
            }
            for oneValuedirectReportsProfileIds in directReportsProfileIds {
                hashCode = (hashCode &* 31) &+ oneValuedirectReportsProfileIds.hashValue
            }
            if hasManagesTeam {
                if let hashValuemanagesTeam = managesTeam?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuemanagesTeam
                }
            }
            if hasTeam {
                if let hashValueteam = team?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueteam
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Actions.GetProfileReportingDetails.ResponseV1"
    }
    override public func className() -> String {
        return "Services.Organization.Actions.GetProfileReportingDetails.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Actions.GetProfileReportingDetails.ResponseV1 = Services.Organization.Actions.GetProfileReportingDetails.ResponseV1()
      public func getMessage() -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var peersProfileIds:Array<String> {
           get {
               return builderResult.peersProfileIds
           }
           set (array) {
               builderResult.peersProfileIds = array
           }
      }
      public func setPeersProfileIds(value:Array<String>) -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
        self.peersProfileIds = value
        return self
      }
      public func clearPeersProfileIds() -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
         builderResult.peersProfileIds.removeAll(keepCapacity: false)
         return self
      }
      public var hasManagerProfileId:Bool {
           get {
                return builderResult.hasManagerProfileId
           }
      }
      public var managerProfileId:String {
           get {
                return builderResult.managerProfileId
           }
           set (value) {
               builderResult.hasManagerProfileId = true
               builderResult.managerProfileId = value
           }
      }
      public func setManagerProfileId(value:String) -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
        self.managerProfileId = value
        return self
      }
      public func clearManagerProfileId() -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder{
           builderResult.hasManagerProfileId = false
           builderResult.managerProfileId = ""
           return self
      }
      public var directReportsProfileIds:Array<String> {
           get {
               return builderResult.directReportsProfileIds
           }
           set (array) {
               builderResult.directReportsProfileIds = array
           }
      }
      public func setDirectReportsProfileIds(value:Array<String>) -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
        self.directReportsProfileIds = value
        return self
      }
      public func clearDirectReportsProfileIds() -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
         builderResult.directReportsProfileIds.removeAll(keepCapacity: false)
         return self
      }
      public var hasManagesTeam:Bool {
           get {
               return builderResult.hasManagesTeam
           }
      }
      public var managesTeam:Services.Organization.Containers.TeamV1! {
           get {
               if managesTeamBuilder_ != nil {
                  builderResult.managesTeam = managesTeamBuilder_.getMessage()
               }
               return builderResult.managesTeam
           }
           set (value) {
               builderResult.hasManagesTeam = true
               builderResult.managesTeam = value
           }
      }
      private var managesTeamBuilder_:Services.Organization.Containers.TeamV1.Builder! {
           didSet {
              builderResult.hasManagesTeam = true
           }
      }
      public func getManagesTeamBuilder() -> Services.Organization.Containers.TeamV1.Builder {
        if managesTeamBuilder_ == nil {
           managesTeamBuilder_ = Services.Organization.Containers.TeamV1.Builder()
           builderResult.managesTeam = managesTeamBuilder_.getMessage()
           if managesTeam != nil {
              try! managesTeamBuilder_.mergeFrom(managesTeam)
           }
        }
        return managesTeamBuilder_
      }
      public func setManagesTeam(value:Services.Organization.Containers.TeamV1!) -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
        self.managesTeam = value
        return self
      }
      public func mergeManagesTeam(value:Services.Organization.Containers.TeamV1) throws -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
        if builderResult.hasManagesTeam {
          builderResult.managesTeam = try Services.Organization.Containers.TeamV1.builderWithPrototype(builderResult.managesTeam).mergeFrom(value).buildPartial()
        } else {
          builderResult.managesTeam = value
        }
        builderResult.hasManagesTeam = true
        return self
      }
      public func clearManagesTeam() -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
        managesTeamBuilder_ = nil
        builderResult.hasManagesTeam = false
        builderResult.managesTeam = nil
        return self
      }
      public var hasTeam:Bool {
           get {
               return builderResult.hasTeam
           }
      }
      public var team:Services.Organization.Containers.TeamV1! {
           get {
               if teamBuilder_ != nil {
                  builderResult.team = teamBuilder_.getMessage()
               }
               return builderResult.team
           }
           set (value) {
               builderResult.hasTeam = true
               builderResult.team = value
           }
      }
      private var teamBuilder_:Services.Organization.Containers.TeamV1.Builder! {
           didSet {
              builderResult.hasTeam = true
           }
      }
      public func getTeamBuilder() -> Services.Organization.Containers.TeamV1.Builder {
        if teamBuilder_ == nil {
           teamBuilder_ = Services.Organization.Containers.TeamV1.Builder()
           builderResult.team = teamBuilder_.getMessage()
           if team != nil {
              try! teamBuilder_.mergeFrom(team)
           }
        }
        return teamBuilder_
      }
      public func setTeam(value:Services.Organization.Containers.TeamV1!) -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
        self.team = value
        return self
      }
      public func mergeTeam(value:Services.Organization.Containers.TeamV1) throws -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
        if builderResult.hasTeam {
          builderResult.team = try Services.Organization.Containers.TeamV1.builderWithPrototype(builderResult.team).mergeFrom(value).buildPartial()
        } else {
          builderResult.team = value
        }
        builderResult.hasTeam = true
        return self
      }
      public func clearTeam() -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
        teamBuilder_ = nil
        builderResult.hasTeam = false
        builderResult.team = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
        builderResult = Services.Organization.Actions.GetProfileReportingDetails.ResponseV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
        return try Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1 {
        let returnMe:Services.Organization.Actions.GetProfileReportingDetails.ResponseV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Actions.GetProfileReportingDetails.ResponseV1) throws -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
        if other == Services.Organization.Actions.GetProfileReportingDetails.ResponseV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if !other.peersProfileIds.isEmpty {
            builderResult.peersProfileIds += other.peersProfileIds
        }
        if other.hasManagerProfileId {
             managerProfileId = other.managerProfileId
        }
        if !other.directReportsProfileIds.isEmpty {
            builderResult.directReportsProfileIds += other.directReportsProfileIds
        }
        if (other.hasManagesTeam) {
            try mergeManagesTeam(other.managesTeam)
        }
        if (other.hasTeam) {
            try mergeTeam(other.team)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetProfileReportingDetails.ResponseV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            peersProfileIds += [try input.readString()]

          case 26 :
            managerProfileId = try input.readString()

          case 34 :
            directReportsProfileIds += [try input.readString()]

          case 42 :
            let subBuilder:Services.Organization.Containers.TeamV1.Builder = Services.Organization.Containers.TeamV1.Builder()
            if hasManagesTeam {
              try subBuilder.mergeFrom(managesTeam)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            managesTeam = subBuilder.buildPartial()

          case 50 :
            let subBuilder:Services.Organization.Containers.TeamV1.Builder = Services.Organization.Containers.TeamV1.Builder()
            if hasTeam {
              try subBuilder.mergeFrom(team)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            team = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
