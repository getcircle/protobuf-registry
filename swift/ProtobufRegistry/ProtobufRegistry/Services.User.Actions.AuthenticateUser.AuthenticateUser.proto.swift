// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file authenticate_user.proto

import Foundation

public extension Services{ public struct User { public struct Actions { public struct AuthenticateUser { }}}}

public func == (lhs: Services.User.Actions.AuthenticateUser.RequestV1, rhs: Services.User.Actions.AuthenticateUser.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasBackend == rhs.hasBackend) && (!lhs.hasBackend || lhs.backend == rhs.backend)
  fieldCheck = fieldCheck && (lhs.hasCredentials == rhs.hasCredentials) && (!lhs.hasCredentials || lhs.credentials == rhs.credentials)
  fieldCheck = fieldCheck && (lhs.hasClientType == rhs.hasClientType) && (!lhs.hasClientType || lhs.clientType == rhs.clientType)
  fieldCheck = fieldCheck && (lhs.hasOrganizationDomain == rhs.hasOrganizationDomain) && (!lhs.hasOrganizationDomain || lhs.organizationDomain == rhs.organizationDomain)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1, rhs: Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasSecret == rhs.hasSecret) && (!lhs.hasSecret || lhs.secret == rhs.secret)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.User.Actions.AuthenticateUser.ResponseV1, rhs: Services.User.Actions.AuthenticateUser.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
  fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
  fieldCheck = fieldCheck && (lhs.hasNewUser == rhs.hasNewUser) && (!lhs.hasNewUser || lhs.newUser == rhs.newUser)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.User.Actions.AuthenticateUser {
  public struct AuthenticateUserRoot {
    public static var sharedInstance : AuthenticateUserRoot {
     struct Static {
         static let instance : AuthenticateUserRoot = AuthenticateUserRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.User.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.User.Containers.Token.TokenRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class CredentialsV1 : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var hasKey:Bool = false
        public private(set) var key:String = ""

        public private(set) var hasSecret:Bool = false
        public private(set) var secret:String = ""

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasKey {
            try output.writeString(1, value:key)
          }
          if hasSecret {
            try output.writeString(2, value:secret)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasKey {
            serialize_size += key.computeStringSize(1)
          }
          if hasSecret {
            serialize_size += secret.computeStringSize(2)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1> {
          var mergedArray = Array<Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1? {
          return try Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 {
          return try Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder().mergeFromData(data, extensionRegistry:Services.User.Actions.AuthenticateUser.AuthenticateUserRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 {
          return try Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 {
          return try Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 {
          return try Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 {
          return try Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 {
          return try Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder {
          return Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.classBuilder() as! Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder
        }
        public func getBuilder() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder {
          return classBuilder() as! Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder()
        }
        public func toBuilder() throws -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder {
          return try Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1) throws -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder {
          return try Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder().mergeFrom(prototype)
        }
        override public func writeDescriptionTo(inout output:String, indent:String) throws {
          if hasKey {
            output += "\(indent) key: \(key) \n"
          }
          if hasSecret {
            output += "\(indent) secret: \(secret) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasKey {
                   hashCode = (hashCode &* 31) &+ key.hashValue
                }
                if hasSecret {
                   hashCode = (hashCode &* 31) &+ secret.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1"
        }
        override public func className() -> String {
            return "Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 = Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1()
          public func getMessage() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasKey:Bool {
               get {
                    return builderResult.hasKey
               }
          }
          public var key:String {
               get {
                    return builderResult.key
               }
               set (value) {
                   builderResult.hasKey = true
                   builderResult.key = value
               }
          }
          public func setKey(value:String) -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder {
            self.key = value
            return self
          }
          public func clearKey() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder{
               builderResult.hasKey = false
               builderResult.key = ""
               return self
          }
          public var hasSecret:Bool {
               get {
                    return builderResult.hasSecret
               }
          }
          public var secret:String {
               get {
                    return builderResult.secret
               }
               set (value) {
                   builderResult.hasSecret = true
                   builderResult.secret = value
               }
          }
          public func setSecret(value:String) -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder {
            self.secret = value
            return self
          }
          public func clearSecret() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder{
               builderResult.hasSecret = false
               builderResult.secret = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder {
            builderResult = Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1()
            return self
          }
          public override func clone() throws -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder {
            return try Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.builderWithPrototype(builderResult)
          }
          public override func build() throws -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 {
            let returnMe:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1 = builderResult
            return returnMe
          }
          public func mergeFrom(other:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1) throws -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder {
            if other == Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1() {
             return self
            }
            if other.hasKey {
                 key = other.key
            }
            if other.hasSecret {
                 secret = other.secret
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = try input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                key = try input.readString()

              case 18 :
                secret = try input.readString()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end



      //Enum type declaration start 

      public enum AuthBackendV1:Int32 {
        case Internal = 0
        case Google = 1
        case Okta = 2

      }

      //Enum type declaration end 

    public private(set) var backend:Services.User.Actions.AuthenticateUser.RequestV1.AuthBackendV1 = Services.User.Actions.AuthenticateUser.RequestV1.AuthBackendV1.Internal
    public private(set) var hasBackend:Bool = false
    public private(set) var hasCredentials:Bool = false
    public private(set) var credentials:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1!
    public private(set) var clientType:Services.User.Containers.Token.ClientTypeV1 = Services.User.Containers.Token.ClientTypeV1.Ios
    public private(set) var hasClientType:Bool = false
    public private(set) var hasOrganizationDomain:Bool = false
    public private(set) var organizationDomain:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasBackend {
        try output.writeEnum(1, value:backend.rawValue)
      }
      if hasCredentials {
        try output.writeMessage(2, value:credentials)
      }
      if hasClientType {
        try output.writeEnum(3, value:clientType.rawValue)
      }
      if hasOrganizationDomain {
        try output.writeString(4, value:organizationDomain)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasBackend) {
        serialize_size += backend.rawValue.computeEnumSize(1)
      }
      if hasCredentials {
          if let varSizecredentials = credentials?.computeMessageSize(2) {
              serialize_size += varSizecredentials
          }
      }
      if (hasClientType) {
        serialize_size += clientType.rawValue.computeEnumSize(3)
      }
      if hasOrganizationDomain {
        serialize_size += organizationDomain.computeStringSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.User.Actions.AuthenticateUser.RequestV1> {
      var mergedArray = Array<Services.User.Actions.AuthenticateUser.RequestV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.User.Actions.AuthenticateUser.RequestV1? {
      return try Services.User.Actions.AuthenticateUser.RequestV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.User.Actions.AuthenticateUser.RequestV1 {
      return try Services.User.Actions.AuthenticateUser.RequestV1.Builder().mergeFromData(data, extensionRegistry:Services.User.Actions.AuthenticateUser.AuthenticateUserRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.AuthenticateUser.RequestV1 {
      return try Services.User.Actions.AuthenticateUser.RequestV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.User.Actions.AuthenticateUser.RequestV1 {
      return try Services.User.Actions.AuthenticateUser.RequestV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.AuthenticateUser.RequestV1 {
      return try Services.User.Actions.AuthenticateUser.RequestV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Actions.AuthenticateUser.RequestV1 {
      return try Services.User.Actions.AuthenticateUser.RequestV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.AuthenticateUser.RequestV1 {
      return try Services.User.Actions.AuthenticateUser.RequestV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.User.Actions.AuthenticateUser.RequestV1.Builder {
      return Services.User.Actions.AuthenticateUser.RequestV1.classBuilder() as! Services.User.Actions.AuthenticateUser.RequestV1.Builder
    }
    public func getBuilder() -> Services.User.Actions.AuthenticateUser.RequestV1.Builder {
      return classBuilder() as! Services.User.Actions.AuthenticateUser.RequestV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Actions.AuthenticateUser.RequestV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Actions.AuthenticateUser.RequestV1.Builder()
    }
    public func toBuilder() throws -> Services.User.Actions.AuthenticateUser.RequestV1.Builder {
      return try Services.User.Actions.AuthenticateUser.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Actions.AuthenticateUser.RequestV1) throws -> Services.User.Actions.AuthenticateUser.RequestV1.Builder {
      return try Services.User.Actions.AuthenticateUser.RequestV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if (hasBackend) {
        output += "\(indent) backend: \(backend.rawValue)\n"
      }
      if hasCredentials {
        output += "\(indent) credentials {\n"
        try credentials?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if (hasClientType) {
        output += "\(indent) clientType: \(clientType.rawValue)\n"
      }
      if hasOrganizationDomain {
        output += "\(indent) organizationDomain: \(organizationDomain) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasBackend {
               hashCode = (hashCode &* 31) &+ Int(backend.rawValue)
            }
            if hasCredentials {
                if let hashValuecredentials = credentials?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuecredentials
                }
            }
            if hasClientType {
               hashCode = (hashCode &* 31) &+ Int(clientType.rawValue)
            }
            if hasOrganizationDomain {
               hashCode = (hashCode &* 31) &+ organizationDomain.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Actions.AuthenticateUser.RequestV1"
    }
    override public func className() -> String {
        return "Services.User.Actions.AuthenticateUser.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Actions.AuthenticateUser.RequestV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.User.Actions.AuthenticateUser.RequestV1 = Services.User.Actions.AuthenticateUser.RequestV1()
      public func getMessage() -> Services.User.Actions.AuthenticateUser.RequestV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasBackend:Bool{
            get {
                return builderResult.hasBackend
            }
        }
        public var backend:Services.User.Actions.AuthenticateUser.RequestV1.AuthBackendV1 {
            get {
                return builderResult.backend
            }
            set (value) {
                builderResult.hasBackend = true
                builderResult.backend = value
            }
        }
        public func setBackend(value:Services.User.Actions.AuthenticateUser.RequestV1.AuthBackendV1) -> Services.User.Actions.AuthenticateUser.RequestV1.Builder {
          self.backend = value
          return self
        }
        public func clearBackend() -> Services.User.Actions.AuthenticateUser.RequestV1.Builder {
           builderResult.hasBackend = false
           builderResult.backend = .Internal
           return self
        }
      public var hasCredentials:Bool {
           get {
               return builderResult.hasCredentials
           }
      }
      public var credentials:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1! {
           get {
               if credentialsBuilder_ != nil {
                  builderResult.credentials = credentialsBuilder_.getMessage()
               }
               return builderResult.credentials
           }
           set (value) {
               builderResult.hasCredentials = true
               builderResult.credentials = value
           }
      }
      private var credentialsBuilder_:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder! {
           didSet {
              builderResult.hasCredentials = true
           }
      }
      public func getCredentialsBuilder() -> Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder {
        if credentialsBuilder_ == nil {
           credentialsBuilder_ = Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder()
           builderResult.credentials = credentialsBuilder_.getMessage()
           if credentials != nil {
              try! credentialsBuilder_.mergeFrom(credentials)
           }
        }
        return credentialsBuilder_
      }
      public func setCredentials(value:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1!) -> Services.User.Actions.AuthenticateUser.RequestV1.Builder {
        self.credentials = value
        return self
      }
      public func mergeCredentials(value:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1) throws -> Services.User.Actions.AuthenticateUser.RequestV1.Builder {
        if builderResult.hasCredentials {
          builderResult.credentials = try Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.builderWithPrototype(builderResult.credentials).mergeFrom(value).buildPartial()
        } else {
          builderResult.credentials = value
        }
        builderResult.hasCredentials = true
        return self
      }
      public func clearCredentials() -> Services.User.Actions.AuthenticateUser.RequestV1.Builder {
        credentialsBuilder_ = nil
        builderResult.hasCredentials = false
        builderResult.credentials = nil
        return self
      }
        public var hasClientType:Bool{
            get {
                return builderResult.hasClientType
            }
        }
        public var clientType:Services.User.Containers.Token.ClientTypeV1 {
            get {
                return builderResult.clientType
            }
            set (value) {
                builderResult.hasClientType = true
                builderResult.clientType = value
            }
        }
        public func setClientType(value:Services.User.Containers.Token.ClientTypeV1) -> Services.User.Actions.AuthenticateUser.RequestV1.Builder {
          self.clientType = value
          return self
        }
        public func clearClientType() -> Services.User.Actions.AuthenticateUser.RequestV1.Builder {
           builderResult.hasClientType = false
           builderResult.clientType = .Ios
           return self
        }
      public var hasOrganizationDomain:Bool {
           get {
                return builderResult.hasOrganizationDomain
           }
      }
      public var organizationDomain:String {
           get {
                return builderResult.organizationDomain
           }
           set (value) {
               builderResult.hasOrganizationDomain = true
               builderResult.organizationDomain = value
           }
      }
      public func setOrganizationDomain(value:String) -> Services.User.Actions.AuthenticateUser.RequestV1.Builder {
        self.organizationDomain = value
        return self
      }
      public func clearOrganizationDomain() -> Services.User.Actions.AuthenticateUser.RequestV1.Builder{
           builderResult.hasOrganizationDomain = false
           builderResult.organizationDomain = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.User.Actions.AuthenticateUser.RequestV1.Builder {
        builderResult = Services.User.Actions.AuthenticateUser.RequestV1()
        return self
      }
      public override func clone() throws -> Services.User.Actions.AuthenticateUser.RequestV1.Builder {
        return try Services.User.Actions.AuthenticateUser.RequestV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.User.Actions.AuthenticateUser.RequestV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.User.Actions.AuthenticateUser.RequestV1 {
        let returnMe:Services.User.Actions.AuthenticateUser.RequestV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.User.Actions.AuthenticateUser.RequestV1) throws -> Services.User.Actions.AuthenticateUser.RequestV1.Builder {
        if other == Services.User.Actions.AuthenticateUser.RequestV1() {
         return self
        }
        if other.hasBackend {
             backend = other.backend
        }
        if (other.hasCredentials) {
            try mergeCredentials(other.credentials)
        }
        if other.hasClientType {
             clientType = other.clientType
        }
        if other.hasOrganizationDomain {
             organizationDomain = other.organizationDomain
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Actions.AuthenticateUser.RequestV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.AuthenticateUser.RequestV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            let valueIntbackend = try input.readEnum()
            if let enumsbackend = Services.User.Actions.AuthenticateUser.RequestV1.AuthBackendV1(rawValue:valueIntbackend){
                 backend = enumsbackend
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntbackend))
            }

          case 18 :
            let subBuilder:Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder = Services.User.Actions.AuthenticateUser.RequestV1.CredentialsV1.Builder()
            if hasCredentials {
              try subBuilder.mergeFrom(credentials)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            credentials = subBuilder.buildPartial()

          case 24 :
            let valueIntclientType = try input.readEnum()
            if let enumsclientType = Services.User.Containers.Token.ClientTypeV1(rawValue:valueIntclientType){
                 clientType = enumsclientType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntclientType))
            }

          case 34 :
            organizationDomain = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasUser:Bool = false
    public private(set) var user:Services.User.Containers.UserV1!
    public private(set) var hasToken:Bool = false
    public private(set) var token:String = ""

    public private(set) var hasNewUser:Bool = false
    public private(set) var newUser:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasUser {
        try output.writeMessage(1, value:user)
      }
      if hasToken {
        try output.writeString(2, value:token)
      }
      if hasNewUser {
        try output.writeBool(3, value:newUser)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUser {
          if let varSizeuser = user?.computeMessageSize(1) {
              serialize_size += varSizeuser
          }
      }
      if hasToken {
        serialize_size += token.computeStringSize(2)
      }
      if hasNewUser {
        serialize_size += newUser.computeBoolSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.User.Actions.AuthenticateUser.ResponseV1> {
      var mergedArray = Array<Services.User.Actions.AuthenticateUser.ResponseV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.User.Actions.AuthenticateUser.ResponseV1? {
      return try Services.User.Actions.AuthenticateUser.ResponseV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.User.Actions.AuthenticateUser.ResponseV1 {
      return try Services.User.Actions.AuthenticateUser.ResponseV1.Builder().mergeFromData(data, extensionRegistry:Services.User.Actions.AuthenticateUser.AuthenticateUserRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.AuthenticateUser.ResponseV1 {
      return try Services.User.Actions.AuthenticateUser.ResponseV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.User.Actions.AuthenticateUser.ResponseV1 {
      return try Services.User.Actions.AuthenticateUser.ResponseV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.AuthenticateUser.ResponseV1 {
      return try Services.User.Actions.AuthenticateUser.ResponseV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Actions.AuthenticateUser.ResponseV1 {
      return try Services.User.Actions.AuthenticateUser.ResponseV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.AuthenticateUser.ResponseV1 {
      return try Services.User.Actions.AuthenticateUser.ResponseV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.User.Actions.AuthenticateUser.ResponseV1.Builder {
      return Services.User.Actions.AuthenticateUser.ResponseV1.classBuilder() as! Services.User.Actions.AuthenticateUser.ResponseV1.Builder
    }
    public func getBuilder() -> Services.User.Actions.AuthenticateUser.ResponseV1.Builder {
      return classBuilder() as! Services.User.Actions.AuthenticateUser.ResponseV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Actions.AuthenticateUser.ResponseV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Actions.AuthenticateUser.ResponseV1.Builder()
    }
    public func toBuilder() throws -> Services.User.Actions.AuthenticateUser.ResponseV1.Builder {
      return try Services.User.Actions.AuthenticateUser.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Actions.AuthenticateUser.ResponseV1) throws -> Services.User.Actions.AuthenticateUser.ResponseV1.Builder {
      return try Services.User.Actions.AuthenticateUser.ResponseV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasUser {
        output += "\(indent) user {\n"
        try user?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasToken {
        output += "\(indent) token: \(token) \n"
      }
      if hasNewUser {
        output += "\(indent) newUser: \(newUser) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUser {
                if let hashValueuser = user?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuser
                }
            }
            if hasToken {
               hashCode = (hashCode &* 31) &+ token.hashValue
            }
            if hasNewUser {
               hashCode = (hashCode &* 31) &+ newUser.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Actions.AuthenticateUser.ResponseV1"
    }
    override public func className() -> String {
        return "Services.User.Actions.AuthenticateUser.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Actions.AuthenticateUser.ResponseV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.User.Actions.AuthenticateUser.ResponseV1 = Services.User.Actions.AuthenticateUser.ResponseV1()
      public func getMessage() -> Services.User.Actions.AuthenticateUser.ResponseV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasUser:Bool {
           get {
               return builderResult.hasUser
           }
      }
      public var user:Services.User.Containers.UserV1! {
           get {
               if userBuilder_ != nil {
                  builderResult.user = userBuilder_.getMessage()
               }
               return builderResult.user
           }
           set (value) {
               builderResult.hasUser = true
               builderResult.user = value
           }
      }
      private var userBuilder_:Services.User.Containers.UserV1.Builder! {
           didSet {
              builderResult.hasUser = true
           }
      }
      public func getUserBuilder() -> Services.User.Containers.UserV1.Builder {
        if userBuilder_ == nil {
           userBuilder_ = Services.User.Containers.UserV1.Builder()
           builderResult.user = userBuilder_.getMessage()
           if user != nil {
              try! userBuilder_.mergeFrom(user)
           }
        }
        return userBuilder_
      }
      public func setUser(value:Services.User.Containers.UserV1!) -> Services.User.Actions.AuthenticateUser.ResponseV1.Builder {
        self.user = value
        return self
      }
      public func mergeUser(value:Services.User.Containers.UserV1) throws -> Services.User.Actions.AuthenticateUser.ResponseV1.Builder {
        if builderResult.hasUser {
          builderResult.user = try Services.User.Containers.UserV1.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
        } else {
          builderResult.user = value
        }
        builderResult.hasUser = true
        return self
      }
      public func clearUser() -> Services.User.Actions.AuthenticateUser.ResponseV1.Builder {
        userBuilder_ = nil
        builderResult.hasUser = false
        builderResult.user = nil
        return self
      }
      public var hasToken:Bool {
           get {
                return builderResult.hasToken
           }
      }
      public var token:String {
           get {
                return builderResult.token
           }
           set (value) {
               builderResult.hasToken = true
               builderResult.token = value
           }
      }
      public func setToken(value:String) -> Services.User.Actions.AuthenticateUser.ResponseV1.Builder {
        self.token = value
        return self
      }
      public func clearToken() -> Services.User.Actions.AuthenticateUser.ResponseV1.Builder{
           builderResult.hasToken = false
           builderResult.token = ""
           return self
      }
      public var hasNewUser:Bool {
           get {
                return builderResult.hasNewUser
           }
      }
      public var newUser:Bool {
           get {
                return builderResult.newUser
           }
           set (value) {
               builderResult.hasNewUser = true
               builderResult.newUser = value
           }
      }
      public func setNewUser(value:Bool) -> Services.User.Actions.AuthenticateUser.ResponseV1.Builder {
        self.newUser = value
        return self
      }
      public func clearNewUser() -> Services.User.Actions.AuthenticateUser.ResponseV1.Builder{
           builderResult.hasNewUser = false
           builderResult.newUser = false
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.User.Actions.AuthenticateUser.ResponseV1.Builder {
        builderResult = Services.User.Actions.AuthenticateUser.ResponseV1()
        return self
      }
      public override func clone() throws -> Services.User.Actions.AuthenticateUser.ResponseV1.Builder {
        return try Services.User.Actions.AuthenticateUser.ResponseV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.User.Actions.AuthenticateUser.ResponseV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.User.Actions.AuthenticateUser.ResponseV1 {
        let returnMe:Services.User.Actions.AuthenticateUser.ResponseV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.User.Actions.AuthenticateUser.ResponseV1) throws -> Services.User.Actions.AuthenticateUser.ResponseV1.Builder {
        if other == Services.User.Actions.AuthenticateUser.ResponseV1() {
         return self
        }
        if (other.hasUser) {
            try mergeUser(other.user)
        }
        if other.hasToken {
             token = other.token
        }
        if other.hasNewUser {
             newUser = other.newUser
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Actions.AuthenticateUser.ResponseV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.AuthenticateUser.ResponseV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:Services.User.Containers.UserV1.Builder = Services.User.Containers.UserV1.Builder()
            if hasUser {
              try subBuilder.mergeFrom(user)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            user = subBuilder.buildPartial()

          case 18 :
            token = try input.readString()

          case 24 :
            newUser = try input.readBool()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
