// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.Profile{ public struct Containers { }}

public func == (lhs: Services.Profile.Containers.ContactMethodV1, rhs: Services.Profile.Containers.ContactMethodV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasLabel == rhs.hasLabel) && (!lhs.hasLabel || lhs.label == rhs.label)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  fieldCheck = fieldCheck && (lhs.hasContactMethodType == rhs.hasContactMethodType) && (!lhs.hasContactMethodType || lhs.contactMethodType == rhs.contactMethodType)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Profile.Containers.ProfileV1, rhs: Services.Profile.Containers.ProfileV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  fieldCheck = fieldCheck && (lhs.hasAddressId == rhs.hasAddressId) && (!lhs.hasAddressId || lhs.addressId == rhs.addressId)
  fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
  fieldCheck = fieldCheck && (lhs.hasFirstName == rhs.hasFirstName) && (!lhs.hasFirstName || lhs.firstName == rhs.firstName)
  fieldCheck = fieldCheck && (lhs.hasLastName == rhs.hasLastName) && (!lhs.hasLastName || lhs.lastName == rhs.lastName)
  fieldCheck = fieldCheck && (lhs.hasImageUrl == rhs.hasImageUrl) && (!lhs.hasImageUrl || lhs.imageUrl == rhs.imageUrl)
  fieldCheck = fieldCheck && (lhs.hasTeamId == rhs.hasTeamId) && (!lhs.hasTeamId || lhs.teamId == rhs.teamId)
  fieldCheck = fieldCheck && (lhs.hasFullName == rhs.hasFullName) && (!lhs.hasFullName || lhs.fullName == rhs.fullName)
  fieldCheck = fieldCheck && (lhs.hasBirthDate == rhs.hasBirthDate) && (!lhs.hasBirthDate || lhs.birthDate == rhs.birthDate)
  fieldCheck = fieldCheck && (lhs.hasHireDate == rhs.hasHireDate) && (!lhs.hasHireDate || lhs.hireDate == rhs.hireDate)
  fieldCheck = fieldCheck && (lhs.hasVerified == rhs.hasVerified) && (!lhs.hasVerified || lhs.verified == rhs.verified)
  fieldCheck = fieldCheck && (lhs.items == rhs.items)
  fieldCheck = fieldCheck && (lhs.hasAbout == rhs.hasAbout) && (!lhs.hasAbout || lhs.about == rhs.about)
  fieldCheck = fieldCheck && (lhs.hasLocationId == rhs.hasLocationId) && (!lhs.hasLocationId || lhs.locationId == rhs.locationId)
  fieldCheck = fieldCheck && (lhs.hasNickname == rhs.hasNickname) && (!lhs.hasNickname || lhs.nickname == rhs.nickname)
  fieldCheck = fieldCheck && (lhs.contactMethods == rhs.contactMethods)
  fieldCheck = fieldCheck && (lhs.hasSeatingInfo == rhs.hasSeatingInfo) && (!lhs.hasSeatingInfo || lhs.seatingInfo == rhs.seatingInfo)
  fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
  fieldCheck = fieldCheck && (lhs.hasIsAdmin == rhs.hasIsAdmin) && (!lhs.hasIsAdmin || lhs.isAdmin == rhs.isAdmin)
  fieldCheck = fieldCheck && (lhs.hasSmallImageUrl == rhs.hasSmallImageUrl) && (!lhs.hasSmallImageUrl || lhs.smallImageUrl == rhs.smallImageUrl)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Profile.Containers.ProfileItemV1, rhs: Services.Profile.Containers.ProfileItemV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Profile.Containers.AttributeV1, rhs: Services.Profile.Containers.AttributeV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Profile.Containers.StatV1, rhs: Services.Profile.Containers.StatV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasCount == rhs.hasCount) && (!lhs.hasCount || lhs.count == rhs.count)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Profile.Containers.TagV1, rhs: Services.Profile.Containers.TagV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasTagType == rhs.hasTagType) && (!lhs.hasTagType || lhs.tagType == rhs.tagType)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.Profile.Containers {
  public struct ContainersRoot {
    public static var sharedInstance : ContainersRoot {
     struct Static {
         static let instance : ContainersRoot = ContainersRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class ContactMethodV1 : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum ContactMethodTypeV1:Int32 {
        case CellPhone = 0
        case Phone = 1
        case Email = 2
        case Slack = 3
        case Twitter = 4
        case Hipchat = 5
        case Facebook = 6
        case Skype = 7

      }

      //Enum type declaration end 

    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "label": return label
           case "value": return value
           case "contactMethodType": return self.contactMethodType
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasLabel:Bool = false
    public private(set) var label:String = ""

    public private(set) var hasValue:Bool = false
    public private(set) var value:String = ""

    public private(set) var contactMethodType:Services.Profile.Containers.ContactMethodV1.ContactMethodTypeV1 = Services.Profile.Containers.ContactMethodV1.ContactMethodTypeV1.CellPhone
    public private(set) var hasContactMethodType:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasLabel {
        output.writeString(3, value:label)
      }
      if hasValue {
        output.writeString(4, value:value)
      }
      if hasContactMethodType {
        output.writeEnum(5, value:contactMethodType.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasLabel {
        serialize_size += label.computeStringSize(3)
      }
      if hasValue {
        serialize_size += value.computeStringSize(4)
      }
      if (hasContactMethodType) {
        serialize_size += contactMethodType.rawValue.computeEnumSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Profile.Containers.ContactMethodV1 {
      return Services.Profile.Containers.ContactMethodV1.builder().mergeFromData(data, extensionRegistry:Services.Profile.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.ContactMethodV1 {
      return Services.Profile.Containers.ContactMethodV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Profile.Containers.ContactMethodV1 {
      return Services.Profile.Containers.ContactMethodV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Profile.Containers.ContactMethodV1 {
      return Services.Profile.Containers.ContactMethodV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Profile.Containers.ContactMethodV1 {
      return Services.Profile.Containers.ContactMethodV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.ContactMethodV1 {
      return Services.Profile.Containers.ContactMethodV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Profile.Containers.ContactMethodV1Builder {
      return Services.Profile.Containers.ContactMethodV1.classBuilder() as! Services.Profile.Containers.ContactMethodV1Builder
    }
    public func builder() -> Services.Profile.Containers.ContactMethodV1Builder {
      return classBuilder() as! Services.Profile.Containers.ContactMethodV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.ContactMethodV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.ContactMethodV1.builder()
    }
    public func toBuilder() -> Services.Profile.Containers.ContactMethodV1Builder {
      return Services.Profile.Containers.ContactMethodV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Profile.Containers.ContactMethodV1) -> Services.Profile.Containers.ContactMethodV1Builder {
      return Services.Profile.Containers.ContactMethodV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasLabel {
        output += "\(indent) label: \(label) \n"
      }
      if hasValue {
        output += "\(indent) value: \(value) \n"
      }
      if (hasContactMethodType) {
        output += "\(indent) contactMethodType: \(contactMethodType.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasLabel {
               hashCode = (hashCode &* 31) &+ label.hashValue
            }
            if hasValue {
               hashCode = (hashCode &* 31) &+ value.hashValue
            }
            if hasContactMethodType {
               hashCode = (hashCode &* 31) &+ Int(contactMethodType.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Profile.Containers.ContactMethodV1"
    }
    override public func className() -> String {
        return "Services.Profile.Containers.ContactMethodV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Containers.ContactMethodV1.self
    }
    //Meta information declaration end

  }

  final public class ContactMethodV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Profile.Containers.ContactMethodV1

    required override public init () {
       builderResult = Services.Profile.Containers.ContactMethodV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Profile.Containers.ContactMethodV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Profile.Containers.ContactMethodV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Profile.Containers.ContactMethodV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Profile.Containers.ContactMethodV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasLabel:Bool {
         get {
              return builderResult.hasLabel
         }
    }
    public var label:String {
         get {
              return builderResult.label
         }
         set (value) {
             builderResult.hasLabel = true
             builderResult.label = value
         }
    }
    public func setLabel(value:String)-> Services.Profile.Containers.ContactMethodV1Builder {
      self.label = value
      return self
    }
    public func clearLabel() -> Services.Profile.Containers.ContactMethodV1Builder{
         builderResult.hasLabel = false
         builderResult.label = ""
         return self
    }
    public var hasValue:Bool {
         get {
              return builderResult.hasValue
         }
    }
    public var value:String {
         get {
              return builderResult.value
         }
         set (value) {
             builderResult.hasValue = true
             builderResult.value = value
         }
    }
    public func setValue(value:String)-> Services.Profile.Containers.ContactMethodV1Builder {
      self.value = value
      return self
    }
    public func clearValue() -> Services.Profile.Containers.ContactMethodV1Builder{
         builderResult.hasValue = false
         builderResult.value = ""
         return self
    }
      public var hasContactMethodType:Bool{
          get {
              return builderResult.hasContactMethodType
          }
      }
      public var contactMethodType:Services.Profile.Containers.ContactMethodV1.ContactMethodTypeV1 {
          get {
              return builderResult.contactMethodType
          }
          set (value) {
              builderResult.hasContactMethodType = true
              builderResult.contactMethodType = value
          }
      }
      public func setContactMethodType(value:Services.Profile.Containers.ContactMethodV1.ContactMethodTypeV1)-> Services.Profile.Containers.ContactMethodV1Builder {
        self.contactMethodType = value
        return self
      }
      public func clearContactMethodType() -> Services.Profile.Containers.ContactMethodV1Builder {
         builderResult.hasContactMethodType = false
         builderResult.contactMethodType = .CellPhone
         return self
      }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Profile.Containers.ContactMethodV1Builder {
      builderResult = Services.Profile.Containers.ContactMethodV1()
      return self
    }
    public override func clone() -> Services.Profile.Containers.ContactMethodV1Builder {
      return Services.Profile.Containers.ContactMethodV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Profile.Containers.ContactMethodV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Profile.Containers.ContactMethodV1 {
      var returnMe:Services.Profile.Containers.ContactMethodV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Profile.Containers.ContactMethodV1) -> Services.Profile.Containers.ContactMethodV1Builder {
      if (other == Services.Profile.Containers.ContactMethodV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasLabel {
           label = other.label
      }
      if other.hasValue {
           value = other.value
      }
      if other.hasContactMethodType {
           contactMethodType = other.contactMethodType
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Profile.Containers.ContactMethodV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.ContactMethodV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          label = input.readString()

        case 34 :
          value = input.readString()

        case 40 :
          let valueIntcontactMethodType = input.readEnum()
          if let enumscontactMethodType = Services.Profile.Containers.ContactMethodV1.ContactMethodTypeV1(rawValue:valueIntcontactMethodType){
               contactMethodType = enumscontactMethodType
          } else {
               unknownFieldsBuilder.mergeVarintField(5, value:Int64(valueIntcontactMethodType))
          }

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class ProfileV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "organizationId": return organizationId
           case "userId": return userId
           case "addressId": return addressId
           case "title": return title
           case "firstName": return firstName
           case "lastName": return lastName
           case "imageUrl": return imageUrl
           case "teamId": return teamId
           case "fullName": return fullName
           case "birthDate": return birthDate
           case "hireDate": return hireDate
           case "verified": return verified
           case "about": return about
           case "locationId": return locationId
           case "nickname": return nickname
           case "seatingInfo": return seatingInfo
           case "email": return email
           case "isAdmin": return isAdmin
           case "smallImageUrl": return smallImageUrl
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    public private(set) var hasUserId:Bool = false
    public private(set) var userId:String = ""

    public private(set) var hasAddressId:Bool = false
    public private(set) var addressId:String = ""

    public private(set) var hasTitle:Bool = false
    public private(set) var title:String = ""

    public private(set) var hasFirstName:Bool = false
    public private(set) var firstName:String = ""

    public private(set) var hasLastName:Bool = false
    public private(set) var lastName:String = ""

    public private(set) var hasImageUrl:Bool = false
    public private(set) var imageUrl:String = ""

    public private(set) var hasTeamId:Bool = false
    public private(set) var teamId:String = ""

    public private(set) var hasFullName:Bool = false
    public private(set) var fullName:String = ""

    public private(set) var hasBirthDate:Bool = false
    public private(set) var birthDate:String = ""

    public private(set) var hasHireDate:Bool = false
    public private(set) var hireDate:String = ""

    public private(set) var hasVerified:Bool = false
    public private(set) var verified:Bool = false

    public private(set) var hasAbout:Bool = false
    public private(set) var about:String = ""

    public private(set) var hasLocationId:Bool = false
    public private(set) var locationId:String = ""

    public private(set) var hasNickname:Bool = false
    public private(set) var nickname:String = ""

    public private(set) var hasSeatingInfo:Bool = false
    public private(set) var seatingInfo:String = ""

    public private(set) var hasEmail:Bool = false
    public private(set) var email:String = ""

    public private(set) var hasIsAdmin:Bool = false
    public private(set) var isAdmin:Bool = false

    public private(set) var hasSmallImageUrl:Bool = false
    public private(set) var smallImageUrl:String = ""

    public private(set) var items:Array<Services.Profile.Containers.ProfileItemV1>  = Array<Services.Profile.Containers.ProfileItemV1>()
    public private(set) var contactMethods:Array<Services.Profile.Containers.ContactMethodV1>  = Array<Services.Profile.Containers.ContactMethodV1>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasOrganizationId {
        output.writeString(3, value:organizationId)
      }
      if hasUserId {
        output.writeString(4, value:userId)
      }
      if hasAddressId {
        output.writeString(5, value:addressId)
      }
      if hasTitle {
        output.writeString(6, value:title)
      }
      if hasFirstName {
        output.writeString(7, value:firstName)
      }
      if hasLastName {
        output.writeString(8, value:lastName)
      }
      if hasImageUrl {
        output.writeString(9, value:imageUrl)
      }
      if hasTeamId {
        output.writeString(10, value:teamId)
      }
      if hasFullName {
        output.writeString(11, value:fullName)
      }
      if hasBirthDate {
        output.writeString(12, value:birthDate)
      }
      if hasHireDate {
        output.writeString(13, value:hireDate)
      }
      if hasVerified {
        output.writeBool(14, value:verified)
      }
      for oneElementitems in items {
          output.writeMessage(15, value:oneElementitems)
      }
      if hasAbout {
        output.writeString(16, value:about)
      }
      if hasLocationId {
        output.writeString(17, value:locationId)
      }
      if hasNickname {
        output.writeString(18, value:nickname)
      }
      for oneElementcontactMethods in contactMethods {
          output.writeMessage(19, value:oneElementcontactMethods)
      }
      if hasSeatingInfo {
        output.writeString(20, value:seatingInfo)
      }
      if hasEmail {
        output.writeString(21, value:email)
      }
      if hasIsAdmin {
        output.writeBool(22, value:isAdmin)
      }
      if hasSmallImageUrl {
        output.writeString(23, value:smallImageUrl)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(3)
      }
      if hasUserId {
        serialize_size += userId.computeStringSize(4)
      }
      if hasAddressId {
        serialize_size += addressId.computeStringSize(5)
      }
      if hasTitle {
        serialize_size += title.computeStringSize(6)
      }
      if hasFirstName {
        serialize_size += firstName.computeStringSize(7)
      }
      if hasLastName {
        serialize_size += lastName.computeStringSize(8)
      }
      if hasImageUrl {
        serialize_size += imageUrl.computeStringSize(9)
      }
      if hasTeamId {
        serialize_size += teamId.computeStringSize(10)
      }
      if hasFullName {
        serialize_size += fullName.computeStringSize(11)
      }
      if hasBirthDate {
        serialize_size += birthDate.computeStringSize(12)
      }
      if hasHireDate {
        serialize_size += hireDate.computeStringSize(13)
      }
      if hasVerified {
        serialize_size += verified.computeBoolSize(14)
      }
      for oneElementitems in items {
          serialize_size += oneElementitems.computeMessageSize(15)
      }
      if hasAbout {
        serialize_size += about.computeStringSize(16)
      }
      if hasLocationId {
        serialize_size += locationId.computeStringSize(17)
      }
      if hasNickname {
        serialize_size += nickname.computeStringSize(18)
      }
      for oneElementcontactMethods in contactMethods {
          serialize_size += oneElementcontactMethods.computeMessageSize(19)
      }
      if hasSeatingInfo {
        serialize_size += seatingInfo.computeStringSize(20)
      }
      if hasEmail {
        serialize_size += email.computeStringSize(21)
      }
      if hasIsAdmin {
        serialize_size += isAdmin.computeBoolSize(22)
      }
      if hasSmallImageUrl {
        serialize_size += smallImageUrl.computeStringSize(23)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Profile.Containers.ProfileV1 {
      return Services.Profile.Containers.ProfileV1.builder().mergeFromData(data, extensionRegistry:Services.Profile.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.ProfileV1 {
      return Services.Profile.Containers.ProfileV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Profile.Containers.ProfileV1 {
      return Services.Profile.Containers.ProfileV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Profile.Containers.ProfileV1 {
      return Services.Profile.Containers.ProfileV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Profile.Containers.ProfileV1 {
      return Services.Profile.Containers.ProfileV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.ProfileV1 {
      return Services.Profile.Containers.ProfileV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Profile.Containers.ProfileV1Builder {
      return Services.Profile.Containers.ProfileV1.classBuilder() as! Services.Profile.Containers.ProfileV1Builder
    }
    public func builder() -> Services.Profile.Containers.ProfileV1Builder {
      return classBuilder() as! Services.Profile.Containers.ProfileV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.ProfileV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.ProfileV1.builder()
    }
    public func toBuilder() -> Services.Profile.Containers.ProfileV1Builder {
      return Services.Profile.Containers.ProfileV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Profile.Containers.ProfileV1) -> Services.Profile.Containers.ProfileV1Builder {
      return Services.Profile.Containers.ProfileV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      if hasUserId {
        output += "\(indent) userId: \(userId) \n"
      }
      if hasAddressId {
        output += "\(indent) addressId: \(addressId) \n"
      }
      if hasTitle {
        output += "\(indent) title: \(title) \n"
      }
      if hasFirstName {
        output += "\(indent) firstName: \(firstName) \n"
      }
      if hasLastName {
        output += "\(indent) lastName: \(lastName) \n"
      }
      if hasImageUrl {
        output += "\(indent) imageUrl: \(imageUrl) \n"
      }
      if hasTeamId {
        output += "\(indent) teamId: \(teamId) \n"
      }
      if hasFullName {
        output += "\(indent) fullName: \(fullName) \n"
      }
      if hasBirthDate {
        output += "\(indent) birthDate: \(birthDate) \n"
      }
      if hasHireDate {
        output += "\(indent) hireDate: \(hireDate) \n"
      }
      if hasVerified {
        output += "\(indent) verified: \(verified) \n"
      }
      var itemsElementIndex:Int = 0
      for oneElementitems in items {
          output += "\(indent) items[\(itemsElementIndex)] {\n"
          oneElementitems.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          itemsElementIndex++
      }
      if hasAbout {
        output += "\(indent) about: \(about) \n"
      }
      if hasLocationId {
        output += "\(indent) locationId: \(locationId) \n"
      }
      if hasNickname {
        output += "\(indent) nickname: \(nickname) \n"
      }
      var contactMethodsElementIndex:Int = 0
      for oneElementcontactMethods in contactMethods {
          output += "\(indent) contactMethods[\(contactMethodsElementIndex)] {\n"
          oneElementcontactMethods.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          contactMethodsElementIndex++
      }
      if hasSeatingInfo {
        output += "\(indent) seatingInfo: \(seatingInfo) \n"
      }
      if hasEmail {
        output += "\(indent) email: \(email) \n"
      }
      if hasIsAdmin {
        output += "\(indent) isAdmin: \(isAdmin) \n"
      }
      if hasSmallImageUrl {
        output += "\(indent) smallImageUrl: \(smallImageUrl) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            if hasUserId {
               hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            if hasAddressId {
               hashCode = (hashCode &* 31) &+ addressId.hashValue
            }
            if hasTitle {
               hashCode = (hashCode &* 31) &+ title.hashValue
            }
            if hasFirstName {
               hashCode = (hashCode &* 31) &+ firstName.hashValue
            }
            if hasLastName {
               hashCode = (hashCode &* 31) &+ lastName.hashValue
            }
            if hasImageUrl {
               hashCode = (hashCode &* 31) &+ imageUrl.hashValue
            }
            if hasTeamId {
               hashCode = (hashCode &* 31) &+ teamId.hashValue
            }
            if hasFullName {
               hashCode = (hashCode &* 31) &+ fullName.hashValue
            }
            if hasBirthDate {
               hashCode = (hashCode &* 31) &+ birthDate.hashValue
            }
            if hasHireDate {
               hashCode = (hashCode &* 31) &+ hireDate.hashValue
            }
            if hasVerified {
               hashCode = (hashCode &* 31) &+ verified.hashValue
            }
            for oneElementitems in items {
                hashCode = (hashCode &* 31) &+ oneElementitems.hashValue
            }
            if hasAbout {
               hashCode = (hashCode &* 31) &+ about.hashValue
            }
            if hasLocationId {
               hashCode = (hashCode &* 31) &+ locationId.hashValue
            }
            if hasNickname {
               hashCode = (hashCode &* 31) &+ nickname.hashValue
            }
            for oneElementcontactMethods in contactMethods {
                hashCode = (hashCode &* 31) &+ oneElementcontactMethods.hashValue
            }
            if hasSeatingInfo {
               hashCode = (hashCode &* 31) &+ seatingInfo.hashValue
            }
            if hasEmail {
               hashCode = (hashCode &* 31) &+ email.hashValue
            }
            if hasIsAdmin {
               hashCode = (hashCode &* 31) &+ isAdmin.hashValue
            }
            if hasSmallImageUrl {
               hashCode = (hashCode &* 31) &+ smallImageUrl.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Profile.Containers.ProfileV1"
    }
    override public func className() -> String {
        return "Services.Profile.Containers.ProfileV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Containers.ProfileV1.self
    }
    //Meta information declaration end

  }

  final public class ProfileV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Profile.Containers.ProfileV1

    required override public init () {
       builderResult = Services.Profile.Containers.ProfileV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Profile.Containers.ProfileV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasOrganizationId:Bool {
         get {
              return builderResult.hasOrganizationId
         }
    }
    public var organizationId:String {
         get {
              return builderResult.organizationId
         }
         set (value) {
             builderResult.hasOrganizationId = true
             builderResult.organizationId = value
         }
    }
    public func setOrganizationId(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.organizationId = value
      return self
    }
    public func clearOrganizationId() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasOrganizationId = false
         builderResult.organizationId = ""
         return self
    }
    public var hasUserId:Bool {
         get {
              return builderResult.hasUserId
         }
    }
    public var userId:String {
         get {
              return builderResult.userId
         }
         set (value) {
             builderResult.hasUserId = true
             builderResult.userId = value
         }
    }
    public func setUserId(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.userId = value
      return self
    }
    public func clearUserId() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasUserId = false
         builderResult.userId = ""
         return self
    }
    public var hasAddressId:Bool {
         get {
              return builderResult.hasAddressId
         }
    }
    public var addressId:String {
         get {
              return builderResult.addressId
         }
         set (value) {
             builderResult.hasAddressId = true
             builderResult.addressId = value
         }
    }
    public func setAddressId(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.addressId = value
      return self
    }
    public func clearAddressId() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasAddressId = false
         builderResult.addressId = ""
         return self
    }
    public var hasTitle:Bool {
         get {
              return builderResult.hasTitle
         }
    }
    public var title:String {
         get {
              return builderResult.title
         }
         set (value) {
             builderResult.hasTitle = true
             builderResult.title = value
         }
    }
    public func setTitle(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.title = value
      return self
    }
    public func clearTitle() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasTitle = false
         builderResult.title = ""
         return self
    }
    public var hasFirstName:Bool {
         get {
              return builderResult.hasFirstName
         }
    }
    public var firstName:String {
         get {
              return builderResult.firstName
         }
         set (value) {
             builderResult.hasFirstName = true
             builderResult.firstName = value
         }
    }
    public func setFirstName(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.firstName = value
      return self
    }
    public func clearFirstName() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasFirstName = false
         builderResult.firstName = ""
         return self
    }
    public var hasLastName:Bool {
         get {
              return builderResult.hasLastName
         }
    }
    public var lastName:String {
         get {
              return builderResult.lastName
         }
         set (value) {
             builderResult.hasLastName = true
             builderResult.lastName = value
         }
    }
    public func setLastName(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.lastName = value
      return self
    }
    public func clearLastName() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasLastName = false
         builderResult.lastName = ""
         return self
    }
    public var hasImageUrl:Bool {
         get {
              return builderResult.hasImageUrl
         }
    }
    public var imageUrl:String {
         get {
              return builderResult.imageUrl
         }
         set (value) {
             builderResult.hasImageUrl = true
             builderResult.imageUrl = value
         }
    }
    public func setImageUrl(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.imageUrl = value
      return self
    }
    public func clearImageUrl() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasImageUrl = false
         builderResult.imageUrl = ""
         return self
    }
    public var hasTeamId:Bool {
         get {
              return builderResult.hasTeamId
         }
    }
    public var teamId:String {
         get {
              return builderResult.teamId
         }
         set (value) {
             builderResult.hasTeamId = true
             builderResult.teamId = value
         }
    }
    public func setTeamId(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.teamId = value
      return self
    }
    public func clearTeamId() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasTeamId = false
         builderResult.teamId = ""
         return self
    }
    public var hasFullName:Bool {
         get {
              return builderResult.hasFullName
         }
    }
    public var fullName:String {
         get {
              return builderResult.fullName
         }
         set (value) {
             builderResult.hasFullName = true
             builderResult.fullName = value
         }
    }
    public func setFullName(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.fullName = value
      return self
    }
    public func clearFullName() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasFullName = false
         builderResult.fullName = ""
         return self
    }
    public var hasBirthDate:Bool {
         get {
              return builderResult.hasBirthDate
         }
    }
    public var birthDate:String {
         get {
              return builderResult.birthDate
         }
         set (value) {
             builderResult.hasBirthDate = true
             builderResult.birthDate = value
         }
    }
    public func setBirthDate(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.birthDate = value
      return self
    }
    public func clearBirthDate() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasBirthDate = false
         builderResult.birthDate = ""
         return self
    }
    public var hasHireDate:Bool {
         get {
              return builderResult.hasHireDate
         }
    }
    public var hireDate:String {
         get {
              return builderResult.hireDate
         }
         set (value) {
             builderResult.hasHireDate = true
             builderResult.hireDate = value
         }
    }
    public func setHireDate(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.hireDate = value
      return self
    }
    public func clearHireDate() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasHireDate = false
         builderResult.hireDate = ""
         return self
    }
    public var hasVerified:Bool {
         get {
              return builderResult.hasVerified
         }
    }
    public var verified:Bool {
         get {
              return builderResult.verified
         }
         set (value) {
             builderResult.hasVerified = true
             builderResult.verified = value
         }
    }
    public func setVerified(value:Bool)-> Services.Profile.Containers.ProfileV1Builder {
      self.verified = value
      return self
    }
    public func clearVerified() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasVerified = false
         builderResult.verified = false
         return self
    }
    public var items:Array<Services.Profile.Containers.ProfileItemV1> {
         get {
             return builderResult.items
         }
         set (value) {
             builderResult.items = value
         }
    }
    public func setItems(value:Array<Services.Profile.Containers.ProfileItemV1>)-> Services.Profile.Containers.ProfileV1Builder {
      self.items = value
      return self
    }
    public func clearItems() -> Services.Profile.Containers.ProfileV1Builder {
      builderResult.items.removeAll(keepCapacity: false)
      return self
    }
    public var hasAbout:Bool {
         get {
              return builderResult.hasAbout
         }
    }
    public var about:String {
         get {
              return builderResult.about
         }
         set (value) {
             builderResult.hasAbout = true
             builderResult.about = value
         }
    }
    public func setAbout(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.about = value
      return self
    }
    public func clearAbout() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasAbout = false
         builderResult.about = ""
         return self
    }
    public var hasLocationId:Bool {
         get {
              return builderResult.hasLocationId
         }
    }
    public var locationId:String {
         get {
              return builderResult.locationId
         }
         set (value) {
             builderResult.hasLocationId = true
             builderResult.locationId = value
         }
    }
    public func setLocationId(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.locationId = value
      return self
    }
    public func clearLocationId() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasLocationId = false
         builderResult.locationId = ""
         return self
    }
    public var hasNickname:Bool {
         get {
              return builderResult.hasNickname
         }
    }
    public var nickname:String {
         get {
              return builderResult.nickname
         }
         set (value) {
             builderResult.hasNickname = true
             builderResult.nickname = value
         }
    }
    public func setNickname(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.nickname = value
      return self
    }
    public func clearNickname() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasNickname = false
         builderResult.nickname = ""
         return self
    }
    public var contactMethods:Array<Services.Profile.Containers.ContactMethodV1> {
         get {
             return builderResult.contactMethods
         }
         set (value) {
             builderResult.contactMethods = value
         }
    }
    public func setContactMethods(value:Array<Services.Profile.Containers.ContactMethodV1>)-> Services.Profile.Containers.ProfileV1Builder {
      self.contactMethods = value
      return self
    }
    public func clearContactMethods() -> Services.Profile.Containers.ProfileV1Builder {
      builderResult.contactMethods.removeAll(keepCapacity: false)
      return self
    }
    public var hasSeatingInfo:Bool {
         get {
              return builderResult.hasSeatingInfo
         }
    }
    public var seatingInfo:String {
         get {
              return builderResult.seatingInfo
         }
         set (value) {
             builderResult.hasSeatingInfo = true
             builderResult.seatingInfo = value
         }
    }
    public func setSeatingInfo(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.seatingInfo = value
      return self
    }
    public func clearSeatingInfo() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasSeatingInfo = false
         builderResult.seatingInfo = ""
         return self
    }
    public var hasEmail:Bool {
         get {
              return builderResult.hasEmail
         }
    }
    public var email:String {
         get {
              return builderResult.email
         }
         set (value) {
             builderResult.hasEmail = true
             builderResult.email = value
         }
    }
    public func setEmail(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.email = value
      return self
    }
    public func clearEmail() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasEmail = false
         builderResult.email = ""
         return self
    }
    public var hasIsAdmin:Bool {
         get {
              return builderResult.hasIsAdmin
         }
    }
    public var isAdmin:Bool {
         get {
              return builderResult.isAdmin
         }
         set (value) {
             builderResult.hasIsAdmin = true
             builderResult.isAdmin = value
         }
    }
    public func setIsAdmin(value:Bool)-> Services.Profile.Containers.ProfileV1Builder {
      self.isAdmin = value
      return self
    }
    public func clearIsAdmin() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasIsAdmin = false
         builderResult.isAdmin = false
         return self
    }
    public var hasSmallImageUrl:Bool {
         get {
              return builderResult.hasSmallImageUrl
         }
    }
    public var smallImageUrl:String {
         get {
              return builderResult.smallImageUrl
         }
         set (value) {
             builderResult.hasSmallImageUrl = true
             builderResult.smallImageUrl = value
         }
    }
    public func setSmallImageUrl(value:String)-> Services.Profile.Containers.ProfileV1Builder {
      self.smallImageUrl = value
      return self
    }
    public func clearSmallImageUrl() -> Services.Profile.Containers.ProfileV1Builder{
         builderResult.hasSmallImageUrl = false
         builderResult.smallImageUrl = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Profile.Containers.ProfileV1Builder {
      builderResult = Services.Profile.Containers.ProfileV1()
      return self
    }
    public override func clone() -> Services.Profile.Containers.ProfileV1Builder {
      return Services.Profile.Containers.ProfileV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Profile.Containers.ProfileV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Profile.Containers.ProfileV1 {
      var returnMe:Services.Profile.Containers.ProfileV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Profile.Containers.ProfileV1) -> Services.Profile.Containers.ProfileV1Builder {
      if (other == Services.Profile.Containers.ProfileV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasOrganizationId {
           organizationId = other.organizationId
      }
      if other.hasUserId {
           userId = other.userId
      }
      if other.hasAddressId {
           addressId = other.addressId
      }
      if other.hasTitle {
           title = other.title
      }
      if other.hasFirstName {
           firstName = other.firstName
      }
      if other.hasLastName {
           lastName = other.lastName
      }
      if other.hasImageUrl {
           imageUrl = other.imageUrl
      }
      if other.hasTeamId {
           teamId = other.teamId
      }
      if other.hasFullName {
           fullName = other.fullName
      }
      if other.hasBirthDate {
           birthDate = other.birthDate
      }
      if other.hasHireDate {
           hireDate = other.hireDate
      }
      if other.hasVerified {
           verified = other.verified
      }
      if !other.items.isEmpty  {
         builderResult.items += other.items
      }
      if other.hasAbout {
           about = other.about
      }
      if other.hasLocationId {
           locationId = other.locationId
      }
      if other.hasNickname {
           nickname = other.nickname
      }
      if !other.contactMethods.isEmpty  {
         builderResult.contactMethods += other.contactMethods
      }
      if other.hasSeatingInfo {
           seatingInfo = other.seatingInfo
      }
      if other.hasEmail {
           email = other.email
      }
      if other.hasIsAdmin {
           isAdmin = other.isAdmin
      }
      if other.hasSmallImageUrl {
           smallImageUrl = other.smallImageUrl
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Profile.Containers.ProfileV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.ProfileV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          organizationId = input.readString()

        case 34 :
          userId = input.readString()

        case 42 :
          addressId = input.readString()

        case 50 :
          title = input.readString()

        case 58 :
          firstName = input.readString()

        case 66 :
          lastName = input.readString()

        case 74 :
          imageUrl = input.readString()

        case 82 :
          teamId = input.readString()

        case 90 :
          fullName = input.readString()

        case 98 :
          birthDate = input.readString()

        case 106 :
          hireDate = input.readString()

        case 112 :
          verified = input.readBool()

        case 122 :
          var subBuilder = Services.Profile.Containers.ProfileItemV1.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          items += [subBuilder.buildPartial()]

        case 130 :
          about = input.readString()

        case 138 :
          locationId = input.readString()

        case 146 :
          nickname = input.readString()

        case 154 :
          var subBuilder = Services.Profile.Containers.ContactMethodV1.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          contactMethods += [subBuilder.buildPartial()]

        case 162 :
          seatingInfo = input.readString()

        case 170 :
          email = input.readString()

        case 176 :
          isAdmin = input.readBool()

        case 186 :
          smallImageUrl = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class ProfileItemV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "key": return key
           case "value": return value
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(0)

    public private(set) var hasKey:Bool = false
    public private(set) var key:String = ""

    public private(set) var hasValue:Bool = false
    public private(set) var value:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasKey {
        output.writeString(2, value:key)
      }
      if hasValue {
        output.writeString(3, value:value)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasKey {
        serialize_size += key.computeStringSize(2)
      }
      if hasValue {
        serialize_size += value.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Profile.Containers.ProfileItemV1 {
      return Services.Profile.Containers.ProfileItemV1.builder().mergeFromData(data, extensionRegistry:Services.Profile.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.ProfileItemV1 {
      return Services.Profile.Containers.ProfileItemV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Profile.Containers.ProfileItemV1 {
      return Services.Profile.Containers.ProfileItemV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Profile.Containers.ProfileItemV1 {
      return Services.Profile.Containers.ProfileItemV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Profile.Containers.ProfileItemV1 {
      return Services.Profile.Containers.ProfileItemV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.ProfileItemV1 {
      return Services.Profile.Containers.ProfileItemV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Profile.Containers.ProfileItemV1Builder {
      return Services.Profile.Containers.ProfileItemV1.classBuilder() as! Services.Profile.Containers.ProfileItemV1Builder
    }
    public func builder() -> Services.Profile.Containers.ProfileItemV1Builder {
      return classBuilder() as! Services.Profile.Containers.ProfileItemV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.ProfileItemV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.ProfileItemV1.builder()
    }
    public func toBuilder() -> Services.Profile.Containers.ProfileItemV1Builder {
      return Services.Profile.Containers.ProfileItemV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Profile.Containers.ProfileItemV1) -> Services.Profile.Containers.ProfileItemV1Builder {
      return Services.Profile.Containers.ProfileItemV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasKey {
        output += "\(indent) key: \(key) \n"
      }
      if hasValue {
        output += "\(indent) value: \(value) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasKey {
               hashCode = (hashCode &* 31) &+ key.hashValue
            }
            if hasValue {
               hashCode = (hashCode &* 31) &+ value.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Profile.Containers.ProfileItemV1"
    }
    override public func className() -> String {
        return "Services.Profile.Containers.ProfileItemV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Containers.ProfileItemV1.self
    }
    //Meta information declaration end

  }

  final public class ProfileItemV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Profile.Containers.ProfileItemV1

    required override public init () {
       builderResult = Services.Profile.Containers.ProfileItemV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Profile.Containers.ProfileItemV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Profile.Containers.ProfileItemV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(0)
         return self
    }
    public var hasKey:Bool {
         get {
              return builderResult.hasKey
         }
    }
    public var key:String {
         get {
              return builderResult.key
         }
         set (value) {
             builderResult.hasKey = true
             builderResult.key = value
         }
    }
    public func setKey(value:String)-> Services.Profile.Containers.ProfileItemV1Builder {
      self.key = value
      return self
    }
    public func clearKey() -> Services.Profile.Containers.ProfileItemV1Builder{
         builderResult.hasKey = false
         builderResult.key = ""
         return self
    }
    public var hasValue:Bool {
         get {
              return builderResult.hasValue
         }
    }
    public var value:String {
         get {
              return builderResult.value
         }
         set (value) {
             builderResult.hasValue = true
             builderResult.value = value
         }
    }
    public func setValue(value:String)-> Services.Profile.Containers.ProfileItemV1Builder {
      self.value = value
      return self
    }
    public func clearValue() -> Services.Profile.Containers.ProfileItemV1Builder{
         builderResult.hasValue = false
         builderResult.value = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Profile.Containers.ProfileItemV1Builder {
      builderResult = Services.Profile.Containers.ProfileItemV1()
      return self
    }
    public override func clone() -> Services.Profile.Containers.ProfileItemV1Builder {
      return Services.Profile.Containers.ProfileItemV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Profile.Containers.ProfileItemV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Profile.Containers.ProfileItemV1 {
      var returnMe:Services.Profile.Containers.ProfileItemV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Profile.Containers.ProfileItemV1) -> Services.Profile.Containers.ProfileItemV1Builder {
      if (other == Services.Profile.Containers.ProfileItemV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasKey {
           key = other.key
      }
      if other.hasValue {
           value = other.value
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Profile.Containers.ProfileItemV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.ProfileItemV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          key = input.readString()

        case 26 :
          value = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class AttributeV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "name": return name
           case "value": return value
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasValue:Bool = false
    public private(set) var value:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasName {
        output.writeString(2, value:name)
      }
      if hasValue {
        output.writeString(3, value:value)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasName {
        serialize_size += name.computeStringSize(2)
      }
      if hasValue {
        serialize_size += value.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Profile.Containers.AttributeV1 {
      return Services.Profile.Containers.AttributeV1.builder().mergeFromData(data, extensionRegistry:Services.Profile.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.AttributeV1 {
      return Services.Profile.Containers.AttributeV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Profile.Containers.AttributeV1 {
      return Services.Profile.Containers.AttributeV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Profile.Containers.AttributeV1 {
      return Services.Profile.Containers.AttributeV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Profile.Containers.AttributeV1 {
      return Services.Profile.Containers.AttributeV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.AttributeV1 {
      return Services.Profile.Containers.AttributeV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Profile.Containers.AttributeV1Builder {
      return Services.Profile.Containers.AttributeV1.classBuilder() as! Services.Profile.Containers.AttributeV1Builder
    }
    public func builder() -> Services.Profile.Containers.AttributeV1Builder {
      return classBuilder() as! Services.Profile.Containers.AttributeV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.AttributeV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.AttributeV1.builder()
    }
    public func toBuilder() -> Services.Profile.Containers.AttributeV1Builder {
      return Services.Profile.Containers.AttributeV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Profile.Containers.AttributeV1) -> Services.Profile.Containers.AttributeV1Builder {
      return Services.Profile.Containers.AttributeV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasValue {
        output += "\(indent) value: \(value) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasValue {
               hashCode = (hashCode &* 31) &+ value.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Profile.Containers.AttributeV1"
    }
    override public func className() -> String {
        return "Services.Profile.Containers.AttributeV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Containers.AttributeV1.self
    }
    //Meta information declaration end

  }

  final public class AttributeV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Profile.Containers.AttributeV1

    required override public init () {
       builderResult = Services.Profile.Containers.AttributeV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Profile.Containers.AttributeV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Profile.Containers.AttributeV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String)-> Services.Profile.Containers.AttributeV1Builder {
      self.name = value
      return self
    }
    public func clearName() -> Services.Profile.Containers.AttributeV1Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasValue:Bool {
         get {
              return builderResult.hasValue
         }
    }
    public var value:String {
         get {
              return builderResult.value
         }
         set (value) {
             builderResult.hasValue = true
             builderResult.value = value
         }
    }
    public func setValue(value:String)-> Services.Profile.Containers.AttributeV1Builder {
      self.value = value
      return self
    }
    public func clearValue() -> Services.Profile.Containers.AttributeV1Builder{
         builderResult.hasValue = false
         builderResult.value = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Profile.Containers.AttributeV1Builder {
      builderResult = Services.Profile.Containers.AttributeV1()
      return self
    }
    public override func clone() -> Services.Profile.Containers.AttributeV1Builder {
      return Services.Profile.Containers.AttributeV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Profile.Containers.AttributeV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Profile.Containers.AttributeV1 {
      var returnMe:Services.Profile.Containers.AttributeV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Profile.Containers.AttributeV1) -> Services.Profile.Containers.AttributeV1Builder {
      if (other == Services.Profile.Containers.AttributeV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasName {
           name = other.name
      }
      if other.hasValue {
           value = other.value
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Profile.Containers.AttributeV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.AttributeV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          name = input.readString()

        case 26 :
          value = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class StatV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "count": return count
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasCount:Bool = false
    public private(set) var count:UInt32 = UInt32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasCount {
        output.writeUInt32(3, value:count)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasCount {
        serialize_size += count.computeUInt32Size(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Profile.Containers.StatV1 {
      return Services.Profile.Containers.StatV1.builder().mergeFromData(data, extensionRegistry:Services.Profile.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.StatV1 {
      return Services.Profile.Containers.StatV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Profile.Containers.StatV1 {
      return Services.Profile.Containers.StatV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Profile.Containers.StatV1 {
      return Services.Profile.Containers.StatV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Profile.Containers.StatV1 {
      return Services.Profile.Containers.StatV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.StatV1 {
      return Services.Profile.Containers.StatV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Profile.Containers.StatV1Builder {
      return Services.Profile.Containers.StatV1.classBuilder() as! Services.Profile.Containers.StatV1Builder
    }
    public func builder() -> Services.Profile.Containers.StatV1Builder {
      return classBuilder() as! Services.Profile.Containers.StatV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.StatV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.StatV1.builder()
    }
    public func toBuilder() -> Services.Profile.Containers.StatV1Builder {
      return Services.Profile.Containers.StatV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Profile.Containers.StatV1) -> Services.Profile.Containers.StatV1Builder {
      return Services.Profile.Containers.StatV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasCount {
        output += "\(indent) count: \(count) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasCount {
               hashCode = (hashCode &* 31) &+ count.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Profile.Containers.StatV1"
    }
    override public func className() -> String {
        return "Services.Profile.Containers.StatV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Containers.StatV1.self
    }
    //Meta information declaration end

  }

  final public class StatV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Profile.Containers.StatV1

    required override public init () {
       builderResult = Services.Profile.Containers.StatV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Profile.Containers.StatV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Profile.Containers.StatV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Profile.Containers.StatV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Profile.Containers.StatV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasCount:Bool {
         get {
              return builderResult.hasCount
         }
    }
    public var count:UInt32 {
         get {
              return builderResult.count
         }
         set (value) {
             builderResult.hasCount = true
             builderResult.count = value
         }
    }
    public func setCount(value:UInt32)-> Services.Profile.Containers.StatV1Builder {
      self.count = value
      return self
    }
    public func clearCount() -> Services.Profile.Containers.StatV1Builder{
         builderResult.hasCount = false
         builderResult.count = UInt32(0)
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Profile.Containers.StatV1Builder {
      builderResult = Services.Profile.Containers.StatV1()
      return self
    }
    public override func clone() -> Services.Profile.Containers.StatV1Builder {
      return Services.Profile.Containers.StatV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Profile.Containers.StatV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Profile.Containers.StatV1 {
      var returnMe:Services.Profile.Containers.StatV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Profile.Containers.StatV1) -> Services.Profile.Containers.StatV1Builder {
      if (other == Services.Profile.Containers.StatV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasCount {
           count = other.count
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Profile.Containers.StatV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.StatV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 24 :
          count = input.readUInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class TagV1 : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum TagTypeV1:Int32 {
        case Skill = 0
        case Interest = 1
        case Language = 2
        case Project = 3

      }

      //Enum type declaration end 

    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "name": return name
           case "tagType": return self.tagType
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var tagType:Services.Profile.Containers.TagV1.TagTypeV1 = Services.Profile.Containers.TagV1.TagTypeV1.Skill
    public private(set) var hasTagType:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasName {
        output.writeString(3, value:name)
      }
      if hasTagType {
        output.writeEnum(4, value:tagType.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if (hasTagType) {
        serialize_size += tagType.rawValue.computeEnumSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Profile.Containers.TagV1 {
      return Services.Profile.Containers.TagV1.builder().mergeFromData(data, extensionRegistry:Services.Profile.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.TagV1 {
      return Services.Profile.Containers.TagV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Profile.Containers.TagV1 {
      return Services.Profile.Containers.TagV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Profile.Containers.TagV1 {
      return Services.Profile.Containers.TagV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Profile.Containers.TagV1 {
      return Services.Profile.Containers.TagV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.TagV1 {
      return Services.Profile.Containers.TagV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Profile.Containers.TagV1Builder {
      return Services.Profile.Containers.TagV1.classBuilder() as! Services.Profile.Containers.TagV1Builder
    }
    public func builder() -> Services.Profile.Containers.TagV1Builder {
      return classBuilder() as! Services.Profile.Containers.TagV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.TagV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.TagV1.builder()
    }
    public func toBuilder() -> Services.Profile.Containers.TagV1Builder {
      return Services.Profile.Containers.TagV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Profile.Containers.TagV1) -> Services.Profile.Containers.TagV1Builder {
      return Services.Profile.Containers.TagV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if (hasTagType) {
        output += "\(indent) tagType: \(tagType.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasTagType {
               hashCode = (hashCode &* 31) &+ Int(tagType.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Profile.Containers.TagV1"
    }
    override public func className() -> String {
        return "Services.Profile.Containers.TagV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Containers.TagV1.self
    }
    //Meta information declaration end

  }

  final public class TagV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Profile.Containers.TagV1

    required override public init () {
       builderResult = Services.Profile.Containers.TagV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Profile.Containers.TagV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Profile.Containers.TagV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Profile.Containers.TagV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Profile.Containers.TagV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String)-> Services.Profile.Containers.TagV1Builder {
      self.name = value
      return self
    }
    public func clearName() -> Services.Profile.Containers.TagV1Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
      public var hasTagType:Bool{
          get {
              return builderResult.hasTagType
          }
      }
      public var tagType:Services.Profile.Containers.TagV1.TagTypeV1 {
          get {
              return builderResult.tagType
          }
          set (value) {
              builderResult.hasTagType = true
              builderResult.tagType = value
          }
      }
      public func setTagType(value:Services.Profile.Containers.TagV1.TagTypeV1)-> Services.Profile.Containers.TagV1Builder {
        self.tagType = value
        return self
      }
      public func clearTagType() -> Services.Profile.Containers.TagV1Builder {
         builderResult.hasTagType = false
         builderResult.tagType = .Skill
         return self
      }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Profile.Containers.TagV1Builder {
      builderResult = Services.Profile.Containers.TagV1()
      return self
    }
    public override func clone() -> Services.Profile.Containers.TagV1Builder {
      return Services.Profile.Containers.TagV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Profile.Containers.TagV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Profile.Containers.TagV1 {
      var returnMe:Services.Profile.Containers.TagV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Profile.Containers.TagV1) -> Services.Profile.Containers.TagV1Builder {
      if (other == Services.Profile.Containers.TagV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasName {
           name = other.name
      }
      if other.hasTagType {
           tagType = other.tagType
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Profile.Containers.TagV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.TagV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          name = input.readString()

        case 32 :
          let valueInttagType = input.readEnum()
          if let enumstagType = Services.Profile.Containers.TagV1.TagTypeV1(rawValue:valueInttagType){
               tagType = enumstagType
          } else {
               unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueInttagType))
          }

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
