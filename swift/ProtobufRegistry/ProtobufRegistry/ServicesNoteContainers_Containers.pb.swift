// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.Note{ public struct Containers { }}

public func == (lhs: Services.Note.Containers.NoteV1, rhs: Services.Note.Containers.NoteV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasForProfileId == rhs.hasForProfileId) && (!lhs.hasForProfileId || lhs.forProfileId == rhs.forProfileId)
  fieldCheck = fieldCheck && (lhs.hasOwnerProfileId == rhs.hasOwnerProfileId) && (!lhs.hasOwnerProfileId || lhs.ownerProfileId == rhs.ownerProfileId)
  fieldCheck = fieldCheck && (lhs.hasContent == rhs.hasContent) && (!lhs.hasContent || lhs.content == rhs.content)
  fieldCheck = fieldCheck && (lhs.hasCreated == rhs.hasCreated) && (!lhs.hasCreated || lhs.created == rhs.created)
  fieldCheck = fieldCheck && (lhs.hasChanged == rhs.hasChanged) && (!lhs.hasChanged || lhs.changed == rhs.changed)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.Note.Containers {
  public struct ContainersRoot {
    public static var sharedInstance : ContainersRoot {
     struct Static {
         static let instance : ContainersRoot = ContainersRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class NoteV1 : GeneratedMessage, GeneratedMessageProtocol {
    public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "forProfileId": return forProfileId
           case "ownerProfileId": return ownerProfileId
           case "content": return content
           case "created": return created
           case "changed": return changed
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasForProfileId:Bool = false
    public private(set) var forProfileId:String = ""

    public private(set) var hasOwnerProfileId:Bool = false
    public private(set) var ownerProfileId:String = ""

    public private(set) var hasContent:Bool = false
    public private(set) var content:String = ""

    public private(set) var hasCreated:Bool = false
    public private(set) var created:String = ""

    public private(set) var hasChanged:Bool = false
    public private(set) var changed:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasForProfileId {
        output.writeString(3, value:forProfileId)
      }
      if hasOwnerProfileId {
        output.writeString(4, value:ownerProfileId)
      }
      if hasContent {
        output.writeString(5, value:content)
      }
      if hasCreated {
        output.writeString(6, value:created)
      }
      if hasChanged {
        output.writeString(7, value:changed)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasForProfileId {
        serialize_size += forProfileId.computeStringSize(3)
      }
      if hasOwnerProfileId {
        serialize_size += ownerProfileId.computeStringSize(4)
      }
      if hasContent {
        serialize_size += content.computeStringSize(5)
      }
      if hasCreated {
        serialize_size += created.computeStringSize(6)
      }
      if hasChanged {
        serialize_size += changed.computeStringSize(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Note.Containers.NoteV1 {
      return Services.Note.Containers.NoteV1.builder().mergeFromData(data, extensionRegistry:Services.Note.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Note.Containers.NoteV1 {
      return Services.Note.Containers.NoteV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Note.Containers.NoteV1 {
      return Services.Note.Containers.NoteV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Note.Containers.NoteV1 {
      return Services.Note.Containers.NoteV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Note.Containers.NoteV1 {
      return Services.Note.Containers.NoteV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Note.Containers.NoteV1 {
      return Services.Note.Containers.NoteV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Note.Containers.NoteV1Builder {
      return Services.Note.Containers.NoteV1.classBuilder() as! Services.Note.Containers.NoteV1Builder
    }
    public func builder() -> Services.Note.Containers.NoteV1Builder {
      return classBuilder() as! Services.Note.Containers.NoteV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Note.Containers.NoteV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Note.Containers.NoteV1.builder()
    }
    public func toBuilder() -> Services.Note.Containers.NoteV1Builder {
      return Services.Note.Containers.NoteV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Note.Containers.NoteV1) -> Services.Note.Containers.NoteV1Builder {
      return Services.Note.Containers.NoteV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasForProfileId {
        output += "\(indent) forProfileId: \(forProfileId) \n"
      }
      if hasOwnerProfileId {
        output += "\(indent) ownerProfileId: \(ownerProfileId) \n"
      }
      if hasContent {
        output += "\(indent) content: \(content) \n"
      }
      if hasCreated {
        output += "\(indent) created: \(created) \n"
      }
      if hasChanged {
        output += "\(indent) changed: \(changed) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasForProfileId {
               hashCode = (hashCode &* 31) &+ forProfileId.hashValue
            }
            if hasOwnerProfileId {
               hashCode = (hashCode &* 31) &+ ownerProfileId.hashValue
            }
            if hasContent {
               hashCode = (hashCode &* 31) &+ content.hashValue
            }
            if hasCreated {
               hashCode = (hashCode &* 31) &+ created.hashValue
            }
            if hasChanged {
               hashCode = (hashCode &* 31) &+ changed.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Note.Containers.NoteV1"
    }
    override public func className() -> String {
        return "Services.Note.Containers.NoteV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Note.Containers.NoteV1.self
    }
    //Meta information declaration end

  }

  final public class NoteV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Note.Containers.NoteV1

    required override public init () {
       builderResult = Services.Note.Containers.NoteV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Note.Containers.NoteV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Note.Containers.NoteV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Note.Containers.NoteV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Note.Containers.NoteV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasForProfileId:Bool {
         get {
              return builderResult.hasForProfileId
         }
    }
    public var forProfileId:String {
         get {
              return builderResult.forProfileId
         }
         set (value) {
             builderResult.hasForProfileId = true
             builderResult.forProfileId = value
         }
    }
    public func setForProfileId(value:String)-> Services.Note.Containers.NoteV1Builder {
      self.forProfileId = value
      return self
    }
    public func clearForProfileId() -> Services.Note.Containers.NoteV1Builder{
         builderResult.hasForProfileId = false
         builderResult.forProfileId = ""
         return self
    }
    public var hasOwnerProfileId:Bool {
         get {
              return builderResult.hasOwnerProfileId
         }
    }
    public var ownerProfileId:String {
         get {
              return builderResult.ownerProfileId
         }
         set (value) {
             builderResult.hasOwnerProfileId = true
             builderResult.ownerProfileId = value
         }
    }
    public func setOwnerProfileId(value:String)-> Services.Note.Containers.NoteV1Builder {
      self.ownerProfileId = value
      return self
    }
    public func clearOwnerProfileId() -> Services.Note.Containers.NoteV1Builder{
         builderResult.hasOwnerProfileId = false
         builderResult.ownerProfileId = ""
         return self
    }
    public var hasContent:Bool {
         get {
              return builderResult.hasContent
         }
    }
    public var content:String {
         get {
              return builderResult.content
         }
         set (value) {
             builderResult.hasContent = true
             builderResult.content = value
         }
    }
    public func setContent(value:String)-> Services.Note.Containers.NoteV1Builder {
      self.content = value
      return self
    }
    public func clearContent() -> Services.Note.Containers.NoteV1Builder{
         builderResult.hasContent = false
         builderResult.content = ""
         return self
    }
    public var hasCreated:Bool {
         get {
              return builderResult.hasCreated
         }
    }
    public var created:String {
         get {
              return builderResult.created
         }
         set (value) {
             builderResult.hasCreated = true
             builderResult.created = value
         }
    }
    public func setCreated(value:String)-> Services.Note.Containers.NoteV1Builder {
      self.created = value
      return self
    }
    public func clearCreated() -> Services.Note.Containers.NoteV1Builder{
         builderResult.hasCreated = false
         builderResult.created = ""
         return self
    }
    public var hasChanged:Bool {
         get {
              return builderResult.hasChanged
         }
    }
    public var changed:String {
         get {
              return builderResult.changed
         }
         set (value) {
             builderResult.hasChanged = true
             builderResult.changed = value
         }
    }
    public func setChanged(value:String)-> Services.Note.Containers.NoteV1Builder {
      self.changed = value
      return self
    }
    public func clearChanged() -> Services.Note.Containers.NoteV1Builder{
         builderResult.hasChanged = false
         builderResult.changed = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Note.Containers.NoteV1Builder {
      builderResult = Services.Note.Containers.NoteV1()
      return self
    }
    public override func clone() -> Services.Note.Containers.NoteV1Builder {
      return Services.Note.Containers.NoteV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Note.Containers.NoteV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Note.Containers.NoteV1 {
      var returnMe:Services.Note.Containers.NoteV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Note.Containers.NoteV1) -> Services.Note.Containers.NoteV1Builder {
      if (other == Services.Note.Containers.NoteV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasForProfileId {
           forProfileId = other.forProfileId
      }
      if other.hasOwnerProfileId {
           ownerProfileId = other.ownerProfileId
      }
      if other.hasContent {
           content = other.content
      }
      if other.hasCreated {
           created = other.created
      }
      if other.hasChanged {
           changed = other.changed
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Note.Containers.NoteV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Note.Containers.NoteV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          forProfileId = input.readString()

        case 34 :
          ownerProfileId = input.readString()

        case 42 :
          content = input.readString()

        case 50 :
          created = input.readString()

        case 58 :
          changed = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
