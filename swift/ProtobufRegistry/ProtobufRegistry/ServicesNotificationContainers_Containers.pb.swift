// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.Notification{ public struct Containers { }}

public func == (lhs: Services.Notification.Containers.NotificationTokenV1, rhs: Services.Notification.Containers.NotificationTokenV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  fieldCheck = fieldCheck && (lhs.hasDeviceId == rhs.hasDeviceId) && (!lhs.hasDeviceId || lhs.deviceId == rhs.deviceId)
  fieldCheck = fieldCheck && (lhs.hasProviderToken == rhs.hasProviderToken) && (!lhs.hasProviderToken || lhs.providerToken == rhs.providerToken)
  fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
  fieldCheck = fieldCheck && (lhs.hasProviderPlatform == rhs.hasProviderPlatform) && (!lhs.hasProviderPlatform || lhs.providerPlatform == rhs.providerPlatform)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Notification.Containers.NotificationPreferenceV1, rhs: Services.Notification.Containers.NotificationPreferenceV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasProfileId == rhs.hasProfileId) && (!lhs.hasProfileId || lhs.profileId == rhs.profileId)
  fieldCheck = fieldCheck && (lhs.hasNotificationTypeId == rhs.hasNotificationTypeId) && (!lhs.hasNotificationTypeId || lhs.notificationTypeId == rhs.notificationTypeId)
  fieldCheck = fieldCheck && (lhs.hasSubscribed == rhs.hasSubscribed) && (!lhs.hasSubscribed || lhs.subscribed == rhs.subscribed)
  fieldCheck = fieldCheck && (lhs.hasNotificationType == rhs.hasNotificationType) && (!lhs.hasNotificationType || lhs.notificationType == rhs.notificationType)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Notification.Containers.NotificationTypeV1, rhs: Services.Notification.Containers.NotificationTypeV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
  fieldCheck = fieldCheck && (lhs.hasOptIn == rhs.hasOptIn) && (!lhs.hasOptIn || lhs.optIn == rhs.optIn)
  fieldCheck = fieldCheck && (lhs.hasMobilePush == rhs.hasMobilePush) && (!lhs.hasMobilePush || lhs.mobilePush == rhs.mobilePush)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Notification.Containers.NotificationV1, rhs: Services.Notification.Containers.NotificationV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasNotificationTypeId == rhs.hasNotificationTypeId) && (!lhs.hasNotificationTypeId || lhs.notificationTypeId == rhs.notificationTypeId)
  fieldCheck = fieldCheck && (lhs.hasGroupMembershipRequest == rhs.hasGroupMembershipRequest) && (!lhs.hasGroupMembershipRequest || lhs.groupMembershipRequest == rhs.groupMembershipRequest)
  fieldCheck = fieldCheck && (lhs.hasGroupMembershipRequestResponse == rhs.hasGroupMembershipRequestResponse) && (!lhs.hasGroupMembershipRequestResponse || lhs.groupMembershipRequestResponse == rhs.groupMembershipRequestResponse)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Notification.Containers.GroupMembershipRequestNotificationV1, rhs: Services.Notification.Containers.GroupMembershipRequestNotificationV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasRequesterProfileId == rhs.hasRequesterProfileId) && (!lhs.hasRequesterProfileId || lhs.requesterProfileId == rhs.requesterProfileId)
  fieldCheck = fieldCheck && (lhs.hasGroupId == rhs.hasGroupId) && (!lhs.hasGroupId || lhs.groupId == rhs.groupId)
  fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
  fieldCheck = fieldCheck && (lhs.hasRequestId == rhs.hasRequestId) && (!lhs.hasRequestId || lhs.requestId == rhs.requestId)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1, rhs: Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasGroupManagerProfileId == rhs.hasGroupManagerProfileId) && (!lhs.hasGroupManagerProfileId || lhs.groupManagerProfileId == rhs.groupManagerProfileId)
  fieldCheck = fieldCheck && (lhs.hasApproved == rhs.hasApproved) && (!lhs.hasApproved || lhs.approved == rhs.approved)
  fieldCheck = fieldCheck && (lhs.hasGroupId == rhs.hasGroupId) && (!lhs.hasGroupId || lhs.groupId == rhs.groupId)
  fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.Notification.Containers {
  public struct ContainersRoot {
    public static var sharedInstance : ContainersRoot {
     struct Static {
         static let instance : ContainersRoot = ContainersRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Group.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  public enum NotificationChannelV1:Int32 {
    case MobilePush = 0

  }

  //Enum type declaration end 

  final public class NotificationTokenV1 : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum ProviderV1:Int32 {
        case Sns = 0

      }

      //Enum type declaration end 



      //Enum type declaration start 

      public enum ProviderPlatformV1:Int32 {
        case Apns = 0
        case Gcm = 1

      }

      //Enum type declaration end 

    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "userId": return userId
           case "deviceId": return deviceId
           case "providerToken": return providerToken
           case "provider": return self.provider
           case "providerPlatform": return self.providerPlatform
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasUserId:Bool = false
    public private(set) var userId:String = ""

    public private(set) var hasDeviceId:Bool = false
    public private(set) var deviceId:String = ""

    public private(set) var hasProviderToken:Bool = false
    public private(set) var providerToken:String = ""

    public private(set) var provider:Services.Notification.Containers.NotificationTokenV1.ProviderV1 = Services.Notification.Containers.NotificationTokenV1.ProviderV1.Sns
    public private(set) var hasProvider:Bool = false
    public private(set) var providerPlatform:Services.Notification.Containers.NotificationTokenV1.ProviderPlatformV1 = Services.Notification.Containers.NotificationTokenV1.ProviderPlatformV1.Apns
    public private(set) var hasProviderPlatform:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasUserId {
        output.writeString(2, value:userId)
      }
      if hasDeviceId {
        output.writeString(3, value:deviceId)
      }
      if hasProviderToken {
        output.writeString(4, value:providerToken)
      }
      if hasProvider {
        output.writeEnum(5, value:provider.rawValue)
      }
      if hasProviderPlatform {
        output.writeEnum(6, value:providerPlatform.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasUserId {
        serialize_size += userId.computeStringSize(2)
      }
      if hasDeviceId {
        serialize_size += deviceId.computeStringSize(3)
      }
      if hasProviderToken {
        serialize_size += providerToken.computeStringSize(4)
      }
      if (hasProvider) {
        serialize_size += provider.rawValue.computeEnumSize(5)
      }
      if (hasProviderPlatform) {
        serialize_size += providerPlatform.rawValue.computeEnumSize(6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Notification.Containers.NotificationTokenV1 {
      return Services.Notification.Containers.NotificationTokenV1.builder().mergeFromData(data, extensionRegistry:Services.Notification.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.NotificationTokenV1 {
      return Services.Notification.Containers.NotificationTokenV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Notification.Containers.NotificationTokenV1 {
      return Services.Notification.Containers.NotificationTokenV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Notification.Containers.NotificationTokenV1 {
      return Services.Notification.Containers.NotificationTokenV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Notification.Containers.NotificationTokenV1 {
      return Services.Notification.Containers.NotificationTokenV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.NotificationTokenV1 {
      return Services.Notification.Containers.NotificationTokenV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Notification.Containers.NotificationTokenV1Builder {
      return Services.Notification.Containers.NotificationTokenV1.classBuilder() as! Services.Notification.Containers.NotificationTokenV1Builder
    }
    public func builder() -> Services.Notification.Containers.NotificationTokenV1Builder {
      return classBuilder() as! Services.Notification.Containers.NotificationTokenV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Notification.Containers.NotificationTokenV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Notification.Containers.NotificationTokenV1.builder()
    }
    public func toBuilder() -> Services.Notification.Containers.NotificationTokenV1Builder {
      return Services.Notification.Containers.NotificationTokenV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Notification.Containers.NotificationTokenV1) -> Services.Notification.Containers.NotificationTokenV1Builder {
      return Services.Notification.Containers.NotificationTokenV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasUserId {
        output += "\(indent) userId: \(userId) \n"
      }
      if hasDeviceId {
        output += "\(indent) deviceId: \(deviceId) \n"
      }
      if hasProviderToken {
        output += "\(indent) providerToken: \(providerToken) \n"
      }
      if (hasProvider) {
        output += "\(indent) provider: \(provider.rawValue)\n"
      }
      if (hasProviderPlatform) {
        output += "\(indent) providerPlatform: \(providerPlatform.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasUserId {
               hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            if hasDeviceId {
               hashCode = (hashCode &* 31) &+ deviceId.hashValue
            }
            if hasProviderToken {
               hashCode = (hashCode &* 31) &+ providerToken.hashValue
            }
            if hasProvider {
               hashCode = (hashCode &* 31) &+ Int(provider.rawValue)
            }
            if hasProviderPlatform {
               hashCode = (hashCode &* 31) &+ Int(providerPlatform.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Notification.Containers.NotificationTokenV1"
    }
    override public func className() -> String {
        return "Services.Notification.Containers.NotificationTokenV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Notification.Containers.NotificationTokenV1.self
    }
    //Meta information declaration end

  }

  final public class NotificationTokenV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Notification.Containers.NotificationTokenV1

    required override public init () {
       builderResult = Services.Notification.Containers.NotificationTokenV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Notification.Containers.NotificationTokenV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Notification.Containers.NotificationTokenV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasUserId:Bool {
         get {
              return builderResult.hasUserId
         }
    }
    public var userId:String {
         get {
              return builderResult.userId
         }
         set (value) {
             builderResult.hasUserId = true
             builderResult.userId = value
         }
    }
    public func setUserId(value:String)-> Services.Notification.Containers.NotificationTokenV1Builder {
      self.userId = value
      return self
    }
    public func clearUserId() -> Services.Notification.Containers.NotificationTokenV1Builder{
         builderResult.hasUserId = false
         builderResult.userId = ""
         return self
    }
    public var hasDeviceId:Bool {
         get {
              return builderResult.hasDeviceId
         }
    }
    public var deviceId:String {
         get {
              return builderResult.deviceId
         }
         set (value) {
             builderResult.hasDeviceId = true
             builderResult.deviceId = value
         }
    }
    public func setDeviceId(value:String)-> Services.Notification.Containers.NotificationTokenV1Builder {
      self.deviceId = value
      return self
    }
    public func clearDeviceId() -> Services.Notification.Containers.NotificationTokenV1Builder{
         builderResult.hasDeviceId = false
         builderResult.deviceId = ""
         return self
    }
    public var hasProviderToken:Bool {
         get {
              return builderResult.hasProviderToken
         }
    }
    public var providerToken:String {
         get {
              return builderResult.providerToken
         }
         set (value) {
             builderResult.hasProviderToken = true
             builderResult.providerToken = value
         }
    }
    public func setProviderToken(value:String)-> Services.Notification.Containers.NotificationTokenV1Builder {
      self.providerToken = value
      return self
    }
    public func clearProviderToken() -> Services.Notification.Containers.NotificationTokenV1Builder{
         builderResult.hasProviderToken = false
         builderResult.providerToken = ""
         return self
    }
      public var hasProvider:Bool{
          get {
              return builderResult.hasProvider
          }
      }
      public var provider:Services.Notification.Containers.NotificationTokenV1.ProviderV1 {
          get {
              return builderResult.provider
          }
          set (value) {
              builderResult.hasProvider = true
              builderResult.provider = value
          }
      }
      public func setProvider(value:Services.Notification.Containers.NotificationTokenV1.ProviderV1)-> Services.Notification.Containers.NotificationTokenV1Builder {
        self.provider = value
        return self
      }
      public func clearProvider() -> Services.Notification.Containers.NotificationTokenV1Builder {
         builderResult.hasProvider = false
         builderResult.provider = .Sns
         return self
      }
      public var hasProviderPlatform:Bool{
          get {
              return builderResult.hasProviderPlatform
          }
      }
      public var providerPlatform:Services.Notification.Containers.NotificationTokenV1.ProviderPlatformV1 {
          get {
              return builderResult.providerPlatform
          }
          set (value) {
              builderResult.hasProviderPlatform = true
              builderResult.providerPlatform = value
          }
      }
      public func setProviderPlatform(value:Services.Notification.Containers.NotificationTokenV1.ProviderPlatformV1)-> Services.Notification.Containers.NotificationTokenV1Builder {
        self.providerPlatform = value
        return self
      }
      public func clearProviderPlatform() -> Services.Notification.Containers.NotificationTokenV1Builder {
         builderResult.hasProviderPlatform = false
         builderResult.providerPlatform = .Apns
         return self
      }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Notification.Containers.NotificationTokenV1Builder {
      builderResult = Services.Notification.Containers.NotificationTokenV1()
      return self
    }
    public override func clone() -> Services.Notification.Containers.NotificationTokenV1Builder {
      return Services.Notification.Containers.NotificationTokenV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Notification.Containers.NotificationTokenV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Notification.Containers.NotificationTokenV1 {
      var returnMe:Services.Notification.Containers.NotificationTokenV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Notification.Containers.NotificationTokenV1) -> Services.Notification.Containers.NotificationTokenV1Builder {
      if (other == Services.Notification.Containers.NotificationTokenV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasUserId {
           userId = other.userId
      }
      if other.hasDeviceId {
           deviceId = other.deviceId
      }
      if other.hasProviderToken {
           providerToken = other.providerToken
      }
      if other.hasProvider {
           provider = other.provider
      }
      if other.hasProviderPlatform {
           providerPlatform = other.providerPlatform
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Notification.Containers.NotificationTokenV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.NotificationTokenV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          userId = input.readString()

        case 26 :
          deviceId = input.readString()

        case 34 :
          providerToken = input.readString()

        case 40 :
          let valueIntprovider = input.readEnum()
          if let enumsprovider = Services.Notification.Containers.NotificationTokenV1.ProviderV1(rawValue:valueIntprovider){
               provider = enumsprovider
          } else {
               unknownFieldsBuilder.mergeVarintField(5, value:Int64(valueIntprovider))
          }

        case 48 :
          let valueIntproviderPlatform = input.readEnum()
          if let enumsproviderPlatform = Services.Notification.Containers.NotificationTokenV1.ProviderPlatformV1(rawValue:valueIntproviderPlatform){
               providerPlatform = enumsproviderPlatform
          } else {
               unknownFieldsBuilder.mergeVarintField(6, value:Int64(valueIntproviderPlatform))
          }

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class NotificationPreferenceV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "profileId": return profileId
           case "notificationTypeId": return self.notificationTypeId
           case "subscribed": return subscribed
           case "notificationType": return notificationType
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasProfileId:Bool = false
    public private(set) var profileId:String = ""

    public private(set) var notificationTypeId:Services.Notification.Containers.NotificationTypeV1.TypeIdV1 = Services.Notification.Containers.NotificationTypeV1.TypeIdV1.GoogleGroups
    public private(set) var hasNotificationTypeId:Bool = false
    public private(set) var hasSubscribed:Bool = false
    public private(set) var subscribed:Bool = false

    public private(set) var hasNotificationType:Bool = false
    public private(set) var notificationType:Services.Notification.Containers.NotificationTypeV1!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasProfileId {
        output.writeString(3, value:profileId)
      }
      if hasNotificationTypeId {
        output.writeEnum(4, value:notificationTypeId.rawValue)
      }
      if hasSubscribed {
        output.writeBool(5, value:subscribed)
      }
      if hasNotificationType {
        output.writeMessage(6, value:notificationType)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasProfileId {
        serialize_size += profileId.computeStringSize(3)
      }
      if (hasNotificationTypeId) {
        serialize_size += notificationTypeId.rawValue.computeEnumSize(4)
      }
      if hasSubscribed {
        serialize_size += subscribed.computeBoolSize(5)
      }
      if hasNotificationType {
          if let varSizenotificationType = notificationType?.computeMessageSize(6) {
              serialize_size += varSizenotificationType
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Notification.Containers.NotificationPreferenceV1 {
      return Services.Notification.Containers.NotificationPreferenceV1.builder().mergeFromData(data, extensionRegistry:Services.Notification.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.NotificationPreferenceV1 {
      return Services.Notification.Containers.NotificationPreferenceV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Notification.Containers.NotificationPreferenceV1 {
      return Services.Notification.Containers.NotificationPreferenceV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Notification.Containers.NotificationPreferenceV1 {
      return Services.Notification.Containers.NotificationPreferenceV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Notification.Containers.NotificationPreferenceV1 {
      return Services.Notification.Containers.NotificationPreferenceV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.NotificationPreferenceV1 {
      return Services.Notification.Containers.NotificationPreferenceV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Notification.Containers.NotificationPreferenceV1Builder {
      return Services.Notification.Containers.NotificationPreferenceV1.classBuilder() as! Services.Notification.Containers.NotificationPreferenceV1Builder
    }
    public func builder() -> Services.Notification.Containers.NotificationPreferenceV1Builder {
      return classBuilder() as! Services.Notification.Containers.NotificationPreferenceV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Notification.Containers.NotificationPreferenceV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Notification.Containers.NotificationPreferenceV1.builder()
    }
    public func toBuilder() -> Services.Notification.Containers.NotificationPreferenceV1Builder {
      return Services.Notification.Containers.NotificationPreferenceV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Notification.Containers.NotificationPreferenceV1) -> Services.Notification.Containers.NotificationPreferenceV1Builder {
      return Services.Notification.Containers.NotificationPreferenceV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasProfileId {
        output += "\(indent) profileId: \(profileId) \n"
      }
      if (hasNotificationTypeId) {
        output += "\(indent) notificationTypeId: \(notificationTypeId.rawValue)\n"
      }
      if hasSubscribed {
        output += "\(indent) subscribed: \(subscribed) \n"
      }
      if hasNotificationType {
        output += "\(indent) notificationType {\n"
        notificationType?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasProfileId {
               hashCode = (hashCode &* 31) &+ profileId.hashValue
            }
            if hasNotificationTypeId {
               hashCode = (hashCode &* 31) &+ Int(notificationTypeId.rawValue)
            }
            if hasSubscribed {
               hashCode = (hashCode &* 31) &+ subscribed.hashValue
            }
            if hasNotificationType {
                if let hashValuenotificationType = notificationType?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuenotificationType
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Notification.Containers.NotificationPreferenceV1"
    }
    override public func className() -> String {
        return "Services.Notification.Containers.NotificationPreferenceV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Notification.Containers.NotificationPreferenceV1.self
    }
    //Meta information declaration end

  }

  final public class NotificationPreferenceV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Notification.Containers.NotificationPreferenceV1

    required override public init () {
       builderResult = Services.Notification.Containers.NotificationPreferenceV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Notification.Containers.NotificationPreferenceV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Notification.Containers.NotificationPreferenceV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Notification.Containers.NotificationPreferenceV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Notification.Containers.NotificationPreferenceV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasProfileId:Bool {
         get {
              return builderResult.hasProfileId
         }
    }
    public var profileId:String {
         get {
              return builderResult.profileId
         }
         set (value) {
             builderResult.hasProfileId = true
             builderResult.profileId = value
         }
    }
    public func setProfileId(value:String)-> Services.Notification.Containers.NotificationPreferenceV1Builder {
      self.profileId = value
      return self
    }
    public func clearProfileId() -> Services.Notification.Containers.NotificationPreferenceV1Builder{
         builderResult.hasProfileId = false
         builderResult.profileId = ""
         return self
    }
      public var hasNotificationTypeId:Bool{
          get {
              return builderResult.hasNotificationTypeId
          }
      }
      public var notificationTypeId:Services.Notification.Containers.NotificationTypeV1.TypeIdV1 {
          get {
              return builderResult.notificationTypeId
          }
          set (value) {
              builderResult.hasNotificationTypeId = true
              builderResult.notificationTypeId = value
          }
      }
      public func setNotificationTypeId(value:Services.Notification.Containers.NotificationTypeV1.TypeIdV1)-> Services.Notification.Containers.NotificationPreferenceV1Builder {
        self.notificationTypeId = value
        return self
      }
      public func clearNotificationTypeId() -> Services.Notification.Containers.NotificationPreferenceV1Builder {
         builderResult.hasNotificationTypeId = false
         builderResult.notificationTypeId = .GoogleGroups
         return self
      }
    public var hasSubscribed:Bool {
         get {
              return builderResult.hasSubscribed
         }
    }
    public var subscribed:Bool {
         get {
              return builderResult.subscribed
         }
         set (value) {
             builderResult.hasSubscribed = true
             builderResult.subscribed = value
         }
    }
    public func setSubscribed(value:Bool)-> Services.Notification.Containers.NotificationPreferenceV1Builder {
      self.subscribed = value
      return self
    }
    public func clearSubscribed() -> Services.Notification.Containers.NotificationPreferenceV1Builder{
         builderResult.hasSubscribed = false
         builderResult.subscribed = false
         return self
    }
    public var hasNotificationType:Bool {
         get {
             return builderResult.hasNotificationType
         }
    }
    public var notificationType:Services.Notification.Containers.NotificationTypeV1! {
         get {
             return builderResult.notificationType
         }
         set (value) {
             builderResult.hasNotificationType = true
             builderResult.notificationType = value
         }
    }
    public func setNotificationType(value:Services.Notification.Containers.NotificationTypeV1!)-> Services.Notification.Containers.NotificationPreferenceV1Builder {
      self.notificationType = value
      return self
    }
    public func mergeNotificationType(value:Services.Notification.Containers.NotificationTypeV1) -> Services.Notification.Containers.NotificationPreferenceV1Builder {
      if (builderResult.hasNotificationType) {
        builderResult.notificationType = Services.Notification.Containers.NotificationTypeV1.builderWithPrototype(builderResult.notificationType).mergeFrom(value).buildPartial()
      } else {
        builderResult.notificationType = value
      }
      builderResult.hasNotificationType = true
      return self
    }
    public func clearNotificationType() -> Services.Notification.Containers.NotificationPreferenceV1Builder {
      builderResult.hasNotificationType = false
      builderResult.notificationType = nil
      return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Notification.Containers.NotificationPreferenceV1Builder {
      builderResult = Services.Notification.Containers.NotificationPreferenceV1()
      return self
    }
    public override func clone() -> Services.Notification.Containers.NotificationPreferenceV1Builder {
      return Services.Notification.Containers.NotificationPreferenceV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Notification.Containers.NotificationPreferenceV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Notification.Containers.NotificationPreferenceV1 {
      var returnMe:Services.Notification.Containers.NotificationPreferenceV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Notification.Containers.NotificationPreferenceV1) -> Services.Notification.Containers.NotificationPreferenceV1Builder {
      if (other == Services.Notification.Containers.NotificationPreferenceV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasProfileId {
           profileId = other.profileId
      }
      if other.hasNotificationTypeId {
           notificationTypeId = other.notificationTypeId
      }
      if other.hasSubscribed {
           subscribed = other.subscribed
      }
      if (other.hasNotificationType) {
          mergeNotificationType(other.notificationType)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Notification.Containers.NotificationPreferenceV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.NotificationPreferenceV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          profileId = input.readString()

        case 32 :
          let valueIntnotificationTypeId = input.readEnum()
          if let enumsnotificationTypeId = Services.Notification.Containers.NotificationTypeV1.TypeIdV1(rawValue:valueIntnotificationTypeId){
               notificationTypeId = enumsnotificationTypeId
          } else {
               unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntnotificationTypeId))
          }

        case 40 :
          subscribed = input.readBool()

        case 50 :
          var subBuilder:Services.Notification.Containers.NotificationTypeV1Builder = Services.Notification.Containers.NotificationTypeV1.builder()
          if hasNotificationType {
            subBuilder.mergeFrom(notificationType)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          notificationType = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class NotificationTypeV1 : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum TypeIdV1:Int32 {
        case GoogleGroups = 0

      }

      //Enum type declaration end 

    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return self.id
           case "description_": return description_
           case "optIn": return optIn
           case "mobilePush": return mobilePush
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var id:Services.Notification.Containers.NotificationTypeV1.TypeIdV1 = Services.Notification.Containers.NotificationTypeV1.TypeIdV1.GoogleGroups
    public private(set) var hasId:Bool = false
    public private(set) var hasDescription:Bool = false
    public private(set) var description_:String = ""

    public private(set) var hasOptIn:Bool = false
    public private(set) var optIn:Bool = false

    public private(set) var hasMobilePush:Bool = false
    public private(set) var mobilePush:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeEnum(2, value:id.rawValue)
      }
      if hasDescription {
        output.writeString(3, value:description_)
      }
      if hasOptIn {
        output.writeBool(4, value:optIn)
      }
      if hasMobilePush {
        output.writeBool(5, value:mobilePush)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if (hasId) {
        serialize_size += id.rawValue.computeEnumSize(2)
      }
      if hasDescription {
        serialize_size += description_.computeStringSize(3)
      }
      if hasOptIn {
        serialize_size += optIn.computeBoolSize(4)
      }
      if hasMobilePush {
        serialize_size += mobilePush.computeBoolSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Notification.Containers.NotificationTypeV1 {
      return Services.Notification.Containers.NotificationTypeV1.builder().mergeFromData(data, extensionRegistry:Services.Notification.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.NotificationTypeV1 {
      return Services.Notification.Containers.NotificationTypeV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Notification.Containers.NotificationTypeV1 {
      return Services.Notification.Containers.NotificationTypeV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Notification.Containers.NotificationTypeV1 {
      return Services.Notification.Containers.NotificationTypeV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Notification.Containers.NotificationTypeV1 {
      return Services.Notification.Containers.NotificationTypeV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.NotificationTypeV1 {
      return Services.Notification.Containers.NotificationTypeV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Notification.Containers.NotificationTypeV1Builder {
      return Services.Notification.Containers.NotificationTypeV1.classBuilder() as! Services.Notification.Containers.NotificationTypeV1Builder
    }
    public func builder() -> Services.Notification.Containers.NotificationTypeV1Builder {
      return classBuilder() as! Services.Notification.Containers.NotificationTypeV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Notification.Containers.NotificationTypeV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Notification.Containers.NotificationTypeV1.builder()
    }
    public func toBuilder() -> Services.Notification.Containers.NotificationTypeV1Builder {
      return Services.Notification.Containers.NotificationTypeV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Notification.Containers.NotificationTypeV1) -> Services.Notification.Containers.NotificationTypeV1Builder {
      return Services.Notification.Containers.NotificationTypeV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if (hasId) {
        output += "\(indent) id: \(id.rawValue)\n"
      }
      if hasDescription {
        output += "\(indent) description_: \(description_) \n"
      }
      if hasOptIn {
        output += "\(indent) optIn: \(optIn) \n"
      }
      if hasMobilePush {
        output += "\(indent) mobilePush: \(mobilePush) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ Int(id.rawValue)
            }
            if hasDescription {
               hashCode = (hashCode &* 31) &+ description_.hashValue
            }
            if hasOptIn {
               hashCode = (hashCode &* 31) &+ optIn.hashValue
            }
            if hasMobilePush {
               hashCode = (hashCode &* 31) &+ mobilePush.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Notification.Containers.NotificationTypeV1"
    }
    override public func className() -> String {
        return "Services.Notification.Containers.NotificationTypeV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Notification.Containers.NotificationTypeV1.self
    }
    //Meta information declaration end

  }

  final public class NotificationTypeV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Notification.Containers.NotificationTypeV1

    required override public init () {
       builderResult = Services.Notification.Containers.NotificationTypeV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Notification.Containers.NotificationTypeV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Notification.Containers.NotificationTypeV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
      public var hasId:Bool{
          get {
              return builderResult.hasId
          }
      }
      public var id:Services.Notification.Containers.NotificationTypeV1.TypeIdV1 {
          get {
              return builderResult.id
          }
          set (value) {
              builderResult.hasId = true
              builderResult.id = value
          }
      }
      public func setId(value:Services.Notification.Containers.NotificationTypeV1.TypeIdV1)-> Services.Notification.Containers.NotificationTypeV1Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.Notification.Containers.NotificationTypeV1Builder {
         builderResult.hasId = false
         builderResult.id = .GoogleGroups
         return self
      }
    public var hasDescription:Bool {
         get {
              return builderResult.hasDescription
         }
    }
    public var description_:String {
         get {
              return builderResult.description_
         }
         set (value) {
             builderResult.hasDescription = true
             builderResult.description_ = value
         }
    }
    public func setDescription(value:String)-> Services.Notification.Containers.NotificationTypeV1Builder {
      self.description_ = value
      return self
    }
    public func clearDescription() -> Services.Notification.Containers.NotificationTypeV1Builder{
         builderResult.hasDescription = false
         builderResult.description_ = ""
         return self
    }
    public var hasOptIn:Bool {
         get {
              return builderResult.hasOptIn
         }
    }
    public var optIn:Bool {
         get {
              return builderResult.optIn
         }
         set (value) {
             builderResult.hasOptIn = true
             builderResult.optIn = value
         }
    }
    public func setOptIn(value:Bool)-> Services.Notification.Containers.NotificationTypeV1Builder {
      self.optIn = value
      return self
    }
    public func clearOptIn() -> Services.Notification.Containers.NotificationTypeV1Builder{
         builderResult.hasOptIn = false
         builderResult.optIn = false
         return self
    }
    public var hasMobilePush:Bool {
         get {
              return builderResult.hasMobilePush
         }
    }
    public var mobilePush:Bool {
         get {
              return builderResult.mobilePush
         }
         set (value) {
             builderResult.hasMobilePush = true
             builderResult.mobilePush = value
         }
    }
    public func setMobilePush(value:Bool)-> Services.Notification.Containers.NotificationTypeV1Builder {
      self.mobilePush = value
      return self
    }
    public func clearMobilePush() -> Services.Notification.Containers.NotificationTypeV1Builder{
         builderResult.hasMobilePush = false
         builderResult.mobilePush = false
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Notification.Containers.NotificationTypeV1Builder {
      builderResult = Services.Notification.Containers.NotificationTypeV1()
      return self
    }
    public override func clone() -> Services.Notification.Containers.NotificationTypeV1Builder {
      return Services.Notification.Containers.NotificationTypeV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Notification.Containers.NotificationTypeV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Notification.Containers.NotificationTypeV1 {
      var returnMe:Services.Notification.Containers.NotificationTypeV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Notification.Containers.NotificationTypeV1) -> Services.Notification.Containers.NotificationTypeV1Builder {
      if (other == Services.Notification.Containers.NotificationTypeV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasDescription {
           description_ = other.description_
      }
      if other.hasOptIn {
           optIn = other.optIn
      }
      if other.hasMobilePush {
           mobilePush = other.mobilePush
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Notification.Containers.NotificationTypeV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.NotificationTypeV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 16 :
          let valueIntid = input.readEnum()
          if let enumsid = Services.Notification.Containers.NotificationTypeV1.TypeIdV1(rawValue:valueIntid){
               id = enumsid
          } else {
               unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntid))
          }

        case 26 :
          description_ = input.readString()

        case 32 :
          optIn = input.readBool()

        case 40 :
          mobilePush = input.readBool()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class NotificationV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "notificationTypeId": return self.notificationTypeId
           case "groupMembershipRequest": return groupMembershipRequest
           case "groupMembershipRequestResponse": return groupMembershipRequestResponse
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var notificationTypeId:Services.Notification.Containers.NotificationTypeV1.TypeIdV1 = Services.Notification.Containers.NotificationTypeV1.TypeIdV1.GoogleGroups
    public private(set) var hasNotificationTypeId:Bool = false
    public private(set) var hasGroupMembershipRequest:Bool = false
    public private(set) var groupMembershipRequest:Services.Notification.Containers.GroupMembershipRequestNotificationV1!
    public private(set) var hasGroupMembershipRequestResponse:Bool = false
    public private(set) var groupMembershipRequestResponse:Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasNotificationTypeId {
        output.writeEnum(2, value:notificationTypeId.rawValue)
      }
      if hasGroupMembershipRequest {
        output.writeMessage(3, value:groupMembershipRequest)
      }
      if hasGroupMembershipRequestResponse {
        output.writeMessage(4, value:groupMembershipRequestResponse)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if (hasNotificationTypeId) {
        serialize_size += notificationTypeId.rawValue.computeEnumSize(2)
      }
      if hasGroupMembershipRequest {
          if let varSizegroupMembershipRequest = groupMembershipRequest?.computeMessageSize(3) {
              serialize_size += varSizegroupMembershipRequest
          }
      }
      if hasGroupMembershipRequestResponse {
          if let varSizegroupMembershipRequestResponse = groupMembershipRequestResponse?.computeMessageSize(4) {
              serialize_size += varSizegroupMembershipRequestResponse
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Notification.Containers.NotificationV1 {
      return Services.Notification.Containers.NotificationV1.builder().mergeFromData(data, extensionRegistry:Services.Notification.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.NotificationV1 {
      return Services.Notification.Containers.NotificationV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Notification.Containers.NotificationV1 {
      return Services.Notification.Containers.NotificationV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Notification.Containers.NotificationV1 {
      return Services.Notification.Containers.NotificationV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Notification.Containers.NotificationV1 {
      return Services.Notification.Containers.NotificationV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.NotificationV1 {
      return Services.Notification.Containers.NotificationV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Notification.Containers.NotificationV1Builder {
      return Services.Notification.Containers.NotificationV1.classBuilder() as! Services.Notification.Containers.NotificationV1Builder
    }
    public func builder() -> Services.Notification.Containers.NotificationV1Builder {
      return classBuilder() as! Services.Notification.Containers.NotificationV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Notification.Containers.NotificationV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Notification.Containers.NotificationV1.builder()
    }
    public func toBuilder() -> Services.Notification.Containers.NotificationV1Builder {
      return Services.Notification.Containers.NotificationV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Notification.Containers.NotificationV1) -> Services.Notification.Containers.NotificationV1Builder {
      return Services.Notification.Containers.NotificationV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if (hasNotificationTypeId) {
        output += "\(indent) notificationTypeId: \(notificationTypeId.rawValue)\n"
      }
      if hasGroupMembershipRequest {
        output += "\(indent) groupMembershipRequest {\n"
        groupMembershipRequest?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasGroupMembershipRequestResponse {
        output += "\(indent) groupMembershipRequestResponse {\n"
        groupMembershipRequestResponse?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasNotificationTypeId {
               hashCode = (hashCode &* 31) &+ Int(notificationTypeId.rawValue)
            }
            if hasGroupMembershipRequest {
                if let hashValuegroupMembershipRequest = groupMembershipRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuegroupMembershipRequest
                }
            }
            if hasGroupMembershipRequestResponse {
                if let hashValuegroupMembershipRequestResponse = groupMembershipRequestResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuegroupMembershipRequestResponse
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Notification.Containers.NotificationV1"
    }
    override public func className() -> String {
        return "Services.Notification.Containers.NotificationV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Notification.Containers.NotificationV1.self
    }
    //Meta information declaration end

  }

  final public class NotificationV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Notification.Containers.NotificationV1

    required override public init () {
       builderResult = Services.Notification.Containers.NotificationV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Notification.Containers.NotificationV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Notification.Containers.NotificationV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
      public var hasNotificationTypeId:Bool{
          get {
              return builderResult.hasNotificationTypeId
          }
      }
      public var notificationTypeId:Services.Notification.Containers.NotificationTypeV1.TypeIdV1 {
          get {
              return builderResult.notificationTypeId
          }
          set (value) {
              builderResult.hasNotificationTypeId = true
              builderResult.notificationTypeId = value
          }
      }
      public func setNotificationTypeId(value:Services.Notification.Containers.NotificationTypeV1.TypeIdV1)-> Services.Notification.Containers.NotificationV1Builder {
        self.notificationTypeId = value
        return self
      }
      public func clearNotificationTypeId() -> Services.Notification.Containers.NotificationV1Builder {
         builderResult.hasNotificationTypeId = false
         builderResult.notificationTypeId = .GoogleGroups
         return self
      }
    public var hasGroupMembershipRequest:Bool {
         get {
             return builderResult.hasGroupMembershipRequest
         }
    }
    public var groupMembershipRequest:Services.Notification.Containers.GroupMembershipRequestNotificationV1! {
         get {
             return builderResult.groupMembershipRequest
         }
         set (value) {
             builderResult.hasGroupMembershipRequest = true
             builderResult.groupMembershipRequest = value
         }
    }
    public func setGroupMembershipRequest(value:Services.Notification.Containers.GroupMembershipRequestNotificationV1!)-> Services.Notification.Containers.NotificationV1Builder {
      self.groupMembershipRequest = value
      return self
    }
    public func mergeGroupMembershipRequest(value:Services.Notification.Containers.GroupMembershipRequestNotificationV1) -> Services.Notification.Containers.NotificationV1Builder {
      if (builderResult.hasGroupMembershipRequest) {
        builderResult.groupMembershipRequest = Services.Notification.Containers.GroupMembershipRequestNotificationV1.builderWithPrototype(builderResult.groupMembershipRequest).mergeFrom(value).buildPartial()
      } else {
        builderResult.groupMembershipRequest = value
      }
      builderResult.hasGroupMembershipRequest = true
      return self
    }
    public func clearGroupMembershipRequest() -> Services.Notification.Containers.NotificationV1Builder {
      builderResult.hasGroupMembershipRequest = false
      builderResult.groupMembershipRequest = nil
      return self
    }
    public var hasGroupMembershipRequestResponse:Bool {
         get {
             return builderResult.hasGroupMembershipRequestResponse
         }
    }
    public var groupMembershipRequestResponse:Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1! {
         get {
             return builderResult.groupMembershipRequestResponse
         }
         set (value) {
             builderResult.hasGroupMembershipRequestResponse = true
             builderResult.groupMembershipRequestResponse = value
         }
    }
    public func setGroupMembershipRequestResponse(value:Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1!)-> Services.Notification.Containers.NotificationV1Builder {
      self.groupMembershipRequestResponse = value
      return self
    }
    public func mergeGroupMembershipRequestResponse(value:Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1) -> Services.Notification.Containers.NotificationV1Builder {
      if (builderResult.hasGroupMembershipRequestResponse) {
        builderResult.groupMembershipRequestResponse = Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1.builderWithPrototype(builderResult.groupMembershipRequestResponse).mergeFrom(value).buildPartial()
      } else {
        builderResult.groupMembershipRequestResponse = value
      }
      builderResult.hasGroupMembershipRequestResponse = true
      return self
    }
    public func clearGroupMembershipRequestResponse() -> Services.Notification.Containers.NotificationV1Builder {
      builderResult.hasGroupMembershipRequestResponse = false
      builderResult.groupMembershipRequestResponse = nil
      return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Notification.Containers.NotificationV1Builder {
      builderResult = Services.Notification.Containers.NotificationV1()
      return self
    }
    public override func clone() -> Services.Notification.Containers.NotificationV1Builder {
      return Services.Notification.Containers.NotificationV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Notification.Containers.NotificationV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Notification.Containers.NotificationV1 {
      var returnMe:Services.Notification.Containers.NotificationV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Notification.Containers.NotificationV1) -> Services.Notification.Containers.NotificationV1Builder {
      if (other == Services.Notification.Containers.NotificationV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasNotificationTypeId {
           notificationTypeId = other.notificationTypeId
      }
      if (other.hasGroupMembershipRequest) {
          mergeGroupMembershipRequest(other.groupMembershipRequest)
      }
      if (other.hasGroupMembershipRequestResponse) {
          mergeGroupMembershipRequestResponse(other.groupMembershipRequestResponse)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Notification.Containers.NotificationV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.NotificationV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 16 :
          let valueIntnotificationTypeId = input.readEnum()
          if let enumsnotificationTypeId = Services.Notification.Containers.NotificationTypeV1.TypeIdV1(rawValue:valueIntnotificationTypeId){
               notificationTypeId = enumsnotificationTypeId
          } else {
               unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntnotificationTypeId))
          }

        case 26 :
          var subBuilder:Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder = Services.Notification.Containers.GroupMembershipRequestNotificationV1.builder()
          if hasGroupMembershipRequest {
            subBuilder.mergeFrom(groupMembershipRequest)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          groupMembershipRequest = subBuilder.buildPartial()

        case 34 :
          var subBuilder:Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder = Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1.builder()
          if hasGroupMembershipRequestResponse {
            subBuilder.mergeFrom(groupMembershipRequestResponse)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          groupMembershipRequestResponse = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class GroupMembershipRequestNotificationV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "requesterProfileId": return requesterProfileId
           case "groupId": return groupId
           case "provider": return self.provider
           case "requestId": return requestId
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasRequesterProfileId:Bool = false
    public private(set) var requesterProfileId:String = ""

    public private(set) var hasGroupId:Bool = false
    public private(set) var groupId:String = ""

    public private(set) var provider:Services.Group.Containers.GroupProviderV1 = Services.Group.Containers.GroupProviderV1.Google
    public private(set) var hasProvider:Bool = false
    public private(set) var hasRequestId:Bool = false
    public private(set) var requestId:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasRequesterProfileId {
        output.writeString(2, value:requesterProfileId)
      }
      if hasGroupId {
        output.writeString(3, value:groupId)
      }
      if hasProvider {
        output.writeEnum(4, value:provider.rawValue)
      }
      if hasRequestId {
        output.writeString(5, value:requestId)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasRequesterProfileId {
        serialize_size += requesterProfileId.computeStringSize(2)
      }
      if hasGroupId {
        serialize_size += groupId.computeStringSize(3)
      }
      if (hasProvider) {
        serialize_size += provider.rawValue.computeEnumSize(4)
      }
      if hasRequestId {
        serialize_size += requestId.computeStringSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Notification.Containers.GroupMembershipRequestNotificationV1 {
      return Services.Notification.Containers.GroupMembershipRequestNotificationV1.builder().mergeFromData(data, extensionRegistry:Services.Notification.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.GroupMembershipRequestNotificationV1 {
      return Services.Notification.Containers.GroupMembershipRequestNotificationV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Notification.Containers.GroupMembershipRequestNotificationV1 {
      return Services.Notification.Containers.GroupMembershipRequestNotificationV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Notification.Containers.GroupMembershipRequestNotificationV1 {
      return Services.Notification.Containers.GroupMembershipRequestNotificationV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Notification.Containers.GroupMembershipRequestNotificationV1 {
      return Services.Notification.Containers.GroupMembershipRequestNotificationV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.GroupMembershipRequestNotificationV1 {
      return Services.Notification.Containers.GroupMembershipRequestNotificationV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder {
      return Services.Notification.Containers.GroupMembershipRequestNotificationV1.classBuilder() as! Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder
    }
    public func builder() -> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder {
      return classBuilder() as! Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Notification.Containers.GroupMembershipRequestNotificationV1.builder()
    }
    public func toBuilder() -> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder {
      return Services.Notification.Containers.GroupMembershipRequestNotificationV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Notification.Containers.GroupMembershipRequestNotificationV1) -> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder {
      return Services.Notification.Containers.GroupMembershipRequestNotificationV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasRequesterProfileId {
        output += "\(indent) requesterProfileId: \(requesterProfileId) \n"
      }
      if hasGroupId {
        output += "\(indent) groupId: \(groupId) \n"
      }
      if (hasProvider) {
        output += "\(indent) provider: \(provider.rawValue)\n"
      }
      if hasRequestId {
        output += "\(indent) requestId: \(requestId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasRequesterProfileId {
               hashCode = (hashCode &* 31) &+ requesterProfileId.hashValue
            }
            if hasGroupId {
               hashCode = (hashCode &* 31) &+ groupId.hashValue
            }
            if hasProvider {
               hashCode = (hashCode &* 31) &+ Int(provider.rawValue)
            }
            if hasRequestId {
               hashCode = (hashCode &* 31) &+ requestId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Notification.Containers.GroupMembershipRequestNotificationV1"
    }
    override public func className() -> String {
        return "Services.Notification.Containers.GroupMembershipRequestNotificationV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Notification.Containers.GroupMembershipRequestNotificationV1.self
    }
    //Meta information declaration end

  }

  final public class GroupMembershipRequestNotificationV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Notification.Containers.GroupMembershipRequestNotificationV1

    required override public init () {
       builderResult = Services.Notification.Containers.GroupMembershipRequestNotificationV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasRequesterProfileId:Bool {
         get {
              return builderResult.hasRequesterProfileId
         }
    }
    public var requesterProfileId:String {
         get {
              return builderResult.requesterProfileId
         }
         set (value) {
             builderResult.hasRequesterProfileId = true
             builderResult.requesterProfileId = value
         }
    }
    public func setRequesterProfileId(value:String)-> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder {
      self.requesterProfileId = value
      return self
    }
    public func clearRequesterProfileId() -> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder{
         builderResult.hasRequesterProfileId = false
         builderResult.requesterProfileId = ""
         return self
    }
    public var hasGroupId:Bool {
         get {
              return builderResult.hasGroupId
         }
    }
    public var groupId:String {
         get {
              return builderResult.groupId
         }
         set (value) {
             builderResult.hasGroupId = true
             builderResult.groupId = value
         }
    }
    public func setGroupId(value:String)-> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder {
      self.groupId = value
      return self
    }
    public func clearGroupId() -> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder{
         builderResult.hasGroupId = false
         builderResult.groupId = ""
         return self
    }
      public var hasProvider:Bool{
          get {
              return builderResult.hasProvider
          }
      }
      public var provider:Services.Group.Containers.GroupProviderV1 {
          get {
              return builderResult.provider
          }
          set (value) {
              builderResult.hasProvider = true
              builderResult.provider = value
          }
      }
      public func setProvider(value:Services.Group.Containers.GroupProviderV1)-> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder {
        self.provider = value
        return self
      }
      public func clearProvider() -> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder {
         builderResult.hasProvider = false
         builderResult.provider = .Google
         return self
      }
    public var hasRequestId:Bool {
         get {
              return builderResult.hasRequestId
         }
    }
    public var requestId:String {
         get {
              return builderResult.requestId
         }
         set (value) {
             builderResult.hasRequestId = true
             builderResult.requestId = value
         }
    }
    public func setRequestId(value:String)-> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder {
      self.requestId = value
      return self
    }
    public func clearRequestId() -> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder{
         builderResult.hasRequestId = false
         builderResult.requestId = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder {
      builderResult = Services.Notification.Containers.GroupMembershipRequestNotificationV1()
      return self
    }
    public override func clone() -> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder {
      return Services.Notification.Containers.GroupMembershipRequestNotificationV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Notification.Containers.GroupMembershipRequestNotificationV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Notification.Containers.GroupMembershipRequestNotificationV1 {
      var returnMe:Services.Notification.Containers.GroupMembershipRequestNotificationV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Notification.Containers.GroupMembershipRequestNotificationV1) -> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder {
      if (other == Services.Notification.Containers.GroupMembershipRequestNotificationV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasRequesterProfileId {
           requesterProfileId = other.requesterProfileId
      }
      if other.hasGroupId {
           groupId = other.groupId
      }
      if other.hasProvider {
           provider = other.provider
      }
      if other.hasRequestId {
           requestId = other.requestId
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.GroupMembershipRequestNotificationV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          requesterProfileId = input.readString()

        case 26 :
          groupId = input.readString()

        case 32 :
          let valueIntprovider = input.readEnum()
          if let enumsprovider = Services.Group.Containers.GroupProviderV1(rawValue:valueIntprovider){
               provider = enumsprovider
          } else {
               unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntprovider))
          }

        case 42 :
          requestId = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class GroupMembershipRequestResponseNotificationV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "groupManagerProfileId": return groupManagerProfileId
           case "approved": return approved
           case "groupId": return groupId
           case "provider": return self.provider
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasGroupManagerProfileId:Bool = false
    public private(set) var groupManagerProfileId:String = ""

    public private(set) var hasApproved:Bool = false
    public private(set) var approved:Bool = false

    public private(set) var hasGroupId:Bool = false
    public private(set) var groupId:String = ""

    public private(set) var provider:Services.Group.Containers.GroupProviderV1 = Services.Group.Containers.GroupProviderV1.Google
    public private(set) var hasProvider:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasGroupManagerProfileId {
        output.writeString(2, value:groupManagerProfileId)
      }
      if hasApproved {
        output.writeBool(3, value:approved)
      }
      if hasGroupId {
        output.writeString(4, value:groupId)
      }
      if hasProvider {
        output.writeEnum(5, value:provider.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasGroupManagerProfileId {
        serialize_size += groupManagerProfileId.computeStringSize(2)
      }
      if hasApproved {
        serialize_size += approved.computeBoolSize(3)
      }
      if hasGroupId {
        serialize_size += groupId.computeStringSize(4)
      }
      if (hasProvider) {
        serialize_size += provider.rawValue.computeEnumSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1 {
      return Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1.builder().mergeFromData(data, extensionRegistry:Services.Notification.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1 {
      return Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1 {
      return Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1 {
      return Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1 {
      return Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1 {
      return Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder {
      return Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1.classBuilder() as! Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder
    }
    public func builder() -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder {
      return classBuilder() as! Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1.builder()
    }
    public func toBuilder() -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder {
      return Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1) -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder {
      return Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasGroupManagerProfileId {
        output += "\(indent) groupManagerProfileId: \(groupManagerProfileId) \n"
      }
      if hasApproved {
        output += "\(indent) approved: \(approved) \n"
      }
      if hasGroupId {
        output += "\(indent) groupId: \(groupId) \n"
      }
      if (hasProvider) {
        output += "\(indent) provider: \(provider.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasGroupManagerProfileId {
               hashCode = (hashCode &* 31) &+ groupManagerProfileId.hashValue
            }
            if hasApproved {
               hashCode = (hashCode &* 31) &+ approved.hashValue
            }
            if hasGroupId {
               hashCode = (hashCode &* 31) &+ groupId.hashValue
            }
            if hasProvider {
               hashCode = (hashCode &* 31) &+ Int(provider.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1"
    }
    override public func className() -> String {
        return "Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1.self
    }
    //Meta information declaration end

  }

  final public class GroupMembershipRequestResponseNotificationV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1

    required override public init () {
       builderResult = Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasGroupManagerProfileId:Bool {
         get {
              return builderResult.hasGroupManagerProfileId
         }
    }
    public var groupManagerProfileId:String {
         get {
              return builderResult.groupManagerProfileId
         }
         set (value) {
             builderResult.hasGroupManagerProfileId = true
             builderResult.groupManagerProfileId = value
         }
    }
    public func setGroupManagerProfileId(value:String)-> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder {
      self.groupManagerProfileId = value
      return self
    }
    public func clearGroupManagerProfileId() -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder{
         builderResult.hasGroupManagerProfileId = false
         builderResult.groupManagerProfileId = ""
         return self
    }
    public var hasApproved:Bool {
         get {
              return builderResult.hasApproved
         }
    }
    public var approved:Bool {
         get {
              return builderResult.approved
         }
         set (value) {
             builderResult.hasApproved = true
             builderResult.approved = value
         }
    }
    public func setApproved(value:Bool)-> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder {
      self.approved = value
      return self
    }
    public func clearApproved() -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder{
         builderResult.hasApproved = false
         builderResult.approved = false
         return self
    }
    public var hasGroupId:Bool {
         get {
              return builderResult.hasGroupId
         }
    }
    public var groupId:String {
         get {
              return builderResult.groupId
         }
         set (value) {
             builderResult.hasGroupId = true
             builderResult.groupId = value
         }
    }
    public func setGroupId(value:String)-> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder {
      self.groupId = value
      return self
    }
    public func clearGroupId() -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder{
         builderResult.hasGroupId = false
         builderResult.groupId = ""
         return self
    }
      public var hasProvider:Bool{
          get {
              return builderResult.hasProvider
          }
      }
      public var provider:Services.Group.Containers.GroupProviderV1 {
          get {
              return builderResult.provider
          }
          set (value) {
              builderResult.hasProvider = true
              builderResult.provider = value
          }
      }
      public func setProvider(value:Services.Group.Containers.GroupProviderV1)-> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder {
        self.provider = value
        return self
      }
      public func clearProvider() -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder {
         builderResult.hasProvider = false
         builderResult.provider = .Google
         return self
      }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder {
      builderResult = Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1()
      return self
    }
    public override func clone() -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder {
      return Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1 {
      var returnMe:Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1) -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder {
      if (other == Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasGroupManagerProfileId {
           groupManagerProfileId = other.groupManagerProfileId
      }
      if other.hasApproved {
           approved = other.approved
      }
      if other.hasGroupId {
           groupId = other.groupId
      }
      if other.hasProvider {
           provider = other.provider
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Notification.Containers.GroupMembershipRequestResponseNotificationV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          groupManagerProfileId = input.readString()

        case 24 :
          approved = input.readBool()

        case 34 :
          groupId = input.readString()

        case 40 :
          let valueIntprovider = input.readEnum()
          if let enumsprovider = Services.Group.Containers.GroupProviderV1(rawValue:valueIntprovider){
               provider = enumsprovider
          } else {
               unknownFieldsBuilder.mergeVarintField(5, value:Int64(valueIntprovider))
          }

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
