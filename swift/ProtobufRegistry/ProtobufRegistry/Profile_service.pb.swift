// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

public struct ProfileServiceRoot {
  public static var sharedInstance : ProfileServiceRoot {
   struct Static {
       static let instance : ProfileServiceRoot = ProfileServiceRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    OrganizationServiceRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    NoteServiceRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

public func == (lhs: ProfileService.Containers, rhs: ProfileService.Containers) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.CreateProfile, rhs: ProfileService.CreateProfile) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.UpdateProfile, rhs: ProfileService.UpdateProfile) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.GetProfile, rhs: ProfileService.GetProfile) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.GetExtendedProfile, rhs: ProfileService.GetExtendedProfile) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.CreateTags, rhs: ProfileService.CreateTags) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.GetTags, rhs: ProfileService.GetTags) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.AddTags, rhs: ProfileService.AddTags) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.GetProfiles, rhs: ProfileService.GetProfiles) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.GetDirectReports, rhs: ProfileService.GetDirectReports) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.GetPeers, rhs: ProfileService.GetPeers) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.GetProfileStats, rhs: ProfileService.GetProfileStats) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.GetUpcomingAnniversaries, rhs: ProfileService.GetUpcomingAnniversaries) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.GetUpcomingBirthdays, rhs: ProfileService.GetUpcomingBirthdays) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.GetRecentHires, rhs: ProfileService.GetRecentHires) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.GetActiveTags, rhs: ProfileService.GetActiveTags) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService, rhs: ProfileService) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final public class ProfileService : GeneratedMessage {


  //Nested type declaration start

    final public class Containers : GeneratedMessage {


      //Nested type declaration start

        final public class Profile : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "id": return id
                 case "organization_id": return organization_id
                 case "user_id": return user_id
                 case "address_id": return address_id
                 case "title": return title
                 case "first_name": return first_name
                 case "last_name": return last_name
                 case "cell_phone": return cell_phone
                 case "work_phone": return work_phone
                 case "image_url": return image_url
                 case "email": return email
                 case "team_id": return team_id
                 case "full_name": return full_name
                 case "birth_date": return birth_date
                 case "hire_date": return hire_date
                 case "verified": return verified
                 default: return nil
                 }
          }

          public private(set) var hasId:Bool = false
          public private(set) var id:String = ""

          public private(set) var hasOrganizationId:Bool = false
          public private(set) var organization_id:String = ""

          public private(set) var hasUserId:Bool = false
          public private(set) var user_id:String = ""

          public private(set) var hasAddressId:Bool = false
          public private(set) var address_id:String = ""

          public private(set) var hasTitle:Bool = false
          public private(set) var title:String = ""

          public private(set) var hasFirstName:Bool = false
          public private(set) var first_name:String = ""

          public private(set) var hasLastName:Bool = false
          public private(set) var last_name:String = ""

          public private(set) var hasCellPhone:Bool = false
          public private(set) var cell_phone:String = ""

          public private(set) var hasWorkPhone:Bool = false
          public private(set) var work_phone:String = ""

          public private(set) var hasImageUrl:Bool = false
          public private(set) var image_url:String = ""

          public private(set) var hasEmail:Bool = false
          public private(set) var email:String = ""

          public private(set) var hasTeamId:Bool = false
          public private(set) var team_id:String = ""

          public private(set) var hasFullName:Bool = false
          public private(set) var full_name:String = ""

          public private(set) var hasBirthDate:Bool = false
          public private(set) var birth_date:String = ""

          public private(set) var hasHireDate:Bool = false
          public private(set) var hire_date:String = ""

          public private(set) var hasVerified:Bool = false
          public private(set) var verified:Bool = false

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasId {
              output.writeString(1, value:id)
            }
            if hasOrganizationId {
              output.writeString(2, value:organization_id)
            }
            if hasUserId {
              output.writeString(3, value:user_id)
            }
            if hasAddressId {
              output.writeString(4, value:address_id)
            }
            if hasTitle {
              output.writeString(5, value:title)
            }
            if hasFirstName {
              output.writeString(6, value:first_name)
            }
            if hasLastName {
              output.writeString(7, value:last_name)
            }
            if hasCellPhone {
              output.writeString(8, value:cell_phone)
            }
            if hasWorkPhone {
              output.writeString(9, value:work_phone)
            }
            if hasImageUrl {
              output.writeString(10, value:image_url)
            }
            if hasEmail {
              output.writeString(11, value:email)
            }
            if hasTeamId {
              output.writeString(12, value:team_id)
            }
            if hasFullName {
              output.writeString(13, value:full_name)
            }
            if hasBirthDate {
              output.writeString(14, value:birth_date)
            }
            if hasHireDate {
              output.writeString(15, value:hire_date)
            }
            if hasVerified {
              output.writeBool(16, value:verified)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasId {
              size += WireFormat.computeStringSize(1, value:id)
            }
            if hasOrganizationId {
              size += WireFormat.computeStringSize(2, value:organization_id)
            }
            if hasUserId {
              size += WireFormat.computeStringSize(3, value:user_id)
            }
            if hasAddressId {
              size += WireFormat.computeStringSize(4, value:address_id)
            }
            if hasTitle {
              size += WireFormat.computeStringSize(5, value:title)
            }
            if hasFirstName {
              size += WireFormat.computeStringSize(6, value:first_name)
            }
            if hasLastName {
              size += WireFormat.computeStringSize(7, value:last_name)
            }
            if hasCellPhone {
              size += WireFormat.computeStringSize(8, value:cell_phone)
            }
            if hasWorkPhone {
              size += WireFormat.computeStringSize(9, value:work_phone)
            }
            if hasImageUrl {
              size += WireFormat.computeStringSize(10, value:image_url)
            }
            if hasEmail {
              size += WireFormat.computeStringSize(11, value:email)
            }
            if hasTeamId {
              size += WireFormat.computeStringSize(12, value:team_id)
            }
            if hasFullName {
              size += WireFormat.computeStringSize(13, value:full_name)
            }
            if hasBirthDate {
              size += WireFormat.computeStringSize(14, value:birth_date)
            }
            if hasHireDate {
              size += WireFormat.computeStringSize(15, value:hire_date)
            }
            if hasVerified {
              size += WireFormat.computeBoolSize(16, value:verified)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.Containers.Profile {
            return ProfileService.Containers.Profile.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.Containers.Profile {
            return ProfileService.Containers.Profile.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.Containers.Profile {
            return ProfileService.Containers.Profile.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.Containers.Profile {
            return ProfileService.Containers.Profile.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.Containers.Profile {
            return ProfileService.Containers.Profile.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.Containers.Profile {
            return ProfileService.Containers.Profile.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.Containers.ProfileBuilder {
            return ProfileService.Containers.Profile.classBuilder() as ProfileService.Containers.ProfileBuilder
          }
          public func builder() -> ProfileService.Containers.ProfileBuilder {
            return classBuilder() as ProfileService.Containers.ProfileBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.Containers.ProfileBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.Containers.Profile.builder()
          }
          public func toBuilder() -> ProfileService.Containers.ProfileBuilder {
            return ProfileService.Containers.Profile.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.Containers.Profile) -> ProfileService.Containers.ProfileBuilder {
            return ProfileService.Containers.Profile.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasId {
              output += "\(indent) id: \(id) \n"
            }
            if hasOrganizationId {
              output += "\(indent) organization_id: \(organization_id) \n"
            }
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            if hasAddressId {
              output += "\(indent) address_id: \(address_id) \n"
            }
            if hasTitle {
              output += "\(indent) title: \(title) \n"
            }
            if hasFirstName {
              output += "\(indent) first_name: \(first_name) \n"
            }
            if hasLastName {
              output += "\(indent) last_name: \(last_name) \n"
            }
            if hasCellPhone {
              output += "\(indent) cell_phone: \(cell_phone) \n"
            }
            if hasWorkPhone {
              output += "\(indent) work_phone: \(work_phone) \n"
            }
            if hasImageUrl {
              output += "\(indent) image_url: \(image_url) \n"
            }
            if hasEmail {
              output += "\(indent) email: \(email) \n"
            }
            if hasTeamId {
              output += "\(indent) team_id: \(team_id) \n"
            }
            if hasFullName {
              output += "\(indent) full_name: \(full_name) \n"
            }
            if hasBirthDate {
              output += "\(indent) birth_date: \(birth_date) \n"
            }
            if hasHireDate {
              output += "\(indent) hire_date: \(hire_date) \n"
            }
            if hasVerified {
              output += "\(indent) verified: \(verified) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasId {
                     hashCode = (hashCode &* 31) &+ id.hashValue
                  }
                  if hasOrganizationId {
                     hashCode = (hashCode &* 31) &+ organization_id.hashValue
                  }
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  if hasAddressId {
                     hashCode = (hashCode &* 31) &+ address_id.hashValue
                  }
                  if hasTitle {
                     hashCode = (hashCode &* 31) &+ title.hashValue
                  }
                  if hasFirstName {
                     hashCode = (hashCode &* 31) &+ first_name.hashValue
                  }
                  if hasLastName {
                     hashCode = (hashCode &* 31) &+ last_name.hashValue
                  }
                  if hasCellPhone {
                     hashCode = (hashCode &* 31) &+ cell_phone.hashValue
                  }
                  if hasWorkPhone {
                     hashCode = (hashCode &* 31) &+ work_phone.hashValue
                  }
                  if hasImageUrl {
                     hashCode = (hashCode &* 31) &+ image_url.hashValue
                  }
                  if hasEmail {
                     hashCode = (hashCode &* 31) &+ email.hashValue
                  }
                  if hasTeamId {
                     hashCode = (hashCode &* 31) &+ team_id.hashValue
                  }
                  if hasFullName {
                     hashCode = (hashCode &* 31) &+ full_name.hashValue
                  }
                  if hasBirthDate {
                     hashCode = (hashCode &* 31) &+ birth_date.hashValue
                  }
                  if hasHireDate {
                     hashCode = (hashCode &* 31) &+ hire_date.hashValue
                  }
                  if hasVerified {
                     hashCode = (hashCode &* 31) &+ verified.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.Containers.Profile"
          }
          override public func className() -> String {
              return "ProfileService.Containers.Profile"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.Containers.Profile.self
          }


          //Meta information declaration end

        }

        final public class ProfileBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.Containers.Profile

          required override public init () {
             builderResult = ProfileService.Containers.Profile()
             super.init()
          }
          public var hasId:Bool {
               get {
                    return builderResult.hasId
               }
          }
          public var id:String {
               get {
                    return builderResult.id
               }
               set (value) {
                   builderResult.hasId = true
                   builderResult.id = value
               }
          }
          public func clearId() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasId = false
               builderResult.id = ""
               return self
          }
          public var hasOrganizationId:Bool {
               get {
                    return builderResult.hasOrganizationId
               }
          }
          public var organization_id:String {
               get {
                    return builderResult.organization_id
               }
               set (value) {
                   builderResult.hasOrganizationId = true
                   builderResult.organization_id = value
               }
          }
          public func clearOrganizationId() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasOrganizationId = false
               builderResult.organization_id = ""
               return self
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          public var hasAddressId:Bool {
               get {
                    return builderResult.hasAddressId
               }
          }
          public var address_id:String {
               get {
                    return builderResult.address_id
               }
               set (value) {
                   builderResult.hasAddressId = true
                   builderResult.address_id = value
               }
          }
          public func clearAddressId() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasAddressId = false
               builderResult.address_id = ""
               return self
          }
          public var hasTitle:Bool {
               get {
                    return builderResult.hasTitle
               }
          }
          public var title:String {
               get {
                    return builderResult.title
               }
               set (value) {
                   builderResult.hasTitle = true
                   builderResult.title = value
               }
          }
          public func clearTitle() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasTitle = false
               builderResult.title = ""
               return self
          }
          public var hasFirstName:Bool {
               get {
                    return builderResult.hasFirstName
               }
          }
          public var first_name:String {
               get {
                    return builderResult.first_name
               }
               set (value) {
                   builderResult.hasFirstName = true
                   builderResult.first_name = value
               }
          }
          public func clearFirstName() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasFirstName = false
               builderResult.first_name = ""
               return self
          }
          public var hasLastName:Bool {
               get {
                    return builderResult.hasLastName
               }
          }
          public var last_name:String {
               get {
                    return builderResult.last_name
               }
               set (value) {
                   builderResult.hasLastName = true
                   builderResult.last_name = value
               }
          }
          public func clearLastName() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasLastName = false
               builderResult.last_name = ""
               return self
          }
          public var hasCellPhone:Bool {
               get {
                    return builderResult.hasCellPhone
               }
          }
          public var cell_phone:String {
               get {
                    return builderResult.cell_phone
               }
               set (value) {
                   builderResult.hasCellPhone = true
                   builderResult.cell_phone = value
               }
          }
          public func clearCellPhone() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasCellPhone = false
               builderResult.cell_phone = ""
               return self
          }
          public var hasWorkPhone:Bool {
               get {
                    return builderResult.hasWorkPhone
               }
          }
          public var work_phone:String {
               get {
                    return builderResult.work_phone
               }
               set (value) {
                   builderResult.hasWorkPhone = true
                   builderResult.work_phone = value
               }
          }
          public func clearWorkPhone() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasWorkPhone = false
               builderResult.work_phone = ""
               return self
          }
          public var hasImageUrl:Bool {
               get {
                    return builderResult.hasImageUrl
               }
          }
          public var image_url:String {
               get {
                    return builderResult.image_url
               }
               set (value) {
                   builderResult.hasImageUrl = true
                   builderResult.image_url = value
               }
          }
          public func clearImageUrl() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasImageUrl = false
               builderResult.image_url = ""
               return self
          }
          public var hasEmail:Bool {
               get {
                    return builderResult.hasEmail
               }
          }
          public var email:String {
               get {
                    return builderResult.email
               }
               set (value) {
                   builderResult.hasEmail = true
                   builderResult.email = value
               }
          }
          public func clearEmail() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasEmail = false
               builderResult.email = ""
               return self
          }
          public var hasTeamId:Bool {
               get {
                    return builderResult.hasTeamId
               }
          }
          public var team_id:String {
               get {
                    return builderResult.team_id
               }
               set (value) {
                   builderResult.hasTeamId = true
                   builderResult.team_id = value
               }
          }
          public func clearTeamId() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasTeamId = false
               builderResult.team_id = ""
               return self
          }
          public var hasFullName:Bool {
               get {
                    return builderResult.hasFullName
               }
          }
          public var full_name:String {
               get {
                    return builderResult.full_name
               }
               set (value) {
                   builderResult.hasFullName = true
                   builderResult.full_name = value
               }
          }
          public func clearFullName() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasFullName = false
               builderResult.full_name = ""
               return self
          }
          public var hasBirthDate:Bool {
               get {
                    return builderResult.hasBirthDate
               }
          }
          public var birth_date:String {
               get {
                    return builderResult.birth_date
               }
               set (value) {
                   builderResult.hasBirthDate = true
                   builderResult.birth_date = value
               }
          }
          public func clearBirthDate() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasBirthDate = false
               builderResult.birth_date = ""
               return self
          }
          public var hasHireDate:Bool {
               get {
                    return builderResult.hasHireDate
               }
          }
          public var hire_date:String {
               get {
                    return builderResult.hire_date
               }
               set (value) {
                   builderResult.hasHireDate = true
                   builderResult.hire_date = value
               }
          }
          public func clearHireDate() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasHireDate = false
               builderResult.hire_date = ""
               return self
          }
          public var hasVerified:Bool {
               get {
                    return builderResult.hasVerified
               }
          }
          public var verified:Bool {
               get {
                    return builderResult.verified
               }
               set (value) {
                   builderResult.hasVerified = true
                   builderResult.verified = value
               }
          }
          public func clearVerified() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasVerified = false
               builderResult.verified = false
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.Containers.ProfileBuilder {
            builderResult = ProfileService.Containers.Profile()
            return self
          }
          public override func clone() -> ProfileService.Containers.ProfileBuilder {
            return ProfileService.Containers.Profile.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.Containers.Profile {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.Containers.Profile {
            var returnMe:ProfileService.Containers.Profile = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.Containers.Profile) -> ProfileService.Containers.ProfileBuilder {
            if other.hasId {
                 id = other.id
            }
            if other.hasOrganizationId {
                 organization_id = other.organization_id
            }
            if other.hasUserId {
                 user_id = other.user_id
            }
            if other.hasAddressId {
                 address_id = other.address_id
            }
            if other.hasTitle {
                 title = other.title
            }
            if other.hasFirstName {
                 first_name = other.first_name
            }
            if other.hasLastName {
                 last_name = other.last_name
            }
            if other.hasCellPhone {
                 cell_phone = other.cell_phone
            }
            if other.hasWorkPhone {
                 work_phone = other.work_phone
            }
            if other.hasImageUrl {
                 image_url = other.image_url
            }
            if other.hasEmail {
                 email = other.email
            }
            if other.hasTeamId {
                 team_id = other.team_id
            }
            if other.hasFullName {
                 full_name = other.full_name
            }
            if other.hasBirthDate {
                 birth_date = other.birth_date
            }
            if other.hasHireDate {
                 hire_date = other.hire_date
            }
            if other.hasVerified {
                 verified = other.verified
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.Containers.ProfileBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.Containers.ProfileBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                id = input.readString()

              case 18 :
                organization_id = input.readString()

              case 26 :
                user_id = input.readString()

              case 34 :
                address_id = input.readString()

              case 42 :
                title = input.readString()

              case 50 :
                first_name = input.readString()

              case 58 :
                last_name = input.readString()

              case 66 :
                cell_phone = input.readString()

              case 74 :
                work_phone = input.readString()

              case 82 :
                image_url = input.readString()

              case 90 :
                email = input.readString()

              case 98 :
                team_id = input.readString()

              case 106 :
                full_name = input.readString()

              case 114 :
                birth_date = input.readString()

              case 122 :
                hire_date = input.readString()

              case 128 :
                verified = input.readBool()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Tag : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "id": return id
                 case "name": return name
                 default: return nil
                 }
          }

          public private(set) var hasId:Bool = false
          public private(set) var id:String = ""

          public private(set) var hasName:Bool = false
          public private(set) var name:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasId {
              output.writeString(1, value:id)
            }
            if hasName {
              output.writeString(2, value:name)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasId {
              size += WireFormat.computeStringSize(1, value:id)
            }
            if hasName {
              size += WireFormat.computeStringSize(2, value:name)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.Containers.Tag {
            return ProfileService.Containers.Tag.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.Containers.Tag {
            return ProfileService.Containers.Tag.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.Containers.Tag {
            return ProfileService.Containers.Tag.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.Containers.Tag {
            return ProfileService.Containers.Tag.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.Containers.Tag {
            return ProfileService.Containers.Tag.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.Containers.Tag {
            return ProfileService.Containers.Tag.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.Containers.TagBuilder {
            return ProfileService.Containers.Tag.classBuilder() as ProfileService.Containers.TagBuilder
          }
          public func builder() -> ProfileService.Containers.TagBuilder {
            return classBuilder() as ProfileService.Containers.TagBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.Containers.TagBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.Containers.Tag.builder()
          }
          public func toBuilder() -> ProfileService.Containers.TagBuilder {
            return ProfileService.Containers.Tag.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.Containers.Tag) -> ProfileService.Containers.TagBuilder {
            return ProfileService.Containers.Tag.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasId {
              output += "\(indent) id: \(id) \n"
            }
            if hasName {
              output += "\(indent) name: \(name) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasId {
                     hashCode = (hashCode &* 31) &+ id.hashValue
                  }
                  if hasName {
                     hashCode = (hashCode &* 31) &+ name.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.Containers.Tag"
          }
          override public func className() -> String {
              return "ProfileService.Containers.Tag"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.Containers.Tag.self
          }


          //Meta information declaration end

        }

        final public class TagBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.Containers.Tag

          required override public init () {
             builderResult = ProfileService.Containers.Tag()
             super.init()
          }
          public var hasId:Bool {
               get {
                    return builderResult.hasId
               }
          }
          public var id:String {
               get {
                    return builderResult.id
               }
               set (value) {
                   builderResult.hasId = true
                   builderResult.id = value
               }
          }
          public func clearId() -> ProfileService.Containers.TagBuilder{
               builderResult.hasId = false
               builderResult.id = ""
               return self
          }
          public var hasName:Bool {
               get {
                    return builderResult.hasName
               }
          }
          public var name:String {
               get {
                    return builderResult.name
               }
               set (value) {
                   builderResult.hasName = true
                   builderResult.name = value
               }
          }
          public func clearName() -> ProfileService.Containers.TagBuilder{
               builderResult.hasName = false
               builderResult.name = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.Containers.TagBuilder {
            builderResult = ProfileService.Containers.Tag()
            return self
          }
          public override func clone() -> ProfileService.Containers.TagBuilder {
            return ProfileService.Containers.Tag.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.Containers.Tag {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.Containers.Tag {
            var returnMe:ProfileService.Containers.Tag = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.Containers.Tag) -> ProfileService.Containers.TagBuilder {
            if other.hasId {
                 id = other.id
            }
            if other.hasName {
                 name = other.name
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.Containers.TagBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.Containers.TagBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                id = input.readString()

              case 18 :
                name = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Stats : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "id": return id
                 case "count": return count
                 default: return nil
                 }
          }

          public private(set) var hasId:Bool = false
          public private(set) var id:String = ""

          public private(set) var hasCount:Bool = false
          public private(set) var count:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasId {
              output.writeString(1, value:id)
            }
            if hasCount {
              output.writeString(2, value:count)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasId {
              size += WireFormat.computeStringSize(1, value:id)
            }
            if hasCount {
              size += WireFormat.computeStringSize(2, value:count)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.Containers.Stats {
            return ProfileService.Containers.Stats.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.Containers.Stats {
            return ProfileService.Containers.Stats.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.Containers.Stats {
            return ProfileService.Containers.Stats.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.Containers.Stats {
            return ProfileService.Containers.Stats.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.Containers.Stats {
            return ProfileService.Containers.Stats.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.Containers.Stats {
            return ProfileService.Containers.Stats.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.Containers.StatsBuilder {
            return ProfileService.Containers.Stats.classBuilder() as ProfileService.Containers.StatsBuilder
          }
          public func builder() -> ProfileService.Containers.StatsBuilder {
            return classBuilder() as ProfileService.Containers.StatsBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.Containers.StatsBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.Containers.Stats.builder()
          }
          public func toBuilder() -> ProfileService.Containers.StatsBuilder {
            return ProfileService.Containers.Stats.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.Containers.Stats) -> ProfileService.Containers.StatsBuilder {
            return ProfileService.Containers.Stats.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasId {
              output += "\(indent) id: \(id) \n"
            }
            if hasCount {
              output += "\(indent) count: \(count) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasId {
                     hashCode = (hashCode &* 31) &+ id.hashValue
                  }
                  if hasCount {
                     hashCode = (hashCode &* 31) &+ count.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.Containers.Stats"
          }
          override public func className() -> String {
              return "ProfileService.Containers.Stats"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.Containers.Stats.self
          }


          //Meta information declaration end

        }

        final public class StatsBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.Containers.Stats

          required override public init () {
             builderResult = ProfileService.Containers.Stats()
             super.init()
          }
          public var hasId:Bool {
               get {
                    return builderResult.hasId
               }
          }
          public var id:String {
               get {
                    return builderResult.id
               }
               set (value) {
                   builderResult.hasId = true
                   builderResult.id = value
               }
          }
          public func clearId() -> ProfileService.Containers.StatsBuilder{
               builderResult.hasId = false
               builderResult.id = ""
               return self
          }
          public var hasCount:Bool {
               get {
                    return builderResult.hasCount
               }
          }
          public var count:String {
               get {
                    return builderResult.count
               }
               set (value) {
                   builderResult.hasCount = true
                   builderResult.count = value
               }
          }
          public func clearCount() -> ProfileService.Containers.StatsBuilder{
               builderResult.hasCount = false
               builderResult.count = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.Containers.StatsBuilder {
            builderResult = ProfileService.Containers.Stats()
            return self
          }
          public override func clone() -> ProfileService.Containers.StatsBuilder {
            return ProfileService.Containers.Stats.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.Containers.Stats {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.Containers.Stats {
            var returnMe:ProfileService.Containers.Stats = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.Containers.Stats) -> ProfileService.Containers.StatsBuilder {
            if other.hasId {
                 id = other.id
            }
            if other.hasCount {
                 count = other.count
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.Containers.StatsBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.Containers.StatsBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                id = input.readString()

              case 18 :
                count = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.Containers {
        return ProfileService.Containers.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.Containers {
        return ProfileService.Containers.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.Containers {
        return ProfileService.Containers.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.Containers {
        return ProfileService.Containers.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.Containers {
        return ProfileService.Containers.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.Containers {
        return ProfileService.Containers.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.ContainersBuilder {
        return ProfileService.Containers.classBuilder() as ProfileService.ContainersBuilder
      }
      public func builder() -> ProfileService.ContainersBuilder {
        return classBuilder() as ProfileService.ContainersBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.ContainersBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.Containers.builder()
      }
      public func toBuilder() -> ProfileService.ContainersBuilder {
        return ProfileService.Containers.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.Containers) -> ProfileService.ContainersBuilder {
        return ProfileService.Containers.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.Containers"
      }
      override public func className() -> String {
          return "ProfileService.Containers"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.Containers.self
      }


      //Meta information declaration end

    }

    final public class ContainersBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.Containers

      required override public init () {
         builderResult = ProfileService.Containers()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.ContainersBuilder {
        builderResult = ProfileService.Containers()
        return self
      }
      public override func clone() -> ProfileService.ContainersBuilder {
        return ProfileService.Containers.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.Containers {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.Containers {
        var returnMe:ProfileService.Containers = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.Containers) -> ProfileService.ContainersBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.ContainersBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.ContainersBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class CreateProfile : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "profile": return profile
                 default: return nil
                 }
          }

          public private(set) var hasProfile:Bool = false
          public private(set) var profile:ProfileService.Containers.Profile = ProfileService.Containers.Profile()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfile {
              output.writeMessage(1, value:profile)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfile {
              size += WireFormat.computeMessageSize(1, value:profile)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.CreateProfile.Request {
            return ProfileService.CreateProfile.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile.Request {
            return ProfileService.CreateProfile.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.CreateProfile.Request {
            return ProfileService.CreateProfile.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.CreateProfile.Request {
            return ProfileService.CreateProfile.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.CreateProfile.Request {
            return ProfileService.CreateProfile.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile.Request {
            return ProfileService.CreateProfile.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.CreateProfile.RequestBuilder {
            return ProfileService.CreateProfile.Request.classBuilder() as ProfileService.CreateProfile.RequestBuilder
          }
          public func builder() -> ProfileService.CreateProfile.RequestBuilder {
            return classBuilder() as ProfileService.CreateProfile.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.CreateProfile.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.CreateProfile.Request.builder()
          }
          public func toBuilder() -> ProfileService.CreateProfile.RequestBuilder {
            return ProfileService.CreateProfile.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.CreateProfile.Request) -> ProfileService.CreateProfile.RequestBuilder {
            return ProfileService.CreateProfile.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfile {
              output += "\(indent) profile {\n"
              profile.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfile {
                    hashCode = (hashCode &* 31) &+ profile.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.CreateProfile.Request"
          }
          override public func className() -> String {
              return "ProfileService.CreateProfile.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.CreateProfile.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.CreateProfile.Request

          required override public init () {
             builderResult = ProfileService.CreateProfile.Request()
             super.init()
          }
          public var hasProfile:Bool {
               get {
                   return builderResult.hasProfile
               }
          }
          public var profile:ProfileService.Containers.Profile {
               get {
                   return builderResult.profile
               }
               set (value) {
                   builderResult.hasProfile = true
                   builderResult.profile = value
               }
          }
          public func setProfileBuilder(builderForValue:ProfileService.Containers.ProfileBuilder) -> ProfileService.CreateProfile.RequestBuilder {
            profile = builderForValue.build()
            return self
          }
          public func mergeProfile(value:ProfileService.Containers.Profile) -> ProfileService.CreateProfile.RequestBuilder {
            if (builderResult.hasProfile) {
              builderResult.profile = ProfileService.Containers.Profile.builderWithPrototype(builderResult.profile).mergeFrom(value).buildPartial()
            } else {
              builderResult.profile = value
            }
            builderResult.hasProfile = true
            return self
          }
          public func clearProfile() -> ProfileService.CreateProfile.RequestBuilder {
            builderResult.hasProfile = false
            builderResult.profile = ProfileService.Containers.Profile()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.CreateProfile.RequestBuilder {
            builderResult = ProfileService.CreateProfile.Request()
            return self
          }
          public override func clone() -> ProfileService.CreateProfile.RequestBuilder {
            return ProfileService.CreateProfile.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.CreateProfile.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.CreateProfile.Request {
            var returnMe:ProfileService.CreateProfile.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.CreateProfile.Request) -> ProfileService.CreateProfile.RequestBuilder {
            if (other.hasProfile) {
                mergeProfile(other.profile)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.CreateProfile.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:ProfileService.Containers.ProfileBuilder = ProfileService.Containers.Profile.builder()
                if hasProfile {
                  subBuilder.mergeFrom(profile)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                profile = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "profile": return profile
                 default: return nil
                 }
          }

          public private(set) var hasProfile:Bool = false
          public private(set) var profile:ProfileService.Containers.Profile = ProfileService.Containers.Profile()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfile {
              output.writeMessage(1, value:profile)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfile {
              size += WireFormat.computeMessageSize(1, value:profile)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.CreateProfile.Response {
            return ProfileService.CreateProfile.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile.Response {
            return ProfileService.CreateProfile.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.CreateProfile.Response {
            return ProfileService.CreateProfile.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.CreateProfile.Response {
            return ProfileService.CreateProfile.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.CreateProfile.Response {
            return ProfileService.CreateProfile.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile.Response {
            return ProfileService.CreateProfile.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.CreateProfile.ResponseBuilder {
            return ProfileService.CreateProfile.Response.classBuilder() as ProfileService.CreateProfile.ResponseBuilder
          }
          public func builder() -> ProfileService.CreateProfile.ResponseBuilder {
            return classBuilder() as ProfileService.CreateProfile.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.CreateProfile.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.CreateProfile.Response.builder()
          }
          public func toBuilder() -> ProfileService.CreateProfile.ResponseBuilder {
            return ProfileService.CreateProfile.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.CreateProfile.Response) -> ProfileService.CreateProfile.ResponseBuilder {
            return ProfileService.CreateProfile.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfile {
              output += "\(indent) profile {\n"
              profile.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfile {
                    hashCode = (hashCode &* 31) &+ profile.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.CreateProfile.Response"
          }
          override public func className() -> String {
              return "ProfileService.CreateProfile.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.CreateProfile.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.CreateProfile.Response

          required override public init () {
             builderResult = ProfileService.CreateProfile.Response()
             super.init()
          }
          public var hasProfile:Bool {
               get {
                   return builderResult.hasProfile
               }
          }
          public var profile:ProfileService.Containers.Profile {
               get {
                   return builderResult.profile
               }
               set (value) {
                   builderResult.hasProfile = true
                   builderResult.profile = value
               }
          }
          public func setProfileBuilder(builderForValue:ProfileService.Containers.ProfileBuilder) -> ProfileService.CreateProfile.ResponseBuilder {
            profile = builderForValue.build()
            return self
          }
          public func mergeProfile(value:ProfileService.Containers.Profile) -> ProfileService.CreateProfile.ResponseBuilder {
            if (builderResult.hasProfile) {
              builderResult.profile = ProfileService.Containers.Profile.builderWithPrototype(builderResult.profile).mergeFrom(value).buildPartial()
            } else {
              builderResult.profile = value
            }
            builderResult.hasProfile = true
            return self
          }
          public func clearProfile() -> ProfileService.CreateProfile.ResponseBuilder {
            builderResult.hasProfile = false
            builderResult.profile = ProfileService.Containers.Profile()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.CreateProfile.ResponseBuilder {
            builderResult = ProfileService.CreateProfile.Response()
            return self
          }
          public override func clone() -> ProfileService.CreateProfile.ResponseBuilder {
            return ProfileService.CreateProfile.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.CreateProfile.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.CreateProfile.Response {
            var returnMe:ProfileService.CreateProfile.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.CreateProfile.Response) -> ProfileService.CreateProfile.ResponseBuilder {
            if (other.hasProfile) {
                mergeProfile(other.profile)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.CreateProfile.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:ProfileService.Containers.ProfileBuilder = ProfileService.Containers.Profile.builder()
                if hasProfile {
                  subBuilder.mergeFrom(profile)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                profile = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.CreateProfile {
        return ProfileService.CreateProfile.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile {
        return ProfileService.CreateProfile.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.CreateProfile {
        return ProfileService.CreateProfile.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.CreateProfile {
        return ProfileService.CreateProfile.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.CreateProfile {
        return ProfileService.CreateProfile.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile {
        return ProfileService.CreateProfile.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.CreateProfileBuilder {
        return ProfileService.CreateProfile.classBuilder() as ProfileService.CreateProfileBuilder
      }
      public func builder() -> ProfileService.CreateProfileBuilder {
        return classBuilder() as ProfileService.CreateProfileBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.CreateProfileBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.CreateProfile.builder()
      }
      public func toBuilder() -> ProfileService.CreateProfileBuilder {
        return ProfileService.CreateProfile.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.CreateProfile) -> ProfileService.CreateProfileBuilder {
        return ProfileService.CreateProfile.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.CreateProfile"
      }
      override public func className() -> String {
          return "ProfileService.CreateProfile"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.CreateProfile.self
      }


      //Meta information declaration end

    }

    final public class CreateProfileBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.CreateProfile

      required override public init () {
         builderResult = ProfileService.CreateProfile()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.CreateProfileBuilder {
        builderResult = ProfileService.CreateProfile()
        return self
      }
      public override func clone() -> ProfileService.CreateProfileBuilder {
        return ProfileService.CreateProfile.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.CreateProfile {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.CreateProfile {
        var returnMe:ProfileService.CreateProfile = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.CreateProfile) -> ProfileService.CreateProfileBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.CreateProfileBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfileBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class UpdateProfile : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "profile": return profile
                 default: return nil
                 }
          }

          public private(set) var hasProfile:Bool = false
          public private(set) var profile:ProfileService.Containers.Profile = ProfileService.Containers.Profile()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfile {
              output.writeMessage(1, value:profile)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfile {
              size += WireFormat.computeMessageSize(1, value:profile)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.UpdateProfile.Request {
            return ProfileService.UpdateProfile.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.UpdateProfile.Request {
            return ProfileService.UpdateProfile.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.UpdateProfile.Request {
            return ProfileService.UpdateProfile.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.UpdateProfile.Request {
            return ProfileService.UpdateProfile.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.UpdateProfile.Request {
            return ProfileService.UpdateProfile.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.UpdateProfile.Request {
            return ProfileService.UpdateProfile.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.UpdateProfile.RequestBuilder {
            return ProfileService.UpdateProfile.Request.classBuilder() as ProfileService.UpdateProfile.RequestBuilder
          }
          public func builder() -> ProfileService.UpdateProfile.RequestBuilder {
            return classBuilder() as ProfileService.UpdateProfile.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.UpdateProfile.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.UpdateProfile.Request.builder()
          }
          public func toBuilder() -> ProfileService.UpdateProfile.RequestBuilder {
            return ProfileService.UpdateProfile.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.UpdateProfile.Request) -> ProfileService.UpdateProfile.RequestBuilder {
            return ProfileService.UpdateProfile.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfile {
              output += "\(indent) profile {\n"
              profile.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfile {
                    hashCode = (hashCode &* 31) &+ profile.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.UpdateProfile.Request"
          }
          override public func className() -> String {
              return "ProfileService.UpdateProfile.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.UpdateProfile.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.UpdateProfile.Request

          required override public init () {
             builderResult = ProfileService.UpdateProfile.Request()
             super.init()
          }
          public var hasProfile:Bool {
               get {
                   return builderResult.hasProfile
               }
          }
          public var profile:ProfileService.Containers.Profile {
               get {
                   return builderResult.profile
               }
               set (value) {
                   builderResult.hasProfile = true
                   builderResult.profile = value
               }
          }
          public func setProfileBuilder(builderForValue:ProfileService.Containers.ProfileBuilder) -> ProfileService.UpdateProfile.RequestBuilder {
            profile = builderForValue.build()
            return self
          }
          public func mergeProfile(value:ProfileService.Containers.Profile) -> ProfileService.UpdateProfile.RequestBuilder {
            if (builderResult.hasProfile) {
              builderResult.profile = ProfileService.Containers.Profile.builderWithPrototype(builderResult.profile).mergeFrom(value).buildPartial()
            } else {
              builderResult.profile = value
            }
            builderResult.hasProfile = true
            return self
          }
          public func clearProfile() -> ProfileService.UpdateProfile.RequestBuilder {
            builderResult.hasProfile = false
            builderResult.profile = ProfileService.Containers.Profile()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.UpdateProfile.RequestBuilder {
            builderResult = ProfileService.UpdateProfile.Request()
            return self
          }
          public override func clone() -> ProfileService.UpdateProfile.RequestBuilder {
            return ProfileService.UpdateProfile.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.UpdateProfile.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.UpdateProfile.Request {
            var returnMe:ProfileService.UpdateProfile.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.UpdateProfile.Request) -> ProfileService.UpdateProfile.RequestBuilder {
            if (other.hasProfile) {
                mergeProfile(other.profile)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.UpdateProfile.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.UpdateProfile.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:ProfileService.Containers.ProfileBuilder = ProfileService.Containers.Profile.builder()
                if hasProfile {
                  subBuilder.mergeFrom(profile)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                profile = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "profile": return profile
                 default: return nil
                 }
          }

          public private(set) var hasProfile:Bool = false
          public private(set) var profile:ProfileService.Containers.Profile = ProfileService.Containers.Profile()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfile {
              output.writeMessage(1, value:profile)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfile {
              size += WireFormat.computeMessageSize(1, value:profile)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.UpdateProfile.Response {
            return ProfileService.UpdateProfile.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.UpdateProfile.Response {
            return ProfileService.UpdateProfile.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.UpdateProfile.Response {
            return ProfileService.UpdateProfile.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.UpdateProfile.Response {
            return ProfileService.UpdateProfile.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.UpdateProfile.Response {
            return ProfileService.UpdateProfile.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.UpdateProfile.Response {
            return ProfileService.UpdateProfile.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.UpdateProfile.ResponseBuilder {
            return ProfileService.UpdateProfile.Response.classBuilder() as ProfileService.UpdateProfile.ResponseBuilder
          }
          public func builder() -> ProfileService.UpdateProfile.ResponseBuilder {
            return classBuilder() as ProfileService.UpdateProfile.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.UpdateProfile.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.UpdateProfile.Response.builder()
          }
          public func toBuilder() -> ProfileService.UpdateProfile.ResponseBuilder {
            return ProfileService.UpdateProfile.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.UpdateProfile.Response) -> ProfileService.UpdateProfile.ResponseBuilder {
            return ProfileService.UpdateProfile.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfile {
              output += "\(indent) profile {\n"
              profile.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfile {
                    hashCode = (hashCode &* 31) &+ profile.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.UpdateProfile.Response"
          }
          override public func className() -> String {
              return "ProfileService.UpdateProfile.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.UpdateProfile.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.UpdateProfile.Response

          required override public init () {
             builderResult = ProfileService.UpdateProfile.Response()
             super.init()
          }
          public var hasProfile:Bool {
               get {
                   return builderResult.hasProfile
               }
          }
          public var profile:ProfileService.Containers.Profile {
               get {
                   return builderResult.profile
               }
               set (value) {
                   builderResult.hasProfile = true
                   builderResult.profile = value
               }
          }
          public func setProfileBuilder(builderForValue:ProfileService.Containers.ProfileBuilder) -> ProfileService.UpdateProfile.ResponseBuilder {
            profile = builderForValue.build()
            return self
          }
          public func mergeProfile(value:ProfileService.Containers.Profile) -> ProfileService.UpdateProfile.ResponseBuilder {
            if (builderResult.hasProfile) {
              builderResult.profile = ProfileService.Containers.Profile.builderWithPrototype(builderResult.profile).mergeFrom(value).buildPartial()
            } else {
              builderResult.profile = value
            }
            builderResult.hasProfile = true
            return self
          }
          public func clearProfile() -> ProfileService.UpdateProfile.ResponseBuilder {
            builderResult.hasProfile = false
            builderResult.profile = ProfileService.Containers.Profile()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.UpdateProfile.ResponseBuilder {
            builderResult = ProfileService.UpdateProfile.Response()
            return self
          }
          public override func clone() -> ProfileService.UpdateProfile.ResponseBuilder {
            return ProfileService.UpdateProfile.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.UpdateProfile.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.UpdateProfile.Response {
            var returnMe:ProfileService.UpdateProfile.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.UpdateProfile.Response) -> ProfileService.UpdateProfile.ResponseBuilder {
            if (other.hasProfile) {
                mergeProfile(other.profile)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.UpdateProfile.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.UpdateProfile.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:ProfileService.Containers.ProfileBuilder = ProfileService.Containers.Profile.builder()
                if hasProfile {
                  subBuilder.mergeFrom(profile)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                profile = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.UpdateProfile {
        return ProfileService.UpdateProfile.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.UpdateProfile {
        return ProfileService.UpdateProfile.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.UpdateProfile {
        return ProfileService.UpdateProfile.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.UpdateProfile {
        return ProfileService.UpdateProfile.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.UpdateProfile {
        return ProfileService.UpdateProfile.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.UpdateProfile {
        return ProfileService.UpdateProfile.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.UpdateProfileBuilder {
        return ProfileService.UpdateProfile.classBuilder() as ProfileService.UpdateProfileBuilder
      }
      public func builder() -> ProfileService.UpdateProfileBuilder {
        return classBuilder() as ProfileService.UpdateProfileBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.UpdateProfileBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.UpdateProfile.builder()
      }
      public func toBuilder() -> ProfileService.UpdateProfileBuilder {
        return ProfileService.UpdateProfile.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.UpdateProfile) -> ProfileService.UpdateProfileBuilder {
        return ProfileService.UpdateProfile.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.UpdateProfile"
      }
      override public func className() -> String {
          return "ProfileService.UpdateProfile"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.UpdateProfile.self
      }


      //Meta information declaration end

    }

    final public class UpdateProfileBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.UpdateProfile

      required override public init () {
         builderResult = ProfileService.UpdateProfile()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.UpdateProfileBuilder {
        builderResult = ProfileService.UpdateProfile()
        return self
      }
      public override func clone() -> ProfileService.UpdateProfileBuilder {
        return ProfileService.UpdateProfile.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.UpdateProfile {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.UpdateProfile {
        var returnMe:ProfileService.UpdateProfile = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.UpdateProfile) -> ProfileService.UpdateProfileBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.UpdateProfileBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.UpdateProfileBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetProfile : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {


          //OneOf declaration start

          public enum LookupKey {
            case LookupKeyOneOfNotSet

            public func checkOneOfIsSet() -> Bool {
                 switch self {
                 case .LookupKeyOneOfNotSet:
                      return false
                 default:
                      return true
                 }
            }
            case ProfileId(String)

            public static func getProfileId(value:LookupKey) ->String? {
                 switch value {
                 case .ProfileId(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
            case UserId(String)

            public static func getUserId(value:LookupKey) ->String? {
                 switch value {
                 case .UserId(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
          }



          //OneOf declaration end

          private var storageLookupKey:ProfileService.GetProfile.Request.LookupKey =  ProfileService.GetProfile.Request.LookupKey.LookupKeyOneOfNotSet
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "profile_id": return profile_id
                 case "user_id": return user_id
                 default: return nil
                 }
          }

          public private(set) var hasProfileId:Bool {
                get {
                     if ProfileService.GetProfile.Request.LookupKey.getProfileId(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var profile_id:String!{
               get {
                    return ProfileService.GetProfile.Request.LookupKey.getProfileId(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = ProfileService.GetProfile.Request.LookupKey.ProfileId(newvalue)
               }
          }
          public private(set) var hasUserId:Bool {
                get {
                     if ProfileService.GetProfile.Request.LookupKey.getUserId(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var user_id:String!{
               get {
                    return ProfileService.GetProfile.Request.LookupKey.getUserId(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = ProfileService.GetProfile.Request.LookupKey.UserId(newvalue)
               }
          }
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfileId {
              output.writeString(1, value:profile_id)
            }
            if hasUserId {
              output.writeString(2, value:user_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfileId {
              size += WireFormat.computeStringSize(1, value:profile_id)
            }
            if hasUserId {
              size += WireFormat.computeStringSize(2, value:user_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetProfile.Request {
            return ProfileService.GetProfile.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile.Request {
            return ProfileService.GetProfile.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetProfile.Request {
            return ProfileService.GetProfile.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetProfile.Request {
            return ProfileService.GetProfile.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetProfile.Request {
            return ProfileService.GetProfile.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile.Request {
            return ProfileService.GetProfile.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetProfile.RequestBuilder {
            return ProfileService.GetProfile.Request.classBuilder() as ProfileService.GetProfile.RequestBuilder
          }
          public func builder() -> ProfileService.GetProfile.RequestBuilder {
            return classBuilder() as ProfileService.GetProfile.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetProfile.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetProfile.Request.builder()
          }
          public func toBuilder() -> ProfileService.GetProfile.RequestBuilder {
            return ProfileService.GetProfile.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetProfile.Request) -> ProfileService.GetProfile.RequestBuilder {
            return ProfileService.GetProfile.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfileId {
              output += "\(indent) profile_id: \(profile_id) \n"
            }
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfileId {
                     hashCode = (hashCode &* 31) &+ profile_id.hashValue
                  }
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetProfile.Request"
          }
          override public func className() -> String {
              return "ProfileService.GetProfile.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetProfile.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetProfile.Request

          required override public init () {
             builderResult = ProfileService.GetProfile.Request()
             super.init()
          }
          public var hasProfileId:Bool {
               get {
                    return builderResult.hasProfileId
               }
          }
          public var profile_id:String {
               get {
                    return builderResult.profile_id
               }
               set (value) {
                   builderResult.hasProfileId = true
                   builderResult.profile_id = value
               }
          }
          public func clearProfileId() -> ProfileService.GetProfile.RequestBuilder{
               builderResult.hasProfileId = false
               builderResult.profile_id = ""
               return self
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> ProfileService.GetProfile.RequestBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetProfile.RequestBuilder {
            builderResult = ProfileService.GetProfile.Request()
            return self
          }
          public override func clone() -> ProfileService.GetProfile.RequestBuilder {
            return ProfileService.GetProfile.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetProfile.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetProfile.Request {
            var returnMe:ProfileService.GetProfile.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetProfile.Request) -> ProfileService.GetProfile.RequestBuilder {
            if other.hasProfileId {
                 profile_id = other.profile_id
            }
            if other.hasUserId {
                 user_id = other.user_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetProfile.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                profile_id = input.readString()

              case 18 :
                user_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "profile": return profile
                 default: return nil
                 }
          }

          public private(set) var hasProfile:Bool = false
          public private(set) var profile:ProfileService.Containers.Profile = ProfileService.Containers.Profile()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfile {
              output.writeMessage(1, value:profile)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfile {
              size += WireFormat.computeMessageSize(1, value:profile)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetProfile.Response {
            return ProfileService.GetProfile.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile.Response {
            return ProfileService.GetProfile.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetProfile.Response {
            return ProfileService.GetProfile.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetProfile.Response {
            return ProfileService.GetProfile.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetProfile.Response {
            return ProfileService.GetProfile.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile.Response {
            return ProfileService.GetProfile.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetProfile.ResponseBuilder {
            return ProfileService.GetProfile.Response.classBuilder() as ProfileService.GetProfile.ResponseBuilder
          }
          public func builder() -> ProfileService.GetProfile.ResponseBuilder {
            return classBuilder() as ProfileService.GetProfile.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetProfile.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetProfile.Response.builder()
          }
          public func toBuilder() -> ProfileService.GetProfile.ResponseBuilder {
            return ProfileService.GetProfile.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetProfile.Response) -> ProfileService.GetProfile.ResponseBuilder {
            return ProfileService.GetProfile.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfile {
              output += "\(indent) profile {\n"
              profile.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfile {
                    hashCode = (hashCode &* 31) &+ profile.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetProfile.Response"
          }
          override public func className() -> String {
              return "ProfileService.GetProfile.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetProfile.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetProfile.Response

          required override public init () {
             builderResult = ProfileService.GetProfile.Response()
             super.init()
          }
          public var hasProfile:Bool {
               get {
                   return builderResult.hasProfile
               }
          }
          public var profile:ProfileService.Containers.Profile {
               get {
                   return builderResult.profile
               }
               set (value) {
                   builderResult.hasProfile = true
                   builderResult.profile = value
               }
          }
          public func setProfileBuilder(builderForValue:ProfileService.Containers.ProfileBuilder) -> ProfileService.GetProfile.ResponseBuilder {
            profile = builderForValue.build()
            return self
          }
          public func mergeProfile(value:ProfileService.Containers.Profile) -> ProfileService.GetProfile.ResponseBuilder {
            if (builderResult.hasProfile) {
              builderResult.profile = ProfileService.Containers.Profile.builderWithPrototype(builderResult.profile).mergeFrom(value).buildPartial()
            } else {
              builderResult.profile = value
            }
            builderResult.hasProfile = true
            return self
          }
          public func clearProfile() -> ProfileService.GetProfile.ResponseBuilder {
            builderResult.hasProfile = false
            builderResult.profile = ProfileService.Containers.Profile()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetProfile.ResponseBuilder {
            builderResult = ProfileService.GetProfile.Response()
            return self
          }
          public override func clone() -> ProfileService.GetProfile.ResponseBuilder {
            return ProfileService.GetProfile.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetProfile.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetProfile.Response {
            var returnMe:ProfileService.GetProfile.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetProfile.Response) -> ProfileService.GetProfile.ResponseBuilder {
            if (other.hasProfile) {
                mergeProfile(other.profile)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetProfile.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:ProfileService.Containers.ProfileBuilder = ProfileService.Containers.Profile.builder()
                if hasProfile {
                  subBuilder.mergeFrom(profile)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                profile = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.GetProfile {
        return ProfileService.GetProfile.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile {
        return ProfileService.GetProfile.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetProfile {
        return ProfileService.GetProfile.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetProfile {
        return ProfileService.GetProfile.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetProfile {
        return ProfileService.GetProfile.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile {
        return ProfileService.GetProfile.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.GetProfileBuilder {
        return ProfileService.GetProfile.classBuilder() as ProfileService.GetProfileBuilder
      }
      public func builder() -> ProfileService.GetProfileBuilder {
        return classBuilder() as ProfileService.GetProfileBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.GetProfileBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.GetProfile.builder()
      }
      public func toBuilder() -> ProfileService.GetProfileBuilder {
        return ProfileService.GetProfile.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.GetProfile) -> ProfileService.GetProfileBuilder {
        return ProfileService.GetProfile.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.GetProfile"
      }
      override public func className() -> String {
          return "ProfileService.GetProfile"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.GetProfile.self
      }


      //Meta information declaration end

    }

    final public class GetProfileBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.GetProfile

      required override public init () {
         builderResult = ProfileService.GetProfile()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.GetProfileBuilder {
        builderResult = ProfileService.GetProfile()
        return self
      }
      public override func clone() -> ProfileService.GetProfileBuilder {
        return ProfileService.GetProfile.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.GetProfile {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.GetProfile {
        var returnMe:ProfileService.GetProfile = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.GetProfile) -> ProfileService.GetProfileBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetProfileBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfileBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetExtendedProfile : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {


          //OneOf declaration start

          public enum LookupKey {
            case LookupKeyOneOfNotSet

            public func checkOneOfIsSet() -> Bool {
                 switch self {
                 case .LookupKeyOneOfNotSet:
                      return false
                 default:
                      return true
                 }
            }
            case ProfileId(String)

            public static func getProfileId(value:LookupKey) ->String? {
                 switch value {
                 case .ProfileId(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
            case UserId(String)

            public static func getUserId(value:LookupKey) ->String? {
                 switch value {
                 case .UserId(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
          }



          //OneOf declaration end

          private var storageLookupKey:ProfileService.GetExtendedProfile.Request.LookupKey =  ProfileService.GetExtendedProfile.Request.LookupKey.LookupKeyOneOfNotSet
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "profile_id": return profile_id
                 case "user_id": return user_id
                 default: return nil
                 }
          }

          public private(set) var hasProfileId:Bool {
                get {
                     if ProfileService.GetExtendedProfile.Request.LookupKey.getProfileId(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var profile_id:String!{
               get {
                    return ProfileService.GetExtendedProfile.Request.LookupKey.getProfileId(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = ProfileService.GetExtendedProfile.Request.LookupKey.ProfileId(newvalue)
               }
          }
          public private(set) var hasUserId:Bool {
                get {
                     if ProfileService.GetExtendedProfile.Request.LookupKey.getUserId(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var user_id:String!{
               get {
                    return ProfileService.GetExtendedProfile.Request.LookupKey.getUserId(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = ProfileService.GetExtendedProfile.Request.LookupKey.UserId(newvalue)
               }
          }
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfileId {
              output.writeString(1, value:profile_id)
            }
            if hasUserId {
              output.writeString(2, value:user_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfileId {
              size += WireFormat.computeStringSize(1, value:profile_id)
            }
            if hasUserId {
              size += WireFormat.computeStringSize(2, value:user_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetExtendedProfile.Request {
            return ProfileService.GetExtendedProfile.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile.Request {
            return ProfileService.GetExtendedProfile.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetExtendedProfile.Request {
            return ProfileService.GetExtendedProfile.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetExtendedProfile.Request {
            return ProfileService.GetExtendedProfile.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetExtendedProfile.Request {
            return ProfileService.GetExtendedProfile.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile.Request {
            return ProfileService.GetExtendedProfile.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetExtendedProfile.RequestBuilder {
            return ProfileService.GetExtendedProfile.Request.classBuilder() as ProfileService.GetExtendedProfile.RequestBuilder
          }
          public func builder() -> ProfileService.GetExtendedProfile.RequestBuilder {
            return classBuilder() as ProfileService.GetExtendedProfile.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetExtendedProfile.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetExtendedProfile.Request.builder()
          }
          public func toBuilder() -> ProfileService.GetExtendedProfile.RequestBuilder {
            return ProfileService.GetExtendedProfile.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetExtendedProfile.Request) -> ProfileService.GetExtendedProfile.RequestBuilder {
            return ProfileService.GetExtendedProfile.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfileId {
              output += "\(indent) profile_id: \(profile_id) \n"
            }
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfileId {
                     hashCode = (hashCode &* 31) &+ profile_id.hashValue
                  }
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetExtendedProfile.Request"
          }
          override public func className() -> String {
              return "ProfileService.GetExtendedProfile.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetExtendedProfile.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetExtendedProfile.Request

          required override public init () {
             builderResult = ProfileService.GetExtendedProfile.Request()
             super.init()
          }
          public var hasProfileId:Bool {
               get {
                    return builderResult.hasProfileId
               }
          }
          public var profile_id:String {
               get {
                    return builderResult.profile_id
               }
               set (value) {
                   builderResult.hasProfileId = true
                   builderResult.profile_id = value
               }
          }
          public func clearProfileId() -> ProfileService.GetExtendedProfile.RequestBuilder{
               builderResult.hasProfileId = false
               builderResult.profile_id = ""
               return self
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> ProfileService.GetExtendedProfile.RequestBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetExtendedProfile.RequestBuilder {
            builderResult = ProfileService.GetExtendedProfile.Request()
            return self
          }
          public override func clone() -> ProfileService.GetExtendedProfile.RequestBuilder {
            return ProfileService.GetExtendedProfile.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetExtendedProfile.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetExtendedProfile.Request {
            var returnMe:ProfileService.GetExtendedProfile.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetExtendedProfile.Request) -> ProfileService.GetExtendedProfile.RequestBuilder {
            if other.hasProfileId {
                 profile_id = other.profile_id
            }
            if other.hasUserId {
                 user_id = other.user_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetExtendedProfile.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                profile_id = input.readString()

              case 18 :
                user_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "profile": return profile
                 case "address": return address
                 case "manager": return manager
                 case "team": return team
                 default: return nil
                 }
          }

          public private(set) var hasProfile:Bool = false
          public private(set) var profile:ProfileService.Containers.Profile = ProfileService.Containers.Profile()
          public private(set) var hasAddress:Bool = false
          public private(set) var address:OrganizationService.Containers.Address = OrganizationService.Containers.Address()
          public private(set) var hasManager:Bool = false
          public private(set) var manager:ProfileService.Containers.Profile = ProfileService.Containers.Profile()
          public private(set) var hasTeam:Bool = false
          public private(set) var team:OrganizationService.Containers.Team = OrganizationService.Containers.Team()
          public private(set) var notes:Array<NoteService.Containers.Note>  = Array<NoteService.Containers.Note>()
          public private(set) var tags:Array<ProfileService.Containers.Tag>  = Array<ProfileService.Containers.Tag>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfile {
              output.writeMessage(1, value:profile)
            }
            if hasAddress {
              output.writeMessage(2, value:address)
            }
            if hasManager {
              output.writeMessage(3, value:manager)
            }
            if hasTeam {
              output.writeMessage(4, value:team)
            }
            for oneElementnotes in notes {
                output.writeMessage(5, value:oneElementnotes)
            }
            for oneElementtags in tags {
                output.writeMessage(6, value:oneElementtags)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfile {
              size += WireFormat.computeMessageSize(1, value:profile)
            }
            if hasAddress {
              size += WireFormat.computeMessageSize(2, value:address)
            }
            if hasManager {
              size += WireFormat.computeMessageSize(3, value:manager)
            }
            if hasTeam {
              size += WireFormat.computeMessageSize(4, value:team)
            }
            for oneElementnotes in notes {
                size += WireFormat.computeMessageSize(5, value:oneElementnotes)
            }
            for oneElementtags in tags {
                size += WireFormat.computeMessageSize(6, value:oneElementtags)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetExtendedProfile.Response {
            return ProfileService.GetExtendedProfile.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile.Response {
            return ProfileService.GetExtendedProfile.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetExtendedProfile.Response {
            return ProfileService.GetExtendedProfile.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetExtendedProfile.Response {
            return ProfileService.GetExtendedProfile.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetExtendedProfile.Response {
            return ProfileService.GetExtendedProfile.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile.Response {
            return ProfileService.GetExtendedProfile.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            return ProfileService.GetExtendedProfile.Response.classBuilder() as ProfileService.GetExtendedProfile.ResponseBuilder
          }
          public func builder() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            return classBuilder() as ProfileService.GetExtendedProfile.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetExtendedProfile.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetExtendedProfile.Response.builder()
          }
          public func toBuilder() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            return ProfileService.GetExtendedProfile.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetExtendedProfile.Response) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            return ProfileService.GetExtendedProfile.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfile {
              output += "\(indent) profile {\n"
              profile.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasAddress {
              output += "\(indent) address {\n"
              address.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasManager {
              output += "\(indent) manager {\n"
              manager.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasTeam {
              output += "\(indent) team {\n"
              team.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            var notesElementIndex:Int = 0
            for oneElementnotes in notes {
                output += "\(indent) notes[\(notesElementIndex)] {\n"
                oneElementnotes.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                notesElementIndex++
            }
            var tagsElementIndex:Int = 0
            for oneElementtags in tags {
                output += "\(indent) tags[\(tagsElementIndex)] {\n"
                oneElementtags.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                tagsElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfile {
                    hashCode = (hashCode &* 31) &+ profile.hashValue
                  }
                  if hasAddress {
                    hashCode = (hashCode &* 31) &+ address.hashValue
                  }
                  if hasManager {
                    hashCode = (hashCode &* 31) &+ manager.hashValue
                  }
                  if hasTeam {
                    hashCode = (hashCode &* 31) &+ team.hashValue
                  }
                  for oneElementnotes in notes {
                      hashCode = (hashCode &* 31) &+ oneElementnotes.hashValue
                  }
                  for oneElementtags in tags {
                      hashCode = (hashCode &* 31) &+ oneElementtags.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetExtendedProfile.Response"
          }
          override public func className() -> String {
              return "ProfileService.GetExtendedProfile.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetExtendedProfile.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetExtendedProfile.Response

          required override public init () {
             builderResult = ProfileService.GetExtendedProfile.Response()
             super.init()
          }
          public var hasProfile:Bool {
               get {
                   return builderResult.hasProfile
               }
          }
          public var profile:ProfileService.Containers.Profile {
               get {
                   return builderResult.profile
               }
               set (value) {
                   builderResult.hasProfile = true
                   builderResult.profile = value
               }
          }
          public func setProfileBuilder(builderForValue:ProfileService.Containers.ProfileBuilder) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            profile = builderForValue.build()
            return self
          }
          public func mergeProfile(value:ProfileService.Containers.Profile) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            if (builderResult.hasProfile) {
              builderResult.profile = ProfileService.Containers.Profile.builderWithPrototype(builderResult.profile).mergeFrom(value).buildPartial()
            } else {
              builderResult.profile = value
            }
            builderResult.hasProfile = true
            return self
          }
          public func clearProfile() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            builderResult.hasProfile = false
            builderResult.profile = ProfileService.Containers.Profile()
            return self
          }
          public var hasAddress:Bool {
               get {
                   return builderResult.hasAddress
               }
          }
          public var address:OrganizationService.Containers.Address {
               get {
                   return builderResult.address
               }
               set (value) {
                   builderResult.hasAddress = true
                   builderResult.address = value
               }
          }
          public func setAddressBuilder(builderForValue:OrganizationService.Containers.AddressBuilder) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            address = builderForValue.build()
            return self
          }
          public func mergeAddress(value:OrganizationService.Containers.Address) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            if (builderResult.hasAddress) {
              builderResult.address = OrganizationService.Containers.Address.builderWithPrototype(builderResult.address).mergeFrom(value).buildPartial()
            } else {
              builderResult.address = value
            }
            builderResult.hasAddress = true
            return self
          }
          public func clearAddress() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            builderResult.hasAddress = false
            builderResult.address = OrganizationService.Containers.Address()
            return self
          }
          public var hasManager:Bool {
               get {
                   return builderResult.hasManager
               }
          }
          public var manager:ProfileService.Containers.Profile {
               get {
                   return builderResult.manager
               }
               set (value) {
                   builderResult.hasManager = true
                   builderResult.manager = value
               }
          }
          public func setManagerBuilder(builderForValue:ProfileService.Containers.ProfileBuilder) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            manager = builderForValue.build()
            return self
          }
          public func mergeManager(value:ProfileService.Containers.Profile) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            if (builderResult.hasManager) {
              builderResult.manager = ProfileService.Containers.Profile.builderWithPrototype(builderResult.manager).mergeFrom(value).buildPartial()
            } else {
              builderResult.manager = value
            }
            builderResult.hasManager = true
            return self
          }
          public func clearManager() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            builderResult.hasManager = false
            builderResult.manager = ProfileService.Containers.Profile()
            return self
          }
          public var hasTeam:Bool {
               get {
                   return builderResult.hasTeam
               }
          }
          public var team:OrganizationService.Containers.Team {
               get {
                   return builderResult.team
               }
               set (value) {
                   builderResult.hasTeam = true
                   builderResult.team = value
               }
          }
          public func setTeamBuilder(builderForValue:OrganizationService.Containers.TeamBuilder) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            team = builderForValue.build()
            return self
          }
          public func mergeTeam(value:OrganizationService.Containers.Team) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            if (builderResult.hasTeam) {
              builderResult.team = OrganizationService.Containers.Team.builderWithPrototype(builderResult.team).mergeFrom(value).buildPartial()
            } else {
              builderResult.team = value
            }
            builderResult.hasTeam = true
            return self
          }
          public func clearTeam() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            builderResult.hasTeam = false
            builderResult.team = OrganizationService.Containers.Team()
            return self
          }
          public var notes:Array<NoteService.Containers.Note> {
               get {
                   return builderResult.notes
               }
               set (value) {
                   builderResult.notes = value
               }
          }
          public func clearNotes() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            builderResult.notes.removeAll(keepCapacity: false)
            return self
          }
          public var tags:Array<ProfileService.Containers.Tag> {
               get {
                   return builderResult.tags
               }
               set (value) {
                   builderResult.tags = value
               }
          }
          public func clearTags() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            builderResult.tags.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            builderResult = ProfileService.GetExtendedProfile.Response()
            return self
          }
          public override func clone() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            return ProfileService.GetExtendedProfile.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetExtendedProfile.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetExtendedProfile.Response {
            var returnMe:ProfileService.GetExtendedProfile.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetExtendedProfile.Response) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            if (other.hasProfile) {
                mergeProfile(other.profile)
            }
            if (other.hasAddress) {
                mergeAddress(other.address)
            }
            if (other.hasManager) {
                mergeManager(other.manager)
            }
            if (other.hasTeam) {
                mergeTeam(other.team)
            }
            if !other.notes.isEmpty  {
               builderResult.notes += other.notes
            }
            if !other.tags.isEmpty  {
               builderResult.tags += other.tags
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetExtendedProfile.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:ProfileService.Containers.ProfileBuilder = ProfileService.Containers.Profile.builder()
                if hasProfile {
                  subBuilder.mergeFrom(profile)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                profile = subBuilder.buildPartial()

              case 18 :
                var subBuilder:OrganizationService.Containers.AddressBuilder = OrganizationService.Containers.Address.builder()
                if hasAddress {
                  subBuilder.mergeFrom(address)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                address = subBuilder.buildPartial()

              case 26 :
                var subBuilder:ProfileService.Containers.ProfileBuilder = ProfileService.Containers.Profile.builder()
                if hasManager {
                  subBuilder.mergeFrom(manager)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                manager = subBuilder.buildPartial()

              case 34 :
                var subBuilder:OrganizationService.Containers.TeamBuilder = OrganizationService.Containers.Team.builder()
                if hasTeam {
                  subBuilder.mergeFrom(team)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                team = subBuilder.buildPartial()

              case 42 :
                var subBuilder = NoteService.Containers.Note.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                notes += [subBuilder.buildPartial()]

              case 50 :
                var subBuilder = ProfileService.Containers.Tag.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                tags += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.GetExtendedProfile {
        return ProfileService.GetExtendedProfile.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile {
        return ProfileService.GetExtendedProfile.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetExtendedProfile {
        return ProfileService.GetExtendedProfile.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetExtendedProfile {
        return ProfileService.GetExtendedProfile.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetExtendedProfile {
        return ProfileService.GetExtendedProfile.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile {
        return ProfileService.GetExtendedProfile.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.GetExtendedProfileBuilder {
        return ProfileService.GetExtendedProfile.classBuilder() as ProfileService.GetExtendedProfileBuilder
      }
      public func builder() -> ProfileService.GetExtendedProfileBuilder {
        return classBuilder() as ProfileService.GetExtendedProfileBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.GetExtendedProfileBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.GetExtendedProfile.builder()
      }
      public func toBuilder() -> ProfileService.GetExtendedProfileBuilder {
        return ProfileService.GetExtendedProfile.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.GetExtendedProfile) -> ProfileService.GetExtendedProfileBuilder {
        return ProfileService.GetExtendedProfile.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.GetExtendedProfile"
      }
      override public func className() -> String {
          return "ProfileService.GetExtendedProfile"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.GetExtendedProfile.self
      }


      //Meta information declaration end

    }

    final public class GetExtendedProfileBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.GetExtendedProfile

      required override public init () {
         builderResult = ProfileService.GetExtendedProfile()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.GetExtendedProfileBuilder {
        builderResult = ProfileService.GetExtendedProfile()
        return self
      }
      public override func clone() -> ProfileService.GetExtendedProfileBuilder {
        return ProfileService.GetExtendedProfile.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.GetExtendedProfile {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.GetExtendedProfile {
        var returnMe:ProfileService.GetExtendedProfile = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.GetExtendedProfile) -> ProfileService.GetExtendedProfileBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetExtendedProfileBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfileBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class CreateTags : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "organization_id": return organization_id
                 default: return nil
                 }
          }

          public private(set) var hasOrganizationId:Bool = false
          public private(set) var organization_id:String = ""

          public private(set) var tags:Array<ProfileService.Containers.Tag>  = Array<ProfileService.Containers.Tag>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementtags in tags {
                output.writeMessage(1, value:oneElementtags)
            }
            if hasOrganizationId {
              output.writeString(2, value:organization_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementtags in tags {
                size += WireFormat.computeMessageSize(1, value:oneElementtags)
            }
            if hasOrganizationId {
              size += WireFormat.computeStringSize(2, value:organization_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.CreateTags.Request {
            return ProfileService.CreateTags.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.CreateTags.Request {
            return ProfileService.CreateTags.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.CreateTags.Request {
            return ProfileService.CreateTags.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.CreateTags.Request {
            return ProfileService.CreateTags.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.CreateTags.Request {
            return ProfileService.CreateTags.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateTags.Request {
            return ProfileService.CreateTags.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.CreateTags.RequestBuilder {
            return ProfileService.CreateTags.Request.classBuilder() as ProfileService.CreateTags.RequestBuilder
          }
          public func builder() -> ProfileService.CreateTags.RequestBuilder {
            return classBuilder() as ProfileService.CreateTags.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.CreateTags.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.CreateTags.Request.builder()
          }
          public func toBuilder() -> ProfileService.CreateTags.RequestBuilder {
            return ProfileService.CreateTags.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.CreateTags.Request) -> ProfileService.CreateTags.RequestBuilder {
            return ProfileService.CreateTags.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var tagsElementIndex:Int = 0
            for oneElementtags in tags {
                output += "\(indent) tags[\(tagsElementIndex)] {\n"
                oneElementtags.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                tagsElementIndex++
            }
            if hasOrganizationId {
              output += "\(indent) organization_id: \(organization_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementtags in tags {
                      hashCode = (hashCode &* 31) &+ oneElementtags.hashValue
                  }
                  if hasOrganizationId {
                     hashCode = (hashCode &* 31) &+ organization_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.CreateTags.Request"
          }
          override public func className() -> String {
              return "ProfileService.CreateTags.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.CreateTags.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.CreateTags.Request

          required override public init () {
             builderResult = ProfileService.CreateTags.Request()
             super.init()
          }
          public var tags:Array<ProfileService.Containers.Tag> {
               get {
                   return builderResult.tags
               }
               set (value) {
                   builderResult.tags = value
               }
          }
          public func clearTags() -> ProfileService.CreateTags.RequestBuilder {
            builderResult.tags.removeAll(keepCapacity: false)
            return self
          }
          public var hasOrganizationId:Bool {
               get {
                    return builderResult.hasOrganizationId
               }
          }
          public var organization_id:String {
               get {
                    return builderResult.organization_id
               }
               set (value) {
                   builderResult.hasOrganizationId = true
                   builderResult.organization_id = value
               }
          }
          public func clearOrganizationId() -> ProfileService.CreateTags.RequestBuilder{
               builderResult.hasOrganizationId = false
               builderResult.organization_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.CreateTags.RequestBuilder {
            builderResult = ProfileService.CreateTags.Request()
            return self
          }
          public override func clone() -> ProfileService.CreateTags.RequestBuilder {
            return ProfileService.CreateTags.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.CreateTags.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.CreateTags.Request {
            var returnMe:ProfileService.CreateTags.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.CreateTags.Request) -> ProfileService.CreateTags.RequestBuilder {
            if !other.tags.isEmpty  {
               builderResult.tags += other.tags
            }
            if other.hasOrganizationId {
                 organization_id = other.organization_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.CreateTags.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateTags.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = ProfileService.Containers.Tag.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                tags += [subBuilder.buildPartial()]

              case 18 :
                organization_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var tags:Array<ProfileService.Containers.Tag>  = Array<ProfileService.Containers.Tag>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementtags in tags {
                output.writeMessage(1, value:oneElementtags)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementtags in tags {
                size += WireFormat.computeMessageSize(1, value:oneElementtags)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.CreateTags.Response {
            return ProfileService.CreateTags.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.CreateTags.Response {
            return ProfileService.CreateTags.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.CreateTags.Response {
            return ProfileService.CreateTags.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.CreateTags.Response {
            return ProfileService.CreateTags.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.CreateTags.Response {
            return ProfileService.CreateTags.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateTags.Response {
            return ProfileService.CreateTags.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.CreateTags.ResponseBuilder {
            return ProfileService.CreateTags.Response.classBuilder() as ProfileService.CreateTags.ResponseBuilder
          }
          public func builder() -> ProfileService.CreateTags.ResponseBuilder {
            return classBuilder() as ProfileService.CreateTags.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.CreateTags.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.CreateTags.Response.builder()
          }
          public func toBuilder() -> ProfileService.CreateTags.ResponseBuilder {
            return ProfileService.CreateTags.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.CreateTags.Response) -> ProfileService.CreateTags.ResponseBuilder {
            return ProfileService.CreateTags.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var tagsElementIndex:Int = 0
            for oneElementtags in tags {
                output += "\(indent) tags[\(tagsElementIndex)] {\n"
                oneElementtags.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                tagsElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementtags in tags {
                      hashCode = (hashCode &* 31) &+ oneElementtags.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.CreateTags.Response"
          }
          override public func className() -> String {
              return "ProfileService.CreateTags.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.CreateTags.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.CreateTags.Response

          required override public init () {
             builderResult = ProfileService.CreateTags.Response()
             super.init()
          }
          public var tags:Array<ProfileService.Containers.Tag> {
               get {
                   return builderResult.tags
               }
               set (value) {
                   builderResult.tags = value
               }
          }
          public func clearTags() -> ProfileService.CreateTags.ResponseBuilder {
            builderResult.tags.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.CreateTags.ResponseBuilder {
            builderResult = ProfileService.CreateTags.Response()
            return self
          }
          public override func clone() -> ProfileService.CreateTags.ResponseBuilder {
            return ProfileService.CreateTags.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.CreateTags.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.CreateTags.Response {
            var returnMe:ProfileService.CreateTags.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.CreateTags.Response) -> ProfileService.CreateTags.ResponseBuilder {
            if !other.tags.isEmpty  {
               builderResult.tags += other.tags
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.CreateTags.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateTags.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = ProfileService.Containers.Tag.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                tags += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.CreateTags {
        return ProfileService.CreateTags.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.CreateTags {
        return ProfileService.CreateTags.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.CreateTags {
        return ProfileService.CreateTags.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.CreateTags {
        return ProfileService.CreateTags.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.CreateTags {
        return ProfileService.CreateTags.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateTags {
        return ProfileService.CreateTags.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.CreateTagsBuilder {
        return ProfileService.CreateTags.classBuilder() as ProfileService.CreateTagsBuilder
      }
      public func builder() -> ProfileService.CreateTagsBuilder {
        return classBuilder() as ProfileService.CreateTagsBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.CreateTagsBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.CreateTags.builder()
      }
      public func toBuilder() -> ProfileService.CreateTagsBuilder {
        return ProfileService.CreateTags.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.CreateTags) -> ProfileService.CreateTagsBuilder {
        return ProfileService.CreateTags.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.CreateTags"
      }
      override public func className() -> String {
          return "ProfileService.CreateTags"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.CreateTags.self
      }


      //Meta information declaration end

    }

    final public class CreateTagsBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.CreateTags

      required override public init () {
         builderResult = ProfileService.CreateTags()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.CreateTagsBuilder {
        builderResult = ProfileService.CreateTags()
        return self
      }
      public override func clone() -> ProfileService.CreateTagsBuilder {
        return ProfileService.CreateTags.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.CreateTags {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.CreateTags {
        var returnMe:ProfileService.CreateTags = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.CreateTags) -> ProfileService.CreateTagsBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.CreateTagsBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateTagsBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetTags : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {


          //OneOf declaration start

          public enum LookupKey {
            case LookupKeyOneOfNotSet

            public func checkOneOfIsSet() -> Bool {
                 switch self {
                 case .LookupKeyOneOfNotSet:
                      return false
                 default:
                      return true
                 }
            }
            case ProfileId(String)

            public static func getProfileId(value:LookupKey) ->String? {
                 switch value {
                 case .ProfileId(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
            case OrganizationId(String)

            public static func getOrganizationId(value:LookupKey) ->String? {
                 switch value {
                 case .OrganizationId(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
          }



          //OneOf declaration end

          private var storageLookupKey:ProfileService.GetTags.Request.LookupKey =  ProfileService.GetTags.Request.LookupKey.LookupKeyOneOfNotSet
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "profile_id": return profile_id
                 case "organization_id": return organization_id
                 default: return nil
                 }
          }

          public private(set) var hasProfileId:Bool {
                get {
                     if ProfileService.GetTags.Request.LookupKey.getProfileId(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var profile_id:String!{
               get {
                    return ProfileService.GetTags.Request.LookupKey.getProfileId(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = ProfileService.GetTags.Request.LookupKey.ProfileId(newvalue)
               }
          }
          public private(set) var hasOrganizationId:Bool {
                get {
                     if ProfileService.GetTags.Request.LookupKey.getOrganizationId(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var organization_id:String!{
               get {
                    return ProfileService.GetTags.Request.LookupKey.getOrganizationId(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = ProfileService.GetTags.Request.LookupKey.OrganizationId(newvalue)
               }
          }
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfileId {
              output.writeString(1, value:profile_id)
            }
            if hasOrganizationId {
              output.writeString(2, value:organization_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfileId {
              size += WireFormat.computeStringSize(1, value:profile_id)
            }
            if hasOrganizationId {
              size += WireFormat.computeStringSize(2, value:organization_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetTags.Request {
            return ProfileService.GetTags.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetTags.Request {
            return ProfileService.GetTags.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetTags.Request {
            return ProfileService.GetTags.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetTags.Request {
            return ProfileService.GetTags.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetTags.Request {
            return ProfileService.GetTags.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetTags.Request {
            return ProfileService.GetTags.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetTags.RequestBuilder {
            return ProfileService.GetTags.Request.classBuilder() as ProfileService.GetTags.RequestBuilder
          }
          public func builder() -> ProfileService.GetTags.RequestBuilder {
            return classBuilder() as ProfileService.GetTags.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetTags.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetTags.Request.builder()
          }
          public func toBuilder() -> ProfileService.GetTags.RequestBuilder {
            return ProfileService.GetTags.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetTags.Request) -> ProfileService.GetTags.RequestBuilder {
            return ProfileService.GetTags.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfileId {
              output += "\(indent) profile_id: \(profile_id) \n"
            }
            if hasOrganizationId {
              output += "\(indent) organization_id: \(organization_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfileId {
                     hashCode = (hashCode &* 31) &+ profile_id.hashValue
                  }
                  if hasOrganizationId {
                     hashCode = (hashCode &* 31) &+ organization_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetTags.Request"
          }
          override public func className() -> String {
              return "ProfileService.GetTags.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetTags.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetTags.Request

          required override public init () {
             builderResult = ProfileService.GetTags.Request()
             super.init()
          }
          public var hasProfileId:Bool {
               get {
                    return builderResult.hasProfileId
               }
          }
          public var profile_id:String {
               get {
                    return builderResult.profile_id
               }
               set (value) {
                   builderResult.hasProfileId = true
                   builderResult.profile_id = value
               }
          }
          public func clearProfileId() -> ProfileService.GetTags.RequestBuilder{
               builderResult.hasProfileId = false
               builderResult.profile_id = ""
               return self
          }
          public var hasOrganizationId:Bool {
               get {
                    return builderResult.hasOrganizationId
               }
          }
          public var organization_id:String {
               get {
                    return builderResult.organization_id
               }
               set (value) {
                   builderResult.hasOrganizationId = true
                   builderResult.organization_id = value
               }
          }
          public func clearOrganizationId() -> ProfileService.GetTags.RequestBuilder{
               builderResult.hasOrganizationId = false
               builderResult.organization_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetTags.RequestBuilder {
            builderResult = ProfileService.GetTags.Request()
            return self
          }
          public override func clone() -> ProfileService.GetTags.RequestBuilder {
            return ProfileService.GetTags.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetTags.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetTags.Request {
            var returnMe:ProfileService.GetTags.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetTags.Request) -> ProfileService.GetTags.RequestBuilder {
            if other.hasProfileId {
                 profile_id = other.profile_id
            }
            if other.hasOrganizationId {
                 organization_id = other.organization_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetTags.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetTags.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                profile_id = input.readString()

              case 18 :
                organization_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var tags:Array<ProfileService.Containers.Tag>  = Array<ProfileService.Containers.Tag>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementtags in tags {
                output.writeMessage(1, value:oneElementtags)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementtags in tags {
                size += WireFormat.computeMessageSize(1, value:oneElementtags)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetTags.Response {
            return ProfileService.GetTags.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetTags.Response {
            return ProfileService.GetTags.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetTags.Response {
            return ProfileService.GetTags.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetTags.Response {
            return ProfileService.GetTags.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetTags.Response {
            return ProfileService.GetTags.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetTags.Response {
            return ProfileService.GetTags.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetTags.ResponseBuilder {
            return ProfileService.GetTags.Response.classBuilder() as ProfileService.GetTags.ResponseBuilder
          }
          public func builder() -> ProfileService.GetTags.ResponseBuilder {
            return classBuilder() as ProfileService.GetTags.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetTags.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetTags.Response.builder()
          }
          public func toBuilder() -> ProfileService.GetTags.ResponseBuilder {
            return ProfileService.GetTags.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetTags.Response) -> ProfileService.GetTags.ResponseBuilder {
            return ProfileService.GetTags.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var tagsElementIndex:Int = 0
            for oneElementtags in tags {
                output += "\(indent) tags[\(tagsElementIndex)] {\n"
                oneElementtags.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                tagsElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementtags in tags {
                      hashCode = (hashCode &* 31) &+ oneElementtags.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetTags.Response"
          }
          override public func className() -> String {
              return "ProfileService.GetTags.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetTags.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetTags.Response

          required override public init () {
             builderResult = ProfileService.GetTags.Response()
             super.init()
          }
          public var tags:Array<ProfileService.Containers.Tag> {
               get {
                   return builderResult.tags
               }
               set (value) {
                   builderResult.tags = value
               }
          }
          public func clearTags() -> ProfileService.GetTags.ResponseBuilder {
            builderResult.tags.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetTags.ResponseBuilder {
            builderResult = ProfileService.GetTags.Response()
            return self
          }
          public override func clone() -> ProfileService.GetTags.ResponseBuilder {
            return ProfileService.GetTags.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetTags.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetTags.Response {
            var returnMe:ProfileService.GetTags.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetTags.Response) -> ProfileService.GetTags.ResponseBuilder {
            if !other.tags.isEmpty  {
               builderResult.tags += other.tags
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetTags.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetTags.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = ProfileService.Containers.Tag.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                tags += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.GetTags {
        return ProfileService.GetTags.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetTags {
        return ProfileService.GetTags.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetTags {
        return ProfileService.GetTags.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetTags {
        return ProfileService.GetTags.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetTags {
        return ProfileService.GetTags.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetTags {
        return ProfileService.GetTags.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.GetTagsBuilder {
        return ProfileService.GetTags.classBuilder() as ProfileService.GetTagsBuilder
      }
      public func builder() -> ProfileService.GetTagsBuilder {
        return classBuilder() as ProfileService.GetTagsBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.GetTagsBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.GetTags.builder()
      }
      public func toBuilder() -> ProfileService.GetTagsBuilder {
        return ProfileService.GetTags.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.GetTags) -> ProfileService.GetTagsBuilder {
        return ProfileService.GetTags.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.GetTags"
      }
      override public func className() -> String {
          return "ProfileService.GetTags"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.GetTags.self
      }


      //Meta information declaration end

    }

    final public class GetTagsBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.GetTags

      required override public init () {
         builderResult = ProfileService.GetTags()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.GetTagsBuilder {
        builderResult = ProfileService.GetTags()
        return self
      }
      public override func clone() -> ProfileService.GetTagsBuilder {
        return ProfileService.GetTags.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.GetTags {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.GetTags {
        var returnMe:ProfileService.GetTags = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.GetTags) -> ProfileService.GetTagsBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetTagsBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetTagsBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class AddTags : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "profile_id": return profile_id
                 default: return nil
                 }
          }

          public private(set) var hasProfileId:Bool = false
          public private(set) var profile_id:String = ""

          public private(set) var tags:Array<ProfileService.Containers.Tag>  = Array<ProfileService.Containers.Tag>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfileId {
              output.writeString(1, value:profile_id)
            }
            for oneElementtags in tags {
                output.writeMessage(2, value:oneElementtags)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfileId {
              size += WireFormat.computeStringSize(1, value:profile_id)
            }
            for oneElementtags in tags {
                size += WireFormat.computeMessageSize(2, value:oneElementtags)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.AddTags.Request {
            return ProfileService.AddTags.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.AddTags.Request {
            return ProfileService.AddTags.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.AddTags.Request {
            return ProfileService.AddTags.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.AddTags.Request {
            return ProfileService.AddTags.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.AddTags.Request {
            return ProfileService.AddTags.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.AddTags.Request {
            return ProfileService.AddTags.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.AddTags.RequestBuilder {
            return ProfileService.AddTags.Request.classBuilder() as ProfileService.AddTags.RequestBuilder
          }
          public func builder() -> ProfileService.AddTags.RequestBuilder {
            return classBuilder() as ProfileService.AddTags.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.AddTags.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.AddTags.Request.builder()
          }
          public func toBuilder() -> ProfileService.AddTags.RequestBuilder {
            return ProfileService.AddTags.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.AddTags.Request) -> ProfileService.AddTags.RequestBuilder {
            return ProfileService.AddTags.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfileId {
              output += "\(indent) profile_id: \(profile_id) \n"
            }
            var tagsElementIndex:Int = 0
            for oneElementtags in tags {
                output += "\(indent) tags[\(tagsElementIndex)] {\n"
                oneElementtags.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                tagsElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfileId {
                     hashCode = (hashCode &* 31) &+ profile_id.hashValue
                  }
                  for oneElementtags in tags {
                      hashCode = (hashCode &* 31) &+ oneElementtags.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.AddTags.Request"
          }
          override public func className() -> String {
              return "ProfileService.AddTags.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.AddTags.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.AddTags.Request

          required override public init () {
             builderResult = ProfileService.AddTags.Request()
             super.init()
          }
          public var hasProfileId:Bool {
               get {
                    return builderResult.hasProfileId
               }
          }
          public var profile_id:String {
               get {
                    return builderResult.profile_id
               }
               set (value) {
                   builderResult.hasProfileId = true
                   builderResult.profile_id = value
               }
          }
          public func clearProfileId() -> ProfileService.AddTags.RequestBuilder{
               builderResult.hasProfileId = false
               builderResult.profile_id = ""
               return self
          }
          public var tags:Array<ProfileService.Containers.Tag> {
               get {
                   return builderResult.tags
               }
               set (value) {
                   builderResult.tags = value
               }
          }
          public func clearTags() -> ProfileService.AddTags.RequestBuilder {
            builderResult.tags.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.AddTags.RequestBuilder {
            builderResult = ProfileService.AddTags.Request()
            return self
          }
          public override func clone() -> ProfileService.AddTags.RequestBuilder {
            return ProfileService.AddTags.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.AddTags.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.AddTags.Request {
            var returnMe:ProfileService.AddTags.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.AddTags.Request) -> ProfileService.AddTags.RequestBuilder {
            if other.hasProfileId {
                 profile_id = other.profile_id
            }
            if !other.tags.isEmpty  {
               builderResult.tags += other.tags
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.AddTags.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.AddTags.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                profile_id = input.readString()

              case 18 :
                var subBuilder = ProfileService.Containers.Tag.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                tags += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.AddTags.Response {
            return ProfileService.AddTags.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.AddTags.Response {
            return ProfileService.AddTags.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.AddTags.Response {
            return ProfileService.AddTags.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.AddTags.Response {
            return ProfileService.AddTags.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.AddTags.Response {
            return ProfileService.AddTags.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.AddTags.Response {
            return ProfileService.AddTags.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.AddTags.ResponseBuilder {
            return ProfileService.AddTags.Response.classBuilder() as ProfileService.AddTags.ResponseBuilder
          }
          public func builder() -> ProfileService.AddTags.ResponseBuilder {
            return classBuilder() as ProfileService.AddTags.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.AddTags.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.AddTags.Response.builder()
          }
          public func toBuilder() -> ProfileService.AddTags.ResponseBuilder {
            return ProfileService.AddTags.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.AddTags.Response) -> ProfileService.AddTags.ResponseBuilder {
            return ProfileService.AddTags.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.AddTags.Response"
          }
          override public func className() -> String {
              return "ProfileService.AddTags.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.AddTags.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.AddTags.Response

          required override public init () {
             builderResult = ProfileService.AddTags.Response()
             super.init()
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.AddTags.ResponseBuilder {
            builderResult = ProfileService.AddTags.Response()
            return self
          }
          public override func clone() -> ProfileService.AddTags.ResponseBuilder {
            return ProfileService.AddTags.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.AddTags.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.AddTags.Response {
            var returnMe:ProfileService.AddTags.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.AddTags.Response) -> ProfileService.AddTags.ResponseBuilder {
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.AddTags.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.AddTags.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.AddTags {
        return ProfileService.AddTags.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.AddTags {
        return ProfileService.AddTags.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.AddTags {
        return ProfileService.AddTags.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.AddTags {
        return ProfileService.AddTags.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.AddTags {
        return ProfileService.AddTags.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.AddTags {
        return ProfileService.AddTags.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.AddTagsBuilder {
        return ProfileService.AddTags.classBuilder() as ProfileService.AddTagsBuilder
      }
      public func builder() -> ProfileService.AddTagsBuilder {
        return classBuilder() as ProfileService.AddTagsBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.AddTagsBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.AddTags.builder()
      }
      public func toBuilder() -> ProfileService.AddTagsBuilder {
        return ProfileService.AddTags.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.AddTags) -> ProfileService.AddTagsBuilder {
        return ProfileService.AddTags.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.AddTags"
      }
      override public func className() -> String {
          return "ProfileService.AddTags"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.AddTags.self
      }


      //Meta information declaration end

    }

    final public class AddTagsBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.AddTags

      required override public init () {
         builderResult = ProfileService.AddTags()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.AddTagsBuilder {
        builderResult = ProfileService.AddTags()
        return self
      }
      public override func clone() -> ProfileService.AddTagsBuilder {
        return ProfileService.AddTags.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.AddTags {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.AddTags {
        var returnMe:ProfileService.AddTags = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.AddTags) -> ProfileService.AddTagsBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.AddTagsBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.AddTagsBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetProfiles : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "team_id": return team_id
                 case "organization_id": return organization_id
                 case "tag_id": return tag_id
                 case "address_id": return address_id
                 default: return nil
                 }
          }

          public private(set) var hasTeamId:Bool = false
          public private(set) var team_id:String = ""

          public private(set) var hasOrganizationId:Bool = false
          public private(set) var organization_id:String = ""

          public private(set) var hasTagId:Bool = false
          public private(set) var tag_id:String = ""

          public private(set) var hasAddressId:Bool = false
          public private(set) var address_id:String = ""

          public private(set) var ids:Array<String> = Array<String>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasTeamId {
              output.writeString(1, value:team_id)
            }
            if hasOrganizationId {
              output.writeString(2, value:organization_id)
            }
            if hasTagId {
              output.writeString(3, value:tag_id)
            }
            if hasAddressId {
              output.writeString(4, value:address_id)
            }
            if !ids.isEmpty {
              for oneValueids in ids {
                output.writeString(5, value:oneValueids)
              }
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasTeamId {
              size += WireFormat.computeStringSize(1, value:team_id)
            }
            if hasOrganizationId {
              size += WireFormat.computeStringSize(2, value:organization_id)
            }
            if hasTagId {
              size += WireFormat.computeStringSize(3, value:tag_id)
            }
            if hasAddressId {
              size += WireFormat.computeStringSize(4, value:address_id)
            }
            var dataSizeIds:Int32 = 0
            for oneValueids in ids {
                dataSizeIds += WireFormat.computeStringSizeNoTag(oneValueids)
            }
            size += dataSizeIds
            size += 1 * Int32(ids.count)
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetProfiles.Request {
            return ProfileService.GetProfiles.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfiles.Request {
            return ProfileService.GetProfiles.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetProfiles.Request {
            return ProfileService.GetProfiles.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetProfiles.Request {
            return ProfileService.GetProfiles.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetProfiles.Request {
            return ProfileService.GetProfiles.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfiles.Request {
            return ProfileService.GetProfiles.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetProfiles.RequestBuilder {
            return ProfileService.GetProfiles.Request.classBuilder() as ProfileService.GetProfiles.RequestBuilder
          }
          public func builder() -> ProfileService.GetProfiles.RequestBuilder {
            return classBuilder() as ProfileService.GetProfiles.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetProfiles.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetProfiles.Request.builder()
          }
          public func toBuilder() -> ProfileService.GetProfiles.RequestBuilder {
            return ProfileService.GetProfiles.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetProfiles.Request) -> ProfileService.GetProfiles.RequestBuilder {
            return ProfileService.GetProfiles.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasTeamId {
              output += "\(indent) team_id: \(team_id) \n"
            }
            if hasOrganizationId {
              output += "\(indent) organization_id: \(organization_id) \n"
            }
            if hasTagId {
              output += "\(indent) tag_id: \(tag_id) \n"
            }
            if hasAddressId {
              output += "\(indent) address_id: \(address_id) \n"
            }
            var idsElementIndex:Int = 0
            for oneValueids in ids  {
                output += "\(indent) ids[\(idsElementIndex)]: \(oneValueids)\n"
                idsElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasTeamId {
                     hashCode = (hashCode &* 31) &+ team_id.hashValue
                  }
                  if hasOrganizationId {
                     hashCode = (hashCode &* 31) &+ organization_id.hashValue
                  }
                  if hasTagId {
                     hashCode = (hashCode &* 31) &+ tag_id.hashValue
                  }
                  if hasAddressId {
                     hashCode = (hashCode &* 31) &+ address_id.hashValue
                  }
                  for oneValueids in ids {
                      hashCode = (hashCode &* 31) &+ oneValueids.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetProfiles.Request"
          }
          override public func className() -> String {
              return "ProfileService.GetProfiles.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetProfiles.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetProfiles.Request

          required override public init () {
             builderResult = ProfileService.GetProfiles.Request()
             super.init()
          }
          public var hasTeamId:Bool {
               get {
                    return builderResult.hasTeamId
               }
          }
          public var team_id:String {
               get {
                    return builderResult.team_id
               }
               set (value) {
                   builderResult.hasTeamId = true
                   builderResult.team_id = value
               }
          }
          public func clearTeamId() -> ProfileService.GetProfiles.RequestBuilder{
               builderResult.hasTeamId = false
               builderResult.team_id = ""
               return self
          }
          public var hasOrganizationId:Bool {
               get {
                    return builderResult.hasOrganizationId
               }
          }
          public var organization_id:String {
               get {
                    return builderResult.organization_id
               }
               set (value) {
                   builderResult.hasOrganizationId = true
                   builderResult.organization_id = value
               }
          }
          public func clearOrganizationId() -> ProfileService.GetProfiles.RequestBuilder{
               builderResult.hasOrganizationId = false
               builderResult.organization_id = ""
               return self
          }
          public var hasTagId:Bool {
               get {
                    return builderResult.hasTagId
               }
          }
          public var tag_id:String {
               get {
                    return builderResult.tag_id
               }
               set (value) {
                   builderResult.hasTagId = true
                   builderResult.tag_id = value
               }
          }
          public func clearTagId() -> ProfileService.GetProfiles.RequestBuilder{
               builderResult.hasTagId = false
               builderResult.tag_id = ""
               return self
          }
          public var hasAddressId:Bool {
               get {
                    return builderResult.hasAddressId
               }
          }
          public var address_id:String {
               get {
                    return builderResult.address_id
               }
               set (value) {
                   builderResult.hasAddressId = true
                   builderResult.address_id = value
               }
          }
          public func clearAddressId() -> ProfileService.GetProfiles.RequestBuilder{
               builderResult.hasAddressId = false
               builderResult.address_id = ""
               return self
          }
          public var ids:Array<String> {
               get {
                   return builderResult.ids
               }
               set (array) {
                   builderResult.ids = array
               }
          }
          public func clearIds() -> ProfileService.GetProfiles.RequestBuilder {
             builderResult.ids.removeAll(keepCapacity: false)
             return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetProfiles.RequestBuilder {
            builderResult = ProfileService.GetProfiles.Request()
            return self
          }
          public override func clone() -> ProfileService.GetProfiles.RequestBuilder {
            return ProfileService.GetProfiles.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetProfiles.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetProfiles.Request {
            var returnMe:ProfileService.GetProfiles.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetProfiles.Request) -> ProfileService.GetProfiles.RequestBuilder {
            if other.hasTeamId {
                 team_id = other.team_id
            }
            if other.hasOrganizationId {
                 organization_id = other.organization_id
            }
            if other.hasTagId {
                 tag_id = other.tag_id
            }
            if other.hasAddressId {
                 address_id = other.address_id
            }
            if !other.ids.isEmpty {
                builderResult.ids += other.ids
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetProfiles.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfiles.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                team_id = input.readString()

              case 18 :
                organization_id = input.readString()

              case 26 :
                tag_id = input.readString()

              case 34 :
                address_id = input.readString()

              case 42 :
                ids += [input.readString()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var profiles:Array<ProfileService.Containers.Profile>  = Array<ProfileService.Containers.Profile>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementprofiles in profiles {
                output.writeMessage(1, value:oneElementprofiles)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementprofiles in profiles {
                size += WireFormat.computeMessageSize(1, value:oneElementprofiles)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetProfiles.Response {
            return ProfileService.GetProfiles.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfiles.Response {
            return ProfileService.GetProfiles.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetProfiles.Response {
            return ProfileService.GetProfiles.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetProfiles.Response {
            return ProfileService.GetProfiles.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetProfiles.Response {
            return ProfileService.GetProfiles.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfiles.Response {
            return ProfileService.GetProfiles.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetProfiles.ResponseBuilder {
            return ProfileService.GetProfiles.Response.classBuilder() as ProfileService.GetProfiles.ResponseBuilder
          }
          public func builder() -> ProfileService.GetProfiles.ResponseBuilder {
            return classBuilder() as ProfileService.GetProfiles.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetProfiles.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetProfiles.Response.builder()
          }
          public func toBuilder() -> ProfileService.GetProfiles.ResponseBuilder {
            return ProfileService.GetProfiles.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetProfiles.Response) -> ProfileService.GetProfiles.ResponseBuilder {
            return ProfileService.GetProfiles.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var profilesElementIndex:Int = 0
            for oneElementprofiles in profiles {
                output += "\(indent) profiles[\(profilesElementIndex)] {\n"
                oneElementprofiles.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                profilesElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementprofiles in profiles {
                      hashCode = (hashCode &* 31) &+ oneElementprofiles.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetProfiles.Response"
          }
          override public func className() -> String {
              return "ProfileService.GetProfiles.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetProfiles.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetProfiles.Response

          required override public init () {
             builderResult = ProfileService.GetProfiles.Response()
             super.init()
          }
          public var profiles:Array<ProfileService.Containers.Profile> {
               get {
                   return builderResult.profiles
               }
               set (value) {
                   builderResult.profiles = value
               }
          }
          public func clearProfiles() -> ProfileService.GetProfiles.ResponseBuilder {
            builderResult.profiles.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetProfiles.ResponseBuilder {
            builderResult = ProfileService.GetProfiles.Response()
            return self
          }
          public override func clone() -> ProfileService.GetProfiles.ResponseBuilder {
            return ProfileService.GetProfiles.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetProfiles.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetProfiles.Response {
            var returnMe:ProfileService.GetProfiles.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetProfiles.Response) -> ProfileService.GetProfiles.ResponseBuilder {
            if !other.profiles.isEmpty  {
               builderResult.profiles += other.profiles
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetProfiles.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfiles.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = ProfileService.Containers.Profile.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                profiles += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.GetProfiles {
        return ProfileService.GetProfiles.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfiles {
        return ProfileService.GetProfiles.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetProfiles {
        return ProfileService.GetProfiles.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetProfiles {
        return ProfileService.GetProfiles.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetProfiles {
        return ProfileService.GetProfiles.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfiles {
        return ProfileService.GetProfiles.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.GetProfilesBuilder {
        return ProfileService.GetProfiles.classBuilder() as ProfileService.GetProfilesBuilder
      }
      public func builder() -> ProfileService.GetProfilesBuilder {
        return classBuilder() as ProfileService.GetProfilesBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.GetProfilesBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.GetProfiles.builder()
      }
      public func toBuilder() -> ProfileService.GetProfilesBuilder {
        return ProfileService.GetProfiles.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.GetProfiles) -> ProfileService.GetProfilesBuilder {
        return ProfileService.GetProfiles.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.GetProfiles"
      }
      override public func className() -> String {
          return "ProfileService.GetProfiles"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.GetProfiles.self
      }


      //Meta information declaration end

    }

    final public class GetProfilesBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.GetProfiles

      required override public init () {
         builderResult = ProfileService.GetProfiles()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.GetProfilesBuilder {
        builderResult = ProfileService.GetProfiles()
        return self
      }
      public override func clone() -> ProfileService.GetProfilesBuilder {
        return ProfileService.GetProfiles.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.GetProfiles {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.GetProfiles {
        var returnMe:ProfileService.GetProfiles = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.GetProfiles) -> ProfileService.GetProfilesBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetProfilesBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfilesBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetDirectReports : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {


          //OneOf declaration start

          public enum LookupKey {
            case LookupKeyOneOfNotSet

            public func checkOneOfIsSet() -> Bool {
                 switch self {
                 case .LookupKeyOneOfNotSet:
                      return false
                 default:
                      return true
                 }
            }
            case ProfileId(String)

            public static func getProfileId(value:LookupKey) ->String? {
                 switch value {
                 case .ProfileId(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
            case UserId(String)

            public static func getUserId(value:LookupKey) ->String? {
                 switch value {
                 case .UserId(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
          }



          //OneOf declaration end

          private var storageLookupKey:ProfileService.GetDirectReports.Request.LookupKey =  ProfileService.GetDirectReports.Request.LookupKey.LookupKeyOneOfNotSet
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "profile_id": return profile_id
                 case "user_id": return user_id
                 default: return nil
                 }
          }

          public private(set) var hasProfileId:Bool {
                get {
                     if ProfileService.GetDirectReports.Request.LookupKey.getProfileId(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var profile_id:String!{
               get {
                    return ProfileService.GetDirectReports.Request.LookupKey.getProfileId(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = ProfileService.GetDirectReports.Request.LookupKey.ProfileId(newvalue)
               }
          }
          public private(set) var hasUserId:Bool {
                get {
                     if ProfileService.GetDirectReports.Request.LookupKey.getUserId(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var user_id:String!{
               get {
                    return ProfileService.GetDirectReports.Request.LookupKey.getUserId(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = ProfileService.GetDirectReports.Request.LookupKey.UserId(newvalue)
               }
          }
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfileId {
              output.writeString(1, value:profile_id)
            }
            if hasUserId {
              output.writeString(2, value:user_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfileId {
              size += WireFormat.computeStringSize(1, value:profile_id)
            }
            if hasUserId {
              size += WireFormat.computeStringSize(2, value:user_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetDirectReports.Request {
            return ProfileService.GetDirectReports.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetDirectReports.Request {
            return ProfileService.GetDirectReports.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetDirectReports.Request {
            return ProfileService.GetDirectReports.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetDirectReports.Request {
            return ProfileService.GetDirectReports.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetDirectReports.Request {
            return ProfileService.GetDirectReports.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetDirectReports.Request {
            return ProfileService.GetDirectReports.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetDirectReports.RequestBuilder {
            return ProfileService.GetDirectReports.Request.classBuilder() as ProfileService.GetDirectReports.RequestBuilder
          }
          public func builder() -> ProfileService.GetDirectReports.RequestBuilder {
            return classBuilder() as ProfileService.GetDirectReports.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetDirectReports.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetDirectReports.Request.builder()
          }
          public func toBuilder() -> ProfileService.GetDirectReports.RequestBuilder {
            return ProfileService.GetDirectReports.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetDirectReports.Request) -> ProfileService.GetDirectReports.RequestBuilder {
            return ProfileService.GetDirectReports.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfileId {
              output += "\(indent) profile_id: \(profile_id) \n"
            }
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfileId {
                     hashCode = (hashCode &* 31) &+ profile_id.hashValue
                  }
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetDirectReports.Request"
          }
          override public func className() -> String {
              return "ProfileService.GetDirectReports.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetDirectReports.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetDirectReports.Request

          required override public init () {
             builderResult = ProfileService.GetDirectReports.Request()
             super.init()
          }
          public var hasProfileId:Bool {
               get {
                    return builderResult.hasProfileId
               }
          }
          public var profile_id:String {
               get {
                    return builderResult.profile_id
               }
               set (value) {
                   builderResult.hasProfileId = true
                   builderResult.profile_id = value
               }
          }
          public func clearProfileId() -> ProfileService.GetDirectReports.RequestBuilder{
               builderResult.hasProfileId = false
               builderResult.profile_id = ""
               return self
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> ProfileService.GetDirectReports.RequestBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetDirectReports.RequestBuilder {
            builderResult = ProfileService.GetDirectReports.Request()
            return self
          }
          public override func clone() -> ProfileService.GetDirectReports.RequestBuilder {
            return ProfileService.GetDirectReports.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetDirectReports.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetDirectReports.Request {
            var returnMe:ProfileService.GetDirectReports.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetDirectReports.Request) -> ProfileService.GetDirectReports.RequestBuilder {
            if other.hasProfileId {
                 profile_id = other.profile_id
            }
            if other.hasUserId {
                 user_id = other.user_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetDirectReports.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetDirectReports.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                profile_id = input.readString()

              case 18 :
                user_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var profiles:Array<ProfileService.Containers.Profile>  = Array<ProfileService.Containers.Profile>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementprofiles in profiles {
                output.writeMessage(1, value:oneElementprofiles)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementprofiles in profiles {
                size += WireFormat.computeMessageSize(1, value:oneElementprofiles)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetDirectReports.Response {
            return ProfileService.GetDirectReports.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetDirectReports.Response {
            return ProfileService.GetDirectReports.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetDirectReports.Response {
            return ProfileService.GetDirectReports.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetDirectReports.Response {
            return ProfileService.GetDirectReports.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetDirectReports.Response {
            return ProfileService.GetDirectReports.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetDirectReports.Response {
            return ProfileService.GetDirectReports.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetDirectReports.ResponseBuilder {
            return ProfileService.GetDirectReports.Response.classBuilder() as ProfileService.GetDirectReports.ResponseBuilder
          }
          public func builder() -> ProfileService.GetDirectReports.ResponseBuilder {
            return classBuilder() as ProfileService.GetDirectReports.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetDirectReports.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetDirectReports.Response.builder()
          }
          public func toBuilder() -> ProfileService.GetDirectReports.ResponseBuilder {
            return ProfileService.GetDirectReports.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetDirectReports.Response) -> ProfileService.GetDirectReports.ResponseBuilder {
            return ProfileService.GetDirectReports.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var profilesElementIndex:Int = 0
            for oneElementprofiles in profiles {
                output += "\(indent) profiles[\(profilesElementIndex)] {\n"
                oneElementprofiles.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                profilesElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementprofiles in profiles {
                      hashCode = (hashCode &* 31) &+ oneElementprofiles.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetDirectReports.Response"
          }
          override public func className() -> String {
              return "ProfileService.GetDirectReports.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetDirectReports.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetDirectReports.Response

          required override public init () {
             builderResult = ProfileService.GetDirectReports.Response()
             super.init()
          }
          public var profiles:Array<ProfileService.Containers.Profile> {
               get {
                   return builderResult.profiles
               }
               set (value) {
                   builderResult.profiles = value
               }
          }
          public func clearProfiles() -> ProfileService.GetDirectReports.ResponseBuilder {
            builderResult.profiles.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetDirectReports.ResponseBuilder {
            builderResult = ProfileService.GetDirectReports.Response()
            return self
          }
          public override func clone() -> ProfileService.GetDirectReports.ResponseBuilder {
            return ProfileService.GetDirectReports.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetDirectReports.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetDirectReports.Response {
            var returnMe:ProfileService.GetDirectReports.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetDirectReports.Response) -> ProfileService.GetDirectReports.ResponseBuilder {
            if !other.profiles.isEmpty  {
               builderResult.profiles += other.profiles
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetDirectReports.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetDirectReports.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = ProfileService.Containers.Profile.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                profiles += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.GetDirectReports {
        return ProfileService.GetDirectReports.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetDirectReports {
        return ProfileService.GetDirectReports.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetDirectReports {
        return ProfileService.GetDirectReports.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetDirectReports {
        return ProfileService.GetDirectReports.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetDirectReports {
        return ProfileService.GetDirectReports.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetDirectReports {
        return ProfileService.GetDirectReports.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.GetDirectReportsBuilder {
        return ProfileService.GetDirectReports.classBuilder() as ProfileService.GetDirectReportsBuilder
      }
      public func builder() -> ProfileService.GetDirectReportsBuilder {
        return classBuilder() as ProfileService.GetDirectReportsBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.GetDirectReportsBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.GetDirectReports.builder()
      }
      public func toBuilder() -> ProfileService.GetDirectReportsBuilder {
        return ProfileService.GetDirectReports.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.GetDirectReports) -> ProfileService.GetDirectReportsBuilder {
        return ProfileService.GetDirectReports.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.GetDirectReports"
      }
      override public func className() -> String {
          return "ProfileService.GetDirectReports"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.GetDirectReports.self
      }


      //Meta information declaration end

    }

    final public class GetDirectReportsBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.GetDirectReports

      required override public init () {
         builderResult = ProfileService.GetDirectReports()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.GetDirectReportsBuilder {
        builderResult = ProfileService.GetDirectReports()
        return self
      }
      public override func clone() -> ProfileService.GetDirectReportsBuilder {
        return ProfileService.GetDirectReports.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.GetDirectReports {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.GetDirectReports {
        var returnMe:ProfileService.GetDirectReports = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.GetDirectReports) -> ProfileService.GetDirectReportsBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetDirectReportsBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetDirectReportsBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetPeers : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "profile_id": return profile_id
                 default: return nil
                 }
          }

          public private(set) var hasProfileId:Bool = false
          public private(set) var profile_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfileId {
              output.writeString(1, value:profile_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfileId {
              size += WireFormat.computeStringSize(1, value:profile_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetPeers.Request {
            return ProfileService.GetPeers.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetPeers.Request {
            return ProfileService.GetPeers.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetPeers.Request {
            return ProfileService.GetPeers.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetPeers.Request {
            return ProfileService.GetPeers.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetPeers.Request {
            return ProfileService.GetPeers.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetPeers.Request {
            return ProfileService.GetPeers.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetPeers.RequestBuilder {
            return ProfileService.GetPeers.Request.classBuilder() as ProfileService.GetPeers.RequestBuilder
          }
          public func builder() -> ProfileService.GetPeers.RequestBuilder {
            return classBuilder() as ProfileService.GetPeers.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetPeers.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetPeers.Request.builder()
          }
          public func toBuilder() -> ProfileService.GetPeers.RequestBuilder {
            return ProfileService.GetPeers.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetPeers.Request) -> ProfileService.GetPeers.RequestBuilder {
            return ProfileService.GetPeers.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfileId {
              output += "\(indent) profile_id: \(profile_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfileId {
                     hashCode = (hashCode &* 31) &+ profile_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetPeers.Request"
          }
          override public func className() -> String {
              return "ProfileService.GetPeers.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetPeers.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetPeers.Request

          required override public init () {
             builderResult = ProfileService.GetPeers.Request()
             super.init()
          }
          public var hasProfileId:Bool {
               get {
                    return builderResult.hasProfileId
               }
          }
          public var profile_id:String {
               get {
                    return builderResult.profile_id
               }
               set (value) {
                   builderResult.hasProfileId = true
                   builderResult.profile_id = value
               }
          }
          public func clearProfileId() -> ProfileService.GetPeers.RequestBuilder{
               builderResult.hasProfileId = false
               builderResult.profile_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetPeers.RequestBuilder {
            builderResult = ProfileService.GetPeers.Request()
            return self
          }
          public override func clone() -> ProfileService.GetPeers.RequestBuilder {
            return ProfileService.GetPeers.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetPeers.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetPeers.Request {
            var returnMe:ProfileService.GetPeers.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetPeers.Request) -> ProfileService.GetPeers.RequestBuilder {
            if other.hasProfileId {
                 profile_id = other.profile_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetPeers.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetPeers.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                profile_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var profiles:Array<ProfileService.Containers.Profile>  = Array<ProfileService.Containers.Profile>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementprofiles in profiles {
                output.writeMessage(2, value:oneElementprofiles)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementprofiles in profiles {
                size += WireFormat.computeMessageSize(2, value:oneElementprofiles)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetPeers.Response {
            return ProfileService.GetPeers.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetPeers.Response {
            return ProfileService.GetPeers.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetPeers.Response {
            return ProfileService.GetPeers.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetPeers.Response {
            return ProfileService.GetPeers.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetPeers.Response {
            return ProfileService.GetPeers.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetPeers.Response {
            return ProfileService.GetPeers.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetPeers.ResponseBuilder {
            return ProfileService.GetPeers.Response.classBuilder() as ProfileService.GetPeers.ResponseBuilder
          }
          public func builder() -> ProfileService.GetPeers.ResponseBuilder {
            return classBuilder() as ProfileService.GetPeers.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetPeers.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetPeers.Response.builder()
          }
          public func toBuilder() -> ProfileService.GetPeers.ResponseBuilder {
            return ProfileService.GetPeers.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetPeers.Response) -> ProfileService.GetPeers.ResponseBuilder {
            return ProfileService.GetPeers.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var profilesElementIndex:Int = 0
            for oneElementprofiles in profiles {
                output += "\(indent) profiles[\(profilesElementIndex)] {\n"
                oneElementprofiles.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                profilesElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementprofiles in profiles {
                      hashCode = (hashCode &* 31) &+ oneElementprofiles.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetPeers.Response"
          }
          override public func className() -> String {
              return "ProfileService.GetPeers.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetPeers.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetPeers.Response

          required override public init () {
             builderResult = ProfileService.GetPeers.Response()
             super.init()
          }
          public var profiles:Array<ProfileService.Containers.Profile> {
               get {
                   return builderResult.profiles
               }
               set (value) {
                   builderResult.profiles = value
               }
          }
          public func clearProfiles() -> ProfileService.GetPeers.ResponseBuilder {
            builderResult.profiles.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetPeers.ResponseBuilder {
            builderResult = ProfileService.GetPeers.Response()
            return self
          }
          public override func clone() -> ProfileService.GetPeers.ResponseBuilder {
            return ProfileService.GetPeers.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetPeers.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetPeers.Response {
            var returnMe:ProfileService.GetPeers.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetPeers.Response) -> ProfileService.GetPeers.ResponseBuilder {
            if !other.profiles.isEmpty  {
               builderResult.profiles += other.profiles
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetPeers.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetPeers.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 18 :
                var subBuilder = ProfileService.Containers.Profile.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                profiles += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.GetPeers {
        return ProfileService.GetPeers.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetPeers {
        return ProfileService.GetPeers.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetPeers {
        return ProfileService.GetPeers.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetPeers {
        return ProfileService.GetPeers.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetPeers {
        return ProfileService.GetPeers.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetPeers {
        return ProfileService.GetPeers.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.GetPeersBuilder {
        return ProfileService.GetPeers.classBuilder() as ProfileService.GetPeersBuilder
      }
      public func builder() -> ProfileService.GetPeersBuilder {
        return classBuilder() as ProfileService.GetPeersBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.GetPeersBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.GetPeers.builder()
      }
      public func toBuilder() -> ProfileService.GetPeersBuilder {
        return ProfileService.GetPeers.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.GetPeers) -> ProfileService.GetPeersBuilder {
        return ProfileService.GetPeers.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.GetPeers"
      }
      override public func className() -> String {
          return "ProfileService.GetPeers"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.GetPeers.self
      }


      //Meta information declaration end

    }

    final public class GetPeersBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.GetPeers

      required override public init () {
         builderResult = ProfileService.GetPeers()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.GetPeersBuilder {
        builderResult = ProfileService.GetPeers()
        return self
      }
      public override func clone() -> ProfileService.GetPeersBuilder {
        return ProfileService.GetPeers.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.GetPeers {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.GetPeers {
        var returnMe:ProfileService.GetPeers = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.GetPeers) -> ProfileService.GetPeersBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetPeersBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetPeersBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetProfileStats : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var address_ids:Array<String> = Array<String>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if !address_ids.isEmpty {
              for oneValueaddress_ids in address_ids {
                output.writeString(1, value:oneValueaddress_ids)
              }
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            var dataSizeAddressIds:Int32 = 0
            for oneValueaddress_ids in address_ids {
                dataSizeAddressIds += WireFormat.computeStringSizeNoTag(oneValueaddress_ids)
            }
            size += dataSizeAddressIds
            size += 1 * Int32(address_ids.count)
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetProfileStats.Request {
            return ProfileService.GetProfileStats.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfileStats.Request {
            return ProfileService.GetProfileStats.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetProfileStats.Request {
            return ProfileService.GetProfileStats.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetProfileStats.Request {
            return ProfileService.GetProfileStats.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetProfileStats.Request {
            return ProfileService.GetProfileStats.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfileStats.Request {
            return ProfileService.GetProfileStats.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetProfileStats.RequestBuilder {
            return ProfileService.GetProfileStats.Request.classBuilder() as ProfileService.GetProfileStats.RequestBuilder
          }
          public func builder() -> ProfileService.GetProfileStats.RequestBuilder {
            return classBuilder() as ProfileService.GetProfileStats.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetProfileStats.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetProfileStats.Request.builder()
          }
          public func toBuilder() -> ProfileService.GetProfileStats.RequestBuilder {
            return ProfileService.GetProfileStats.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetProfileStats.Request) -> ProfileService.GetProfileStats.RequestBuilder {
            return ProfileService.GetProfileStats.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var address_idsElementIndex:Int = 0
            for oneValueaddress_ids in address_ids  {
                output += "\(indent) address_ids[\(address_idsElementIndex)]: \(oneValueaddress_ids)\n"
                address_idsElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneValueaddress_ids in address_ids {
                      hashCode = (hashCode &* 31) &+ oneValueaddress_ids.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetProfileStats.Request"
          }
          override public func className() -> String {
              return "ProfileService.GetProfileStats.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetProfileStats.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetProfileStats.Request

          required override public init () {
             builderResult = ProfileService.GetProfileStats.Request()
             super.init()
          }
          public var address_ids:Array<String> {
               get {
                   return builderResult.address_ids
               }
               set (array) {
                   builderResult.address_ids = array
               }
          }
          public func clearAddressIds() -> ProfileService.GetProfileStats.RequestBuilder {
             builderResult.address_ids.removeAll(keepCapacity: false)
             return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetProfileStats.RequestBuilder {
            builderResult = ProfileService.GetProfileStats.Request()
            return self
          }
          public override func clone() -> ProfileService.GetProfileStats.RequestBuilder {
            return ProfileService.GetProfileStats.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetProfileStats.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetProfileStats.Request {
            var returnMe:ProfileService.GetProfileStats.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetProfileStats.Request) -> ProfileService.GetProfileStats.RequestBuilder {
            if !other.address_ids.isEmpty {
                builderResult.address_ids += other.address_ids
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetProfileStats.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfileStats.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                address_ids += [input.readString()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var stats:Array<ProfileService.Containers.Stats>  = Array<ProfileService.Containers.Stats>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementstats in stats {
                output.writeMessage(1, value:oneElementstats)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementstats in stats {
                size += WireFormat.computeMessageSize(1, value:oneElementstats)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetProfileStats.Response {
            return ProfileService.GetProfileStats.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfileStats.Response {
            return ProfileService.GetProfileStats.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetProfileStats.Response {
            return ProfileService.GetProfileStats.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetProfileStats.Response {
            return ProfileService.GetProfileStats.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetProfileStats.Response {
            return ProfileService.GetProfileStats.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfileStats.Response {
            return ProfileService.GetProfileStats.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetProfileStats.ResponseBuilder {
            return ProfileService.GetProfileStats.Response.classBuilder() as ProfileService.GetProfileStats.ResponseBuilder
          }
          public func builder() -> ProfileService.GetProfileStats.ResponseBuilder {
            return classBuilder() as ProfileService.GetProfileStats.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetProfileStats.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetProfileStats.Response.builder()
          }
          public func toBuilder() -> ProfileService.GetProfileStats.ResponseBuilder {
            return ProfileService.GetProfileStats.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetProfileStats.Response) -> ProfileService.GetProfileStats.ResponseBuilder {
            return ProfileService.GetProfileStats.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var statsElementIndex:Int = 0
            for oneElementstats in stats {
                output += "\(indent) stats[\(statsElementIndex)] {\n"
                oneElementstats.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                statsElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementstats in stats {
                      hashCode = (hashCode &* 31) &+ oneElementstats.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetProfileStats.Response"
          }
          override public func className() -> String {
              return "ProfileService.GetProfileStats.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetProfileStats.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetProfileStats.Response

          required override public init () {
             builderResult = ProfileService.GetProfileStats.Response()
             super.init()
          }
          public var stats:Array<ProfileService.Containers.Stats> {
               get {
                   return builderResult.stats
               }
               set (value) {
                   builderResult.stats = value
               }
          }
          public func clearStats() -> ProfileService.GetProfileStats.ResponseBuilder {
            builderResult.stats.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetProfileStats.ResponseBuilder {
            builderResult = ProfileService.GetProfileStats.Response()
            return self
          }
          public override func clone() -> ProfileService.GetProfileStats.ResponseBuilder {
            return ProfileService.GetProfileStats.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetProfileStats.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetProfileStats.Response {
            var returnMe:ProfileService.GetProfileStats.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetProfileStats.Response) -> ProfileService.GetProfileStats.ResponseBuilder {
            if !other.stats.isEmpty  {
               builderResult.stats += other.stats
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetProfileStats.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfileStats.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = ProfileService.Containers.Stats.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                stats += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.GetProfileStats {
        return ProfileService.GetProfileStats.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfileStats {
        return ProfileService.GetProfileStats.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetProfileStats {
        return ProfileService.GetProfileStats.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetProfileStats {
        return ProfileService.GetProfileStats.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetProfileStats {
        return ProfileService.GetProfileStats.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfileStats {
        return ProfileService.GetProfileStats.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.GetProfileStatsBuilder {
        return ProfileService.GetProfileStats.classBuilder() as ProfileService.GetProfileStatsBuilder
      }
      public func builder() -> ProfileService.GetProfileStatsBuilder {
        return classBuilder() as ProfileService.GetProfileStatsBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.GetProfileStatsBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.GetProfileStats.builder()
      }
      public func toBuilder() -> ProfileService.GetProfileStatsBuilder {
        return ProfileService.GetProfileStats.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.GetProfileStats) -> ProfileService.GetProfileStatsBuilder {
        return ProfileService.GetProfileStats.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.GetProfileStats"
      }
      override public func className() -> String {
          return "ProfileService.GetProfileStats"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.GetProfileStats.self
      }


      //Meta information declaration end

    }

    final public class GetProfileStatsBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.GetProfileStats

      required override public init () {
         builderResult = ProfileService.GetProfileStats()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.GetProfileStatsBuilder {
        builderResult = ProfileService.GetProfileStats()
        return self
      }
      public override func clone() -> ProfileService.GetProfileStatsBuilder {
        return ProfileService.GetProfileStats.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.GetProfileStats {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.GetProfileStats {
        var returnMe:ProfileService.GetProfileStats = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.GetProfileStats) -> ProfileService.GetProfileStatsBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetProfileStatsBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfileStatsBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetUpcomingAnniversaries : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "organization_id": return organization_id
                 default: return nil
                 }
          }

          public private(set) var hasOrganizationId:Bool = false
          public private(set) var organization_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasOrganizationId {
              output.writeString(1, value:organization_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasOrganizationId {
              size += WireFormat.computeStringSize(1, value:organization_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetUpcomingAnniversaries.Request {
            return ProfileService.GetUpcomingAnniversaries.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingAnniversaries.Request {
            return ProfileService.GetUpcomingAnniversaries.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetUpcomingAnniversaries.Request {
            return ProfileService.GetUpcomingAnniversaries.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetUpcomingAnniversaries.Request {
            return ProfileService.GetUpcomingAnniversaries.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetUpcomingAnniversaries.Request {
            return ProfileService.GetUpcomingAnniversaries.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingAnniversaries.Request {
            return ProfileService.GetUpcomingAnniversaries.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetUpcomingAnniversaries.RequestBuilder {
            return ProfileService.GetUpcomingAnniversaries.Request.classBuilder() as ProfileService.GetUpcomingAnniversaries.RequestBuilder
          }
          public func builder() -> ProfileService.GetUpcomingAnniversaries.RequestBuilder {
            return classBuilder() as ProfileService.GetUpcomingAnniversaries.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetUpcomingAnniversaries.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetUpcomingAnniversaries.Request.builder()
          }
          public func toBuilder() -> ProfileService.GetUpcomingAnniversaries.RequestBuilder {
            return ProfileService.GetUpcomingAnniversaries.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetUpcomingAnniversaries.Request) -> ProfileService.GetUpcomingAnniversaries.RequestBuilder {
            return ProfileService.GetUpcomingAnniversaries.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasOrganizationId {
              output += "\(indent) organization_id: \(organization_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasOrganizationId {
                     hashCode = (hashCode &* 31) &+ organization_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetUpcomingAnniversaries.Request"
          }
          override public func className() -> String {
              return "ProfileService.GetUpcomingAnniversaries.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetUpcomingAnniversaries.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetUpcomingAnniversaries.Request

          required override public init () {
             builderResult = ProfileService.GetUpcomingAnniversaries.Request()
             super.init()
          }
          public var hasOrganizationId:Bool {
               get {
                    return builderResult.hasOrganizationId
               }
          }
          public var organization_id:String {
               get {
                    return builderResult.organization_id
               }
               set (value) {
                   builderResult.hasOrganizationId = true
                   builderResult.organization_id = value
               }
          }
          public func clearOrganizationId() -> ProfileService.GetUpcomingAnniversaries.RequestBuilder{
               builderResult.hasOrganizationId = false
               builderResult.organization_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetUpcomingAnniversaries.RequestBuilder {
            builderResult = ProfileService.GetUpcomingAnniversaries.Request()
            return self
          }
          public override func clone() -> ProfileService.GetUpcomingAnniversaries.RequestBuilder {
            return ProfileService.GetUpcomingAnniversaries.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetUpcomingAnniversaries.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetUpcomingAnniversaries.Request {
            var returnMe:ProfileService.GetUpcomingAnniversaries.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetUpcomingAnniversaries.Request) -> ProfileService.GetUpcomingAnniversaries.RequestBuilder {
            if other.hasOrganizationId {
                 organization_id = other.organization_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetUpcomingAnniversaries.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingAnniversaries.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                organization_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var profiles:Array<ProfileService.Containers.Profile>  = Array<ProfileService.Containers.Profile>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementprofiles in profiles {
                output.writeMessage(1, value:oneElementprofiles)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementprofiles in profiles {
                size += WireFormat.computeMessageSize(1, value:oneElementprofiles)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetUpcomingAnniversaries.Response {
            return ProfileService.GetUpcomingAnniversaries.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingAnniversaries.Response {
            return ProfileService.GetUpcomingAnniversaries.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetUpcomingAnniversaries.Response {
            return ProfileService.GetUpcomingAnniversaries.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetUpcomingAnniversaries.Response {
            return ProfileService.GetUpcomingAnniversaries.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetUpcomingAnniversaries.Response {
            return ProfileService.GetUpcomingAnniversaries.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingAnniversaries.Response {
            return ProfileService.GetUpcomingAnniversaries.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetUpcomingAnniversaries.ResponseBuilder {
            return ProfileService.GetUpcomingAnniversaries.Response.classBuilder() as ProfileService.GetUpcomingAnniversaries.ResponseBuilder
          }
          public func builder() -> ProfileService.GetUpcomingAnniversaries.ResponseBuilder {
            return classBuilder() as ProfileService.GetUpcomingAnniversaries.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetUpcomingAnniversaries.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetUpcomingAnniversaries.Response.builder()
          }
          public func toBuilder() -> ProfileService.GetUpcomingAnniversaries.ResponseBuilder {
            return ProfileService.GetUpcomingAnniversaries.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetUpcomingAnniversaries.Response) -> ProfileService.GetUpcomingAnniversaries.ResponseBuilder {
            return ProfileService.GetUpcomingAnniversaries.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var profilesElementIndex:Int = 0
            for oneElementprofiles in profiles {
                output += "\(indent) profiles[\(profilesElementIndex)] {\n"
                oneElementprofiles.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                profilesElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementprofiles in profiles {
                      hashCode = (hashCode &* 31) &+ oneElementprofiles.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetUpcomingAnniversaries.Response"
          }
          override public func className() -> String {
              return "ProfileService.GetUpcomingAnniversaries.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetUpcomingAnniversaries.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetUpcomingAnniversaries.Response

          required override public init () {
             builderResult = ProfileService.GetUpcomingAnniversaries.Response()
             super.init()
          }
          public var profiles:Array<ProfileService.Containers.Profile> {
               get {
                   return builderResult.profiles
               }
               set (value) {
                   builderResult.profiles = value
               }
          }
          public func clearProfiles() -> ProfileService.GetUpcomingAnniversaries.ResponseBuilder {
            builderResult.profiles.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetUpcomingAnniversaries.ResponseBuilder {
            builderResult = ProfileService.GetUpcomingAnniversaries.Response()
            return self
          }
          public override func clone() -> ProfileService.GetUpcomingAnniversaries.ResponseBuilder {
            return ProfileService.GetUpcomingAnniversaries.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetUpcomingAnniversaries.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetUpcomingAnniversaries.Response {
            var returnMe:ProfileService.GetUpcomingAnniversaries.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetUpcomingAnniversaries.Response) -> ProfileService.GetUpcomingAnniversaries.ResponseBuilder {
            if !other.profiles.isEmpty  {
               builderResult.profiles += other.profiles
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetUpcomingAnniversaries.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingAnniversaries.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = ProfileService.Containers.Profile.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                profiles += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.GetUpcomingAnniversaries {
        return ProfileService.GetUpcomingAnniversaries.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingAnniversaries {
        return ProfileService.GetUpcomingAnniversaries.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetUpcomingAnniversaries {
        return ProfileService.GetUpcomingAnniversaries.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetUpcomingAnniversaries {
        return ProfileService.GetUpcomingAnniversaries.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetUpcomingAnniversaries {
        return ProfileService.GetUpcomingAnniversaries.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingAnniversaries {
        return ProfileService.GetUpcomingAnniversaries.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.GetUpcomingAnniversariesBuilder {
        return ProfileService.GetUpcomingAnniversaries.classBuilder() as ProfileService.GetUpcomingAnniversariesBuilder
      }
      public func builder() -> ProfileService.GetUpcomingAnniversariesBuilder {
        return classBuilder() as ProfileService.GetUpcomingAnniversariesBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.GetUpcomingAnniversariesBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.GetUpcomingAnniversaries.builder()
      }
      public func toBuilder() -> ProfileService.GetUpcomingAnniversariesBuilder {
        return ProfileService.GetUpcomingAnniversaries.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.GetUpcomingAnniversaries) -> ProfileService.GetUpcomingAnniversariesBuilder {
        return ProfileService.GetUpcomingAnniversaries.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.GetUpcomingAnniversaries"
      }
      override public func className() -> String {
          return "ProfileService.GetUpcomingAnniversaries"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.GetUpcomingAnniversaries.self
      }


      //Meta information declaration end

    }

    final public class GetUpcomingAnniversariesBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.GetUpcomingAnniversaries

      required override public init () {
         builderResult = ProfileService.GetUpcomingAnniversaries()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.GetUpcomingAnniversariesBuilder {
        builderResult = ProfileService.GetUpcomingAnniversaries()
        return self
      }
      public override func clone() -> ProfileService.GetUpcomingAnniversariesBuilder {
        return ProfileService.GetUpcomingAnniversaries.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.GetUpcomingAnniversaries {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.GetUpcomingAnniversaries {
        var returnMe:ProfileService.GetUpcomingAnniversaries = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.GetUpcomingAnniversaries) -> ProfileService.GetUpcomingAnniversariesBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetUpcomingAnniversariesBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingAnniversariesBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetUpcomingBirthdays : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "organization_id": return organization_id
                 default: return nil
                 }
          }

          public private(set) var hasOrganizationId:Bool = false
          public private(set) var organization_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasOrganizationId {
              output.writeString(1, value:organization_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasOrganizationId {
              size += WireFormat.computeStringSize(1, value:organization_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetUpcomingBirthdays.Request {
            return ProfileService.GetUpcomingBirthdays.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingBirthdays.Request {
            return ProfileService.GetUpcomingBirthdays.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetUpcomingBirthdays.Request {
            return ProfileService.GetUpcomingBirthdays.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetUpcomingBirthdays.Request {
            return ProfileService.GetUpcomingBirthdays.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetUpcomingBirthdays.Request {
            return ProfileService.GetUpcomingBirthdays.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingBirthdays.Request {
            return ProfileService.GetUpcomingBirthdays.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetUpcomingBirthdays.RequestBuilder {
            return ProfileService.GetUpcomingBirthdays.Request.classBuilder() as ProfileService.GetUpcomingBirthdays.RequestBuilder
          }
          public func builder() -> ProfileService.GetUpcomingBirthdays.RequestBuilder {
            return classBuilder() as ProfileService.GetUpcomingBirthdays.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetUpcomingBirthdays.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetUpcomingBirthdays.Request.builder()
          }
          public func toBuilder() -> ProfileService.GetUpcomingBirthdays.RequestBuilder {
            return ProfileService.GetUpcomingBirthdays.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetUpcomingBirthdays.Request) -> ProfileService.GetUpcomingBirthdays.RequestBuilder {
            return ProfileService.GetUpcomingBirthdays.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasOrganizationId {
              output += "\(indent) organization_id: \(organization_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasOrganizationId {
                     hashCode = (hashCode &* 31) &+ organization_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetUpcomingBirthdays.Request"
          }
          override public func className() -> String {
              return "ProfileService.GetUpcomingBirthdays.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetUpcomingBirthdays.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetUpcomingBirthdays.Request

          required override public init () {
             builderResult = ProfileService.GetUpcomingBirthdays.Request()
             super.init()
          }
          public var hasOrganizationId:Bool {
               get {
                    return builderResult.hasOrganizationId
               }
          }
          public var organization_id:String {
               get {
                    return builderResult.organization_id
               }
               set (value) {
                   builderResult.hasOrganizationId = true
                   builderResult.organization_id = value
               }
          }
          public func clearOrganizationId() -> ProfileService.GetUpcomingBirthdays.RequestBuilder{
               builderResult.hasOrganizationId = false
               builderResult.organization_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetUpcomingBirthdays.RequestBuilder {
            builderResult = ProfileService.GetUpcomingBirthdays.Request()
            return self
          }
          public override func clone() -> ProfileService.GetUpcomingBirthdays.RequestBuilder {
            return ProfileService.GetUpcomingBirthdays.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetUpcomingBirthdays.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetUpcomingBirthdays.Request {
            var returnMe:ProfileService.GetUpcomingBirthdays.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetUpcomingBirthdays.Request) -> ProfileService.GetUpcomingBirthdays.RequestBuilder {
            if other.hasOrganizationId {
                 organization_id = other.organization_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetUpcomingBirthdays.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingBirthdays.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                organization_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var profiles:Array<ProfileService.Containers.Profile>  = Array<ProfileService.Containers.Profile>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementprofiles in profiles {
                output.writeMessage(1, value:oneElementprofiles)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementprofiles in profiles {
                size += WireFormat.computeMessageSize(1, value:oneElementprofiles)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetUpcomingBirthdays.Response {
            return ProfileService.GetUpcomingBirthdays.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingBirthdays.Response {
            return ProfileService.GetUpcomingBirthdays.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetUpcomingBirthdays.Response {
            return ProfileService.GetUpcomingBirthdays.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetUpcomingBirthdays.Response {
            return ProfileService.GetUpcomingBirthdays.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetUpcomingBirthdays.Response {
            return ProfileService.GetUpcomingBirthdays.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingBirthdays.Response {
            return ProfileService.GetUpcomingBirthdays.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetUpcomingBirthdays.ResponseBuilder {
            return ProfileService.GetUpcomingBirthdays.Response.classBuilder() as ProfileService.GetUpcomingBirthdays.ResponseBuilder
          }
          public func builder() -> ProfileService.GetUpcomingBirthdays.ResponseBuilder {
            return classBuilder() as ProfileService.GetUpcomingBirthdays.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetUpcomingBirthdays.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetUpcomingBirthdays.Response.builder()
          }
          public func toBuilder() -> ProfileService.GetUpcomingBirthdays.ResponseBuilder {
            return ProfileService.GetUpcomingBirthdays.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetUpcomingBirthdays.Response) -> ProfileService.GetUpcomingBirthdays.ResponseBuilder {
            return ProfileService.GetUpcomingBirthdays.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var profilesElementIndex:Int = 0
            for oneElementprofiles in profiles {
                output += "\(indent) profiles[\(profilesElementIndex)] {\n"
                oneElementprofiles.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                profilesElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementprofiles in profiles {
                      hashCode = (hashCode &* 31) &+ oneElementprofiles.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetUpcomingBirthdays.Response"
          }
          override public func className() -> String {
              return "ProfileService.GetUpcomingBirthdays.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetUpcomingBirthdays.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetUpcomingBirthdays.Response

          required override public init () {
             builderResult = ProfileService.GetUpcomingBirthdays.Response()
             super.init()
          }
          public var profiles:Array<ProfileService.Containers.Profile> {
               get {
                   return builderResult.profiles
               }
               set (value) {
                   builderResult.profiles = value
               }
          }
          public func clearProfiles() -> ProfileService.GetUpcomingBirthdays.ResponseBuilder {
            builderResult.profiles.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetUpcomingBirthdays.ResponseBuilder {
            builderResult = ProfileService.GetUpcomingBirthdays.Response()
            return self
          }
          public override func clone() -> ProfileService.GetUpcomingBirthdays.ResponseBuilder {
            return ProfileService.GetUpcomingBirthdays.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetUpcomingBirthdays.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetUpcomingBirthdays.Response {
            var returnMe:ProfileService.GetUpcomingBirthdays.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetUpcomingBirthdays.Response) -> ProfileService.GetUpcomingBirthdays.ResponseBuilder {
            if !other.profiles.isEmpty  {
               builderResult.profiles += other.profiles
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetUpcomingBirthdays.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingBirthdays.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = ProfileService.Containers.Profile.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                profiles += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.GetUpcomingBirthdays {
        return ProfileService.GetUpcomingBirthdays.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingBirthdays {
        return ProfileService.GetUpcomingBirthdays.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetUpcomingBirthdays {
        return ProfileService.GetUpcomingBirthdays.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetUpcomingBirthdays {
        return ProfileService.GetUpcomingBirthdays.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetUpcomingBirthdays {
        return ProfileService.GetUpcomingBirthdays.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingBirthdays {
        return ProfileService.GetUpcomingBirthdays.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.GetUpcomingBirthdaysBuilder {
        return ProfileService.GetUpcomingBirthdays.classBuilder() as ProfileService.GetUpcomingBirthdaysBuilder
      }
      public func builder() -> ProfileService.GetUpcomingBirthdaysBuilder {
        return classBuilder() as ProfileService.GetUpcomingBirthdaysBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.GetUpcomingBirthdaysBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.GetUpcomingBirthdays.builder()
      }
      public func toBuilder() -> ProfileService.GetUpcomingBirthdaysBuilder {
        return ProfileService.GetUpcomingBirthdays.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.GetUpcomingBirthdays) -> ProfileService.GetUpcomingBirthdaysBuilder {
        return ProfileService.GetUpcomingBirthdays.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.GetUpcomingBirthdays"
      }
      override public func className() -> String {
          return "ProfileService.GetUpcomingBirthdays"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.GetUpcomingBirthdays.self
      }


      //Meta information declaration end

    }

    final public class GetUpcomingBirthdaysBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.GetUpcomingBirthdays

      required override public init () {
         builderResult = ProfileService.GetUpcomingBirthdays()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.GetUpcomingBirthdaysBuilder {
        builderResult = ProfileService.GetUpcomingBirthdays()
        return self
      }
      public override func clone() -> ProfileService.GetUpcomingBirthdaysBuilder {
        return ProfileService.GetUpcomingBirthdays.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.GetUpcomingBirthdays {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.GetUpcomingBirthdays {
        var returnMe:ProfileService.GetUpcomingBirthdays = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.GetUpcomingBirthdays) -> ProfileService.GetUpcomingBirthdaysBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetUpcomingBirthdaysBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingBirthdaysBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetRecentHires : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "organization_id": return organization_id
                 default: return nil
                 }
          }

          public private(set) var hasOrganizationId:Bool = false
          public private(set) var organization_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasOrganizationId {
              output.writeString(1, value:organization_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasOrganizationId {
              size += WireFormat.computeStringSize(1, value:organization_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetRecentHires.Request {
            return ProfileService.GetRecentHires.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetRecentHires.Request {
            return ProfileService.GetRecentHires.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetRecentHires.Request {
            return ProfileService.GetRecentHires.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetRecentHires.Request {
            return ProfileService.GetRecentHires.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetRecentHires.Request {
            return ProfileService.GetRecentHires.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetRecentHires.Request {
            return ProfileService.GetRecentHires.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetRecentHires.RequestBuilder {
            return ProfileService.GetRecentHires.Request.classBuilder() as ProfileService.GetRecentHires.RequestBuilder
          }
          public func builder() -> ProfileService.GetRecentHires.RequestBuilder {
            return classBuilder() as ProfileService.GetRecentHires.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetRecentHires.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetRecentHires.Request.builder()
          }
          public func toBuilder() -> ProfileService.GetRecentHires.RequestBuilder {
            return ProfileService.GetRecentHires.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetRecentHires.Request) -> ProfileService.GetRecentHires.RequestBuilder {
            return ProfileService.GetRecentHires.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasOrganizationId {
              output += "\(indent) organization_id: \(organization_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasOrganizationId {
                     hashCode = (hashCode &* 31) &+ organization_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetRecentHires.Request"
          }
          override public func className() -> String {
              return "ProfileService.GetRecentHires.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetRecentHires.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetRecentHires.Request

          required override public init () {
             builderResult = ProfileService.GetRecentHires.Request()
             super.init()
          }
          public var hasOrganizationId:Bool {
               get {
                    return builderResult.hasOrganizationId
               }
          }
          public var organization_id:String {
               get {
                    return builderResult.organization_id
               }
               set (value) {
                   builderResult.hasOrganizationId = true
                   builderResult.organization_id = value
               }
          }
          public func clearOrganizationId() -> ProfileService.GetRecentHires.RequestBuilder{
               builderResult.hasOrganizationId = false
               builderResult.organization_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetRecentHires.RequestBuilder {
            builderResult = ProfileService.GetRecentHires.Request()
            return self
          }
          public override func clone() -> ProfileService.GetRecentHires.RequestBuilder {
            return ProfileService.GetRecentHires.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetRecentHires.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetRecentHires.Request {
            var returnMe:ProfileService.GetRecentHires.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetRecentHires.Request) -> ProfileService.GetRecentHires.RequestBuilder {
            if other.hasOrganizationId {
                 organization_id = other.organization_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetRecentHires.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetRecentHires.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                organization_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var profiles:Array<ProfileService.Containers.Profile>  = Array<ProfileService.Containers.Profile>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementprofiles in profiles {
                output.writeMessage(1, value:oneElementprofiles)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementprofiles in profiles {
                size += WireFormat.computeMessageSize(1, value:oneElementprofiles)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetRecentHires.Response {
            return ProfileService.GetRecentHires.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetRecentHires.Response {
            return ProfileService.GetRecentHires.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetRecentHires.Response {
            return ProfileService.GetRecentHires.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetRecentHires.Response {
            return ProfileService.GetRecentHires.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetRecentHires.Response {
            return ProfileService.GetRecentHires.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetRecentHires.Response {
            return ProfileService.GetRecentHires.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetRecentHires.ResponseBuilder {
            return ProfileService.GetRecentHires.Response.classBuilder() as ProfileService.GetRecentHires.ResponseBuilder
          }
          public func builder() -> ProfileService.GetRecentHires.ResponseBuilder {
            return classBuilder() as ProfileService.GetRecentHires.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetRecentHires.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetRecentHires.Response.builder()
          }
          public func toBuilder() -> ProfileService.GetRecentHires.ResponseBuilder {
            return ProfileService.GetRecentHires.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetRecentHires.Response) -> ProfileService.GetRecentHires.ResponseBuilder {
            return ProfileService.GetRecentHires.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var profilesElementIndex:Int = 0
            for oneElementprofiles in profiles {
                output += "\(indent) profiles[\(profilesElementIndex)] {\n"
                oneElementprofiles.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                profilesElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementprofiles in profiles {
                      hashCode = (hashCode &* 31) &+ oneElementprofiles.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetRecentHires.Response"
          }
          override public func className() -> String {
              return "ProfileService.GetRecentHires.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetRecentHires.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetRecentHires.Response

          required override public init () {
             builderResult = ProfileService.GetRecentHires.Response()
             super.init()
          }
          public var profiles:Array<ProfileService.Containers.Profile> {
               get {
                   return builderResult.profiles
               }
               set (value) {
                   builderResult.profiles = value
               }
          }
          public func clearProfiles() -> ProfileService.GetRecentHires.ResponseBuilder {
            builderResult.profiles.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetRecentHires.ResponseBuilder {
            builderResult = ProfileService.GetRecentHires.Response()
            return self
          }
          public override func clone() -> ProfileService.GetRecentHires.ResponseBuilder {
            return ProfileService.GetRecentHires.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetRecentHires.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetRecentHires.Response {
            var returnMe:ProfileService.GetRecentHires.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetRecentHires.Response) -> ProfileService.GetRecentHires.ResponseBuilder {
            if !other.profiles.isEmpty  {
               builderResult.profiles += other.profiles
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetRecentHires.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetRecentHires.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = ProfileService.Containers.Profile.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                profiles += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.GetRecentHires {
        return ProfileService.GetRecentHires.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetRecentHires {
        return ProfileService.GetRecentHires.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetRecentHires {
        return ProfileService.GetRecentHires.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetRecentHires {
        return ProfileService.GetRecentHires.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetRecentHires {
        return ProfileService.GetRecentHires.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetRecentHires {
        return ProfileService.GetRecentHires.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.GetRecentHiresBuilder {
        return ProfileService.GetRecentHires.classBuilder() as ProfileService.GetRecentHiresBuilder
      }
      public func builder() -> ProfileService.GetRecentHiresBuilder {
        return classBuilder() as ProfileService.GetRecentHiresBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.GetRecentHiresBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.GetRecentHires.builder()
      }
      public func toBuilder() -> ProfileService.GetRecentHiresBuilder {
        return ProfileService.GetRecentHires.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.GetRecentHires) -> ProfileService.GetRecentHiresBuilder {
        return ProfileService.GetRecentHires.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.GetRecentHires"
      }
      override public func className() -> String {
          return "ProfileService.GetRecentHires"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.GetRecentHires.self
      }


      //Meta information declaration end

    }

    final public class GetRecentHiresBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.GetRecentHires

      required override public init () {
         builderResult = ProfileService.GetRecentHires()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.GetRecentHiresBuilder {
        builderResult = ProfileService.GetRecentHires()
        return self
      }
      public override func clone() -> ProfileService.GetRecentHiresBuilder {
        return ProfileService.GetRecentHires.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.GetRecentHires {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.GetRecentHires {
        var returnMe:ProfileService.GetRecentHires = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.GetRecentHires) -> ProfileService.GetRecentHiresBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetRecentHiresBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetRecentHiresBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetActiveTags : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "organization_id": return organization_id
                 default: return nil
                 }
          }

          public private(set) var hasOrganizationId:Bool = false
          public private(set) var organization_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasOrganizationId {
              output.writeString(1, value:organization_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasOrganizationId {
              size += WireFormat.computeStringSize(1, value:organization_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetActiveTags.Request {
            return ProfileService.GetActiveTags.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetActiveTags.Request {
            return ProfileService.GetActiveTags.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetActiveTags.Request {
            return ProfileService.GetActiveTags.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetActiveTags.Request {
            return ProfileService.GetActiveTags.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetActiveTags.Request {
            return ProfileService.GetActiveTags.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetActiveTags.Request {
            return ProfileService.GetActiveTags.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetActiveTags.RequestBuilder {
            return ProfileService.GetActiveTags.Request.classBuilder() as ProfileService.GetActiveTags.RequestBuilder
          }
          public func builder() -> ProfileService.GetActiveTags.RequestBuilder {
            return classBuilder() as ProfileService.GetActiveTags.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetActiveTags.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetActiveTags.Request.builder()
          }
          public func toBuilder() -> ProfileService.GetActiveTags.RequestBuilder {
            return ProfileService.GetActiveTags.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetActiveTags.Request) -> ProfileService.GetActiveTags.RequestBuilder {
            return ProfileService.GetActiveTags.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasOrganizationId {
              output += "\(indent) organization_id: \(organization_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasOrganizationId {
                     hashCode = (hashCode &* 31) &+ organization_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetActiveTags.Request"
          }
          override public func className() -> String {
              return "ProfileService.GetActiveTags.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetActiveTags.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetActiveTags.Request

          required override public init () {
             builderResult = ProfileService.GetActiveTags.Request()
             super.init()
          }
          public var hasOrganizationId:Bool {
               get {
                    return builderResult.hasOrganizationId
               }
          }
          public var organization_id:String {
               get {
                    return builderResult.organization_id
               }
               set (value) {
                   builderResult.hasOrganizationId = true
                   builderResult.organization_id = value
               }
          }
          public func clearOrganizationId() -> ProfileService.GetActiveTags.RequestBuilder{
               builderResult.hasOrganizationId = false
               builderResult.organization_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetActiveTags.RequestBuilder {
            builderResult = ProfileService.GetActiveTags.Request()
            return self
          }
          public override func clone() -> ProfileService.GetActiveTags.RequestBuilder {
            return ProfileService.GetActiveTags.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetActiveTags.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetActiveTags.Request {
            var returnMe:ProfileService.GetActiveTags.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetActiveTags.Request) -> ProfileService.GetActiveTags.RequestBuilder {
            if other.hasOrganizationId {
                 organization_id = other.organization_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetActiveTags.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetActiveTags.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                organization_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var tags:Array<ProfileService.Containers.Tag>  = Array<ProfileService.Containers.Tag>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementtags in tags {
                output.writeMessage(1, value:oneElementtags)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementtags in tags {
                size += WireFormat.computeMessageSize(1, value:oneElementtags)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetActiveTags.Response {
            return ProfileService.GetActiveTags.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetActiveTags.Response {
            return ProfileService.GetActiveTags.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetActiveTags.Response {
            return ProfileService.GetActiveTags.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetActiveTags.Response {
            return ProfileService.GetActiveTags.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetActiveTags.Response {
            return ProfileService.GetActiveTags.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetActiveTags.Response {
            return ProfileService.GetActiveTags.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetActiveTags.ResponseBuilder {
            return ProfileService.GetActiveTags.Response.classBuilder() as ProfileService.GetActiveTags.ResponseBuilder
          }
          public func builder() -> ProfileService.GetActiveTags.ResponseBuilder {
            return classBuilder() as ProfileService.GetActiveTags.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetActiveTags.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetActiveTags.Response.builder()
          }
          public func toBuilder() -> ProfileService.GetActiveTags.ResponseBuilder {
            return ProfileService.GetActiveTags.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetActiveTags.Response) -> ProfileService.GetActiveTags.ResponseBuilder {
            return ProfileService.GetActiveTags.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var tagsElementIndex:Int = 0
            for oneElementtags in tags {
                output += "\(indent) tags[\(tagsElementIndex)] {\n"
                oneElementtags.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                tagsElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementtags in tags {
                      hashCode = (hashCode &* 31) &+ oneElementtags.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetActiveTags.Response"
          }
          override public func className() -> String {
              return "ProfileService.GetActiveTags.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetActiveTags.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetActiveTags.Response

          required override public init () {
             builderResult = ProfileService.GetActiveTags.Response()
             super.init()
          }
          public var tags:Array<ProfileService.Containers.Tag> {
               get {
                   return builderResult.tags
               }
               set (value) {
                   builderResult.tags = value
               }
          }
          public func clearTags() -> ProfileService.GetActiveTags.ResponseBuilder {
            builderResult.tags.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetActiveTags.ResponseBuilder {
            builderResult = ProfileService.GetActiveTags.Response()
            return self
          }
          public override func clone() -> ProfileService.GetActiveTags.ResponseBuilder {
            return ProfileService.GetActiveTags.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetActiveTags.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetActiveTags.Response {
            var returnMe:ProfileService.GetActiveTags.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetActiveTags.Response) -> ProfileService.GetActiveTags.ResponseBuilder {
            if !other.tags.isEmpty  {
               builderResult.tags += other.tags
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetActiveTags.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetActiveTags.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = ProfileService.Containers.Tag.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                tags += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.GetActiveTags {
        return ProfileService.GetActiveTags.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetActiveTags {
        return ProfileService.GetActiveTags.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetActiveTags {
        return ProfileService.GetActiveTags.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetActiveTags {
        return ProfileService.GetActiveTags.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetActiveTags {
        return ProfileService.GetActiveTags.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetActiveTags {
        return ProfileService.GetActiveTags.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.GetActiveTagsBuilder {
        return ProfileService.GetActiveTags.classBuilder() as ProfileService.GetActiveTagsBuilder
      }
      public func builder() -> ProfileService.GetActiveTagsBuilder {
        return classBuilder() as ProfileService.GetActiveTagsBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.GetActiveTagsBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.GetActiveTags.builder()
      }
      public func toBuilder() -> ProfileService.GetActiveTagsBuilder {
        return ProfileService.GetActiveTags.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.GetActiveTags) -> ProfileService.GetActiveTagsBuilder {
        return ProfileService.GetActiveTags.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.GetActiveTags"
      }
      override public func className() -> String {
          return "ProfileService.GetActiveTags"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.GetActiveTags.self
      }


      //Meta information declaration end

    }

    final public class GetActiveTagsBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.GetActiveTags

      required override public init () {
         builderResult = ProfileService.GetActiveTags()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.GetActiveTagsBuilder {
        builderResult = ProfileService.GetActiveTags()
        return self
      }
      public override func clone() -> ProfileService.GetActiveTagsBuilder {
        return ProfileService.GetActiveTags.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.GetActiveTags {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.GetActiveTags {
        var returnMe:ProfileService.GetActiveTags = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.GetActiveTags) -> ProfileService.GetActiveTagsBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetActiveTagsBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetActiveTagsBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end

  override public subscript (key: String) -> Any? {
         switch key {
         default: return nil
         }
  }

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  public class func parseFromData(data:[Byte]) -> ProfileService {
    return ProfileService.builder().mergeFromData(data).build()
  }
  public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService {
    return ProfileService.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> ProfileService {
    return ProfileService.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService {
    return ProfileService.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService {
    return ProfileService.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService {
    return ProfileService.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> ProfileServiceBuilder {
    return ProfileService.classBuilder() as ProfileServiceBuilder
  }
  public func builder() -> ProfileServiceBuilder {
    return classBuilder() as ProfileServiceBuilder
  }
  public override class func classBuilder() -> MessageBuilder {
    return ProfileServiceBuilder()
  }
  public override func classBuilder() -> MessageBuilder {
    return ProfileService.builder()
  }
  public func toBuilder() -> ProfileServiceBuilder {
    return ProfileService.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:ProfileService) -> ProfileServiceBuilder {
    return ProfileService.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "ProfileService"
  }
  override public func className() -> String {
      return "ProfileService"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return ProfileService.self
  }


  //Meta information declaration end

}

final public class ProfileServiceBuilder : GeneratedMessageBuilder {
  private var builderResult:ProfileService

  required override public init () {
     builderResult = ProfileService()
     super.init()
  }
  override public var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  public override func clear() -> ProfileServiceBuilder {
    builderResult = ProfileService()
    return self
  }
  public override func clone() -> ProfileServiceBuilder {
    return ProfileService.builderWithPrototype(builderResult)
  }
  public override func build() -> ProfileService {
       checkInitialized()
       return buildPartial()
  }
  public func buildPartial() -> ProfileService {
    var returnMe:ProfileService = builderResult
    return returnMe
  }
  public func mergeFrom(other:ProfileService) -> ProfileServiceBuilder {
    mergeUnknownFields(other.unknownFields)
    return self
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileServiceBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileServiceBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


public extension ProfileService.Containers.Profile {
    class func parseFromNSData(data:NSData) -> ProfileService.Containers.Profile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.Containers.Profile.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.Containers.Profile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.Containers.Profile.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.Containers.Tag {
    class func parseFromNSData(data:NSData) -> ProfileService.Containers.Tag {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.Containers.Tag.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.Containers.Tag {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.Containers.Tag.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.Containers.Stats {
    class func parseFromNSData(data:NSData) -> ProfileService.Containers.Stats {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.Containers.Stats.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.Containers.Stats {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.Containers.Stats.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.Containers {
    class func parseFromNSData(data:NSData) -> ProfileService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.Containers.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.Containers.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.CreateProfile.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.CreateProfile.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateProfile.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateProfile.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.CreateProfile.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.CreateProfile.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateProfile.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateProfile.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.CreateProfile {
    class func parseFromNSData(data:NSData) -> ProfileService.CreateProfile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateProfile.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateProfile.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.UpdateProfile.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.UpdateProfile.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.UpdateProfile.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.UpdateProfile.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.UpdateProfile.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.UpdateProfile.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.UpdateProfile.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.UpdateProfile.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.UpdateProfile.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.UpdateProfile.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.UpdateProfile {
    class func parseFromNSData(data:NSData) -> ProfileService.UpdateProfile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.UpdateProfile.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.UpdateProfile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.UpdateProfile.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetProfile.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.GetProfile.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfile.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfile.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetProfile.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.GetProfile.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfile.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfile.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetProfile {
    class func parseFromNSData(data:NSData) -> ProfileService.GetProfile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfile.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfile.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetExtendedProfile.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.GetExtendedProfile.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetExtendedProfile.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetExtendedProfile.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetExtendedProfile.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.GetExtendedProfile.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetExtendedProfile.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetExtendedProfile.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetExtendedProfile {
    class func parseFromNSData(data:NSData) -> ProfileService.GetExtendedProfile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetExtendedProfile.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetExtendedProfile.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.CreateTags.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.CreateTags.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateTags.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateTags.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateTags.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.CreateTags.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.CreateTags.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateTags.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateTags.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateTags.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.CreateTags {
    class func parseFromNSData(data:NSData) -> ProfileService.CreateTags {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateTags.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateTags {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateTags.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetTags.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.GetTags.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetTags.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetTags.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetTags.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetTags.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.GetTags.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetTags.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetTags.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetTags.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetTags {
    class func parseFromNSData(data:NSData) -> ProfileService.GetTags {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetTags.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetTags {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetTags.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.AddTags.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.AddTags.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.AddTags.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.AddTags.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.AddTags.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.AddTags.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.AddTags.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.AddTags.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.AddTags.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.AddTags.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.AddTags {
    class func parseFromNSData(data:NSData) -> ProfileService.AddTags {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.AddTags.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.AddTags {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.AddTags.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetProfiles.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.GetProfiles.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfiles.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfiles.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfiles.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetProfiles.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.GetProfiles.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfiles.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfiles.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfiles.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetProfiles {
    class func parseFromNSData(data:NSData) -> ProfileService.GetProfiles {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfiles.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfiles {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfiles.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetDirectReports.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.GetDirectReports.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetDirectReports.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetDirectReports.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetDirectReports.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetDirectReports.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.GetDirectReports.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetDirectReports.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetDirectReports.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetDirectReports.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetDirectReports {
    class func parseFromNSData(data:NSData) -> ProfileService.GetDirectReports {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetDirectReports.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetDirectReports {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetDirectReports.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetPeers.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.GetPeers.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetPeers.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetPeers.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetPeers.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetPeers.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.GetPeers.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetPeers.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetPeers.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetPeers.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetPeers {
    class func parseFromNSData(data:NSData) -> ProfileService.GetPeers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetPeers.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetPeers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetPeers.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetProfileStats.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.GetProfileStats.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfileStats.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfileStats.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfileStats.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetProfileStats.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.GetProfileStats.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfileStats.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfileStats.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfileStats.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetProfileStats {
    class func parseFromNSData(data:NSData) -> ProfileService.GetProfileStats {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfileStats.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfileStats {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfileStats.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetUpcomingAnniversaries.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.GetUpcomingAnniversaries.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetUpcomingAnniversaries.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingAnniversaries.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetUpcomingAnniversaries.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetUpcomingAnniversaries.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.GetUpcomingAnniversaries.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetUpcomingAnniversaries.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingAnniversaries.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetUpcomingAnniversaries.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetUpcomingAnniversaries {
    class func parseFromNSData(data:NSData) -> ProfileService.GetUpcomingAnniversaries {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetUpcomingAnniversaries.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingAnniversaries {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetUpcomingAnniversaries.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetUpcomingBirthdays.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.GetUpcomingBirthdays.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetUpcomingBirthdays.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingBirthdays.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetUpcomingBirthdays.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetUpcomingBirthdays.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.GetUpcomingBirthdays.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetUpcomingBirthdays.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingBirthdays.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetUpcomingBirthdays.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetUpcomingBirthdays {
    class func parseFromNSData(data:NSData) -> ProfileService.GetUpcomingBirthdays {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetUpcomingBirthdays.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetUpcomingBirthdays {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetUpcomingBirthdays.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetRecentHires.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.GetRecentHires.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetRecentHires.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetRecentHires.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetRecentHires.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetRecentHires.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.GetRecentHires.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetRecentHires.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetRecentHires.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetRecentHires.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetRecentHires {
    class func parseFromNSData(data:NSData) -> ProfileService.GetRecentHires {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetRecentHires.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetRecentHires {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetRecentHires.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetActiveTags.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.GetActiveTags.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetActiveTags.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetActiveTags.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetActiveTags.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetActiveTags.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.GetActiveTags.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetActiveTags.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetActiveTags.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetActiveTags.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetActiveTags {
    class func parseFromNSData(data:NSData) -> ProfileService.GetActiveTags {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetActiveTags.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetActiveTags {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetActiveTags.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService {
    class func parseFromNSData(data:NSData) -> ProfileService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
