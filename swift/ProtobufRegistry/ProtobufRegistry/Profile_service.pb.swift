// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

public struct ProfileServiceRoot {
  public static var sharedInstance : ProfileServiceRoot {
   struct Static {
       static let instance : ProfileServiceRoot = ProfileServiceRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    OrganizationServiceRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    NoteServiceRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

public func == (lhs: ProfileService.Containers, rhs: ProfileService.Containers) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.CreateProfile, rhs: ProfileService.CreateProfile) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.GetProfile, rhs: ProfileService.GetProfile) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService.GetExtendedProfile, rhs: ProfileService.GetExtendedProfile) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: ProfileService, rhs: ProfileService) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final public class ProfileService : GeneratedMessage {


  //Nested type declaration start

    final public class Containers : GeneratedMessage {


      //Nested type declaration start

        final public class Profile : GeneratedMessage {
          public private(set) var hasId:Bool = false
          public private(set) var id:String = ""

          public private(set) var hasOrganizationId:Bool = false
          public private(set) var organization_id:String = ""

          public private(set) var hasUserId:Bool = false
          public private(set) var user_id:String = ""

          public private(set) var hasAddressId:Bool = false
          public private(set) var address_id:String = ""

          public private(set) var hasTitle:Bool = false
          public private(set) var title:String = ""

          public private(set) var hasFirstName:Bool = false
          public private(set) var first_name:String = ""

          public private(set) var hasLastName:Bool = false
          public private(set) var last_name:String = ""

          public private(set) var hasCellPhone:Bool = false
          public private(set) var cell_phone:String = ""

          public private(set) var hasWorkPhone:Bool = false
          public private(set) var work_phone:String = ""

          public private(set) var hasImageUrl:Bool = false
          public private(set) var image_url:String = ""

          public private(set) var hasLocation:Bool = false
          public private(set) var location:String = ""

          public private(set) var hasEmail:Bool = false
          public private(set) var email:String = ""

          public private(set) var hasTeamId:Bool = false
          public private(set) var team_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasId {
              output.writeString(1, value:id)
            }
            if hasOrganizationId {
              output.writeString(2, value:organization_id)
            }
            if hasUserId {
              output.writeString(3, value:user_id)
            }
            if hasAddressId {
              output.writeString(4, value:address_id)
            }
            if hasTitle {
              output.writeString(5, value:title)
            }
            if hasFirstName {
              output.writeString(6, value:first_name)
            }
            if hasLastName {
              output.writeString(7, value:last_name)
            }
            if hasCellPhone {
              output.writeString(8, value:cell_phone)
            }
            if hasWorkPhone {
              output.writeString(9, value:work_phone)
            }
            if hasImageUrl {
              output.writeString(10, value:image_url)
            }
            if hasLocation {
              output.writeString(11, value:location)
            }
            if hasEmail {
              output.writeString(12, value:email)
            }
            if hasTeamId {
              output.writeString(13, value:team_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasId {
              size += WireFormat.computeStringSize(1, value:id)
            }
            if hasOrganizationId {
              size += WireFormat.computeStringSize(2, value:organization_id)
            }
            if hasUserId {
              size += WireFormat.computeStringSize(3, value:user_id)
            }
            if hasAddressId {
              size += WireFormat.computeStringSize(4, value:address_id)
            }
            if hasTitle {
              size += WireFormat.computeStringSize(5, value:title)
            }
            if hasFirstName {
              size += WireFormat.computeStringSize(6, value:first_name)
            }
            if hasLastName {
              size += WireFormat.computeStringSize(7, value:last_name)
            }
            if hasCellPhone {
              size += WireFormat.computeStringSize(8, value:cell_phone)
            }
            if hasWorkPhone {
              size += WireFormat.computeStringSize(9, value:work_phone)
            }
            if hasImageUrl {
              size += WireFormat.computeStringSize(10, value:image_url)
            }
            if hasLocation {
              size += WireFormat.computeStringSize(11, value:location)
            }
            if hasEmail {
              size += WireFormat.computeStringSize(12, value:email)
            }
            if hasTeamId {
              size += WireFormat.computeStringSize(13, value:team_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.Containers.Profile {
            return ProfileService.Containers.Profile.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.Containers.Profile {
            return ProfileService.Containers.Profile.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.Containers.Profile {
            return ProfileService.Containers.Profile.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.Containers.Profile {
            return ProfileService.Containers.Profile.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.Containers.Profile {
            return ProfileService.Containers.Profile.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.Containers.Profile {
            return ProfileService.Containers.Profile.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.Containers.ProfileBuilder {
            return ProfileService.Containers.Profile.classBuilder() as ProfileService.Containers.ProfileBuilder
          }
          public func builder() -> ProfileService.Containers.ProfileBuilder {
            return classBuilder() as ProfileService.Containers.ProfileBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.Containers.ProfileBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.Containers.Profile.builder()
          }
          public func toBuilder() -> ProfileService.Containers.ProfileBuilder {
            return ProfileService.Containers.Profile.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.Containers.Profile) -> ProfileService.Containers.ProfileBuilder {
            return ProfileService.Containers.Profile.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasId {
              output += "\(indent) id: \(id) \n"
            }
            if hasOrganizationId {
              output += "\(indent) organization_id: \(organization_id) \n"
            }
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            if hasAddressId {
              output += "\(indent) address_id: \(address_id) \n"
            }
            if hasTitle {
              output += "\(indent) title: \(title) \n"
            }
            if hasFirstName {
              output += "\(indent) first_name: \(first_name) \n"
            }
            if hasLastName {
              output += "\(indent) last_name: \(last_name) \n"
            }
            if hasCellPhone {
              output += "\(indent) cell_phone: \(cell_phone) \n"
            }
            if hasWorkPhone {
              output += "\(indent) work_phone: \(work_phone) \n"
            }
            if hasImageUrl {
              output += "\(indent) image_url: \(image_url) \n"
            }
            if hasLocation {
              output += "\(indent) location: \(location) \n"
            }
            if hasEmail {
              output += "\(indent) email: \(email) \n"
            }
            if hasTeamId {
              output += "\(indent) team_id: \(team_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasId {
                     hashCode = (hashCode &* 31) &+ id.hashValue
                  }
                  if hasOrganizationId {
                     hashCode = (hashCode &* 31) &+ organization_id.hashValue
                  }
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  if hasAddressId {
                     hashCode = (hashCode &* 31) &+ address_id.hashValue
                  }
                  if hasTitle {
                     hashCode = (hashCode &* 31) &+ title.hashValue
                  }
                  if hasFirstName {
                     hashCode = (hashCode &* 31) &+ first_name.hashValue
                  }
                  if hasLastName {
                     hashCode = (hashCode &* 31) &+ last_name.hashValue
                  }
                  if hasCellPhone {
                     hashCode = (hashCode &* 31) &+ cell_phone.hashValue
                  }
                  if hasWorkPhone {
                     hashCode = (hashCode &* 31) &+ work_phone.hashValue
                  }
                  if hasImageUrl {
                     hashCode = (hashCode &* 31) &+ image_url.hashValue
                  }
                  if hasLocation {
                     hashCode = (hashCode &* 31) &+ location.hashValue
                  }
                  if hasEmail {
                     hashCode = (hashCode &* 31) &+ email.hashValue
                  }
                  if hasTeamId {
                     hashCode = (hashCode &* 31) &+ team_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.Containers.Profile"
          }
          override public func className() -> String {
              return "ProfileService.Containers.Profile"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.Containers.Profile.self
          }


          //Meta information declaration end

        }

        final public class ProfileBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.Containers.Profile

          required override public init () {
             builderResult = ProfileService.Containers.Profile()
             super.init()
          }
          public var hasId:Bool {
               get {
                    return builderResult.hasId
               }
          }
          public var id:String {
               get {
                    return builderResult.id
               }
               set (value) {
                   builderResult.hasId = true
                   builderResult.id = value
               }
          }
          public func clearId() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasId = false
               builderResult.id = ""
               return self
          }
          public var hasOrganizationId:Bool {
               get {
                    return builderResult.hasOrganizationId
               }
          }
          public var organization_id:String {
               get {
                    return builderResult.organization_id
               }
               set (value) {
                   builderResult.hasOrganizationId = true
                   builderResult.organization_id = value
               }
          }
          public func clearOrganizationId() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasOrganizationId = false
               builderResult.organization_id = ""
               return self
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          public var hasAddressId:Bool {
               get {
                    return builderResult.hasAddressId
               }
          }
          public var address_id:String {
               get {
                    return builderResult.address_id
               }
               set (value) {
                   builderResult.hasAddressId = true
                   builderResult.address_id = value
               }
          }
          public func clearAddressId() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasAddressId = false
               builderResult.address_id = ""
               return self
          }
          public var hasTitle:Bool {
               get {
                    return builderResult.hasTitle
               }
          }
          public var title:String {
               get {
                    return builderResult.title
               }
               set (value) {
                   builderResult.hasTitle = true
                   builderResult.title = value
               }
          }
          public func clearTitle() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasTitle = false
               builderResult.title = ""
               return self
          }
          public var hasFirstName:Bool {
               get {
                    return builderResult.hasFirstName
               }
          }
          public var first_name:String {
               get {
                    return builderResult.first_name
               }
               set (value) {
                   builderResult.hasFirstName = true
                   builderResult.first_name = value
               }
          }
          public func clearFirstName() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasFirstName = false
               builderResult.first_name = ""
               return self
          }
          public var hasLastName:Bool {
               get {
                    return builderResult.hasLastName
               }
          }
          public var last_name:String {
               get {
                    return builderResult.last_name
               }
               set (value) {
                   builderResult.hasLastName = true
                   builderResult.last_name = value
               }
          }
          public func clearLastName() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasLastName = false
               builderResult.last_name = ""
               return self
          }
          public var hasCellPhone:Bool {
               get {
                    return builderResult.hasCellPhone
               }
          }
          public var cell_phone:String {
               get {
                    return builderResult.cell_phone
               }
               set (value) {
                   builderResult.hasCellPhone = true
                   builderResult.cell_phone = value
               }
          }
          public func clearCellPhone() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasCellPhone = false
               builderResult.cell_phone = ""
               return self
          }
          public var hasWorkPhone:Bool {
               get {
                    return builderResult.hasWorkPhone
               }
          }
          public var work_phone:String {
               get {
                    return builderResult.work_phone
               }
               set (value) {
                   builderResult.hasWorkPhone = true
                   builderResult.work_phone = value
               }
          }
          public func clearWorkPhone() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasWorkPhone = false
               builderResult.work_phone = ""
               return self
          }
          public var hasImageUrl:Bool {
               get {
                    return builderResult.hasImageUrl
               }
          }
          public var image_url:String {
               get {
                    return builderResult.image_url
               }
               set (value) {
                   builderResult.hasImageUrl = true
                   builderResult.image_url = value
               }
          }
          public func clearImageUrl() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasImageUrl = false
               builderResult.image_url = ""
               return self
          }
          public var hasLocation:Bool {
               get {
                    return builderResult.hasLocation
               }
          }
          public var location:String {
               get {
                    return builderResult.location
               }
               set (value) {
                   builderResult.hasLocation = true
                   builderResult.location = value
               }
          }
          public func clearLocation() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasLocation = false
               builderResult.location = ""
               return self
          }
          public var hasEmail:Bool {
               get {
                    return builderResult.hasEmail
               }
          }
          public var email:String {
               get {
                    return builderResult.email
               }
               set (value) {
                   builderResult.hasEmail = true
                   builderResult.email = value
               }
          }
          public func clearEmail() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasEmail = false
               builderResult.email = ""
               return self
          }
          public var hasTeamId:Bool {
               get {
                    return builderResult.hasTeamId
               }
          }
          public var team_id:String {
               get {
                    return builderResult.team_id
               }
               set (value) {
                   builderResult.hasTeamId = true
                   builderResult.team_id = value
               }
          }
          public func clearTeamId() -> ProfileService.Containers.ProfileBuilder{
               builderResult.hasTeamId = false
               builderResult.team_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.Containers.ProfileBuilder {
            builderResult = ProfileService.Containers.Profile()
            return self
          }
          public override func clone() -> ProfileService.Containers.ProfileBuilder {
            return ProfileService.Containers.Profile.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.Containers.Profile {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.Containers.Profile {
            var returnMe:ProfileService.Containers.Profile = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.Containers.Profile) -> ProfileService.Containers.ProfileBuilder {
            if (other == ProfileService.Containers.Profile()) {
             return self
            }
            if other.hasId {
                 id = other.id
            }
            if other.hasOrganizationId {
                 organization_id = other.organization_id
            }
            if other.hasUserId {
                 user_id = other.user_id
            }
            if other.hasAddressId {
                 address_id = other.address_id
            }
            if other.hasTitle {
                 title = other.title
            }
            if other.hasFirstName {
                 first_name = other.first_name
            }
            if other.hasLastName {
                 last_name = other.last_name
            }
            if other.hasCellPhone {
                 cell_phone = other.cell_phone
            }
            if other.hasWorkPhone {
                 work_phone = other.work_phone
            }
            if other.hasImageUrl {
                 image_url = other.image_url
            }
            if other.hasLocation {
                 location = other.location
            }
            if other.hasEmail {
                 email = other.email
            }
            if other.hasTeamId {
                 team_id = other.team_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.Containers.ProfileBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.Containers.ProfileBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                id = input.readString()

              case 18 :
                organization_id = input.readString()

              case 26 :
                user_id = input.readString()

              case 34 :
                address_id = input.readString()

              case 42 :
                title = input.readString()

              case 50 :
                first_name = input.readString()

              case 58 :
                last_name = input.readString()

              case 66 :
                cell_phone = input.readString()

              case 74 :
                work_phone = input.readString()

              case 82 :
                image_url = input.readString()

              case 90 :
                location = input.readString()

              case 98 :
                email = input.readString()

              case 106 :
                team_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.Containers {
        return ProfileService.Containers.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.Containers {
        return ProfileService.Containers.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.Containers {
        return ProfileService.Containers.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.Containers {
        return ProfileService.Containers.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.Containers {
        return ProfileService.Containers.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.Containers {
        return ProfileService.Containers.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.ContainersBuilder {
        return ProfileService.Containers.classBuilder() as ProfileService.ContainersBuilder
      }
      public func builder() -> ProfileService.ContainersBuilder {
        return classBuilder() as ProfileService.ContainersBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.ContainersBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.Containers.builder()
      }
      public func toBuilder() -> ProfileService.ContainersBuilder {
        return ProfileService.Containers.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.Containers) -> ProfileService.ContainersBuilder {
        return ProfileService.Containers.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.Containers"
      }
      override public func className() -> String {
          return "ProfileService.Containers"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.Containers.self
      }


      //Meta information declaration end

    }

    final public class ContainersBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.Containers

      required override public init () {
         builderResult = ProfileService.Containers()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.ContainersBuilder {
        builderResult = ProfileService.Containers()
        return self
      }
      public override func clone() -> ProfileService.ContainersBuilder {
        return ProfileService.Containers.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.Containers {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.Containers {
        var returnMe:ProfileService.Containers = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.Containers) -> ProfileService.ContainersBuilder {
        if (other == ProfileService.Containers()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.ContainersBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.ContainersBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class CreateProfile : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          public private(set) var hasProfile:Bool = false
          public private(set) var profile:ProfileService.Containers.Profile = ProfileService.Containers.Profile()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfile {
              output.writeMessage(1, value:profile)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfile {
              size += WireFormat.computeMessageSize(1, value:profile)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.CreateProfile.Request {
            return ProfileService.CreateProfile.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile.Request {
            return ProfileService.CreateProfile.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.CreateProfile.Request {
            return ProfileService.CreateProfile.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.CreateProfile.Request {
            return ProfileService.CreateProfile.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.CreateProfile.Request {
            return ProfileService.CreateProfile.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile.Request {
            return ProfileService.CreateProfile.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.CreateProfile.RequestBuilder {
            return ProfileService.CreateProfile.Request.classBuilder() as ProfileService.CreateProfile.RequestBuilder
          }
          public func builder() -> ProfileService.CreateProfile.RequestBuilder {
            return classBuilder() as ProfileService.CreateProfile.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.CreateProfile.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.CreateProfile.Request.builder()
          }
          public func toBuilder() -> ProfileService.CreateProfile.RequestBuilder {
            return ProfileService.CreateProfile.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.CreateProfile.Request) -> ProfileService.CreateProfile.RequestBuilder {
            return ProfileService.CreateProfile.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfile {
              output += "\(indent) profile {\n"
              profile.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfile {
                    hashCode = (hashCode &* 31) &+ profile.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.CreateProfile.Request"
          }
          override public func className() -> String {
              return "ProfileService.CreateProfile.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.CreateProfile.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.CreateProfile.Request

          required override public init () {
             builderResult = ProfileService.CreateProfile.Request()
             super.init()
          }
          public var hasProfile:Bool {
               get {
                   return builderResult.hasProfile
               }
          }
          public var profile:ProfileService.Containers.Profile {
               get {
                   return builderResult.profile
               }
               set (value) {
                   builderResult.hasProfile = true
                   builderResult.profile = value
               }
          }
          public func setProfileBuilder(builderForValue:ProfileService.Containers.ProfileBuilder) -> ProfileService.CreateProfile.RequestBuilder {
            profile = builderForValue.build()
            return self
          }
          public func mergeProfile(value:ProfileService.Containers.Profile) -> ProfileService.CreateProfile.RequestBuilder {
            if (builderResult.hasProfile) {
              builderResult.profile = ProfileService.Containers.Profile.builderWithPrototype(builderResult.profile).mergeFrom(value).buildPartial()
            } else {
              builderResult.profile = value
            }
            builderResult.hasProfile = true
            return self
          }
          public func clearProfile() -> ProfileService.CreateProfile.RequestBuilder {
            builderResult.hasProfile = false
            builderResult.profile = ProfileService.Containers.Profile()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.CreateProfile.RequestBuilder {
            builderResult = ProfileService.CreateProfile.Request()
            return self
          }
          public override func clone() -> ProfileService.CreateProfile.RequestBuilder {
            return ProfileService.CreateProfile.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.CreateProfile.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.CreateProfile.Request {
            var returnMe:ProfileService.CreateProfile.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.CreateProfile.Request) -> ProfileService.CreateProfile.RequestBuilder {
            if (other == ProfileService.CreateProfile.Request()) {
             return self
            }
            if (other.hasProfile) {
                mergeProfile(other.profile)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.CreateProfile.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:ProfileService.Containers.ProfileBuilder = ProfileService.Containers.Profile.builder()
                if hasProfile {
                  subBuilder.mergeFrom(profile)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                profile = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public private(set) var hasProfile:Bool = false
          public private(set) var profile:ProfileService.Containers.Profile = ProfileService.Containers.Profile()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfile {
              output.writeMessage(1, value:profile)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfile {
              size += WireFormat.computeMessageSize(1, value:profile)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.CreateProfile.Response {
            return ProfileService.CreateProfile.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile.Response {
            return ProfileService.CreateProfile.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.CreateProfile.Response {
            return ProfileService.CreateProfile.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.CreateProfile.Response {
            return ProfileService.CreateProfile.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.CreateProfile.Response {
            return ProfileService.CreateProfile.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile.Response {
            return ProfileService.CreateProfile.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.CreateProfile.ResponseBuilder {
            return ProfileService.CreateProfile.Response.classBuilder() as ProfileService.CreateProfile.ResponseBuilder
          }
          public func builder() -> ProfileService.CreateProfile.ResponseBuilder {
            return classBuilder() as ProfileService.CreateProfile.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.CreateProfile.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.CreateProfile.Response.builder()
          }
          public func toBuilder() -> ProfileService.CreateProfile.ResponseBuilder {
            return ProfileService.CreateProfile.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.CreateProfile.Response) -> ProfileService.CreateProfile.ResponseBuilder {
            return ProfileService.CreateProfile.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfile {
              output += "\(indent) profile {\n"
              profile.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfile {
                    hashCode = (hashCode &* 31) &+ profile.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.CreateProfile.Response"
          }
          override public func className() -> String {
              return "ProfileService.CreateProfile.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.CreateProfile.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.CreateProfile.Response

          required override public init () {
             builderResult = ProfileService.CreateProfile.Response()
             super.init()
          }
          public var hasProfile:Bool {
               get {
                   return builderResult.hasProfile
               }
          }
          public var profile:ProfileService.Containers.Profile {
               get {
                   return builderResult.profile
               }
               set (value) {
                   builderResult.hasProfile = true
                   builderResult.profile = value
               }
          }
          public func setProfileBuilder(builderForValue:ProfileService.Containers.ProfileBuilder) -> ProfileService.CreateProfile.ResponseBuilder {
            profile = builderForValue.build()
            return self
          }
          public func mergeProfile(value:ProfileService.Containers.Profile) -> ProfileService.CreateProfile.ResponseBuilder {
            if (builderResult.hasProfile) {
              builderResult.profile = ProfileService.Containers.Profile.builderWithPrototype(builderResult.profile).mergeFrom(value).buildPartial()
            } else {
              builderResult.profile = value
            }
            builderResult.hasProfile = true
            return self
          }
          public func clearProfile() -> ProfileService.CreateProfile.ResponseBuilder {
            builderResult.hasProfile = false
            builderResult.profile = ProfileService.Containers.Profile()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.CreateProfile.ResponseBuilder {
            builderResult = ProfileService.CreateProfile.Response()
            return self
          }
          public override func clone() -> ProfileService.CreateProfile.ResponseBuilder {
            return ProfileService.CreateProfile.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.CreateProfile.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.CreateProfile.Response {
            var returnMe:ProfileService.CreateProfile.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.CreateProfile.Response) -> ProfileService.CreateProfile.ResponseBuilder {
            if (other == ProfileService.CreateProfile.Response()) {
             return self
            }
            if (other.hasProfile) {
                mergeProfile(other.profile)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.CreateProfile.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:ProfileService.Containers.ProfileBuilder = ProfileService.Containers.Profile.builder()
                if hasProfile {
                  subBuilder.mergeFrom(profile)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                profile = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.CreateProfile {
        return ProfileService.CreateProfile.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile {
        return ProfileService.CreateProfile.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.CreateProfile {
        return ProfileService.CreateProfile.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.CreateProfile {
        return ProfileService.CreateProfile.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.CreateProfile {
        return ProfileService.CreateProfile.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile {
        return ProfileService.CreateProfile.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.CreateProfileBuilder {
        return ProfileService.CreateProfile.classBuilder() as ProfileService.CreateProfileBuilder
      }
      public func builder() -> ProfileService.CreateProfileBuilder {
        return classBuilder() as ProfileService.CreateProfileBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.CreateProfileBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.CreateProfile.builder()
      }
      public func toBuilder() -> ProfileService.CreateProfileBuilder {
        return ProfileService.CreateProfile.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.CreateProfile) -> ProfileService.CreateProfileBuilder {
        return ProfileService.CreateProfile.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.CreateProfile"
      }
      override public func className() -> String {
          return "ProfileService.CreateProfile"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.CreateProfile.self
      }


      //Meta information declaration end

    }

    final public class CreateProfileBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.CreateProfile

      required override public init () {
         builderResult = ProfileService.CreateProfile()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.CreateProfileBuilder {
        builderResult = ProfileService.CreateProfile()
        return self
      }
      public override func clone() -> ProfileService.CreateProfileBuilder {
        return ProfileService.CreateProfile.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.CreateProfile {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.CreateProfile {
        var returnMe:ProfileService.CreateProfile = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.CreateProfile) -> ProfileService.CreateProfileBuilder {
        if (other == ProfileService.CreateProfile()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.CreateProfileBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfileBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetProfile : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {


          //OneOf declaration start

          public enum LookupKey {
            case LookupKeyOneOfNotSet

            public func checkOneOfIsSet() -> Bool {
                 switch self {
                 case .LookupKeyOneOfNotSet:
                      return false
                 default:
                      return true
                 }
            }
            case ProfileId(String)

            public static func getProfileId(value:LookupKey) ->String? {
                 switch value {
                 case .ProfileId(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
            case UserId(String)

            public static func getUserId(value:LookupKey) ->String? {
                 switch value {
                 case .UserId(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
          }



          //OneOf declaration end

          private var storageLookupKey:ProfileService.GetProfile.Request.LookupKey =  ProfileService.GetProfile.Request.LookupKey.LookupKeyOneOfNotSet
          public private(set) var hasProfileId:Bool {
                get {
                     if ProfileService.GetProfile.Request.LookupKey.getProfileId(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var profile_id:String!{
               get {
                    return ProfileService.GetProfile.Request.LookupKey.getProfileId(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = ProfileService.GetProfile.Request.LookupKey.ProfileId(newvalue)
               }
          }
          public private(set) var hasUserId:Bool {
                get {
                     if ProfileService.GetProfile.Request.LookupKey.getUserId(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var user_id:String!{
               get {
                    return ProfileService.GetProfile.Request.LookupKey.getUserId(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = ProfileService.GetProfile.Request.LookupKey.UserId(newvalue)
               }
          }
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfileId {
              output.writeString(1, value:profile_id)
            }
            if hasUserId {
              output.writeString(2, value:user_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfileId {
              size += WireFormat.computeStringSize(1, value:profile_id)
            }
            if hasUserId {
              size += WireFormat.computeStringSize(2, value:user_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetProfile.Request {
            return ProfileService.GetProfile.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile.Request {
            return ProfileService.GetProfile.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetProfile.Request {
            return ProfileService.GetProfile.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetProfile.Request {
            return ProfileService.GetProfile.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetProfile.Request {
            return ProfileService.GetProfile.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile.Request {
            return ProfileService.GetProfile.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetProfile.RequestBuilder {
            return ProfileService.GetProfile.Request.classBuilder() as ProfileService.GetProfile.RequestBuilder
          }
          public func builder() -> ProfileService.GetProfile.RequestBuilder {
            return classBuilder() as ProfileService.GetProfile.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetProfile.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetProfile.Request.builder()
          }
          public func toBuilder() -> ProfileService.GetProfile.RequestBuilder {
            return ProfileService.GetProfile.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetProfile.Request) -> ProfileService.GetProfile.RequestBuilder {
            return ProfileService.GetProfile.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfileId {
              output += "\(indent) profile_id: \(profile_id) \n"
            }
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfileId {
                     hashCode = (hashCode &* 31) &+ profile_id.hashValue
                  }
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetProfile.Request"
          }
          override public func className() -> String {
              return "ProfileService.GetProfile.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetProfile.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetProfile.Request

          required override public init () {
             builderResult = ProfileService.GetProfile.Request()
             super.init()
          }
          public var hasProfileId:Bool {
               get {
                    return builderResult.hasProfileId
               }
          }
          public var profile_id:String {
               get {
                    return builderResult.profile_id
               }
               set (value) {
                   builderResult.hasProfileId = true
                   builderResult.profile_id = value
               }
          }
          public func clearProfileId() -> ProfileService.GetProfile.RequestBuilder{
               builderResult.hasProfileId = false
               builderResult.profile_id = ""
               return self
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> ProfileService.GetProfile.RequestBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetProfile.RequestBuilder {
            builderResult = ProfileService.GetProfile.Request()
            return self
          }
          public override func clone() -> ProfileService.GetProfile.RequestBuilder {
            return ProfileService.GetProfile.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetProfile.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetProfile.Request {
            var returnMe:ProfileService.GetProfile.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetProfile.Request) -> ProfileService.GetProfile.RequestBuilder {
            if (other == ProfileService.GetProfile.Request()) {
             return self
            }
            if other.hasProfileId {
                 profile_id = other.profile_id
            }
            if other.hasUserId {
                 user_id = other.user_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetProfile.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                profile_id = input.readString()

              case 18 :
                user_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public private(set) var hasProfile:Bool = false
          public private(set) var profile:ProfileService.Containers.Profile = ProfileService.Containers.Profile()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfile {
              output.writeMessage(1, value:profile)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfile {
              size += WireFormat.computeMessageSize(1, value:profile)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetProfile.Response {
            return ProfileService.GetProfile.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile.Response {
            return ProfileService.GetProfile.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetProfile.Response {
            return ProfileService.GetProfile.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetProfile.Response {
            return ProfileService.GetProfile.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetProfile.Response {
            return ProfileService.GetProfile.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile.Response {
            return ProfileService.GetProfile.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetProfile.ResponseBuilder {
            return ProfileService.GetProfile.Response.classBuilder() as ProfileService.GetProfile.ResponseBuilder
          }
          public func builder() -> ProfileService.GetProfile.ResponseBuilder {
            return classBuilder() as ProfileService.GetProfile.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetProfile.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetProfile.Response.builder()
          }
          public func toBuilder() -> ProfileService.GetProfile.ResponseBuilder {
            return ProfileService.GetProfile.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetProfile.Response) -> ProfileService.GetProfile.ResponseBuilder {
            return ProfileService.GetProfile.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfile {
              output += "\(indent) profile {\n"
              profile.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfile {
                    hashCode = (hashCode &* 31) &+ profile.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetProfile.Response"
          }
          override public func className() -> String {
              return "ProfileService.GetProfile.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetProfile.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetProfile.Response

          required override public init () {
             builderResult = ProfileService.GetProfile.Response()
             super.init()
          }
          public var hasProfile:Bool {
               get {
                   return builderResult.hasProfile
               }
          }
          public var profile:ProfileService.Containers.Profile {
               get {
                   return builderResult.profile
               }
               set (value) {
                   builderResult.hasProfile = true
                   builderResult.profile = value
               }
          }
          public func setProfileBuilder(builderForValue:ProfileService.Containers.ProfileBuilder) -> ProfileService.GetProfile.ResponseBuilder {
            profile = builderForValue.build()
            return self
          }
          public func mergeProfile(value:ProfileService.Containers.Profile) -> ProfileService.GetProfile.ResponseBuilder {
            if (builderResult.hasProfile) {
              builderResult.profile = ProfileService.Containers.Profile.builderWithPrototype(builderResult.profile).mergeFrom(value).buildPartial()
            } else {
              builderResult.profile = value
            }
            builderResult.hasProfile = true
            return self
          }
          public func clearProfile() -> ProfileService.GetProfile.ResponseBuilder {
            builderResult.hasProfile = false
            builderResult.profile = ProfileService.Containers.Profile()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetProfile.ResponseBuilder {
            builderResult = ProfileService.GetProfile.Response()
            return self
          }
          public override func clone() -> ProfileService.GetProfile.ResponseBuilder {
            return ProfileService.GetProfile.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetProfile.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetProfile.Response {
            var returnMe:ProfileService.GetProfile.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetProfile.Response) -> ProfileService.GetProfile.ResponseBuilder {
            if (other == ProfileService.GetProfile.Response()) {
             return self
            }
            if (other.hasProfile) {
                mergeProfile(other.profile)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetProfile.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:ProfileService.Containers.ProfileBuilder = ProfileService.Containers.Profile.builder()
                if hasProfile {
                  subBuilder.mergeFrom(profile)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                profile = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.GetProfile {
        return ProfileService.GetProfile.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile {
        return ProfileService.GetProfile.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetProfile {
        return ProfileService.GetProfile.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetProfile {
        return ProfileService.GetProfile.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetProfile {
        return ProfileService.GetProfile.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile {
        return ProfileService.GetProfile.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.GetProfileBuilder {
        return ProfileService.GetProfile.classBuilder() as ProfileService.GetProfileBuilder
      }
      public func builder() -> ProfileService.GetProfileBuilder {
        return classBuilder() as ProfileService.GetProfileBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.GetProfileBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.GetProfile.builder()
      }
      public func toBuilder() -> ProfileService.GetProfileBuilder {
        return ProfileService.GetProfile.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.GetProfile) -> ProfileService.GetProfileBuilder {
        return ProfileService.GetProfile.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.GetProfile"
      }
      override public func className() -> String {
          return "ProfileService.GetProfile"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.GetProfile.self
      }


      //Meta information declaration end

    }

    final public class GetProfileBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.GetProfile

      required override public init () {
         builderResult = ProfileService.GetProfile()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.GetProfileBuilder {
        builderResult = ProfileService.GetProfile()
        return self
      }
      public override func clone() -> ProfileService.GetProfileBuilder {
        return ProfileService.GetProfile.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.GetProfile {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.GetProfile {
        var returnMe:ProfileService.GetProfile = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.GetProfile) -> ProfileService.GetProfileBuilder {
        if (other == ProfileService.GetProfile()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetProfileBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfileBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetExtendedProfile : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {


          //OneOf declaration start

          public enum LookupKey {
            case LookupKeyOneOfNotSet

            public func checkOneOfIsSet() -> Bool {
                 switch self {
                 case .LookupKeyOneOfNotSet:
                      return false
                 default:
                      return true
                 }
            }
            case ProfileId(String)

            public static func getProfileId(value:LookupKey) ->String? {
                 switch value {
                 case .ProfileId(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
            case UserId(String)

            public static func getUserId(value:LookupKey) ->String? {
                 switch value {
                 case .UserId(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
          }



          //OneOf declaration end

          private var storageLookupKey:ProfileService.GetExtendedProfile.Request.LookupKey =  ProfileService.GetExtendedProfile.Request.LookupKey.LookupKeyOneOfNotSet
          public private(set) var hasProfileId:Bool {
                get {
                     if ProfileService.GetExtendedProfile.Request.LookupKey.getProfileId(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var profile_id:String!{
               get {
                    return ProfileService.GetExtendedProfile.Request.LookupKey.getProfileId(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = ProfileService.GetExtendedProfile.Request.LookupKey.ProfileId(newvalue)
               }
          }
          public private(set) var hasUserId:Bool {
                get {
                     if ProfileService.GetExtendedProfile.Request.LookupKey.getUserId(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var user_id:String!{
               get {
                    return ProfileService.GetExtendedProfile.Request.LookupKey.getUserId(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = ProfileService.GetExtendedProfile.Request.LookupKey.UserId(newvalue)
               }
          }
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfileId {
              output.writeString(1, value:profile_id)
            }
            if hasUserId {
              output.writeString(2, value:user_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfileId {
              size += WireFormat.computeStringSize(1, value:profile_id)
            }
            if hasUserId {
              size += WireFormat.computeStringSize(2, value:user_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetExtendedProfile.Request {
            return ProfileService.GetExtendedProfile.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile.Request {
            return ProfileService.GetExtendedProfile.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetExtendedProfile.Request {
            return ProfileService.GetExtendedProfile.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetExtendedProfile.Request {
            return ProfileService.GetExtendedProfile.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetExtendedProfile.Request {
            return ProfileService.GetExtendedProfile.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile.Request {
            return ProfileService.GetExtendedProfile.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetExtendedProfile.RequestBuilder {
            return ProfileService.GetExtendedProfile.Request.classBuilder() as ProfileService.GetExtendedProfile.RequestBuilder
          }
          public func builder() -> ProfileService.GetExtendedProfile.RequestBuilder {
            return classBuilder() as ProfileService.GetExtendedProfile.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetExtendedProfile.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetExtendedProfile.Request.builder()
          }
          public func toBuilder() -> ProfileService.GetExtendedProfile.RequestBuilder {
            return ProfileService.GetExtendedProfile.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetExtendedProfile.Request) -> ProfileService.GetExtendedProfile.RequestBuilder {
            return ProfileService.GetExtendedProfile.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfileId {
              output += "\(indent) profile_id: \(profile_id) \n"
            }
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfileId {
                     hashCode = (hashCode &* 31) &+ profile_id.hashValue
                  }
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetExtendedProfile.Request"
          }
          override public func className() -> String {
              return "ProfileService.GetExtendedProfile.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetExtendedProfile.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetExtendedProfile.Request

          required override public init () {
             builderResult = ProfileService.GetExtendedProfile.Request()
             super.init()
          }
          public var hasProfileId:Bool {
               get {
                    return builderResult.hasProfileId
               }
          }
          public var profile_id:String {
               get {
                    return builderResult.profile_id
               }
               set (value) {
                   builderResult.hasProfileId = true
                   builderResult.profile_id = value
               }
          }
          public func clearProfileId() -> ProfileService.GetExtendedProfile.RequestBuilder{
               builderResult.hasProfileId = false
               builderResult.profile_id = ""
               return self
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> ProfileService.GetExtendedProfile.RequestBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetExtendedProfile.RequestBuilder {
            builderResult = ProfileService.GetExtendedProfile.Request()
            return self
          }
          public override func clone() -> ProfileService.GetExtendedProfile.RequestBuilder {
            return ProfileService.GetExtendedProfile.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetExtendedProfile.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetExtendedProfile.Request {
            var returnMe:ProfileService.GetExtendedProfile.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetExtendedProfile.Request) -> ProfileService.GetExtendedProfile.RequestBuilder {
            if (other == ProfileService.GetExtendedProfile.Request()) {
             return self
            }
            if other.hasProfileId {
                 profile_id = other.profile_id
            }
            if other.hasUserId {
                 user_id = other.user_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetExtendedProfile.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                profile_id = input.readString()

              case 18 :
                user_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public private(set) var hasProfile:Bool = false
          public private(set) var profile:ProfileService.Containers.Profile = ProfileService.Containers.Profile()
          public private(set) var hasAddress:Bool = false
          public private(set) var address:OrganizationService.Containers.Address = OrganizationService.Containers.Address()
          public private(set) var hasManager:Bool = false
          public private(set) var manager:ProfileService.Containers.Profile = ProfileService.Containers.Profile()
          public private(set) var hasTeam:Bool = false
          public private(set) var team:OrganizationService.Containers.Team = OrganizationService.Containers.Team()
          public private(set) var hasNote:Bool = false
          public private(set) var note:NoteService.Containers.Note = NoteService.Containers.Note()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProfile {
              output.writeMessage(1, value:profile)
            }
            if hasAddress {
              output.writeMessage(2, value:address)
            }
            if hasManager {
              output.writeMessage(3, value:manager)
            }
            if hasTeam {
              output.writeMessage(4, value:team)
            }
            if hasNote {
              output.writeMessage(5, value:note)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasProfile {
              size += WireFormat.computeMessageSize(1, value:profile)
            }
            if hasAddress {
              size += WireFormat.computeMessageSize(2, value:address)
            }
            if hasManager {
              size += WireFormat.computeMessageSize(3, value:manager)
            }
            if hasTeam {
              size += WireFormat.computeMessageSize(4, value:team)
            }
            if hasNote {
              size += WireFormat.computeMessageSize(5, value:note)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> ProfileService.GetExtendedProfile.Response {
            return ProfileService.GetExtendedProfile.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile.Response {
            return ProfileService.GetExtendedProfile.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetExtendedProfile.Response {
            return ProfileService.GetExtendedProfile.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetExtendedProfile.Response {
            return ProfileService.GetExtendedProfile.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetExtendedProfile.Response {
            return ProfileService.GetExtendedProfile.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile.Response {
            return ProfileService.GetExtendedProfile.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            return ProfileService.GetExtendedProfile.Response.classBuilder() as ProfileService.GetExtendedProfile.ResponseBuilder
          }
          public func builder() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            return classBuilder() as ProfileService.GetExtendedProfile.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return ProfileService.GetExtendedProfile.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return ProfileService.GetExtendedProfile.Response.builder()
          }
          public func toBuilder() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            return ProfileService.GetExtendedProfile.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:ProfileService.GetExtendedProfile.Response) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            return ProfileService.GetExtendedProfile.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasProfile {
              output += "\(indent) profile {\n"
              profile.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasAddress {
              output += "\(indent) address {\n"
              address.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasManager {
              output += "\(indent) manager {\n"
              manager.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasTeam {
              output += "\(indent) team {\n"
              team.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasNote {
              output += "\(indent) note {\n"
              note.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProfile {
                    hashCode = (hashCode &* 31) &+ profile.hashValue
                  }
                  if hasAddress {
                    hashCode = (hashCode &* 31) &+ address.hashValue
                  }
                  if hasManager {
                    hashCode = (hashCode &* 31) &+ manager.hashValue
                  }
                  if hasTeam {
                    hashCode = (hashCode &* 31) &+ team.hashValue
                  }
                  if hasNote {
                    hashCode = (hashCode &* 31) &+ note.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "ProfileService.GetExtendedProfile.Response"
          }
          override public func className() -> String {
              return "ProfileService.GetExtendedProfile.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return ProfileService.GetExtendedProfile.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:ProfileService.GetExtendedProfile.Response

          required override public init () {
             builderResult = ProfileService.GetExtendedProfile.Response()
             super.init()
          }
          public var hasProfile:Bool {
               get {
                   return builderResult.hasProfile
               }
          }
          public var profile:ProfileService.Containers.Profile {
               get {
                   return builderResult.profile
               }
               set (value) {
                   builderResult.hasProfile = true
                   builderResult.profile = value
               }
          }
          public func setProfileBuilder(builderForValue:ProfileService.Containers.ProfileBuilder) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            profile = builderForValue.build()
            return self
          }
          public func mergeProfile(value:ProfileService.Containers.Profile) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            if (builderResult.hasProfile) {
              builderResult.profile = ProfileService.Containers.Profile.builderWithPrototype(builderResult.profile).mergeFrom(value).buildPartial()
            } else {
              builderResult.profile = value
            }
            builderResult.hasProfile = true
            return self
          }
          public func clearProfile() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            builderResult.hasProfile = false
            builderResult.profile = ProfileService.Containers.Profile()
            return self
          }
          public var hasAddress:Bool {
               get {
                   return builderResult.hasAddress
               }
          }
          public var address:OrganizationService.Containers.Address {
               get {
                   return builderResult.address
               }
               set (value) {
                   builderResult.hasAddress = true
                   builderResult.address = value
               }
          }
          public func setAddressBuilder(builderForValue:OrganizationService.Containers.AddressBuilder) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            address = builderForValue.build()
            return self
          }
          public func mergeAddress(value:OrganizationService.Containers.Address) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            if (builderResult.hasAddress) {
              builderResult.address = OrganizationService.Containers.Address.builderWithPrototype(builderResult.address).mergeFrom(value).buildPartial()
            } else {
              builderResult.address = value
            }
            builderResult.hasAddress = true
            return self
          }
          public func clearAddress() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            builderResult.hasAddress = false
            builderResult.address = OrganizationService.Containers.Address()
            return self
          }
          public var hasManager:Bool {
               get {
                   return builderResult.hasManager
               }
          }
          public var manager:ProfileService.Containers.Profile {
               get {
                   return builderResult.manager
               }
               set (value) {
                   builderResult.hasManager = true
                   builderResult.manager = value
               }
          }
          public func setManagerBuilder(builderForValue:ProfileService.Containers.ProfileBuilder) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            manager = builderForValue.build()
            return self
          }
          public func mergeManager(value:ProfileService.Containers.Profile) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            if (builderResult.hasManager) {
              builderResult.manager = ProfileService.Containers.Profile.builderWithPrototype(builderResult.manager).mergeFrom(value).buildPartial()
            } else {
              builderResult.manager = value
            }
            builderResult.hasManager = true
            return self
          }
          public func clearManager() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            builderResult.hasManager = false
            builderResult.manager = ProfileService.Containers.Profile()
            return self
          }
          public var hasTeam:Bool {
               get {
                   return builderResult.hasTeam
               }
          }
          public var team:OrganizationService.Containers.Team {
               get {
                   return builderResult.team
               }
               set (value) {
                   builderResult.hasTeam = true
                   builderResult.team = value
               }
          }
          public func setTeamBuilder(builderForValue:OrganizationService.Containers.TeamBuilder) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            team = builderForValue.build()
            return self
          }
          public func mergeTeam(value:OrganizationService.Containers.Team) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            if (builderResult.hasTeam) {
              builderResult.team = OrganizationService.Containers.Team.builderWithPrototype(builderResult.team).mergeFrom(value).buildPartial()
            } else {
              builderResult.team = value
            }
            builderResult.hasTeam = true
            return self
          }
          public func clearTeam() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            builderResult.hasTeam = false
            builderResult.team = OrganizationService.Containers.Team()
            return self
          }
          public var hasNote:Bool {
               get {
                   return builderResult.hasNote
               }
          }
          public var note:NoteService.Containers.Note {
               get {
                   return builderResult.note
               }
               set (value) {
                   builderResult.hasNote = true
                   builderResult.note = value
               }
          }
          public func setNoteBuilder(builderForValue:NoteService.Containers.NoteBuilder) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            note = builderForValue.build()
            return self
          }
          public func mergeNote(value:NoteService.Containers.Note) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            if (builderResult.hasNote) {
              builderResult.note = NoteService.Containers.Note.builderWithPrototype(builderResult.note).mergeFrom(value).buildPartial()
            } else {
              builderResult.note = value
            }
            builderResult.hasNote = true
            return self
          }
          public func clearNote() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            builderResult.hasNote = false
            builderResult.note = NoteService.Containers.Note()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            builderResult = ProfileService.GetExtendedProfile.Response()
            return self
          }
          public override func clone() -> ProfileService.GetExtendedProfile.ResponseBuilder {
            return ProfileService.GetExtendedProfile.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> ProfileService.GetExtendedProfile.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> ProfileService.GetExtendedProfile.Response {
            var returnMe:ProfileService.GetExtendedProfile.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:ProfileService.GetExtendedProfile.Response) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            if (other == ProfileService.GetExtendedProfile.Response()) {
             return self
            }
            if (other.hasProfile) {
                mergeProfile(other.profile)
            }
            if (other.hasAddress) {
                mergeAddress(other.address)
            }
            if (other.hasManager) {
                mergeManager(other.manager)
            }
            if (other.hasTeam) {
                mergeTeam(other.team)
            }
            if (other.hasNote) {
                mergeNote(other.note)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetExtendedProfile.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:ProfileService.Containers.ProfileBuilder = ProfileService.Containers.Profile.builder()
                if hasProfile {
                  subBuilder.mergeFrom(profile)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                profile = subBuilder.buildPartial()

              case 18 :
                var subBuilder:OrganizationService.Containers.AddressBuilder = OrganizationService.Containers.Address.builder()
                if hasAddress {
                  subBuilder.mergeFrom(address)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                address = subBuilder.buildPartial()

              case 26 :
                var subBuilder:ProfileService.Containers.ProfileBuilder = ProfileService.Containers.Profile.builder()
                if hasManager {
                  subBuilder.mergeFrom(manager)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                manager = subBuilder.buildPartial()

              case 34 :
                var subBuilder:OrganizationService.Containers.TeamBuilder = OrganizationService.Containers.Team.builder()
                if hasTeam {
                  subBuilder.mergeFrom(team)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                team = subBuilder.buildPartial()

              case 42 :
                var subBuilder:NoteService.Containers.NoteBuilder = NoteService.Containers.Note.builder()
                if hasNote {
                  subBuilder.mergeFrom(note)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                note = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> ProfileService.GetExtendedProfile {
        return ProfileService.GetExtendedProfile.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile {
        return ProfileService.GetExtendedProfile.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> ProfileService.GetExtendedProfile {
        return ProfileService.GetExtendedProfile.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService.GetExtendedProfile {
        return ProfileService.GetExtendedProfile.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService.GetExtendedProfile {
        return ProfileService.GetExtendedProfile.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile {
        return ProfileService.GetExtendedProfile.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> ProfileService.GetExtendedProfileBuilder {
        return ProfileService.GetExtendedProfile.classBuilder() as ProfileService.GetExtendedProfileBuilder
      }
      public func builder() -> ProfileService.GetExtendedProfileBuilder {
        return classBuilder() as ProfileService.GetExtendedProfileBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return ProfileService.GetExtendedProfileBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return ProfileService.GetExtendedProfile.builder()
      }
      public func toBuilder() -> ProfileService.GetExtendedProfileBuilder {
        return ProfileService.GetExtendedProfile.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:ProfileService.GetExtendedProfile) -> ProfileService.GetExtendedProfileBuilder {
        return ProfileService.GetExtendedProfile.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ProfileService.GetExtendedProfile"
      }
      override public func className() -> String {
          return "ProfileService.GetExtendedProfile"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ProfileService.GetExtendedProfile.self
      }


      //Meta information declaration end

    }

    final public class GetExtendedProfileBuilder : GeneratedMessageBuilder {
      private var builderResult:ProfileService.GetExtendedProfile

      required override public init () {
         builderResult = ProfileService.GetExtendedProfile()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> ProfileService.GetExtendedProfileBuilder {
        builderResult = ProfileService.GetExtendedProfile()
        return self
      }
      public override func clone() -> ProfileService.GetExtendedProfileBuilder {
        return ProfileService.GetExtendedProfile.builderWithPrototype(builderResult)
      }
      public override func build() -> ProfileService.GetExtendedProfile {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> ProfileService.GetExtendedProfile {
        var returnMe:ProfileService.GetExtendedProfile = builderResult
        return returnMe
      }
      public func mergeFrom(other:ProfileService.GetExtendedProfile) -> ProfileService.GetExtendedProfileBuilder {
        if (other == ProfileService.GetExtendedProfile()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileService.GetExtendedProfileBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfileBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  public class func parseFromData(data:[Byte]) -> ProfileService {
    return ProfileService.builder().mergeFromData(data).build()
  }
  public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ProfileService {
    return ProfileService.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> ProfileService {
    return ProfileService.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ProfileService {
    return ProfileService.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> ProfileService {
    return ProfileService.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileService {
    return ProfileService.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> ProfileServiceBuilder {
    return ProfileService.classBuilder() as ProfileServiceBuilder
  }
  public func builder() -> ProfileServiceBuilder {
    return classBuilder() as ProfileServiceBuilder
  }
  public override class func classBuilder() -> MessageBuilder {
    return ProfileServiceBuilder()
  }
  public override func classBuilder() -> MessageBuilder {
    return ProfileService.builder()
  }
  public func toBuilder() -> ProfileServiceBuilder {
    return ProfileService.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:ProfileService) -> ProfileServiceBuilder {
    return ProfileService.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "ProfileService"
  }
  override public func className() -> String {
      return "ProfileService"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return ProfileService.self
  }


  //Meta information declaration end

}

final public class ProfileServiceBuilder : GeneratedMessageBuilder {
  private var builderResult:ProfileService

  required override public init () {
     builderResult = ProfileService()
     super.init()
  }
  override public var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  public override func clear() -> ProfileServiceBuilder {
    builderResult = ProfileService()
    return self
  }
  public override func clone() -> ProfileServiceBuilder {
    return ProfileService.builderWithPrototype(builderResult)
  }
  public override func build() -> ProfileService {
       checkInitialized()
       return buildPartial()
  }
  public func buildPartial() -> ProfileService {
    var returnMe:ProfileService = builderResult
    return returnMe
  }
  public func mergeFrom(other:ProfileService) -> ProfileServiceBuilder {
    if (other == ProfileService()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream) ->ProfileServiceBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ProfileServiceBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


public extension ProfileService.Containers.Profile {
    class func parseFromNSData(data:NSData) -> ProfileService.Containers.Profile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.Containers.Profile.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.Containers.Profile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.Containers.Profile.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.Containers {
    class func parseFromNSData(data:NSData) -> ProfileService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.Containers.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.Containers.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.CreateProfile.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.CreateProfile.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateProfile.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateProfile.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.CreateProfile.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.CreateProfile.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateProfile.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateProfile.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.CreateProfile {
    class func parseFromNSData(data:NSData) -> ProfileService.CreateProfile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateProfile.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.CreateProfile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.CreateProfile.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetProfile.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.GetProfile.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfile.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfile.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetProfile.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.GetProfile.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfile.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfile.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetProfile {
    class func parseFromNSData(data:NSData) -> ProfileService.GetProfile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfile.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetProfile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetProfile.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetExtendedProfile.Request {
    class func parseFromNSData(data:NSData) -> ProfileService.GetExtendedProfile.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetExtendedProfile.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetExtendedProfile.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetExtendedProfile.Response {
    class func parseFromNSData(data:NSData) -> ProfileService.GetExtendedProfile.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetExtendedProfile.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetExtendedProfile.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService.GetExtendedProfile {
    class func parseFromNSData(data:NSData) -> ProfileService.GetExtendedProfile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetExtendedProfile.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService.GetExtendedProfile {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.GetExtendedProfile.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension ProfileService {
    class func parseFromNSData(data:NSData) -> ProfileService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ProfileService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ProfileService.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
