// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.Organization.Containers{ public struct Team { }}

public func == (lhs: Services.Organization.Containers.Team.PathPartV1, rhs: Services.Organization.Containers.Team.PathPartV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasOwnerProfileId == rhs.hasOwnerProfileId) && (!lhs.hasOwnerProfileId || lhs.ownerProfileId == rhs.ownerProfileId)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Organization.Containers.Team.TeamV1, rhs: Services.Organization.Containers.Team.TeamV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasOwnerProfileId == rhs.hasOwnerProfileId) && (!lhs.hasOwnerProfileId || lhs.ownerProfileId == rhs.ownerProfileId)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.path == rhs.path)
  fieldCheck = fieldCheck && (lhs.hasDepartment == rhs.hasDepartment) && (!lhs.hasDepartment || lhs.department == rhs.department)
  fieldCheck = fieldCheck && (lhs.hasProfileCount == rhs.hasProfileCount) && (!lhs.hasProfileCount || lhs.profileCount == rhs.profileCount)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Organization.Containers.Team.TeamDescendantsV1, rhs: Services.Organization.Containers.Team.TeamDescendantsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasDepth == rhs.hasDepth) && (!lhs.hasDepth || lhs.depth == rhs.depth)
  fieldCheck = fieldCheck && (lhs.hasParentTeamId == rhs.hasParentTeamId) && (!lhs.hasParentTeamId || lhs.parentTeamId == rhs.parentTeamId)
  fieldCheck = fieldCheck && (lhs.teams == rhs.teams)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.Organization.Containers.Team {
  public struct TeamRoot {
    public static var sharedInstance : TeamRoot {
     struct Static {
         static let instance : TeamRoot = TeamRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class PathPartV1 : GeneratedMessage, GeneratedMessageProtocol {
    public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "name": return name
           case "ownerProfileId": return ownerProfileId
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasOwnerProfileId:Bool = false
    public private(set) var ownerProfileId:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasName {
        output.writeString(3, value:name)
      }
      if hasOwnerProfileId {
        output.writeString(4, value:ownerProfileId)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if hasOwnerProfileId {
        serialize_size += ownerProfileId.computeStringSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.Team.PathPartV1 {
      return Services.Organization.Containers.Team.PathPartV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.Team.TeamRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.Team.PathPartV1 {
      return Services.Organization.Containers.Team.PathPartV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.Team.PathPartV1 {
      return Services.Organization.Containers.Team.PathPartV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.Team.PathPartV1 {
      return Services.Organization.Containers.Team.PathPartV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.Team.PathPartV1 {
      return Services.Organization.Containers.Team.PathPartV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.Team.PathPartV1 {
      return Services.Organization.Containers.Team.PathPartV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.Team.PathPartV1Builder {
      return Services.Organization.Containers.Team.PathPartV1.classBuilder() as! Services.Organization.Containers.Team.PathPartV1Builder
    }
    public func builder() -> Services.Organization.Containers.Team.PathPartV1Builder {
      return classBuilder() as! Services.Organization.Containers.Team.PathPartV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Team.PathPartV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Team.PathPartV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.Team.PathPartV1Builder {
      return Services.Organization.Containers.Team.PathPartV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.Team.PathPartV1) -> Services.Organization.Containers.Team.PathPartV1Builder {
      return Services.Organization.Containers.Team.PathPartV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasOwnerProfileId {
        output += "\(indent) ownerProfileId: \(ownerProfileId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasOwnerProfileId {
               hashCode = (hashCode &* 31) &+ ownerProfileId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.Team.PathPartV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.Team.PathPartV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.Team.PathPartV1.self
    }
    //Meta information declaration end

  }

  final public class PathPartV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.Team.PathPartV1

    required override public init () {
       builderResult = Services.Organization.Containers.Team.PathPartV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.Team.PathPartV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.Team.PathPartV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Organization.Containers.Team.PathPartV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Organization.Containers.Team.PathPartV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String)-> Services.Organization.Containers.Team.PathPartV1Builder {
      self.name = value
      return self
    }
    public func clearName() -> Services.Organization.Containers.Team.PathPartV1Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasOwnerProfileId:Bool {
         get {
              return builderResult.hasOwnerProfileId
         }
    }
    public var ownerProfileId:String {
         get {
              return builderResult.ownerProfileId
         }
         set (value) {
             builderResult.hasOwnerProfileId = true
             builderResult.ownerProfileId = value
         }
    }
    public func setOwnerProfileId(value:String)-> Services.Organization.Containers.Team.PathPartV1Builder {
      self.ownerProfileId = value
      return self
    }
    public func clearOwnerProfileId() -> Services.Organization.Containers.Team.PathPartV1Builder{
         builderResult.hasOwnerProfileId = false
         builderResult.ownerProfileId = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.Team.PathPartV1Builder {
      builderResult = Services.Organization.Containers.Team.PathPartV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.Team.PathPartV1Builder {
      return Services.Organization.Containers.Team.PathPartV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.Team.PathPartV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.Team.PathPartV1 {
      var returnMe:Services.Organization.Containers.Team.PathPartV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.Team.PathPartV1) -> Services.Organization.Containers.Team.PathPartV1Builder {
      if (other == Services.Organization.Containers.Team.PathPartV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasName {
           name = other.name
      }
      if other.hasOwnerProfileId {
           ownerProfileId = other.ownerProfileId
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.Team.PathPartV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.Team.PathPartV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          name = input.readString()

        case 34 :
          ownerProfileId = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class TeamV1 : GeneratedMessage, GeneratedMessageProtocol {
    public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "name": return name
           case "ownerProfileId": return ownerProfileId
           case "organizationId": return organizationId
           case "department": return department
           case "profileCount": return profileCount
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasOwnerProfileId:Bool = false
    public private(set) var ownerProfileId:String = ""

    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    public private(set) var hasDepartment:Bool = false
    public private(set) var department:String = ""

    public private(set) var hasProfileCount:Bool = false
    public private(set) var profileCount:UInt32 = UInt32(0)

    public private(set) var path:Array<Services.Organization.Containers.Team.PathPartV1>  = Array<Services.Organization.Containers.Team.PathPartV1>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasName {
        output.writeString(3, value:name)
      }
      if hasOwnerProfileId {
        output.writeString(4, value:ownerProfileId)
      }
      if hasOrganizationId {
        output.writeString(5, value:organizationId)
      }
      for oneElementpath in path {
          output.writeMessage(6, value:oneElementpath)
      }
      if hasDepartment {
        output.writeString(7, value:department)
      }
      if hasProfileCount {
        output.writeUInt32(8, value:profileCount)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if hasOwnerProfileId {
        serialize_size += ownerProfileId.computeStringSize(4)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(5)
      }
      for oneElementpath in path {
          serialize_size += oneElementpath.computeMessageSize(6)
      }
      if hasDepartment {
        serialize_size += department.computeStringSize(7)
      }
      if hasProfileCount {
        serialize_size += profileCount.computeUInt32Size(8)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.Team.TeamV1 {
      return Services.Organization.Containers.Team.TeamV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.Team.TeamRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.Team.TeamV1 {
      return Services.Organization.Containers.Team.TeamV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.Team.TeamV1 {
      return Services.Organization.Containers.Team.TeamV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.Team.TeamV1 {
      return Services.Organization.Containers.Team.TeamV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.Team.TeamV1 {
      return Services.Organization.Containers.Team.TeamV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.Team.TeamV1 {
      return Services.Organization.Containers.Team.TeamV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.Team.TeamV1Builder {
      return Services.Organization.Containers.Team.TeamV1.classBuilder() as! Services.Organization.Containers.Team.TeamV1Builder
    }
    public func builder() -> Services.Organization.Containers.Team.TeamV1Builder {
      return classBuilder() as! Services.Organization.Containers.Team.TeamV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Team.TeamV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Team.TeamV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.Team.TeamV1Builder {
      return Services.Organization.Containers.Team.TeamV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.Team.TeamV1) -> Services.Organization.Containers.Team.TeamV1Builder {
      return Services.Organization.Containers.Team.TeamV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasOwnerProfileId {
        output += "\(indent) ownerProfileId: \(ownerProfileId) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      var pathElementIndex:Int = 0
      for oneElementpath in path {
          output += "\(indent) path[\(pathElementIndex)] {\n"
          oneElementpath.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          pathElementIndex++
      }
      if hasDepartment {
        output += "\(indent) department: \(department) \n"
      }
      if hasProfileCount {
        output += "\(indent) profileCount: \(profileCount) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasOwnerProfileId {
               hashCode = (hashCode &* 31) &+ ownerProfileId.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            for oneElementpath in path {
                hashCode = (hashCode &* 31) &+ oneElementpath.hashValue
            }
            if hasDepartment {
               hashCode = (hashCode &* 31) &+ department.hashValue
            }
            if hasProfileCount {
               hashCode = (hashCode &* 31) &+ profileCount.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.Team.TeamV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.Team.TeamV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.Team.TeamV1.self
    }
    //Meta information declaration end

  }

  final public class TeamV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.Team.TeamV1

    required override public init () {
       builderResult = Services.Organization.Containers.Team.TeamV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.Team.TeamV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.Team.TeamV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Organization.Containers.Team.TeamV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Organization.Containers.Team.TeamV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String)-> Services.Organization.Containers.Team.TeamV1Builder {
      self.name = value
      return self
    }
    public func clearName() -> Services.Organization.Containers.Team.TeamV1Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasOwnerProfileId:Bool {
         get {
              return builderResult.hasOwnerProfileId
         }
    }
    public var ownerProfileId:String {
         get {
              return builderResult.ownerProfileId
         }
         set (value) {
             builderResult.hasOwnerProfileId = true
             builderResult.ownerProfileId = value
         }
    }
    public func setOwnerProfileId(value:String)-> Services.Organization.Containers.Team.TeamV1Builder {
      self.ownerProfileId = value
      return self
    }
    public func clearOwnerProfileId() -> Services.Organization.Containers.Team.TeamV1Builder{
         builderResult.hasOwnerProfileId = false
         builderResult.ownerProfileId = ""
         return self
    }
    public var hasOrganizationId:Bool {
         get {
              return builderResult.hasOrganizationId
         }
    }
    public var organizationId:String {
         get {
              return builderResult.organizationId
         }
         set (value) {
             builderResult.hasOrganizationId = true
             builderResult.organizationId = value
         }
    }
    public func setOrganizationId(value:String)-> Services.Organization.Containers.Team.TeamV1Builder {
      self.organizationId = value
      return self
    }
    public func clearOrganizationId() -> Services.Organization.Containers.Team.TeamV1Builder{
         builderResult.hasOrganizationId = false
         builderResult.organizationId = ""
         return self
    }
    public var path:Array<Services.Organization.Containers.Team.PathPartV1> {
         get {
             return builderResult.path
         }
         set (value) {
             builderResult.path = value
         }
    }
    public func setPath(value:Array<Services.Organization.Containers.Team.PathPartV1>)-> Services.Organization.Containers.Team.TeamV1Builder {
      self.path = value
      return self
    }
    public func clearPath() -> Services.Organization.Containers.Team.TeamV1Builder {
      builderResult.path.removeAll(keepCapacity: false)
      return self
    }
    public var hasDepartment:Bool {
         get {
              return builderResult.hasDepartment
         }
    }
    public var department:String {
         get {
              return builderResult.department
         }
         set (value) {
             builderResult.hasDepartment = true
             builderResult.department = value
         }
    }
    public func setDepartment(value:String)-> Services.Organization.Containers.Team.TeamV1Builder {
      self.department = value
      return self
    }
    public func clearDepartment() -> Services.Organization.Containers.Team.TeamV1Builder{
         builderResult.hasDepartment = false
         builderResult.department = ""
         return self
    }
    public var hasProfileCount:Bool {
         get {
              return builderResult.hasProfileCount
         }
    }
    public var profileCount:UInt32 {
         get {
              return builderResult.profileCount
         }
         set (value) {
             builderResult.hasProfileCount = true
             builderResult.profileCount = value
         }
    }
    public func setProfileCount(value:UInt32)-> Services.Organization.Containers.Team.TeamV1Builder {
      self.profileCount = value
      return self
    }
    public func clearProfileCount() -> Services.Organization.Containers.Team.TeamV1Builder{
         builderResult.hasProfileCount = false
         builderResult.profileCount = UInt32(0)
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.Team.TeamV1Builder {
      builderResult = Services.Organization.Containers.Team.TeamV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.Team.TeamV1Builder {
      return Services.Organization.Containers.Team.TeamV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.Team.TeamV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.Team.TeamV1 {
      var returnMe:Services.Organization.Containers.Team.TeamV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.Team.TeamV1) -> Services.Organization.Containers.Team.TeamV1Builder {
      if (other == Services.Organization.Containers.Team.TeamV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasName {
           name = other.name
      }
      if other.hasOwnerProfileId {
           ownerProfileId = other.ownerProfileId
      }
      if other.hasOrganizationId {
           organizationId = other.organizationId
      }
      if !other.path.isEmpty  {
         builderResult.path += other.path
      }
      if other.hasDepartment {
           department = other.department
      }
      if other.hasProfileCount {
           profileCount = other.profileCount
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.Team.TeamV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.Team.TeamV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          name = input.readString()

        case 34 :
          ownerProfileId = input.readString()

        case 42 :
          organizationId = input.readString()

        case 50 :
          var subBuilder = Services.Organization.Containers.Team.PathPartV1.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          path += [subBuilder.buildPartial()]

        case 58 :
          department = input.readString()

        case 64 :
          profileCount = input.readUInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class TeamDescendantsV1 : GeneratedMessage, GeneratedMessageProtocol {
    public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "depth": return depth
           case "parentTeamId": return parentTeamId
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasDepth:Bool = false
    public private(set) var depth:UInt32 = UInt32(0)

    public private(set) var hasParentTeamId:Bool = false
    public private(set) var parentTeamId:String = ""

    public private(set) var teams:Array<Services.Organization.Containers.Team.TeamV1>  = Array<Services.Organization.Containers.Team.TeamV1>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasDepth {
        output.writeUInt32(2, value:depth)
      }
      if hasParentTeamId {
        output.writeString(3, value:parentTeamId)
      }
      for oneElementteams in teams {
          output.writeMessage(4, value:oneElementteams)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasDepth {
        serialize_size += depth.computeUInt32Size(2)
      }
      if hasParentTeamId {
        serialize_size += parentTeamId.computeStringSize(3)
      }
      for oneElementteams in teams {
          serialize_size += oneElementteams.computeMessageSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.Team.TeamDescendantsV1 {
      return Services.Organization.Containers.Team.TeamDescendantsV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.Team.TeamRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.Team.TeamDescendantsV1 {
      return Services.Organization.Containers.Team.TeamDescendantsV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.Team.TeamDescendantsV1 {
      return Services.Organization.Containers.Team.TeamDescendantsV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.Team.TeamDescendantsV1 {
      return Services.Organization.Containers.Team.TeamDescendantsV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.Team.TeamDescendantsV1 {
      return Services.Organization.Containers.Team.TeamDescendantsV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.Team.TeamDescendantsV1 {
      return Services.Organization.Containers.Team.TeamDescendantsV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.Team.TeamDescendantsV1Builder {
      return Services.Organization.Containers.Team.TeamDescendantsV1.classBuilder() as! Services.Organization.Containers.Team.TeamDescendantsV1Builder
    }
    public func builder() -> Services.Organization.Containers.Team.TeamDescendantsV1Builder {
      return classBuilder() as! Services.Organization.Containers.Team.TeamDescendantsV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Team.TeamDescendantsV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Team.TeamDescendantsV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.Team.TeamDescendantsV1Builder {
      return Services.Organization.Containers.Team.TeamDescendantsV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.Team.TeamDescendantsV1) -> Services.Organization.Containers.Team.TeamDescendantsV1Builder {
      return Services.Organization.Containers.Team.TeamDescendantsV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasDepth {
        output += "\(indent) depth: \(depth) \n"
      }
      if hasParentTeamId {
        output += "\(indent) parentTeamId: \(parentTeamId) \n"
      }
      var teamsElementIndex:Int = 0
      for oneElementteams in teams {
          output += "\(indent) teams[\(teamsElementIndex)] {\n"
          oneElementteams.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          teamsElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasDepth {
               hashCode = (hashCode &* 31) &+ depth.hashValue
            }
            if hasParentTeamId {
               hashCode = (hashCode &* 31) &+ parentTeamId.hashValue
            }
            for oneElementteams in teams {
                hashCode = (hashCode &* 31) &+ oneElementteams.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.Team.TeamDescendantsV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.Team.TeamDescendantsV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.Team.TeamDescendantsV1.self
    }
    //Meta information declaration end

  }

  final public class TeamDescendantsV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.Team.TeamDescendantsV1

    required override public init () {
       builderResult = Services.Organization.Containers.Team.TeamDescendantsV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.Team.TeamDescendantsV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.Team.TeamDescendantsV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasDepth:Bool {
         get {
              return builderResult.hasDepth
         }
    }
    public var depth:UInt32 {
         get {
              return builderResult.depth
         }
         set (value) {
             builderResult.hasDepth = true
             builderResult.depth = value
         }
    }
    public func setDepth(value:UInt32)-> Services.Organization.Containers.Team.TeamDescendantsV1Builder {
      self.depth = value
      return self
    }
    public func clearDepth() -> Services.Organization.Containers.Team.TeamDescendantsV1Builder{
         builderResult.hasDepth = false
         builderResult.depth = UInt32(0)
         return self
    }
    public var hasParentTeamId:Bool {
         get {
              return builderResult.hasParentTeamId
         }
    }
    public var parentTeamId:String {
         get {
              return builderResult.parentTeamId
         }
         set (value) {
             builderResult.hasParentTeamId = true
             builderResult.parentTeamId = value
         }
    }
    public func setParentTeamId(value:String)-> Services.Organization.Containers.Team.TeamDescendantsV1Builder {
      self.parentTeamId = value
      return self
    }
    public func clearParentTeamId() -> Services.Organization.Containers.Team.TeamDescendantsV1Builder{
         builderResult.hasParentTeamId = false
         builderResult.parentTeamId = ""
         return self
    }
    public var teams:Array<Services.Organization.Containers.Team.TeamV1> {
         get {
             return builderResult.teams
         }
         set (value) {
             builderResult.teams = value
         }
    }
    public func setTeams(value:Array<Services.Organization.Containers.Team.TeamV1>)-> Services.Organization.Containers.Team.TeamDescendantsV1Builder {
      self.teams = value
      return self
    }
    public func clearTeams() -> Services.Organization.Containers.Team.TeamDescendantsV1Builder {
      builderResult.teams.removeAll(keepCapacity: false)
      return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.Team.TeamDescendantsV1Builder {
      builderResult = Services.Organization.Containers.Team.TeamDescendantsV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.Team.TeamDescendantsV1Builder {
      return Services.Organization.Containers.Team.TeamDescendantsV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.Team.TeamDescendantsV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.Team.TeamDescendantsV1 {
      var returnMe:Services.Organization.Containers.Team.TeamDescendantsV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.Team.TeamDescendantsV1) -> Services.Organization.Containers.Team.TeamDescendantsV1Builder {
      if (other == Services.Organization.Containers.Team.TeamDescendantsV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasDepth {
           depth = other.depth
      }
      if other.hasParentTeamId {
           parentTeamId = other.parentTeamId
      }
      if !other.teams.isEmpty  {
         builderResult.teams += other.teams
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.Team.TeamDescendantsV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.Team.TeamDescendantsV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 16 :
          depth = input.readUInt32()

        case 26 :
          parentTeamId = input.readString()

        case 34 :
          var subBuilder = Services.Organization.Containers.Team.TeamV1.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          teams += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
