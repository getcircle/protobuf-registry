// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file get_descendants.proto

import Foundation

public extension Services.Organization.Actions{ public struct GetDescendants { }}

public func == (lhs: Services.Organization.Actions.GetDescendants.RequestV1, rhs: Services.Organization.Actions.GetDescendants.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasProfileId == rhs.hasProfileId) && (!lhs.hasProfileId || lhs.profileId == rhs.profileId)
  fieldCheck = fieldCheck && (lhs.hasTeamId == rhs.hasTeamId) && (!lhs.hasTeamId || lhs.teamId == rhs.teamId)
  fieldCheck = fieldCheck && (lhs.hasDirect == rhs.hasDirect) && (!lhs.hasDirect || lhs.direct == rhs.direct)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Organization.Actions.GetDescendants.ResponseV1, rhs: Services.Organization.Actions.GetDescendants.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.profileIds == rhs.profileIds)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Organization.Actions.GetDescendants {
  public struct GetDescendantsRoot {
    public static var sharedInstance : GetDescendantsRoot {
     struct Static {
         static let instance : GetDescendantsRoot = GetDescendantsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasProfileId:Bool = false
    public private(set) var profileId:String = ""

    public private(set) var hasTeamId:Bool = false
    public private(set) var teamId:String = ""

    public private(set) var hasDirect:Bool = false
    public private(set) var direct:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasProfileId {
        try output.writeString(1, value:profileId)
      }
      if hasTeamId {
        try output.writeString(2, value:teamId)
      }
      if hasDirect {
        try output.writeBool(3, value:direct)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasProfileId {
        serialize_size += profileId.computeStringSize(1)
      }
      if hasTeamId {
        serialize_size += teamId.computeStringSize(2)
      }
      if hasDirect {
        serialize_size += direct.computeBoolSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Actions.GetDescendants.RequestV1> {
      var mergedArray = Array<Services.Organization.Actions.GetDescendants.RequestV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetDescendants.RequestV1? {
      return try Services.Organization.Actions.GetDescendants.RequestV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Actions.GetDescendants.RequestV1 {
      return try Services.Organization.Actions.GetDescendants.RequestV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Actions.GetDescendants.GetDescendantsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetDescendants.RequestV1 {
      return try Services.Organization.Actions.GetDescendants.RequestV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetDescendants.RequestV1 {
      return try Services.Organization.Actions.GetDescendants.RequestV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetDescendants.RequestV1 {
      return try Services.Organization.Actions.GetDescendants.RequestV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetDescendants.RequestV1 {
      return try Services.Organization.Actions.GetDescendants.RequestV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetDescendants.RequestV1 {
      return try Services.Organization.Actions.GetDescendants.RequestV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Actions.GetDescendants.RequestV1.Builder {
      return Services.Organization.Actions.GetDescendants.RequestV1.classBuilder() as! Services.Organization.Actions.GetDescendants.RequestV1.Builder
    }
    public func getBuilder() -> Services.Organization.Actions.GetDescendants.RequestV1.Builder {
      return classBuilder() as! Services.Organization.Actions.GetDescendants.RequestV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetDescendants.RequestV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetDescendants.RequestV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Actions.GetDescendants.RequestV1.Builder {
      return try Services.Organization.Actions.GetDescendants.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Actions.GetDescendants.RequestV1) throws -> Services.Organization.Actions.GetDescendants.RequestV1.Builder {
      return try Services.Organization.Actions.GetDescendants.RequestV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasProfileId {
        output += "\(indent) profileId: \(profileId) \n"
      }
      if hasTeamId {
        output += "\(indent) teamId: \(teamId) \n"
      }
      if hasDirect {
        output += "\(indent) direct: \(direct) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasProfileId {
               hashCode = (hashCode &* 31) &+ profileId.hashValue
            }
            if hasTeamId {
               hashCode = (hashCode &* 31) &+ teamId.hashValue
            }
            if hasDirect {
               hashCode = (hashCode &* 31) &+ direct.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Actions.GetDescendants.RequestV1"
    }
    override public func className() -> String {
        return "Services.Organization.Actions.GetDescendants.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Actions.GetDescendants.RequestV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Actions.GetDescendants.RequestV1 = Services.Organization.Actions.GetDescendants.RequestV1()
      public func getMessage() -> Services.Organization.Actions.GetDescendants.RequestV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasProfileId:Bool {
           get {
                return builderResult.hasProfileId
           }
      }
      public var profileId:String {
           get {
                return builderResult.profileId
           }
           set (value) {
               builderResult.hasProfileId = true
               builderResult.profileId = value
           }
      }
      public func setProfileId(value:String) -> Services.Organization.Actions.GetDescendants.RequestV1.Builder {
        self.profileId = value
        return self
      }
      public func clearProfileId() -> Services.Organization.Actions.GetDescendants.RequestV1.Builder{
           builderResult.hasProfileId = false
           builderResult.profileId = ""
           return self
      }
      public var hasTeamId:Bool {
           get {
                return builderResult.hasTeamId
           }
      }
      public var teamId:String {
           get {
                return builderResult.teamId
           }
           set (value) {
               builderResult.hasTeamId = true
               builderResult.teamId = value
           }
      }
      public func setTeamId(value:String) -> Services.Organization.Actions.GetDescendants.RequestV1.Builder {
        self.teamId = value
        return self
      }
      public func clearTeamId() -> Services.Organization.Actions.GetDescendants.RequestV1.Builder{
           builderResult.hasTeamId = false
           builderResult.teamId = ""
           return self
      }
      public var hasDirect:Bool {
           get {
                return builderResult.hasDirect
           }
      }
      public var direct:Bool {
           get {
                return builderResult.direct
           }
           set (value) {
               builderResult.hasDirect = true
               builderResult.direct = value
           }
      }
      public func setDirect(value:Bool) -> Services.Organization.Actions.GetDescendants.RequestV1.Builder {
        self.direct = value
        return self
      }
      public func clearDirect() -> Services.Organization.Actions.GetDescendants.RequestV1.Builder{
           builderResult.hasDirect = false
           builderResult.direct = false
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Actions.GetDescendants.RequestV1.Builder {
        builderResult = Services.Organization.Actions.GetDescendants.RequestV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Actions.GetDescendants.RequestV1.Builder {
        return try Services.Organization.Actions.GetDescendants.RequestV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Actions.GetDescendants.RequestV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Actions.GetDescendants.RequestV1 {
        let returnMe:Services.Organization.Actions.GetDescendants.RequestV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Actions.GetDescendants.RequestV1) throws -> Services.Organization.Actions.GetDescendants.RequestV1.Builder {
        if other == Services.Organization.Actions.GetDescendants.RequestV1() {
         return self
        }
        if other.hasProfileId {
             profileId = other.profileId
        }
        if other.hasTeamId {
             teamId = other.teamId
        }
        if other.hasDirect {
             direct = other.direct
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetDescendants.RequestV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetDescendants.RequestV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            profileId = try input.readString()

          case 18 :
            teamId = try input.readString()

          case 24 :
            direct = try input.readBool()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var profileIds:Array<String> = Array<String>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if !profileIds.isEmpty {
        for oneValueprofileIds in profileIds {
          try output.writeString(1, value:oneValueprofileIds)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeProfileIds:Int32 = 0
      for oneValueprofileIds in profileIds {
          dataSizeProfileIds += oneValueprofileIds.computeStringSizeNoTag()
      }
      serialize_size += dataSizeProfileIds
      serialize_size += 1 * Int32(profileIds.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Actions.GetDescendants.ResponseV1> {
      var mergedArray = Array<Services.Organization.Actions.GetDescendants.ResponseV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetDescendants.ResponseV1? {
      return try Services.Organization.Actions.GetDescendants.ResponseV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Actions.GetDescendants.ResponseV1 {
      return try Services.Organization.Actions.GetDescendants.ResponseV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Actions.GetDescendants.GetDescendantsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetDescendants.ResponseV1 {
      return try Services.Organization.Actions.GetDescendants.ResponseV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetDescendants.ResponseV1 {
      return try Services.Organization.Actions.GetDescendants.ResponseV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetDescendants.ResponseV1 {
      return try Services.Organization.Actions.GetDescendants.ResponseV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetDescendants.ResponseV1 {
      return try Services.Organization.Actions.GetDescendants.ResponseV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetDescendants.ResponseV1 {
      return try Services.Organization.Actions.GetDescendants.ResponseV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Actions.GetDescendants.ResponseV1.Builder {
      return Services.Organization.Actions.GetDescendants.ResponseV1.classBuilder() as! Services.Organization.Actions.GetDescendants.ResponseV1.Builder
    }
    public func getBuilder() -> Services.Organization.Actions.GetDescendants.ResponseV1.Builder {
      return classBuilder() as! Services.Organization.Actions.GetDescendants.ResponseV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetDescendants.ResponseV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetDescendants.ResponseV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Actions.GetDescendants.ResponseV1.Builder {
      return try Services.Organization.Actions.GetDescendants.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Actions.GetDescendants.ResponseV1) throws -> Services.Organization.Actions.GetDescendants.ResponseV1.Builder {
      return try Services.Organization.Actions.GetDescendants.ResponseV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      var profileIdsElementIndex:Int = 0
      for oneValueprofileIds in profileIds  {
          output += "\(indent) profileIds[\(profileIdsElementIndex)]: \(oneValueprofileIds)\n"
          profileIdsElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueprofileIds in profileIds {
                hashCode = (hashCode &* 31) &+ oneValueprofileIds.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Actions.GetDescendants.ResponseV1"
    }
    override public func className() -> String {
        return "Services.Organization.Actions.GetDescendants.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Actions.GetDescendants.ResponseV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Actions.GetDescendants.ResponseV1 = Services.Organization.Actions.GetDescendants.ResponseV1()
      public func getMessage() -> Services.Organization.Actions.GetDescendants.ResponseV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var profileIds:Array<String> {
           get {
               return builderResult.profileIds
           }
           set (array) {
               builderResult.profileIds = array
           }
      }
      public func setProfileIds(value:Array<String>) -> Services.Organization.Actions.GetDescendants.ResponseV1.Builder {
        self.profileIds = value
        return self
      }
      public func clearProfileIds() -> Services.Organization.Actions.GetDescendants.ResponseV1.Builder {
         builderResult.profileIds.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Actions.GetDescendants.ResponseV1.Builder {
        builderResult = Services.Organization.Actions.GetDescendants.ResponseV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Actions.GetDescendants.ResponseV1.Builder {
        return try Services.Organization.Actions.GetDescendants.ResponseV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Actions.GetDescendants.ResponseV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Actions.GetDescendants.ResponseV1 {
        let returnMe:Services.Organization.Actions.GetDescendants.ResponseV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Actions.GetDescendants.ResponseV1) throws -> Services.Organization.Actions.GetDescendants.ResponseV1.Builder {
        if other == Services.Organization.Actions.GetDescendants.ResponseV1() {
         return self
        }
        if !other.profileIds.isEmpty {
            builderResult.profileIds += other.profileIds
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetDescendants.ResponseV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetDescendants.ResponseV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            profileIds += [try input.readString()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
