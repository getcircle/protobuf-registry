// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

public struct UserServiceRoot {
  public static var sharedInstance : UserServiceRoot {
   struct Static {
       static let instance : UserServiceRoot = UserServiceRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

public func == (lhs: UserService.Containers, rhs: UserService.Containers) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.CreateUser, rhs: UserService.CreateUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.UpdateUser, rhs: UserService.UpdateUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.GetUser, rhs: UserService.GetUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.ValidUser, rhs: UserService.ValidUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.AuthenticateUser, rhs: UserService.AuthenticateUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.SendVerificationCode, rhs: UserService.SendVerificationCode) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.VerifyVerificationCode, rhs: UserService.VerifyVerificationCode) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService, rhs: UserService) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final public class UserService : GeneratedMessage {


  //Nested type declaration start

    final public class Containers : GeneratedMessage {


      //Nested type declaration start

        final public class User : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "id": return id
                 case "primary_email": return primary_email
                 case "is_admin": return is_admin
                 case "is_active": return is_active
                 case "phone_number": return phone_number
                 default: return nil
                 }
          }

          public private(set) var hasId:Bool = false
          public private(set) var id:String = ""

          public private(set) var hasPrimaryEmail:Bool = false
          public private(set) var primary_email:String = ""

          public private(set) var hasIsAdmin:Bool = false
          public private(set) var is_admin:Bool = false

          public private(set) var hasIsActive:Bool = false
          public private(set) var is_active:Bool = false

          public private(set) var hasPhoneNumber:Bool = false
          public private(set) var phone_number:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasId {
              output.writeString(1, value:id)
            }
            if hasPrimaryEmail {
              output.writeString(2, value:primary_email)
            }
            if hasIsAdmin {
              output.writeBool(3, value:is_admin)
            }
            if hasIsActive {
              output.writeBool(4, value:is_active)
            }
            if hasPhoneNumber {
              output.writeString(5, value:phone_number)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasId {
              size += WireFormat.computeStringSize(1, value:id)
            }
            if hasPrimaryEmail {
              size += WireFormat.computeStringSize(2, value:primary_email)
            }
            if hasIsAdmin {
              size += WireFormat.computeBoolSize(3, value:is_admin)
            }
            if hasIsActive {
              size += WireFormat.computeBoolSize(4, value:is_active)
            }
            if hasPhoneNumber {
              size += WireFormat.computeStringSize(5, value:phone_number)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.Containers.User {
            return UserService.Containers.User.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.Containers.User {
            return UserService.Containers.User.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.Containers.User {
            return UserService.Containers.User.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.Containers.User {
            return UserService.Containers.User.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.Containers.User {
            return UserService.Containers.User.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.Containers.User {
            return UserService.Containers.User.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.Containers.UserBuilder {
            return UserService.Containers.User.classBuilder() as UserService.Containers.UserBuilder
          }
          public func builder() -> UserService.Containers.UserBuilder {
            return classBuilder() as UserService.Containers.UserBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.Containers.UserBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.Containers.User.builder()
          }
          public func toBuilder() -> UserService.Containers.UserBuilder {
            return UserService.Containers.User.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.Containers.User) -> UserService.Containers.UserBuilder {
            return UserService.Containers.User.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasId {
              output += "\(indent) id: \(id) \n"
            }
            if hasPrimaryEmail {
              output += "\(indent) primary_email: \(primary_email) \n"
            }
            if hasIsAdmin {
              output += "\(indent) is_admin: \(is_admin) \n"
            }
            if hasIsActive {
              output += "\(indent) is_active: \(is_active) \n"
            }
            if hasPhoneNumber {
              output += "\(indent) phone_number: \(phone_number) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasId {
                     hashCode = (hashCode &* 31) &+ id.hashValue
                  }
                  if hasPrimaryEmail {
                     hashCode = (hashCode &* 31) &+ primary_email.hashValue
                  }
                  if hasIsAdmin {
                     hashCode = (hashCode &* 31) &+ is_admin.hashValue
                  }
                  if hasIsActive {
                     hashCode = (hashCode &* 31) &+ is_active.hashValue
                  }
                  if hasPhoneNumber {
                     hashCode = (hashCode &* 31) &+ phone_number.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.Containers.User"
          }
          override public func className() -> String {
              return "UserService.Containers.User"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.Containers.User.self
          }


          //Meta information declaration end

        }

        final public class UserBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.Containers.User

          required override public init () {
             builderResult = UserService.Containers.User()
             super.init()
          }
          public var hasId:Bool {
               get {
                    return builderResult.hasId
               }
          }
          public var id:String {
               get {
                    return builderResult.id
               }
               set (value) {
                   builderResult.hasId = true
                   builderResult.id = value
               }
          }
          public func clearId() -> UserService.Containers.UserBuilder{
               builderResult.hasId = false
               builderResult.id = ""
               return self
          }
          public var hasPrimaryEmail:Bool {
               get {
                    return builderResult.hasPrimaryEmail
               }
          }
          public var primary_email:String {
               get {
                    return builderResult.primary_email
               }
               set (value) {
                   builderResult.hasPrimaryEmail = true
                   builderResult.primary_email = value
               }
          }
          public func clearPrimaryEmail() -> UserService.Containers.UserBuilder{
               builderResult.hasPrimaryEmail = false
               builderResult.primary_email = ""
               return self
          }
          public var hasIsAdmin:Bool {
               get {
                    return builderResult.hasIsAdmin
               }
          }
          public var is_admin:Bool {
               get {
                    return builderResult.is_admin
               }
               set (value) {
                   builderResult.hasIsAdmin = true
                   builderResult.is_admin = value
               }
          }
          public func clearIsAdmin() -> UserService.Containers.UserBuilder{
               builderResult.hasIsAdmin = false
               builderResult.is_admin = false
               return self
          }
          public var hasIsActive:Bool {
               get {
                    return builderResult.hasIsActive
               }
          }
          public var is_active:Bool {
               get {
                    return builderResult.is_active
               }
               set (value) {
                   builderResult.hasIsActive = true
                   builderResult.is_active = value
               }
          }
          public func clearIsActive() -> UserService.Containers.UserBuilder{
               builderResult.hasIsActive = false
               builderResult.is_active = false
               return self
          }
          public var hasPhoneNumber:Bool {
               get {
                    return builderResult.hasPhoneNumber
               }
          }
          public var phone_number:String {
               get {
                    return builderResult.phone_number
               }
               set (value) {
                   builderResult.hasPhoneNumber = true
                   builderResult.phone_number = value
               }
          }
          public func clearPhoneNumber() -> UserService.Containers.UserBuilder{
               builderResult.hasPhoneNumber = false
               builderResult.phone_number = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.Containers.UserBuilder {
            builderResult = UserService.Containers.User()
            return self
          }
          public override func clone() -> UserService.Containers.UserBuilder {
            return UserService.Containers.User.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.Containers.User {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.Containers.User {
            var returnMe:UserService.Containers.User = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.Containers.User) -> UserService.Containers.UserBuilder {
            if other.hasId {
                 id = other.id
            }
            if other.hasPrimaryEmail {
                 primary_email = other.primary_email
            }
            if other.hasIsAdmin {
                 is_admin = other.is_admin
            }
            if other.hasIsActive {
                 is_active = other.is_active
            }
            if other.hasPhoneNumber {
                 phone_number = other.phone_number
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.Containers.UserBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.Containers.UserBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                id = input.readString()

              case 18 :
                primary_email = input.readString()

              case 24 :
                is_admin = input.readBool()

              case 32 :
                is_active = input.readBool()

              case 42 :
                phone_number = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.Containers {
        return UserService.Containers.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.Containers {
        return UserService.Containers.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.Containers {
        return UserService.Containers.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.Containers {
        return UserService.Containers.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.Containers {
        return UserService.Containers.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.Containers {
        return UserService.Containers.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.ContainersBuilder {
        return UserService.Containers.classBuilder() as UserService.ContainersBuilder
      }
      public func builder() -> UserService.ContainersBuilder {
        return classBuilder() as UserService.ContainersBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.ContainersBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.Containers.builder()
      }
      public func toBuilder() -> UserService.ContainersBuilder {
        return UserService.Containers.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.Containers) -> UserService.ContainersBuilder {
        return UserService.Containers.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.Containers"
      }
      override public func className() -> String {
          return "UserService.Containers"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.Containers.self
      }


      //Meta information declaration end

    }

    final public class ContainersBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.Containers

      required override public init () {
         builderResult = UserService.Containers()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.ContainersBuilder {
        builderResult = UserService.Containers()
        return self
      }
      public override func clone() -> UserService.ContainersBuilder {
        return UserService.Containers.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.Containers {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.Containers {
        var returnMe:UserService.Containers = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.Containers) -> UserService.ContainersBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.ContainersBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.ContainersBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class CreateUser : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "password": return password
                 case "email": return email
                 default: return nil
                 }
          }

          public private(set) var hasPassword:Bool = false
          public private(set) var password:String = ""

          public private(set) var hasEmail:Bool = false
          public private(set) var email:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasPassword {
              output.writeString(1, value:password)
            }
            if hasEmail {
              output.writeString(2, value:email)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasPassword {
              size += WireFormat.computeStringSize(1, value:password)
            }
            if hasEmail {
              size += WireFormat.computeStringSize(2, value:email)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.CreateUser.Request {
            return UserService.CreateUser.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.CreateUser.Request {
            return UserService.CreateUser.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.CreateUser.Request {
            return UserService.CreateUser.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.CreateUser.Request {
            return UserService.CreateUser.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.CreateUser.Request {
            return UserService.CreateUser.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CreateUser.Request {
            return UserService.CreateUser.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.CreateUser.RequestBuilder {
            return UserService.CreateUser.Request.classBuilder() as UserService.CreateUser.RequestBuilder
          }
          public func builder() -> UserService.CreateUser.RequestBuilder {
            return classBuilder() as UserService.CreateUser.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.CreateUser.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.CreateUser.Request.builder()
          }
          public func toBuilder() -> UserService.CreateUser.RequestBuilder {
            return UserService.CreateUser.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.CreateUser.Request) -> UserService.CreateUser.RequestBuilder {
            return UserService.CreateUser.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasPassword {
              output += "\(indent) password: \(password) \n"
            }
            if hasEmail {
              output += "\(indent) email: \(email) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasPassword {
                     hashCode = (hashCode &* 31) &+ password.hashValue
                  }
                  if hasEmail {
                     hashCode = (hashCode &* 31) &+ email.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.CreateUser.Request"
          }
          override public func className() -> String {
              return "UserService.CreateUser.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.CreateUser.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.CreateUser.Request

          required override public init () {
             builderResult = UserService.CreateUser.Request()
             super.init()
          }
          public var hasPassword:Bool {
               get {
                    return builderResult.hasPassword
               }
          }
          public var password:String {
               get {
                    return builderResult.password
               }
               set (value) {
                   builderResult.hasPassword = true
                   builderResult.password = value
               }
          }
          public func clearPassword() -> UserService.CreateUser.RequestBuilder{
               builderResult.hasPassword = false
               builderResult.password = ""
               return self
          }
          public var hasEmail:Bool {
               get {
                    return builderResult.hasEmail
               }
          }
          public var email:String {
               get {
                    return builderResult.email
               }
               set (value) {
                   builderResult.hasEmail = true
                   builderResult.email = value
               }
          }
          public func clearEmail() -> UserService.CreateUser.RequestBuilder{
               builderResult.hasEmail = false
               builderResult.email = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.CreateUser.RequestBuilder {
            builderResult = UserService.CreateUser.Request()
            return self
          }
          public override func clone() -> UserService.CreateUser.RequestBuilder {
            return UserService.CreateUser.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.CreateUser.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.CreateUser.Request {
            var returnMe:UserService.CreateUser.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.CreateUser.Request) -> UserService.CreateUser.RequestBuilder {
            if other.hasPassword {
                 password = other.password
            }
            if other.hasEmail {
                 email = other.email
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.CreateUser.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CreateUser.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                password = input.readString()

              case 18 :
                email = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "user": return user
                 default: return nil
                 }
          }

          public private(set) var hasUser:Bool = false
          public private(set) var user:UserService.Containers.User = UserService.Containers.User()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUser {
              output.writeMessage(1, value:user)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUser {
              size += WireFormat.computeMessageSize(1, value:user)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.CreateUser.Response {
            return UserService.CreateUser.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.CreateUser.Response {
            return UserService.CreateUser.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.CreateUser.Response {
            return UserService.CreateUser.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.CreateUser.Response {
            return UserService.CreateUser.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.CreateUser.Response {
            return UserService.CreateUser.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CreateUser.Response {
            return UserService.CreateUser.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.CreateUser.ResponseBuilder {
            return UserService.CreateUser.Response.classBuilder() as UserService.CreateUser.ResponseBuilder
          }
          public func builder() -> UserService.CreateUser.ResponseBuilder {
            return classBuilder() as UserService.CreateUser.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.CreateUser.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.CreateUser.Response.builder()
          }
          public func toBuilder() -> UserService.CreateUser.ResponseBuilder {
            return UserService.CreateUser.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.CreateUser.Response) -> UserService.CreateUser.ResponseBuilder {
            return UserService.CreateUser.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUser {
              output += "\(indent) user {\n"
              user.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUser {
                    hashCode = (hashCode &* 31) &+ user.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.CreateUser.Response"
          }
          override public func className() -> String {
              return "UserService.CreateUser.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.CreateUser.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.CreateUser.Response

          required override public init () {
             builderResult = UserService.CreateUser.Response()
             super.init()
          }
          public var hasUser:Bool {
               get {
                   return builderResult.hasUser
               }
          }
          public var user:UserService.Containers.User {
               get {
                   return builderResult.user
               }
               set (value) {
                   builderResult.hasUser = true
                   builderResult.user = value
               }
          }
          public func setUserBuilder(builderForValue:UserService.Containers.UserBuilder) -> UserService.CreateUser.ResponseBuilder {
            user = builderForValue.build()
            return self
          }
          public func mergeUser(value:UserService.Containers.User) -> UserService.CreateUser.ResponseBuilder {
            if (builderResult.hasUser) {
              builderResult.user = UserService.Containers.User.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
            } else {
              builderResult.user = value
            }
            builderResult.hasUser = true
            return self
          }
          public func clearUser() -> UserService.CreateUser.ResponseBuilder {
            builderResult.hasUser = false
            builderResult.user = UserService.Containers.User()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.CreateUser.ResponseBuilder {
            builderResult = UserService.CreateUser.Response()
            return self
          }
          public override func clone() -> UserService.CreateUser.ResponseBuilder {
            return UserService.CreateUser.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.CreateUser.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.CreateUser.Response {
            var returnMe:UserService.CreateUser.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.CreateUser.Response) -> UserService.CreateUser.ResponseBuilder {
            if (other.hasUser) {
                mergeUser(other.user)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.CreateUser.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CreateUser.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:UserService.Containers.UserBuilder = UserService.Containers.User.builder()
                if hasUser {
                  subBuilder.mergeFrom(user)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                user = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.CreateUser {
        return UserService.CreateUser.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.CreateUser {
        return UserService.CreateUser.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.CreateUser {
        return UserService.CreateUser.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.CreateUser {
        return UserService.CreateUser.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.CreateUser {
        return UserService.CreateUser.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CreateUser {
        return UserService.CreateUser.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.CreateUserBuilder {
        return UserService.CreateUser.classBuilder() as UserService.CreateUserBuilder
      }
      public func builder() -> UserService.CreateUserBuilder {
        return classBuilder() as UserService.CreateUserBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.CreateUserBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.CreateUser.builder()
      }
      public func toBuilder() -> UserService.CreateUserBuilder {
        return UserService.CreateUser.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.CreateUser) -> UserService.CreateUserBuilder {
        return UserService.CreateUser.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.CreateUser"
      }
      override public func className() -> String {
          return "UserService.CreateUser"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.CreateUser.self
      }


      //Meta information declaration end

    }

    final public class CreateUserBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.CreateUser

      required override public init () {
         builderResult = UserService.CreateUser()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.CreateUserBuilder {
        builderResult = UserService.CreateUser()
        return self
      }
      public override func clone() -> UserService.CreateUserBuilder {
        return UserService.CreateUser.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.CreateUser {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.CreateUser {
        var returnMe:UserService.CreateUser = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.CreateUser) -> UserService.CreateUserBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.CreateUserBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CreateUserBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class UpdateUser : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "user": return user
                 default: return nil
                 }
          }

          public private(set) var hasUser:Bool = false
          public private(set) var user:UserService.Containers.User = UserService.Containers.User()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUser {
              output.writeMessage(1, value:user)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUser {
              size += WireFormat.computeMessageSize(1, value:user)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.UpdateUser.Request {
            return UserService.UpdateUser.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser.Request {
            return UserService.UpdateUser.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.UpdateUser.Request {
            return UserService.UpdateUser.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.UpdateUser.Request {
            return UserService.UpdateUser.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.UpdateUser.Request {
            return UserService.UpdateUser.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser.Request {
            return UserService.UpdateUser.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.UpdateUser.RequestBuilder {
            return UserService.UpdateUser.Request.classBuilder() as UserService.UpdateUser.RequestBuilder
          }
          public func builder() -> UserService.UpdateUser.RequestBuilder {
            return classBuilder() as UserService.UpdateUser.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.UpdateUser.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.UpdateUser.Request.builder()
          }
          public func toBuilder() -> UserService.UpdateUser.RequestBuilder {
            return UserService.UpdateUser.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.UpdateUser.Request) -> UserService.UpdateUser.RequestBuilder {
            return UserService.UpdateUser.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUser {
              output += "\(indent) user {\n"
              user.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUser {
                    hashCode = (hashCode &* 31) &+ user.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.UpdateUser.Request"
          }
          override public func className() -> String {
              return "UserService.UpdateUser.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.UpdateUser.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.UpdateUser.Request

          required override public init () {
             builderResult = UserService.UpdateUser.Request()
             super.init()
          }
          public var hasUser:Bool {
               get {
                   return builderResult.hasUser
               }
          }
          public var user:UserService.Containers.User {
               get {
                   return builderResult.user
               }
               set (value) {
                   builderResult.hasUser = true
                   builderResult.user = value
               }
          }
          public func setUserBuilder(builderForValue:UserService.Containers.UserBuilder) -> UserService.UpdateUser.RequestBuilder {
            user = builderForValue.build()
            return self
          }
          public func mergeUser(value:UserService.Containers.User) -> UserService.UpdateUser.RequestBuilder {
            if (builderResult.hasUser) {
              builderResult.user = UserService.Containers.User.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
            } else {
              builderResult.user = value
            }
            builderResult.hasUser = true
            return self
          }
          public func clearUser() -> UserService.UpdateUser.RequestBuilder {
            builderResult.hasUser = false
            builderResult.user = UserService.Containers.User()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.UpdateUser.RequestBuilder {
            builderResult = UserService.UpdateUser.Request()
            return self
          }
          public override func clone() -> UserService.UpdateUser.RequestBuilder {
            return UserService.UpdateUser.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.UpdateUser.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.UpdateUser.Request {
            var returnMe:UserService.UpdateUser.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.UpdateUser.Request) -> UserService.UpdateUser.RequestBuilder {
            if (other.hasUser) {
                mergeUser(other.user)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.UpdateUser.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:UserService.Containers.UserBuilder = UserService.Containers.User.builder()
                if hasUser {
                  subBuilder.mergeFrom(user)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                user = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "user": return user
                 default: return nil
                 }
          }

          public private(set) var hasUser:Bool = false
          public private(set) var user:UserService.Containers.User = UserService.Containers.User()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUser {
              output.writeMessage(1, value:user)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUser {
              size += WireFormat.computeMessageSize(1, value:user)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.UpdateUser.Response {
            return UserService.UpdateUser.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser.Response {
            return UserService.UpdateUser.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.UpdateUser.Response {
            return UserService.UpdateUser.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.UpdateUser.Response {
            return UserService.UpdateUser.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.UpdateUser.Response {
            return UserService.UpdateUser.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser.Response {
            return UserService.UpdateUser.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.UpdateUser.ResponseBuilder {
            return UserService.UpdateUser.Response.classBuilder() as UserService.UpdateUser.ResponseBuilder
          }
          public func builder() -> UserService.UpdateUser.ResponseBuilder {
            return classBuilder() as UserService.UpdateUser.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.UpdateUser.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.UpdateUser.Response.builder()
          }
          public func toBuilder() -> UserService.UpdateUser.ResponseBuilder {
            return UserService.UpdateUser.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.UpdateUser.Response) -> UserService.UpdateUser.ResponseBuilder {
            return UserService.UpdateUser.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUser {
              output += "\(indent) user {\n"
              user.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUser {
                    hashCode = (hashCode &* 31) &+ user.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.UpdateUser.Response"
          }
          override public func className() -> String {
              return "UserService.UpdateUser.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.UpdateUser.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.UpdateUser.Response

          required override public init () {
             builderResult = UserService.UpdateUser.Response()
             super.init()
          }
          public var hasUser:Bool {
               get {
                   return builderResult.hasUser
               }
          }
          public var user:UserService.Containers.User {
               get {
                   return builderResult.user
               }
               set (value) {
                   builderResult.hasUser = true
                   builderResult.user = value
               }
          }
          public func setUserBuilder(builderForValue:UserService.Containers.UserBuilder) -> UserService.UpdateUser.ResponseBuilder {
            user = builderForValue.build()
            return self
          }
          public func mergeUser(value:UserService.Containers.User) -> UserService.UpdateUser.ResponseBuilder {
            if (builderResult.hasUser) {
              builderResult.user = UserService.Containers.User.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
            } else {
              builderResult.user = value
            }
            builderResult.hasUser = true
            return self
          }
          public func clearUser() -> UserService.UpdateUser.ResponseBuilder {
            builderResult.hasUser = false
            builderResult.user = UserService.Containers.User()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.UpdateUser.ResponseBuilder {
            builderResult = UserService.UpdateUser.Response()
            return self
          }
          public override func clone() -> UserService.UpdateUser.ResponseBuilder {
            return UserService.UpdateUser.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.UpdateUser.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.UpdateUser.Response {
            var returnMe:UserService.UpdateUser.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.UpdateUser.Response) -> UserService.UpdateUser.ResponseBuilder {
            if (other.hasUser) {
                mergeUser(other.user)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.UpdateUser.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:UserService.Containers.UserBuilder = UserService.Containers.User.builder()
                if hasUser {
                  subBuilder.mergeFrom(user)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                user = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.UpdateUser {
        return UserService.UpdateUser.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser {
        return UserService.UpdateUser.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.UpdateUser {
        return UserService.UpdateUser.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.UpdateUser {
        return UserService.UpdateUser.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.UpdateUser {
        return UserService.UpdateUser.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser {
        return UserService.UpdateUser.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.UpdateUserBuilder {
        return UserService.UpdateUser.classBuilder() as UserService.UpdateUserBuilder
      }
      public func builder() -> UserService.UpdateUserBuilder {
        return classBuilder() as UserService.UpdateUserBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.UpdateUserBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.UpdateUser.builder()
      }
      public func toBuilder() -> UserService.UpdateUserBuilder {
        return UserService.UpdateUser.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.UpdateUser) -> UserService.UpdateUserBuilder {
        return UserService.UpdateUser.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.UpdateUser"
      }
      override public func className() -> String {
          return "UserService.UpdateUser"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.UpdateUser.self
      }


      //Meta information declaration end

    }

    final public class UpdateUserBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.UpdateUser

      required override public init () {
         builderResult = UserService.UpdateUser()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.UpdateUserBuilder {
        builderResult = UserService.UpdateUser()
        return self
      }
      public override func clone() -> UserService.UpdateUserBuilder {
        return UserService.UpdateUser.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.UpdateUser {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.UpdateUser {
        var returnMe:UserService.UpdateUser = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.UpdateUser) -> UserService.UpdateUserBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.UpdateUserBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUserBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetUser : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {


          //OneOf declaration start

          public enum LookupKey {
            case LookupKeyOneOfNotSet

            public func checkOneOfIsSet() -> Bool {
                 switch self {
                 case .LookupKeyOneOfNotSet:
                      return false
                 default:
                      return true
                 }
            }
            case Email(String)

            public static func getEmail(value:LookupKey) ->String? {
                 switch value {
                 case .Email(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
          }



          //OneOf declaration end

          private var storageLookupKey:UserService.GetUser.Request.LookupKey =  UserService.GetUser.Request.LookupKey.LookupKeyOneOfNotSet
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "email": return email
                 default: return nil
                 }
          }

          public private(set) var hasEmail:Bool {
                get {
                     if UserService.GetUser.Request.LookupKey.getEmail(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var email:String!{
               get {
                    return UserService.GetUser.Request.LookupKey.getEmail(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = UserService.GetUser.Request.LookupKey.Email(newvalue)
               }
          }
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasEmail {
              output.writeString(1, value:email)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasEmail {
              size += WireFormat.computeStringSize(1, value:email)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.GetUser.Request {
            return UserService.GetUser.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.GetUser.Request {
            return UserService.GetUser.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.GetUser.Request {
            return UserService.GetUser.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.GetUser.Request {
            return UserService.GetUser.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.GetUser.Request {
            return UserService.GetUser.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetUser.Request {
            return UserService.GetUser.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.GetUser.RequestBuilder {
            return UserService.GetUser.Request.classBuilder() as UserService.GetUser.RequestBuilder
          }
          public func builder() -> UserService.GetUser.RequestBuilder {
            return classBuilder() as UserService.GetUser.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.GetUser.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.GetUser.Request.builder()
          }
          public func toBuilder() -> UserService.GetUser.RequestBuilder {
            return UserService.GetUser.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.GetUser.Request) -> UserService.GetUser.RequestBuilder {
            return UserService.GetUser.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasEmail {
              output += "\(indent) email: \(email) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasEmail {
                     hashCode = (hashCode &* 31) &+ email.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.GetUser.Request"
          }
          override public func className() -> String {
              return "UserService.GetUser.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.GetUser.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.GetUser.Request

          required override public init () {
             builderResult = UserService.GetUser.Request()
             super.init()
          }
          public var hasEmail:Bool {
               get {
                    return builderResult.hasEmail
               }
          }
          public var email:String {
               get {
                    return builderResult.email
               }
               set (value) {
                   builderResult.hasEmail = true
                   builderResult.email = value
               }
          }
          public func clearEmail() -> UserService.GetUser.RequestBuilder{
               builderResult.hasEmail = false
               builderResult.email = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.GetUser.RequestBuilder {
            builderResult = UserService.GetUser.Request()
            return self
          }
          public override func clone() -> UserService.GetUser.RequestBuilder {
            return UserService.GetUser.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.GetUser.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.GetUser.Request {
            var returnMe:UserService.GetUser.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.GetUser.Request) -> UserService.GetUser.RequestBuilder {
            if other.hasEmail {
                 email = other.email
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.GetUser.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetUser.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                email = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "user": return user
                 default: return nil
                 }
          }

          public private(set) var hasUser:Bool = false
          public private(set) var user:UserService.Containers.User = UserService.Containers.User()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUser {
              output.writeMessage(1, value:user)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUser {
              size += WireFormat.computeMessageSize(1, value:user)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.GetUser.Response {
            return UserService.GetUser.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.GetUser.Response {
            return UserService.GetUser.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.GetUser.Response {
            return UserService.GetUser.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.GetUser.Response {
            return UserService.GetUser.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.GetUser.Response {
            return UserService.GetUser.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetUser.Response {
            return UserService.GetUser.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.GetUser.ResponseBuilder {
            return UserService.GetUser.Response.classBuilder() as UserService.GetUser.ResponseBuilder
          }
          public func builder() -> UserService.GetUser.ResponseBuilder {
            return classBuilder() as UserService.GetUser.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.GetUser.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.GetUser.Response.builder()
          }
          public func toBuilder() -> UserService.GetUser.ResponseBuilder {
            return UserService.GetUser.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.GetUser.Response) -> UserService.GetUser.ResponseBuilder {
            return UserService.GetUser.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUser {
              output += "\(indent) user {\n"
              user.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUser {
                    hashCode = (hashCode &* 31) &+ user.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.GetUser.Response"
          }
          override public func className() -> String {
              return "UserService.GetUser.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.GetUser.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.GetUser.Response

          required override public init () {
             builderResult = UserService.GetUser.Response()
             super.init()
          }
          public var hasUser:Bool {
               get {
                   return builderResult.hasUser
               }
          }
          public var user:UserService.Containers.User {
               get {
                   return builderResult.user
               }
               set (value) {
                   builderResult.hasUser = true
                   builderResult.user = value
               }
          }
          public func setUserBuilder(builderForValue:UserService.Containers.UserBuilder) -> UserService.GetUser.ResponseBuilder {
            user = builderForValue.build()
            return self
          }
          public func mergeUser(value:UserService.Containers.User) -> UserService.GetUser.ResponseBuilder {
            if (builderResult.hasUser) {
              builderResult.user = UserService.Containers.User.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
            } else {
              builderResult.user = value
            }
            builderResult.hasUser = true
            return self
          }
          public func clearUser() -> UserService.GetUser.ResponseBuilder {
            builderResult.hasUser = false
            builderResult.user = UserService.Containers.User()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.GetUser.ResponseBuilder {
            builderResult = UserService.GetUser.Response()
            return self
          }
          public override func clone() -> UserService.GetUser.ResponseBuilder {
            return UserService.GetUser.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.GetUser.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.GetUser.Response {
            var returnMe:UserService.GetUser.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.GetUser.Response) -> UserService.GetUser.ResponseBuilder {
            if (other.hasUser) {
                mergeUser(other.user)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.GetUser.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetUser.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:UserService.Containers.UserBuilder = UserService.Containers.User.builder()
                if hasUser {
                  subBuilder.mergeFrom(user)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                user = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.GetUser {
        return UserService.GetUser.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.GetUser {
        return UserService.GetUser.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.GetUser {
        return UserService.GetUser.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.GetUser {
        return UserService.GetUser.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.GetUser {
        return UserService.GetUser.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetUser {
        return UserService.GetUser.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.GetUserBuilder {
        return UserService.GetUser.classBuilder() as UserService.GetUserBuilder
      }
      public func builder() -> UserService.GetUserBuilder {
        return classBuilder() as UserService.GetUserBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.GetUserBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.GetUser.builder()
      }
      public func toBuilder() -> UserService.GetUserBuilder {
        return UserService.GetUser.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.GetUser) -> UserService.GetUserBuilder {
        return UserService.GetUser.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.GetUser"
      }
      override public func className() -> String {
          return "UserService.GetUser"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.GetUser.self
      }


      //Meta information declaration end

    }

    final public class GetUserBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.GetUser

      required override public init () {
         builderResult = UserService.GetUser()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.GetUserBuilder {
        builderResult = UserService.GetUser()
        return self
      }
      public override func clone() -> UserService.GetUserBuilder {
        return UserService.GetUser.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.GetUser {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.GetUser {
        var returnMe:UserService.GetUser = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.GetUser) -> UserService.GetUserBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.GetUserBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetUserBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class ValidUser : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "user_id": return user_id
                 default: return nil
                 }
          }

          public private(set) var hasUserId:Bool = false
          public private(set) var user_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUserId {
              output.writeString(1, value:user_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUserId {
              size += WireFormat.computeStringSize(1, value:user_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.ValidUser.Request {
            return UserService.ValidUser.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.ValidUser.Request {
            return UserService.ValidUser.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.ValidUser.Request {
            return UserService.ValidUser.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.ValidUser.Request {
            return UserService.ValidUser.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.ValidUser.Request {
            return UserService.ValidUser.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.ValidUser.Request {
            return UserService.ValidUser.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.ValidUser.RequestBuilder {
            return UserService.ValidUser.Request.classBuilder() as UserService.ValidUser.RequestBuilder
          }
          public func builder() -> UserService.ValidUser.RequestBuilder {
            return classBuilder() as UserService.ValidUser.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.ValidUser.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.ValidUser.Request.builder()
          }
          public func toBuilder() -> UserService.ValidUser.RequestBuilder {
            return UserService.ValidUser.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.ValidUser.Request) -> UserService.ValidUser.RequestBuilder {
            return UserService.ValidUser.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.ValidUser.Request"
          }
          override public func className() -> String {
              return "UserService.ValidUser.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.ValidUser.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.ValidUser.Request

          required override public init () {
             builderResult = UserService.ValidUser.Request()
             super.init()
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> UserService.ValidUser.RequestBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.ValidUser.RequestBuilder {
            builderResult = UserService.ValidUser.Request()
            return self
          }
          public override func clone() -> UserService.ValidUser.RequestBuilder {
            return UserService.ValidUser.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.ValidUser.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.ValidUser.Request {
            var returnMe:UserService.ValidUser.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.ValidUser.Request) -> UserService.ValidUser.RequestBuilder {
            if other.hasUserId {
                 user_id = other.user_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.ValidUser.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.ValidUser.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                user_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "exists": return exists
                 default: return nil
                 }
          }

          public private(set) var hasExists:Bool = false
          public private(set) var exists:Bool = false

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasExists {
              output.writeBool(1, value:exists)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasExists {
              size += WireFormat.computeBoolSize(1, value:exists)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.ValidUser.Response {
            return UserService.ValidUser.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.ValidUser.Response {
            return UserService.ValidUser.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.ValidUser.Response {
            return UserService.ValidUser.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.ValidUser.Response {
            return UserService.ValidUser.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.ValidUser.Response {
            return UserService.ValidUser.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.ValidUser.Response {
            return UserService.ValidUser.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.ValidUser.ResponseBuilder {
            return UserService.ValidUser.Response.classBuilder() as UserService.ValidUser.ResponseBuilder
          }
          public func builder() -> UserService.ValidUser.ResponseBuilder {
            return classBuilder() as UserService.ValidUser.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.ValidUser.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.ValidUser.Response.builder()
          }
          public func toBuilder() -> UserService.ValidUser.ResponseBuilder {
            return UserService.ValidUser.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.ValidUser.Response) -> UserService.ValidUser.ResponseBuilder {
            return UserService.ValidUser.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasExists {
              output += "\(indent) exists: \(exists) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasExists {
                     hashCode = (hashCode &* 31) &+ exists.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.ValidUser.Response"
          }
          override public func className() -> String {
              return "UserService.ValidUser.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.ValidUser.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.ValidUser.Response

          required override public init () {
             builderResult = UserService.ValidUser.Response()
             super.init()
          }
          public var hasExists:Bool {
               get {
                    return builderResult.hasExists
               }
          }
          public var exists:Bool {
               get {
                    return builderResult.exists
               }
               set (value) {
                   builderResult.hasExists = true
                   builderResult.exists = value
               }
          }
          public func clearExists() -> UserService.ValidUser.ResponseBuilder{
               builderResult.hasExists = false
               builderResult.exists = false
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.ValidUser.ResponseBuilder {
            builderResult = UserService.ValidUser.Response()
            return self
          }
          public override func clone() -> UserService.ValidUser.ResponseBuilder {
            return UserService.ValidUser.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.ValidUser.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.ValidUser.Response {
            var returnMe:UserService.ValidUser.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.ValidUser.Response) -> UserService.ValidUser.ResponseBuilder {
            if other.hasExists {
                 exists = other.exists
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.ValidUser.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.ValidUser.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 8 :
                exists = input.readBool()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.ValidUser {
        return UserService.ValidUser.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.ValidUser {
        return UserService.ValidUser.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.ValidUser {
        return UserService.ValidUser.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.ValidUser {
        return UserService.ValidUser.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.ValidUser {
        return UserService.ValidUser.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.ValidUser {
        return UserService.ValidUser.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.ValidUserBuilder {
        return UserService.ValidUser.classBuilder() as UserService.ValidUserBuilder
      }
      public func builder() -> UserService.ValidUserBuilder {
        return classBuilder() as UserService.ValidUserBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.ValidUserBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.ValidUser.builder()
      }
      public func toBuilder() -> UserService.ValidUserBuilder {
        return UserService.ValidUser.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.ValidUser) -> UserService.ValidUserBuilder {
        return UserService.ValidUser.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.ValidUser"
      }
      override public func className() -> String {
          return "UserService.ValidUser"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.ValidUser.self
      }


      //Meta information declaration end

    }

    final public class ValidUserBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.ValidUser

      required override public init () {
         builderResult = UserService.ValidUser()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.ValidUserBuilder {
        builderResult = UserService.ValidUser()
        return self
      }
      public override func clone() -> UserService.ValidUserBuilder {
        return UserService.ValidUser.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.ValidUser {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.ValidUser {
        var returnMe:UserService.ValidUser = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.ValidUser) -> UserService.ValidUserBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.ValidUserBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.ValidUserBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class AuthenticateUser : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {


          //Nested type declaration start

            final public class Credentials : GeneratedMessage {
              public subscript(key: String) -> AnyObject? {
                     switch key {
                     case "key": return key
                     case "secret": return secret
                     default: return nil
                     }
              }

              public private(set) var hasKey:Bool = false
              public private(set) var key:String = ""

              public private(set) var hasSecret:Bool = false
              public private(set) var secret:String = ""

              required public init() {
                   super.init()
              }
              override public func isInitialized() -> Bool {
               return true
              }
              override public func writeToCodedOutputStream(output:CodedOutputStream) {
                if hasKey {
                  output.writeString(1, value:key)
                }
                if hasSecret {
                  output.writeString(2, value:secret)
                }
                unknownFields.writeToCodedOutputStream(output)
              }
              override public func serializedSize() -> Int32 {
                var size:Int32 = memoizedSerializedSize
                if size != -1 {
                 return size
                }

                size = 0
                if hasKey {
                  size += WireFormat.computeStringSize(1, value:key)
                }
                if hasSecret {
                  size += WireFormat.computeStringSize(2, value:secret)
                }
                size += unknownFields.serializedSize()
                memoizedSerializedSize = size
                return size
              }
              public class func parseFromData(data:[Byte]) -> UserService.AuthenticateUser.Request.Credentials {
                return UserService.AuthenticateUser.Request.Credentials.builder().mergeFromData(data).build()
              }
              public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Request.Credentials {
                return UserService.AuthenticateUser.Request.Credentials.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
              }
              public class func parseFromInputStream(input:NSInputStream) -> UserService.AuthenticateUser.Request.Credentials {
                return UserService.AuthenticateUser.Request.Credentials.builder().mergeFromInputStream(input).build()
              }
              public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.AuthenticateUser.Request.Credentials {
                return UserService.AuthenticateUser.Request.Credentials.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
              }
              public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.AuthenticateUser.Request.Credentials {
                return UserService.AuthenticateUser.Request.Credentials.builder().mergeFromCodedInputStream(input).build()
              }
              public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Request.Credentials {
                return UserService.AuthenticateUser.Request.Credentials.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
              }
              public class func builder() -> UserService.AuthenticateUser.Request.CredentialsBuilder {
                return UserService.AuthenticateUser.Request.Credentials.classBuilder() as UserService.AuthenticateUser.Request.CredentialsBuilder
              }
              public func builder() -> UserService.AuthenticateUser.Request.CredentialsBuilder {
                return classBuilder() as UserService.AuthenticateUser.Request.CredentialsBuilder
              }
              public override class func classBuilder() -> MessageBuilder {
                return UserService.AuthenticateUser.Request.CredentialsBuilder()
              }
              public override func classBuilder() -> MessageBuilder {
                return UserService.AuthenticateUser.Request.Credentials.builder()
              }
              public func toBuilder() -> UserService.AuthenticateUser.Request.CredentialsBuilder {
                return UserService.AuthenticateUser.Request.Credentials.builderWithPrototype(self)
              }
              public class func builderWithPrototype(prototype:UserService.AuthenticateUser.Request.Credentials) -> UserService.AuthenticateUser.Request.CredentialsBuilder {
                return UserService.AuthenticateUser.Request.Credentials.builder().mergeFrom(prototype)
              }
              override public func writeDescriptionTo(inout output:String, indent:String) {
                if hasKey {
                  output += "\(indent) key: \(key) \n"
                }
                if hasSecret {
                  output += "\(indent) secret: \(secret) \n"
                }
                unknownFields.writeDescriptionTo(&output, indent:indent)
              }
              override public var hashValue:Int {
                  get {
                      var hashCode:Int = 7
                      if hasKey {
                         hashCode = (hashCode &* 31) &+ key.hashValue
                      }
                      if hasSecret {
                         hashCode = (hashCode &* 31) &+ secret.hashValue
                      }
                      hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                      return hashCode
                  }
              }


              //Meta information declaration start

              override public class func className() -> String {
                  return "UserService.AuthenticateUser.Request.Credentials"
              }
              override public func className() -> String {
                  return "UserService.AuthenticateUser.Request.Credentials"
              }
              override public func classMetaType() -> GeneratedMessage.Type {
                  return UserService.AuthenticateUser.Request.Credentials.self
              }


              //Meta information declaration end

            }

            final public class CredentialsBuilder : GeneratedMessageBuilder {
              private var builderResult:UserService.AuthenticateUser.Request.Credentials

              required override public init () {
                 builderResult = UserService.AuthenticateUser.Request.Credentials()
                 super.init()
              }
              public var hasKey:Bool {
                   get {
                        return builderResult.hasKey
                   }
              }
              public var key:String {
                   get {
                        return builderResult.key
                   }
                   set (value) {
                       builderResult.hasKey = true
                       builderResult.key = value
                   }
              }
              public func clearKey() -> UserService.AuthenticateUser.Request.CredentialsBuilder{
                   builderResult.hasKey = false
                   builderResult.key = ""
                   return self
              }
              public var hasSecret:Bool {
                   get {
                        return builderResult.hasSecret
                   }
              }
              public var secret:String {
                   get {
                        return builderResult.secret
                   }
                   set (value) {
                       builderResult.hasSecret = true
                       builderResult.secret = value
                   }
              }
              public func clearSecret() -> UserService.AuthenticateUser.Request.CredentialsBuilder{
                   builderResult.hasSecret = false
                   builderResult.secret = ""
                   return self
              }
              override public var internalGetResult:GeneratedMessage {
                   get {
                      return builderResult
                   }
              }
              public override func clear() -> UserService.AuthenticateUser.Request.CredentialsBuilder {
                builderResult = UserService.AuthenticateUser.Request.Credentials()
                return self
              }
              public override func clone() -> UserService.AuthenticateUser.Request.CredentialsBuilder {
                return UserService.AuthenticateUser.Request.Credentials.builderWithPrototype(builderResult)
              }
              public override func build() -> UserService.AuthenticateUser.Request.Credentials {
                   checkInitialized()
                   return buildPartial()
              }
              public func buildPartial() -> UserService.AuthenticateUser.Request.Credentials {
                var returnMe:UserService.AuthenticateUser.Request.Credentials = builderResult
                return returnMe
              }
              public func mergeFrom(other:UserService.AuthenticateUser.Request.Credentials) -> UserService.AuthenticateUser.Request.CredentialsBuilder {
                if other.hasKey {
                     key = other.key
                }
                if other.hasSecret {
                     secret = other.secret
                }
                mergeUnknownFields(other.unknownFields)
                return self
              }
              public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.AuthenticateUser.Request.CredentialsBuilder {
                   return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
              }
              public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Request.CredentialsBuilder {
                var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                while (true) {
                  var tag = input.readTag()
                  switch tag {
                  case 0: 
                    self.unknownFields = unknownFieldsBuilder.build()
                    return self

                  case 10 :
                    key = input.readString()

                  case 18 :
                    secret = input.readString()

                  default:
                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                       unknownFields = unknownFieldsBuilder.build()
                       return self
                    }
                  }
                }
              }
            }



          //Nested type declaration end



            //Enum type declaration start 

            public enum AuthBackend:Int32 {
              case Internal = 0

              public static func IsValidValue(value:Int32) ->Bool {
                  if let check = AuthBackend(rawValue:value) {
                      return true
                  }
                  return false
              }
            }



            //Enum type declaration end 

          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "backend": return Int(self.backend.rawValue)
                 case "credentials": return credentials
                 default: return nil
                 }
          }

          public private(set) var backend:UserService.AuthenticateUser.Request.AuthBackend = UserService.AuthenticateUser.Request.AuthBackend.Internal
          public private(set) var hasBackend:Bool = false
          public private(set) var hasCredentials:Bool = false
          public private(set) var credentials:UserService.AuthenticateUser.Request.Credentials = UserService.AuthenticateUser.Request.Credentials()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasBackend {
              output.writeEnum(1, value:backend.rawValue)
            }
            if hasCredentials {
              output.writeMessage(2, value:credentials)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if (hasBackend) {
              size += WireFormat.computeEnumSize(1, value:backend.rawValue)
            }
            if hasCredentials {
              size += WireFormat.computeMessageSize(2, value:credentials)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.AuthenticateUser.Request {
            return UserService.AuthenticateUser.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Request {
            return UserService.AuthenticateUser.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.AuthenticateUser.Request {
            return UserService.AuthenticateUser.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.AuthenticateUser.Request {
            return UserService.AuthenticateUser.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.AuthenticateUser.Request {
            return UserService.AuthenticateUser.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Request {
            return UserService.AuthenticateUser.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.AuthenticateUser.RequestBuilder {
            return UserService.AuthenticateUser.Request.classBuilder() as UserService.AuthenticateUser.RequestBuilder
          }
          public func builder() -> UserService.AuthenticateUser.RequestBuilder {
            return classBuilder() as UserService.AuthenticateUser.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.AuthenticateUser.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.AuthenticateUser.Request.builder()
          }
          public func toBuilder() -> UserService.AuthenticateUser.RequestBuilder {
            return UserService.AuthenticateUser.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.AuthenticateUser.Request) -> UserService.AuthenticateUser.RequestBuilder {
            return UserService.AuthenticateUser.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if (hasBackend) {
              output += "\(indent) backend: \(backend.rawValue)\n"
            }
            if hasCredentials {
              output += "\(indent) credentials {\n"
              credentials.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasBackend {
                     hashCode = (hashCode &* 31) &+ Int(backend.rawValue)
                  }
                  if hasCredentials {
                    hashCode = (hashCode &* 31) &+ credentials.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.AuthenticateUser.Request"
          }
          override public func className() -> String {
              return "UserService.AuthenticateUser.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.AuthenticateUser.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.AuthenticateUser.Request

          required override public init () {
             builderResult = UserService.AuthenticateUser.Request()
             super.init()
          }
            public var hasBackend:Bool{
                get {
                    return builderResult.hasBackend
                }
            }
            public var backend:UserService.AuthenticateUser.Request.AuthBackend {
                get {
                    return builderResult.backend
                }
                set (value) {
                    builderResult.hasBackend = true
                    builderResult.backend = value
                }
            }
            public func clearBackend() -> UserService.AuthenticateUser.RequestBuilder {
               builderResult.hasBackend = false
               builderResult.backend = .Internal
               return self
            }
          public var hasCredentials:Bool {
               get {
                   return builderResult.hasCredentials
               }
          }
          public var credentials:UserService.AuthenticateUser.Request.Credentials {
               get {
                   return builderResult.credentials
               }
               set (value) {
                   builderResult.hasCredentials = true
                   builderResult.credentials = value
               }
          }
          public func setCredentialsBuilder(builderForValue:UserService.AuthenticateUser.Request.CredentialsBuilder) -> UserService.AuthenticateUser.RequestBuilder {
            credentials = builderForValue.build()
            return self
          }
          public func mergeCredentials(value:UserService.AuthenticateUser.Request.Credentials) -> UserService.AuthenticateUser.RequestBuilder {
            if (builderResult.hasCredentials) {
              builderResult.credentials = UserService.AuthenticateUser.Request.Credentials.builderWithPrototype(builderResult.credentials).mergeFrom(value).buildPartial()
            } else {
              builderResult.credentials = value
            }
            builderResult.hasCredentials = true
            return self
          }
          public func clearCredentials() -> UserService.AuthenticateUser.RequestBuilder {
            builderResult.hasCredentials = false
            builderResult.credentials = UserService.AuthenticateUser.Request.Credentials()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.AuthenticateUser.RequestBuilder {
            builderResult = UserService.AuthenticateUser.Request()
            return self
          }
          public override func clone() -> UserService.AuthenticateUser.RequestBuilder {
            return UserService.AuthenticateUser.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.AuthenticateUser.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.AuthenticateUser.Request {
            var returnMe:UserService.AuthenticateUser.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.AuthenticateUser.Request) -> UserService.AuthenticateUser.RequestBuilder {
            if other.hasBackend {
                 backend = other.backend
            }
            if (other.hasCredentials) {
                mergeCredentials(other.credentials)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.AuthenticateUser.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 8 :
                let valueIntbackend = input.readEnum()
                if let enumsbackend = UserService.AuthenticateUser.Request.AuthBackend(rawValue:valueIntbackend){
                     backend = enumsbackend
                } else {
                     unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntbackend))
                }

              case 18 :
                var subBuilder:UserService.AuthenticateUser.Request.CredentialsBuilder = UserService.AuthenticateUser.Request.Credentials.builder()
                if hasCredentials {
                  subBuilder.mergeFrom(credentials)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                credentials = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "user": return user
                 case "authenticated": return authenticated
                 case "token": return token
                 default: return nil
                 }
          }

          public private(set) var hasUser:Bool = false
          public private(set) var user:UserService.Containers.User = UserService.Containers.User()
          public private(set) var hasAuthenticated:Bool = false
          public private(set) var authenticated:Bool = false

          public private(set) var hasToken:Bool = false
          public private(set) var token:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUser {
              output.writeMessage(1, value:user)
            }
            if hasAuthenticated {
              output.writeBool(2, value:authenticated)
            }
            if hasToken {
              output.writeString(3, value:token)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUser {
              size += WireFormat.computeMessageSize(1, value:user)
            }
            if hasAuthenticated {
              size += WireFormat.computeBoolSize(2, value:authenticated)
            }
            if hasToken {
              size += WireFormat.computeStringSize(3, value:token)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.AuthenticateUser.Response {
            return UserService.AuthenticateUser.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Response {
            return UserService.AuthenticateUser.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.AuthenticateUser.Response {
            return UserService.AuthenticateUser.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.AuthenticateUser.Response {
            return UserService.AuthenticateUser.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.AuthenticateUser.Response {
            return UserService.AuthenticateUser.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Response {
            return UserService.AuthenticateUser.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.AuthenticateUser.ResponseBuilder {
            return UserService.AuthenticateUser.Response.classBuilder() as UserService.AuthenticateUser.ResponseBuilder
          }
          public func builder() -> UserService.AuthenticateUser.ResponseBuilder {
            return classBuilder() as UserService.AuthenticateUser.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.AuthenticateUser.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.AuthenticateUser.Response.builder()
          }
          public func toBuilder() -> UserService.AuthenticateUser.ResponseBuilder {
            return UserService.AuthenticateUser.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.AuthenticateUser.Response) -> UserService.AuthenticateUser.ResponseBuilder {
            return UserService.AuthenticateUser.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUser {
              output += "\(indent) user {\n"
              user.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasAuthenticated {
              output += "\(indent) authenticated: \(authenticated) \n"
            }
            if hasToken {
              output += "\(indent) token: \(token) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUser {
                    hashCode = (hashCode &* 31) &+ user.hashValue
                  }
                  if hasAuthenticated {
                     hashCode = (hashCode &* 31) &+ authenticated.hashValue
                  }
                  if hasToken {
                     hashCode = (hashCode &* 31) &+ token.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.AuthenticateUser.Response"
          }
          override public func className() -> String {
              return "UserService.AuthenticateUser.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.AuthenticateUser.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.AuthenticateUser.Response

          required override public init () {
             builderResult = UserService.AuthenticateUser.Response()
             super.init()
          }
          public var hasUser:Bool {
               get {
                   return builderResult.hasUser
               }
          }
          public var user:UserService.Containers.User {
               get {
                   return builderResult.user
               }
               set (value) {
                   builderResult.hasUser = true
                   builderResult.user = value
               }
          }
          public func setUserBuilder(builderForValue:UserService.Containers.UserBuilder) -> UserService.AuthenticateUser.ResponseBuilder {
            user = builderForValue.build()
            return self
          }
          public func mergeUser(value:UserService.Containers.User) -> UserService.AuthenticateUser.ResponseBuilder {
            if (builderResult.hasUser) {
              builderResult.user = UserService.Containers.User.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
            } else {
              builderResult.user = value
            }
            builderResult.hasUser = true
            return self
          }
          public func clearUser() -> UserService.AuthenticateUser.ResponseBuilder {
            builderResult.hasUser = false
            builderResult.user = UserService.Containers.User()
            return self
          }
          public var hasAuthenticated:Bool {
               get {
                    return builderResult.hasAuthenticated
               }
          }
          public var authenticated:Bool {
               get {
                    return builderResult.authenticated
               }
               set (value) {
                   builderResult.hasAuthenticated = true
                   builderResult.authenticated = value
               }
          }
          public func clearAuthenticated() -> UserService.AuthenticateUser.ResponseBuilder{
               builderResult.hasAuthenticated = false
               builderResult.authenticated = false
               return self
          }
          public var hasToken:Bool {
               get {
                    return builderResult.hasToken
               }
          }
          public var token:String {
               get {
                    return builderResult.token
               }
               set (value) {
                   builderResult.hasToken = true
                   builderResult.token = value
               }
          }
          public func clearToken() -> UserService.AuthenticateUser.ResponseBuilder{
               builderResult.hasToken = false
               builderResult.token = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.AuthenticateUser.ResponseBuilder {
            builderResult = UserService.AuthenticateUser.Response()
            return self
          }
          public override func clone() -> UserService.AuthenticateUser.ResponseBuilder {
            return UserService.AuthenticateUser.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.AuthenticateUser.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.AuthenticateUser.Response {
            var returnMe:UserService.AuthenticateUser.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.AuthenticateUser.Response) -> UserService.AuthenticateUser.ResponseBuilder {
            if (other.hasUser) {
                mergeUser(other.user)
            }
            if other.hasAuthenticated {
                 authenticated = other.authenticated
            }
            if other.hasToken {
                 token = other.token
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.AuthenticateUser.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:UserService.Containers.UserBuilder = UserService.Containers.User.builder()
                if hasUser {
                  subBuilder.mergeFrom(user)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                user = subBuilder.buildPartial()

              case 16 :
                authenticated = input.readBool()

              case 26 :
                token = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.AuthenticateUser {
        return UserService.AuthenticateUser.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser {
        return UserService.AuthenticateUser.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.AuthenticateUser {
        return UserService.AuthenticateUser.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.AuthenticateUser {
        return UserService.AuthenticateUser.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.AuthenticateUser {
        return UserService.AuthenticateUser.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser {
        return UserService.AuthenticateUser.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.AuthenticateUserBuilder {
        return UserService.AuthenticateUser.classBuilder() as UserService.AuthenticateUserBuilder
      }
      public func builder() -> UserService.AuthenticateUserBuilder {
        return classBuilder() as UserService.AuthenticateUserBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.AuthenticateUserBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.AuthenticateUser.builder()
      }
      public func toBuilder() -> UserService.AuthenticateUserBuilder {
        return UserService.AuthenticateUser.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.AuthenticateUser) -> UserService.AuthenticateUserBuilder {
        return UserService.AuthenticateUser.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.AuthenticateUser"
      }
      override public func className() -> String {
          return "UserService.AuthenticateUser"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.AuthenticateUser.self
      }


      //Meta information declaration end

    }

    final public class AuthenticateUserBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.AuthenticateUser

      required override public init () {
         builderResult = UserService.AuthenticateUser()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.AuthenticateUserBuilder {
        builderResult = UserService.AuthenticateUser()
        return self
      }
      public override func clone() -> UserService.AuthenticateUserBuilder {
        return UserService.AuthenticateUser.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.AuthenticateUser {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.AuthenticateUser {
        var returnMe:UserService.AuthenticateUser = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.AuthenticateUser) -> UserService.AuthenticateUserBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.AuthenticateUserBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUserBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class SendVerificationCode : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "user_id": return user_id
                 default: return nil
                 }
          }

          public private(set) var hasUserId:Bool = false
          public private(set) var user_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUserId {
              output.writeString(1, value:user_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUserId {
              size += WireFormat.computeStringSize(1, value:user_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.SendVerificationCode.Request {
            return UserService.SendVerificationCode.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode.Request {
            return UserService.SendVerificationCode.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.SendVerificationCode.Request {
            return UserService.SendVerificationCode.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.SendVerificationCode.Request {
            return UserService.SendVerificationCode.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.SendVerificationCode.Request {
            return UserService.SendVerificationCode.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode.Request {
            return UserService.SendVerificationCode.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.SendVerificationCode.RequestBuilder {
            return UserService.SendVerificationCode.Request.classBuilder() as UserService.SendVerificationCode.RequestBuilder
          }
          public func builder() -> UserService.SendVerificationCode.RequestBuilder {
            return classBuilder() as UserService.SendVerificationCode.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.SendVerificationCode.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.SendVerificationCode.Request.builder()
          }
          public func toBuilder() -> UserService.SendVerificationCode.RequestBuilder {
            return UserService.SendVerificationCode.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.SendVerificationCode.Request) -> UserService.SendVerificationCode.RequestBuilder {
            return UserService.SendVerificationCode.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.SendVerificationCode.Request"
          }
          override public func className() -> String {
              return "UserService.SendVerificationCode.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.SendVerificationCode.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.SendVerificationCode.Request

          required override public init () {
             builderResult = UserService.SendVerificationCode.Request()
             super.init()
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> UserService.SendVerificationCode.RequestBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.SendVerificationCode.RequestBuilder {
            builderResult = UserService.SendVerificationCode.Request()
            return self
          }
          public override func clone() -> UserService.SendVerificationCode.RequestBuilder {
            return UserService.SendVerificationCode.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.SendVerificationCode.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.SendVerificationCode.Request {
            var returnMe:UserService.SendVerificationCode.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.SendVerificationCode.Request) -> UserService.SendVerificationCode.RequestBuilder {
            if other.hasUserId {
                 user_id = other.user_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.SendVerificationCode.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                user_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "message_id": return message_id
                 default: return nil
                 }
          }

          public private(set) var hasMessageId:Bool = false
          public private(set) var message_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasMessageId {
              output.writeString(1, value:message_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasMessageId {
              size += WireFormat.computeStringSize(1, value:message_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.SendVerificationCode.Response {
            return UserService.SendVerificationCode.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode.Response {
            return UserService.SendVerificationCode.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.SendVerificationCode.Response {
            return UserService.SendVerificationCode.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.SendVerificationCode.Response {
            return UserService.SendVerificationCode.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.SendVerificationCode.Response {
            return UserService.SendVerificationCode.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode.Response {
            return UserService.SendVerificationCode.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.SendVerificationCode.ResponseBuilder {
            return UserService.SendVerificationCode.Response.classBuilder() as UserService.SendVerificationCode.ResponseBuilder
          }
          public func builder() -> UserService.SendVerificationCode.ResponseBuilder {
            return classBuilder() as UserService.SendVerificationCode.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.SendVerificationCode.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.SendVerificationCode.Response.builder()
          }
          public func toBuilder() -> UserService.SendVerificationCode.ResponseBuilder {
            return UserService.SendVerificationCode.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.SendVerificationCode.Response) -> UserService.SendVerificationCode.ResponseBuilder {
            return UserService.SendVerificationCode.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasMessageId {
              output += "\(indent) message_id: \(message_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasMessageId {
                     hashCode = (hashCode &* 31) &+ message_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.SendVerificationCode.Response"
          }
          override public func className() -> String {
              return "UserService.SendVerificationCode.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.SendVerificationCode.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.SendVerificationCode.Response

          required override public init () {
             builderResult = UserService.SendVerificationCode.Response()
             super.init()
          }
          public var hasMessageId:Bool {
               get {
                    return builderResult.hasMessageId
               }
          }
          public var message_id:String {
               get {
                    return builderResult.message_id
               }
               set (value) {
                   builderResult.hasMessageId = true
                   builderResult.message_id = value
               }
          }
          public func clearMessageId() -> UserService.SendVerificationCode.ResponseBuilder{
               builderResult.hasMessageId = false
               builderResult.message_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.SendVerificationCode.ResponseBuilder {
            builderResult = UserService.SendVerificationCode.Response()
            return self
          }
          public override func clone() -> UserService.SendVerificationCode.ResponseBuilder {
            return UserService.SendVerificationCode.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.SendVerificationCode.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.SendVerificationCode.Response {
            var returnMe:UserService.SendVerificationCode.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.SendVerificationCode.Response) -> UserService.SendVerificationCode.ResponseBuilder {
            if other.hasMessageId {
                 message_id = other.message_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.SendVerificationCode.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                message_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.SendVerificationCode {
        return UserService.SendVerificationCode.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode {
        return UserService.SendVerificationCode.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.SendVerificationCode {
        return UserService.SendVerificationCode.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.SendVerificationCode {
        return UserService.SendVerificationCode.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.SendVerificationCode {
        return UserService.SendVerificationCode.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode {
        return UserService.SendVerificationCode.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.SendVerificationCodeBuilder {
        return UserService.SendVerificationCode.classBuilder() as UserService.SendVerificationCodeBuilder
      }
      public func builder() -> UserService.SendVerificationCodeBuilder {
        return classBuilder() as UserService.SendVerificationCodeBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.SendVerificationCodeBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.SendVerificationCode.builder()
      }
      public func toBuilder() -> UserService.SendVerificationCodeBuilder {
        return UserService.SendVerificationCode.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.SendVerificationCode) -> UserService.SendVerificationCodeBuilder {
        return UserService.SendVerificationCode.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.SendVerificationCode"
      }
      override public func className() -> String {
          return "UserService.SendVerificationCode"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.SendVerificationCode.self
      }


      //Meta information declaration end

    }

    final public class SendVerificationCodeBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.SendVerificationCode

      required override public init () {
         builderResult = UserService.SendVerificationCode()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.SendVerificationCodeBuilder {
        builderResult = UserService.SendVerificationCode()
        return self
      }
      public override func clone() -> UserService.SendVerificationCodeBuilder {
        return UserService.SendVerificationCode.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.SendVerificationCode {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.SendVerificationCode {
        var returnMe:UserService.SendVerificationCode = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.SendVerificationCode) -> UserService.SendVerificationCodeBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.SendVerificationCodeBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCodeBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class VerifyVerificationCode : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "user_id": return user_id
                 case "code": return code
                 default: return nil
                 }
          }

          public private(set) var hasUserId:Bool = false
          public private(set) var user_id:String = ""

          public private(set) var hasCode:Bool = false
          public private(set) var code:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUserId {
              output.writeString(1, value:user_id)
            }
            if hasCode {
              output.writeString(2, value:code)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUserId {
              size += WireFormat.computeStringSize(1, value:user_id)
            }
            if hasCode {
              size += WireFormat.computeStringSize(2, value:code)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.VerifyVerificationCode.Request {
            return UserService.VerifyVerificationCode.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode.Request {
            return UserService.VerifyVerificationCode.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.VerifyVerificationCode.Request {
            return UserService.VerifyVerificationCode.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.VerifyVerificationCode.Request {
            return UserService.VerifyVerificationCode.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.VerifyVerificationCode.Request {
            return UserService.VerifyVerificationCode.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode.Request {
            return UserService.VerifyVerificationCode.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.VerifyVerificationCode.RequestBuilder {
            return UserService.VerifyVerificationCode.Request.classBuilder() as UserService.VerifyVerificationCode.RequestBuilder
          }
          public func builder() -> UserService.VerifyVerificationCode.RequestBuilder {
            return classBuilder() as UserService.VerifyVerificationCode.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.VerifyVerificationCode.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.VerifyVerificationCode.Request.builder()
          }
          public func toBuilder() -> UserService.VerifyVerificationCode.RequestBuilder {
            return UserService.VerifyVerificationCode.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.VerifyVerificationCode.Request) -> UserService.VerifyVerificationCode.RequestBuilder {
            return UserService.VerifyVerificationCode.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            if hasCode {
              output += "\(indent) code: \(code) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  if hasCode {
                     hashCode = (hashCode &* 31) &+ code.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.VerifyVerificationCode.Request"
          }
          override public func className() -> String {
              return "UserService.VerifyVerificationCode.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.VerifyVerificationCode.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.VerifyVerificationCode.Request

          required override public init () {
             builderResult = UserService.VerifyVerificationCode.Request()
             super.init()
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> UserService.VerifyVerificationCode.RequestBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          public var hasCode:Bool {
               get {
                    return builderResult.hasCode
               }
          }
          public var code:String {
               get {
                    return builderResult.code
               }
               set (value) {
                   builderResult.hasCode = true
                   builderResult.code = value
               }
          }
          public func clearCode() -> UserService.VerifyVerificationCode.RequestBuilder{
               builderResult.hasCode = false
               builderResult.code = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.VerifyVerificationCode.RequestBuilder {
            builderResult = UserService.VerifyVerificationCode.Request()
            return self
          }
          public override func clone() -> UserService.VerifyVerificationCode.RequestBuilder {
            return UserService.VerifyVerificationCode.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.VerifyVerificationCode.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.VerifyVerificationCode.Request {
            var returnMe:UserService.VerifyVerificationCode.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.VerifyVerificationCode.Request) -> UserService.VerifyVerificationCode.RequestBuilder {
            if other.hasUserId {
                 user_id = other.user_id
            }
            if other.hasCode {
                 code = other.code
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.VerifyVerificationCode.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                user_id = input.readString()

              case 18 :
                code = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "verified": return verified
                 default: return nil
                 }
          }

          public private(set) var hasVerified:Bool = false
          public private(set) var verified:Bool = false

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasVerified {
              output.writeBool(1, value:verified)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasVerified {
              size += WireFormat.computeBoolSize(1, value:verified)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.VerifyVerificationCode.Response {
            return UserService.VerifyVerificationCode.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode.Response {
            return UserService.VerifyVerificationCode.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.VerifyVerificationCode.Response {
            return UserService.VerifyVerificationCode.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.VerifyVerificationCode.Response {
            return UserService.VerifyVerificationCode.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.VerifyVerificationCode.Response {
            return UserService.VerifyVerificationCode.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode.Response {
            return UserService.VerifyVerificationCode.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.VerifyVerificationCode.ResponseBuilder {
            return UserService.VerifyVerificationCode.Response.classBuilder() as UserService.VerifyVerificationCode.ResponseBuilder
          }
          public func builder() -> UserService.VerifyVerificationCode.ResponseBuilder {
            return classBuilder() as UserService.VerifyVerificationCode.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.VerifyVerificationCode.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.VerifyVerificationCode.Response.builder()
          }
          public func toBuilder() -> UserService.VerifyVerificationCode.ResponseBuilder {
            return UserService.VerifyVerificationCode.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.VerifyVerificationCode.Response) -> UserService.VerifyVerificationCode.ResponseBuilder {
            return UserService.VerifyVerificationCode.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasVerified {
              output += "\(indent) verified: \(verified) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasVerified {
                     hashCode = (hashCode &* 31) &+ verified.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.VerifyVerificationCode.Response"
          }
          override public func className() -> String {
              return "UserService.VerifyVerificationCode.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.VerifyVerificationCode.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.VerifyVerificationCode.Response

          required override public init () {
             builderResult = UserService.VerifyVerificationCode.Response()
             super.init()
          }
          public var hasVerified:Bool {
               get {
                    return builderResult.hasVerified
               }
          }
          public var verified:Bool {
               get {
                    return builderResult.verified
               }
               set (value) {
                   builderResult.hasVerified = true
                   builderResult.verified = value
               }
          }
          public func clearVerified() -> UserService.VerifyVerificationCode.ResponseBuilder{
               builderResult.hasVerified = false
               builderResult.verified = false
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.VerifyVerificationCode.ResponseBuilder {
            builderResult = UserService.VerifyVerificationCode.Response()
            return self
          }
          public override func clone() -> UserService.VerifyVerificationCode.ResponseBuilder {
            return UserService.VerifyVerificationCode.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.VerifyVerificationCode.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.VerifyVerificationCode.Response {
            var returnMe:UserService.VerifyVerificationCode.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.VerifyVerificationCode.Response) -> UserService.VerifyVerificationCode.ResponseBuilder {
            if other.hasVerified {
                 verified = other.verified
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.VerifyVerificationCode.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 8 :
                verified = input.readBool()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.VerifyVerificationCode {
        return UserService.VerifyVerificationCode.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode {
        return UserService.VerifyVerificationCode.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.VerifyVerificationCode {
        return UserService.VerifyVerificationCode.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.VerifyVerificationCode {
        return UserService.VerifyVerificationCode.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.VerifyVerificationCode {
        return UserService.VerifyVerificationCode.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode {
        return UserService.VerifyVerificationCode.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.VerifyVerificationCodeBuilder {
        return UserService.VerifyVerificationCode.classBuilder() as UserService.VerifyVerificationCodeBuilder
      }
      public func builder() -> UserService.VerifyVerificationCodeBuilder {
        return classBuilder() as UserService.VerifyVerificationCodeBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.VerifyVerificationCodeBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.VerifyVerificationCode.builder()
      }
      public func toBuilder() -> UserService.VerifyVerificationCodeBuilder {
        return UserService.VerifyVerificationCode.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.VerifyVerificationCode) -> UserService.VerifyVerificationCodeBuilder {
        return UserService.VerifyVerificationCode.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.VerifyVerificationCode"
      }
      override public func className() -> String {
          return "UserService.VerifyVerificationCode"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.VerifyVerificationCode.self
      }


      //Meta information declaration end

    }

    final public class VerifyVerificationCodeBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.VerifyVerificationCode

      required override public init () {
         builderResult = UserService.VerifyVerificationCode()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.VerifyVerificationCodeBuilder {
        builderResult = UserService.VerifyVerificationCode()
        return self
      }
      public override func clone() -> UserService.VerifyVerificationCodeBuilder {
        return UserService.VerifyVerificationCode.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.VerifyVerificationCode {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.VerifyVerificationCode {
        var returnMe:UserService.VerifyVerificationCode = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.VerifyVerificationCode) -> UserService.VerifyVerificationCodeBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.VerifyVerificationCodeBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCodeBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end

  public subscript(key: String) -> AnyObject? {
         switch key {
         default: return nil
         }
  }

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  public class func parseFromData(data:[Byte]) -> UserService {
    return UserService.builder().mergeFromData(data).build()
  }
  public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService {
    return UserService.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> UserService {
    return UserService.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService {
    return UserService.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService {
    return UserService.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService {
    return UserService.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> UserServiceBuilder {
    return UserService.classBuilder() as UserServiceBuilder
  }
  public func builder() -> UserServiceBuilder {
    return classBuilder() as UserServiceBuilder
  }
  public override class func classBuilder() -> MessageBuilder {
    return UserServiceBuilder()
  }
  public override func classBuilder() -> MessageBuilder {
    return UserService.builder()
  }
  public func toBuilder() -> UserServiceBuilder {
    return UserService.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:UserService) -> UserServiceBuilder {
    return UserService.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "UserService"
  }
  override public func className() -> String {
      return "UserService"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return UserService.self
  }


  //Meta information declaration end

}

final public class UserServiceBuilder : GeneratedMessageBuilder {
  private var builderResult:UserService

  required override public init () {
     builderResult = UserService()
     super.init()
  }
  override public var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  public override func clear() -> UserServiceBuilder {
    builderResult = UserService()
    return self
  }
  public override func clone() -> UserServiceBuilder {
    return UserService.builderWithPrototype(builderResult)
  }
  public override func build() -> UserService {
       checkInitialized()
       return buildPartial()
  }
  public func buildPartial() -> UserService {
    var returnMe:UserService = builderResult
    return returnMe
  }
  public func mergeFrom(other:UserService) -> UserServiceBuilder {
    mergeUnknownFields(other.unknownFields)
    return self
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserServiceBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserServiceBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


public extension UserService.Containers.User {
    class func parseFromNSData(data:NSData) -> UserService.Containers.User {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.User.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.Containers.User {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.User.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.Containers {
    class func parseFromNSData(data:NSData) -> UserService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.CreateUser.Request {
    class func parseFromNSData(data:NSData) -> UserService.CreateUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CreateUser.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.CreateUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CreateUser.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.CreateUser.Response {
    class func parseFromNSData(data:NSData) -> UserService.CreateUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CreateUser.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.CreateUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CreateUser.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.CreateUser {
    class func parseFromNSData(data:NSData) -> UserService.CreateUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CreateUser.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.CreateUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CreateUser.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.UpdateUser.Request {
    class func parseFromNSData(data:NSData) -> UserService.UpdateUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.UpdateUser.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.UpdateUser.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.UpdateUser.Response {
    class func parseFromNSData(data:NSData) -> UserService.UpdateUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.UpdateUser.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.UpdateUser.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.UpdateUser {
    class func parseFromNSData(data:NSData) -> UserService.UpdateUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.UpdateUser.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.UpdateUser.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.GetUser.Request {
    class func parseFromNSData(data:NSData) -> UserService.GetUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetUser.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.GetUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetUser.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.GetUser.Response {
    class func parseFromNSData(data:NSData) -> UserService.GetUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetUser.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.GetUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetUser.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.GetUser {
    class func parseFromNSData(data:NSData) -> UserService.GetUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetUser.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.GetUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetUser.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.ValidUser.Request {
    class func parseFromNSData(data:NSData) -> UserService.ValidUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.ValidUser.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.ValidUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.ValidUser.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.ValidUser.Response {
    class func parseFromNSData(data:NSData) -> UserService.ValidUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.ValidUser.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.ValidUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.ValidUser.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.ValidUser {
    class func parseFromNSData(data:NSData) -> UserService.ValidUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.ValidUser.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.ValidUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.ValidUser.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.AuthenticateUser.Request.Credentials {
    class func parseFromNSData(data:NSData) -> UserService.AuthenticateUser.Request.Credentials {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.AuthenticateUser.Request.Credentials.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Request.Credentials {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.AuthenticateUser.Request.Credentials.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.AuthenticateUser.Request {
    class func parseFromNSData(data:NSData) -> UserService.AuthenticateUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.AuthenticateUser.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.AuthenticateUser.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.AuthenticateUser.Response {
    class func parseFromNSData(data:NSData) -> UserService.AuthenticateUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.AuthenticateUser.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.AuthenticateUser.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.AuthenticateUser {
    class func parseFromNSData(data:NSData) -> UserService.AuthenticateUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.AuthenticateUser.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.AuthenticateUser.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.SendVerificationCode.Request {
    class func parseFromNSData(data:NSData) -> UserService.SendVerificationCode.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.SendVerificationCode.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.SendVerificationCode.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.SendVerificationCode.Response {
    class func parseFromNSData(data:NSData) -> UserService.SendVerificationCode.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.SendVerificationCode.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.SendVerificationCode.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.SendVerificationCode {
    class func parseFromNSData(data:NSData) -> UserService.SendVerificationCode {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.SendVerificationCode.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.SendVerificationCode.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.VerifyVerificationCode.Request {
    class func parseFromNSData(data:NSData) -> UserService.VerifyVerificationCode.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.VerifyVerificationCode.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.VerifyVerificationCode.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.VerifyVerificationCode.Response {
    class func parseFromNSData(data:NSData) -> UserService.VerifyVerificationCode.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.VerifyVerificationCode.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.VerifyVerificationCode.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.VerifyVerificationCode {
    class func parseFromNSData(data:NSData) -> UserService.VerifyVerificationCode {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.VerifyVerificationCode.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.VerifyVerificationCode.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService {
    class func parseFromNSData(data:NSData) -> UserService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
