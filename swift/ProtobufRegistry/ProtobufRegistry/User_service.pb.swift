// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

public struct UserServiceRoot {
  public static var sharedInstance : UserServiceRoot {
   struct Static {
       static let instance : UserServiceRoot = UserServiceRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

public func == (lhs: UserService.Containers, rhs: UserService.Containers) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.CreateUser, rhs: UserService.CreateUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.BulkCreateUsers, rhs: UserService.BulkCreateUsers) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.UpdateUser, rhs: UserService.UpdateUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.GetUser, rhs: UserService.GetUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.ValidUser, rhs: UserService.ValidUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.AuthenticateUser, rhs: UserService.AuthenticateUser) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.SendVerificationCode, rhs: UserService.SendVerificationCode) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.VerifyVerificationCode, rhs: UserService.VerifyVerificationCode) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.GetAuthorizationInstructions, rhs: UserService.GetAuthorizationInstructions) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.CompleteAuthorization, rhs: UserService.CompleteAuthorization) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.DeleteIdentity, rhs: UserService.DeleteIdentity) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.GetIdentities, rhs: UserService.GetIdentities) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.RecordDevice, rhs: UserService.RecordDevice) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService.RequestAccess, rhs: UserService.RequestAccess) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: UserService, rhs: UserService) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final public class UserService : GeneratedMessage {


  //Nested type declaration start

    final public class Containers : GeneratedMessage {


      //Nested type declaration start

        final public class User : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "id": return id
                 case "primary_email": return primary_email
                 case "is_admin": return is_admin
                 case "is_active": return is_active
                 case "phone_number": return phone_number
                 case "phone_number_verified": return phone_number_verified
                 case "password": return password
                 default: return nil
                 }
          }

          public private(set) var hasId:Bool = false
          public private(set) var id:String = ""

          public private(set) var hasPrimaryEmail:Bool = false
          public private(set) var primary_email:String = ""

          public private(set) var hasIsAdmin:Bool = false
          public private(set) var is_admin:Bool = false

          public private(set) var hasIsActive:Bool = false
          public private(set) var is_active:Bool = false

          public private(set) var hasPhoneNumber:Bool = false
          public private(set) var phone_number:String = ""

          public private(set) var hasPhoneNumberVerified:Bool = false
          public private(set) var phone_number_verified:Bool = false

          public private(set) var hasPassword:Bool = false
          public private(set) var password:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasId {
              output.writeString(1, value:id)
            }
            if hasPrimaryEmail {
              output.writeString(2, value:primary_email)
            }
            if hasIsAdmin {
              output.writeBool(3, value:is_admin)
            }
            if hasIsActive {
              output.writeBool(4, value:is_active)
            }
            if hasPhoneNumber {
              output.writeString(5, value:phone_number)
            }
            if hasPhoneNumberVerified {
              output.writeBool(6, value:phone_number_verified)
            }
            if hasPassword {
              output.writeString(7, value:password)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasId {
              size += WireFormat.computeStringSize(1, value:id)
            }
            if hasPrimaryEmail {
              size += WireFormat.computeStringSize(2, value:primary_email)
            }
            if hasIsAdmin {
              size += WireFormat.computeBoolSize(3, value:is_admin)
            }
            if hasIsActive {
              size += WireFormat.computeBoolSize(4, value:is_active)
            }
            if hasPhoneNumber {
              size += WireFormat.computeStringSize(5, value:phone_number)
            }
            if hasPhoneNumberVerified {
              size += WireFormat.computeBoolSize(6, value:phone_number_verified)
            }
            if hasPassword {
              size += WireFormat.computeStringSize(7, value:password)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.Containers.User {
            return UserService.Containers.User.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.Containers.User {
            return UserService.Containers.User.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.Containers.User {
            return UserService.Containers.User.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.Containers.User {
            return UserService.Containers.User.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.Containers.User {
            return UserService.Containers.User.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.Containers.User {
            return UserService.Containers.User.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.Containers.UserBuilder {
            return UserService.Containers.User.classBuilder() as UserService.Containers.UserBuilder
          }
          public func builder() -> UserService.Containers.UserBuilder {
            return classBuilder() as UserService.Containers.UserBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.Containers.UserBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.Containers.User.builder()
          }
          public func toBuilder() -> UserService.Containers.UserBuilder {
            return UserService.Containers.User.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.Containers.User) -> UserService.Containers.UserBuilder {
            return UserService.Containers.User.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasId {
              output += "\(indent) id: \(id) \n"
            }
            if hasPrimaryEmail {
              output += "\(indent) primary_email: \(primary_email) \n"
            }
            if hasIsAdmin {
              output += "\(indent) is_admin: \(is_admin) \n"
            }
            if hasIsActive {
              output += "\(indent) is_active: \(is_active) \n"
            }
            if hasPhoneNumber {
              output += "\(indent) phone_number: \(phone_number) \n"
            }
            if hasPhoneNumberVerified {
              output += "\(indent) phone_number_verified: \(phone_number_verified) \n"
            }
            if hasPassword {
              output += "\(indent) password: \(password) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasId {
                     hashCode = (hashCode &* 31) &+ id.hashValue
                  }
                  if hasPrimaryEmail {
                     hashCode = (hashCode &* 31) &+ primary_email.hashValue
                  }
                  if hasIsAdmin {
                     hashCode = (hashCode &* 31) &+ is_admin.hashValue
                  }
                  if hasIsActive {
                     hashCode = (hashCode &* 31) &+ is_active.hashValue
                  }
                  if hasPhoneNumber {
                     hashCode = (hashCode &* 31) &+ phone_number.hashValue
                  }
                  if hasPhoneNumberVerified {
                     hashCode = (hashCode &* 31) &+ phone_number_verified.hashValue
                  }
                  if hasPassword {
                     hashCode = (hashCode &* 31) &+ password.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.Containers.User"
          }
          override public func className() -> String {
              return "UserService.Containers.User"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.Containers.User.self
          }


          //Meta information declaration end

        }

        final public class UserBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.Containers.User

          required override public init () {
             builderResult = UserService.Containers.User()
             super.init()
          }
          public var hasId:Bool {
               get {
                    return builderResult.hasId
               }
          }
          public var id:String {
               get {
                    return builderResult.id
               }
               set (value) {
                   builderResult.hasId = true
                   builderResult.id = value
               }
          }
          public func clearId() -> UserService.Containers.UserBuilder{
               builderResult.hasId = false
               builderResult.id = ""
               return self
          }
          public var hasPrimaryEmail:Bool {
               get {
                    return builderResult.hasPrimaryEmail
               }
          }
          public var primary_email:String {
               get {
                    return builderResult.primary_email
               }
               set (value) {
                   builderResult.hasPrimaryEmail = true
                   builderResult.primary_email = value
               }
          }
          public func clearPrimaryEmail() -> UserService.Containers.UserBuilder{
               builderResult.hasPrimaryEmail = false
               builderResult.primary_email = ""
               return self
          }
          public var hasIsAdmin:Bool {
               get {
                    return builderResult.hasIsAdmin
               }
          }
          public var is_admin:Bool {
               get {
                    return builderResult.is_admin
               }
               set (value) {
                   builderResult.hasIsAdmin = true
                   builderResult.is_admin = value
               }
          }
          public func clearIsAdmin() -> UserService.Containers.UserBuilder{
               builderResult.hasIsAdmin = false
               builderResult.is_admin = false
               return self
          }
          public var hasIsActive:Bool {
               get {
                    return builderResult.hasIsActive
               }
          }
          public var is_active:Bool {
               get {
                    return builderResult.is_active
               }
               set (value) {
                   builderResult.hasIsActive = true
                   builderResult.is_active = value
               }
          }
          public func clearIsActive() -> UserService.Containers.UserBuilder{
               builderResult.hasIsActive = false
               builderResult.is_active = false
               return self
          }
          public var hasPhoneNumber:Bool {
               get {
                    return builderResult.hasPhoneNumber
               }
          }
          public var phone_number:String {
               get {
                    return builderResult.phone_number
               }
               set (value) {
                   builderResult.hasPhoneNumber = true
                   builderResult.phone_number = value
               }
          }
          public func clearPhoneNumber() -> UserService.Containers.UserBuilder{
               builderResult.hasPhoneNumber = false
               builderResult.phone_number = ""
               return self
          }
          public var hasPhoneNumberVerified:Bool {
               get {
                    return builderResult.hasPhoneNumberVerified
               }
          }
          public var phone_number_verified:Bool {
               get {
                    return builderResult.phone_number_verified
               }
               set (value) {
                   builderResult.hasPhoneNumberVerified = true
                   builderResult.phone_number_verified = value
               }
          }
          public func clearPhoneNumberVerified() -> UserService.Containers.UserBuilder{
               builderResult.hasPhoneNumberVerified = false
               builderResult.phone_number_verified = false
               return self
          }
          public var hasPassword:Bool {
               get {
                    return builderResult.hasPassword
               }
          }
          public var password:String {
               get {
                    return builderResult.password
               }
               set (value) {
                   builderResult.hasPassword = true
                   builderResult.password = value
               }
          }
          public func clearPassword() -> UserService.Containers.UserBuilder{
               builderResult.hasPassword = false
               builderResult.password = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.Containers.UserBuilder {
            builderResult = UserService.Containers.User()
            return self
          }
          public override func clone() -> UserService.Containers.UserBuilder {
            return UserService.Containers.User.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.Containers.User {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.Containers.User {
            var returnMe:UserService.Containers.User = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.Containers.User) -> UserService.Containers.UserBuilder {
            if other.hasId {
                 id = other.id
            }
            if other.hasPrimaryEmail {
                 primary_email = other.primary_email
            }
            if other.hasIsAdmin {
                 is_admin = other.is_admin
            }
            if other.hasIsActive {
                 is_active = other.is_active
            }
            if other.hasPhoneNumber {
                 phone_number = other.phone_number
            }
            if other.hasPhoneNumberVerified {
                 phone_number_verified = other.phone_number_verified
            }
            if other.hasPassword {
                 password = other.password
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.Containers.UserBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.Containers.UserBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                id = input.readString()

              case 18 :
                primary_email = input.readString()

              case 24 :
                is_admin = input.readBool()

              case 32 :
                is_active = input.readBool()

              case 42 :
                phone_number = input.readString()

              case 48 :
                phone_number_verified = input.readBool()

              case 58 :
                password = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class OAuth2Details : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "code": return code
                 case "state": return state
                 default: return nil
                 }
          }

          public private(set) var hasCode:Bool = false
          public private(set) var code:String = ""

          public private(set) var hasState:Bool = false
          public private(set) var state:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasCode {
              output.writeString(1, value:code)
            }
            if hasState {
              output.writeString(2, value:state)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasCode {
              size += WireFormat.computeStringSize(1, value:code)
            }
            if hasState {
              size += WireFormat.computeStringSize(2, value:state)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.Containers.OAuth2Details {
            return UserService.Containers.OAuth2Details.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.Containers.OAuth2Details {
            return UserService.Containers.OAuth2Details.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.Containers.OAuth2Details {
            return UserService.Containers.OAuth2Details.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.Containers.OAuth2Details {
            return UserService.Containers.OAuth2Details.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.Containers.OAuth2Details {
            return UserService.Containers.OAuth2Details.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.Containers.OAuth2Details {
            return UserService.Containers.OAuth2Details.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.Containers.OAuth2DetailsBuilder {
            return UserService.Containers.OAuth2Details.classBuilder() as UserService.Containers.OAuth2DetailsBuilder
          }
          public func builder() -> UserService.Containers.OAuth2DetailsBuilder {
            return classBuilder() as UserService.Containers.OAuth2DetailsBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.Containers.OAuth2DetailsBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.Containers.OAuth2Details.builder()
          }
          public func toBuilder() -> UserService.Containers.OAuth2DetailsBuilder {
            return UserService.Containers.OAuth2Details.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.Containers.OAuth2Details) -> UserService.Containers.OAuth2DetailsBuilder {
            return UserService.Containers.OAuth2Details.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasCode {
              output += "\(indent) code: \(code) \n"
            }
            if hasState {
              output += "\(indent) state: \(state) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasCode {
                     hashCode = (hashCode &* 31) &+ code.hashValue
                  }
                  if hasState {
                     hashCode = (hashCode &* 31) &+ state.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.Containers.OAuth2Details"
          }
          override public func className() -> String {
              return "UserService.Containers.OAuth2Details"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.Containers.OAuth2Details.self
          }


          //Meta information declaration end

        }

        final public class OAuth2DetailsBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.Containers.OAuth2Details

          required override public init () {
             builderResult = UserService.Containers.OAuth2Details()
             super.init()
          }
          public var hasCode:Bool {
               get {
                    return builderResult.hasCode
               }
          }
          public var code:String {
               get {
                    return builderResult.code
               }
               set (value) {
                   builderResult.hasCode = true
                   builderResult.code = value
               }
          }
          public func clearCode() -> UserService.Containers.OAuth2DetailsBuilder{
               builderResult.hasCode = false
               builderResult.code = ""
               return self
          }
          public var hasState:Bool {
               get {
                    return builderResult.hasState
               }
          }
          public var state:String {
               get {
                    return builderResult.state
               }
               set (value) {
                   builderResult.hasState = true
                   builderResult.state = value
               }
          }
          public func clearState() -> UserService.Containers.OAuth2DetailsBuilder{
               builderResult.hasState = false
               builderResult.state = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.Containers.OAuth2DetailsBuilder {
            builderResult = UserService.Containers.OAuth2Details()
            return self
          }
          public override func clone() -> UserService.Containers.OAuth2DetailsBuilder {
            return UserService.Containers.OAuth2Details.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.Containers.OAuth2Details {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.Containers.OAuth2Details {
            var returnMe:UserService.Containers.OAuth2Details = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.Containers.OAuth2Details) -> UserService.Containers.OAuth2DetailsBuilder {
            if other.hasCode {
                 code = other.code
            }
            if other.hasState {
                 state = other.state
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.Containers.OAuth2DetailsBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.Containers.OAuth2DetailsBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                code = input.readString()

              case 18 :
                state = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class OAuthSDKDetails : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "code": return code
                 case "id_token": return id_token
                 default: return nil
                 }
          }

          public private(set) var hasCode:Bool = false
          public private(set) var code:String = ""

          public private(set) var hasIdToken:Bool = false
          public private(set) var id_token:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasCode {
              output.writeString(1, value:code)
            }
            if hasIdToken {
              output.writeString(2, value:id_token)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasCode {
              size += WireFormat.computeStringSize(1, value:code)
            }
            if hasIdToken {
              size += WireFormat.computeStringSize(2, value:id_token)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.Containers.OAuthSDKDetails {
            return UserService.Containers.OAuthSDKDetails.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.Containers.OAuthSDKDetails {
            return UserService.Containers.OAuthSDKDetails.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.Containers.OAuthSDKDetails {
            return UserService.Containers.OAuthSDKDetails.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.Containers.OAuthSDKDetails {
            return UserService.Containers.OAuthSDKDetails.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.Containers.OAuthSDKDetails {
            return UserService.Containers.OAuthSDKDetails.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.Containers.OAuthSDKDetails {
            return UserService.Containers.OAuthSDKDetails.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.Containers.OAuthSDKDetailsBuilder {
            return UserService.Containers.OAuthSDKDetails.classBuilder() as UserService.Containers.OAuthSDKDetailsBuilder
          }
          public func builder() -> UserService.Containers.OAuthSDKDetailsBuilder {
            return classBuilder() as UserService.Containers.OAuthSDKDetailsBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.Containers.OAuthSDKDetailsBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.Containers.OAuthSDKDetails.builder()
          }
          public func toBuilder() -> UserService.Containers.OAuthSDKDetailsBuilder {
            return UserService.Containers.OAuthSDKDetails.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.Containers.OAuthSDKDetails) -> UserService.Containers.OAuthSDKDetailsBuilder {
            return UserService.Containers.OAuthSDKDetails.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasCode {
              output += "\(indent) code: \(code) \n"
            }
            if hasIdToken {
              output += "\(indent) id_token: \(id_token) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasCode {
                     hashCode = (hashCode &* 31) &+ code.hashValue
                  }
                  if hasIdToken {
                     hashCode = (hashCode &* 31) &+ id_token.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.Containers.OAuthSDKDetails"
          }
          override public func className() -> String {
              return "UserService.Containers.OAuthSDKDetails"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.Containers.OAuthSDKDetails.self
          }


          //Meta information declaration end

        }

        final public class OAuthSDKDetailsBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.Containers.OAuthSDKDetails

          required override public init () {
             builderResult = UserService.Containers.OAuthSDKDetails()
             super.init()
          }
          public var hasCode:Bool {
               get {
                    return builderResult.hasCode
               }
          }
          public var code:String {
               get {
                    return builderResult.code
               }
               set (value) {
                   builderResult.hasCode = true
                   builderResult.code = value
               }
          }
          public func clearCode() -> UserService.Containers.OAuthSDKDetailsBuilder{
               builderResult.hasCode = false
               builderResult.code = ""
               return self
          }
          public var hasIdToken:Bool {
               get {
                    return builderResult.hasIdToken
               }
          }
          public var id_token:String {
               get {
                    return builderResult.id_token
               }
               set (value) {
                   builderResult.hasIdToken = true
                   builderResult.id_token = value
               }
          }
          public func clearIdToken() -> UserService.Containers.OAuthSDKDetailsBuilder{
               builderResult.hasIdToken = false
               builderResult.id_token = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.Containers.OAuthSDKDetailsBuilder {
            builderResult = UserService.Containers.OAuthSDKDetails()
            return self
          }
          public override func clone() -> UserService.Containers.OAuthSDKDetailsBuilder {
            return UserService.Containers.OAuthSDKDetails.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.Containers.OAuthSDKDetails {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.Containers.OAuthSDKDetails {
            var returnMe:UserService.Containers.OAuthSDKDetails = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.Containers.OAuthSDKDetails) -> UserService.Containers.OAuthSDKDetailsBuilder {
            if other.hasCode {
                 code = other.code
            }
            if other.hasIdToken {
                 id_token = other.id_token
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.Containers.OAuthSDKDetailsBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.Containers.OAuthSDKDetailsBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                code = input.readString()

              case 18 :
                id_token = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Identity : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "id": return id
                 case "provider": return Int(self.provider.rawValue)
                 case "full_name": return full_name
                 case "email": return email
                 case "access_token": return access_token
                 case "expires_at": return expires_at
                 case "provider_uid": return provider_uid
                 case "user_id": return user_id
                 case "refresh_token": return refresh_token
                 default: return nil
                 }
          }

          public private(set) var hasId:Bool = false
          public private(set) var id:String = ""

          public private(set) var provider:UserService.Provider = UserService.Provider.Internal
          public private(set) var hasProvider:Bool = false
          public private(set) var hasFullName:Bool = false
          public private(set) var full_name:String = ""

          public private(set) var hasEmail:Bool = false
          public private(set) var email:String = ""

          public private(set) var hasAccessToken:Bool = false
          public private(set) var access_token:String = ""

          public private(set) var hasExpiresAt:Bool = false
          public private(set) var expires_at:String = ""

          public private(set) var hasProviderUid:Bool = false
          public private(set) var provider_uid:String = ""

          public private(set) var hasUserId:Bool = false
          public private(set) var user_id:String = ""

          public private(set) var hasRefreshToken:Bool = false
          public private(set) var refresh_token:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasId {
              output.writeString(1, value:id)
            }
            if hasProvider {
              output.writeEnum(2, value:provider.rawValue)
            }
            if hasFullName {
              output.writeString(3, value:full_name)
            }
            if hasEmail {
              output.writeString(4, value:email)
            }
            if hasAccessToken {
              output.writeString(5, value:access_token)
            }
            if hasExpiresAt {
              output.writeString(6, value:expires_at)
            }
            if hasProviderUid {
              output.writeString(7, value:provider_uid)
            }
            if hasUserId {
              output.writeString(8, value:user_id)
            }
            if hasRefreshToken {
              output.writeString(9, value:refresh_token)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasId {
              size += WireFormat.computeStringSize(1, value:id)
            }
            if (hasProvider) {
              size += WireFormat.computeEnumSize(2, value:provider.rawValue)
            }
            if hasFullName {
              size += WireFormat.computeStringSize(3, value:full_name)
            }
            if hasEmail {
              size += WireFormat.computeStringSize(4, value:email)
            }
            if hasAccessToken {
              size += WireFormat.computeStringSize(5, value:access_token)
            }
            if hasExpiresAt {
              size += WireFormat.computeStringSize(6, value:expires_at)
            }
            if hasProviderUid {
              size += WireFormat.computeStringSize(7, value:provider_uid)
            }
            if hasUserId {
              size += WireFormat.computeStringSize(8, value:user_id)
            }
            if hasRefreshToken {
              size += WireFormat.computeStringSize(9, value:refresh_token)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.Containers.Identity {
            return UserService.Containers.Identity.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.Containers.Identity {
            return UserService.Containers.Identity.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.Containers.Identity {
            return UserService.Containers.Identity.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.Containers.Identity {
            return UserService.Containers.Identity.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.Containers.Identity {
            return UserService.Containers.Identity.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.Containers.Identity {
            return UserService.Containers.Identity.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.Containers.IdentityBuilder {
            return UserService.Containers.Identity.classBuilder() as UserService.Containers.IdentityBuilder
          }
          public func builder() -> UserService.Containers.IdentityBuilder {
            return classBuilder() as UserService.Containers.IdentityBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.Containers.IdentityBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.Containers.Identity.builder()
          }
          public func toBuilder() -> UserService.Containers.IdentityBuilder {
            return UserService.Containers.Identity.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.Containers.Identity) -> UserService.Containers.IdentityBuilder {
            return UserService.Containers.Identity.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasId {
              output += "\(indent) id: \(id) \n"
            }
            if (hasProvider) {
              output += "\(indent) provider: \(provider.rawValue)\n"
            }
            if hasFullName {
              output += "\(indent) full_name: \(full_name) \n"
            }
            if hasEmail {
              output += "\(indent) email: \(email) \n"
            }
            if hasAccessToken {
              output += "\(indent) access_token: \(access_token) \n"
            }
            if hasExpiresAt {
              output += "\(indent) expires_at: \(expires_at) \n"
            }
            if hasProviderUid {
              output += "\(indent) provider_uid: \(provider_uid) \n"
            }
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            if hasRefreshToken {
              output += "\(indent) refresh_token: \(refresh_token) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasId {
                     hashCode = (hashCode &* 31) &+ id.hashValue
                  }
                  if hasProvider {
                     hashCode = (hashCode &* 31) &+ Int(provider.rawValue)
                  }
                  if hasFullName {
                     hashCode = (hashCode &* 31) &+ full_name.hashValue
                  }
                  if hasEmail {
                     hashCode = (hashCode &* 31) &+ email.hashValue
                  }
                  if hasAccessToken {
                     hashCode = (hashCode &* 31) &+ access_token.hashValue
                  }
                  if hasExpiresAt {
                     hashCode = (hashCode &* 31) &+ expires_at.hashValue
                  }
                  if hasProviderUid {
                     hashCode = (hashCode &* 31) &+ provider_uid.hashValue
                  }
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  if hasRefreshToken {
                     hashCode = (hashCode &* 31) &+ refresh_token.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.Containers.Identity"
          }
          override public func className() -> String {
              return "UserService.Containers.Identity"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.Containers.Identity.self
          }


          //Meta information declaration end

        }

        final public class IdentityBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.Containers.Identity

          required override public init () {
             builderResult = UserService.Containers.Identity()
             super.init()
          }
          public var hasId:Bool {
               get {
                    return builderResult.hasId
               }
          }
          public var id:String {
               get {
                    return builderResult.id
               }
               set (value) {
                   builderResult.hasId = true
                   builderResult.id = value
               }
          }
          public func clearId() -> UserService.Containers.IdentityBuilder{
               builderResult.hasId = false
               builderResult.id = ""
               return self
          }
            public var hasProvider:Bool{
                get {
                    return builderResult.hasProvider
                }
            }
            public var provider:UserService.Provider {
                get {
                    return builderResult.provider
                }
                set (value) {
                    builderResult.hasProvider = true
                    builderResult.provider = value
                }
            }
            public func clearProvider() -> UserService.Containers.IdentityBuilder {
               builderResult.hasProvider = false
               builderResult.provider = .Internal
               return self
            }
          public var hasFullName:Bool {
               get {
                    return builderResult.hasFullName
               }
          }
          public var full_name:String {
               get {
                    return builderResult.full_name
               }
               set (value) {
                   builderResult.hasFullName = true
                   builderResult.full_name = value
               }
          }
          public func clearFullName() -> UserService.Containers.IdentityBuilder{
               builderResult.hasFullName = false
               builderResult.full_name = ""
               return self
          }
          public var hasEmail:Bool {
               get {
                    return builderResult.hasEmail
               }
          }
          public var email:String {
               get {
                    return builderResult.email
               }
               set (value) {
                   builderResult.hasEmail = true
                   builderResult.email = value
               }
          }
          public func clearEmail() -> UserService.Containers.IdentityBuilder{
               builderResult.hasEmail = false
               builderResult.email = ""
               return self
          }
          public var hasAccessToken:Bool {
               get {
                    return builderResult.hasAccessToken
               }
          }
          public var access_token:String {
               get {
                    return builderResult.access_token
               }
               set (value) {
                   builderResult.hasAccessToken = true
                   builderResult.access_token = value
               }
          }
          public func clearAccessToken() -> UserService.Containers.IdentityBuilder{
               builderResult.hasAccessToken = false
               builderResult.access_token = ""
               return self
          }
          public var hasExpiresAt:Bool {
               get {
                    return builderResult.hasExpiresAt
               }
          }
          public var expires_at:String {
               get {
                    return builderResult.expires_at
               }
               set (value) {
                   builderResult.hasExpiresAt = true
                   builderResult.expires_at = value
               }
          }
          public func clearExpiresAt() -> UserService.Containers.IdentityBuilder{
               builderResult.hasExpiresAt = false
               builderResult.expires_at = ""
               return self
          }
          public var hasProviderUid:Bool {
               get {
                    return builderResult.hasProviderUid
               }
          }
          public var provider_uid:String {
               get {
                    return builderResult.provider_uid
               }
               set (value) {
                   builderResult.hasProviderUid = true
                   builderResult.provider_uid = value
               }
          }
          public func clearProviderUid() -> UserService.Containers.IdentityBuilder{
               builderResult.hasProviderUid = false
               builderResult.provider_uid = ""
               return self
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> UserService.Containers.IdentityBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          public var hasRefreshToken:Bool {
               get {
                    return builderResult.hasRefreshToken
               }
          }
          public var refresh_token:String {
               get {
                    return builderResult.refresh_token
               }
               set (value) {
                   builderResult.hasRefreshToken = true
                   builderResult.refresh_token = value
               }
          }
          public func clearRefreshToken() -> UserService.Containers.IdentityBuilder{
               builderResult.hasRefreshToken = false
               builderResult.refresh_token = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.Containers.IdentityBuilder {
            builderResult = UserService.Containers.Identity()
            return self
          }
          public override func clone() -> UserService.Containers.IdentityBuilder {
            return UserService.Containers.Identity.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.Containers.Identity {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.Containers.Identity {
            var returnMe:UserService.Containers.Identity = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.Containers.Identity) -> UserService.Containers.IdentityBuilder {
            if other.hasId {
                 id = other.id
            }
            if other.hasProvider {
                 provider = other.provider
            }
            if other.hasFullName {
                 full_name = other.full_name
            }
            if other.hasEmail {
                 email = other.email
            }
            if other.hasAccessToken {
                 access_token = other.access_token
            }
            if other.hasExpiresAt {
                 expires_at = other.expires_at
            }
            if other.hasProviderUid {
                 provider_uid = other.provider_uid
            }
            if other.hasUserId {
                 user_id = other.user_id
            }
            if other.hasRefreshToken {
                 refresh_token = other.refresh_token
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.Containers.IdentityBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.Containers.IdentityBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                id = input.readString()

              case 16 :
                let valueIntprovider = input.readEnum()
                if let enumsprovider = UserService.Provider(rawValue:valueIntprovider){
                     provider = enumsprovider
                } else {
                     unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntprovider))
                }

              case 26 :
                full_name = input.readString()

              case 34 :
                email = input.readString()

              case 42 :
                access_token = input.readString()

              case 50 :
                expires_at = input.readString()

              case 58 :
                provider_uid = input.readString()

              case 66 :
                user_id = input.readString()

              case 74 :
                refresh_token = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Device : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "id": return id
                 case "notification_token": return notification_token
                 case "platform": return platform
                 case "os_version": return os_version
                 case "app_version": return app_version
                 case "device_uuid": return device_uuid
                 case "user_id": return user_id
                 case "language_preference": return language_preference
                 default: return nil
                 }
          }

          public private(set) var hasId:Bool = false
          public private(set) var id:String = ""

          public private(set) var hasNotificationToken:Bool = false
          public private(set) var notification_token:String = ""

          public private(set) var hasPlatform:Bool = false
          public private(set) var platform:String = ""

          public private(set) var hasOsVersion:Bool = false
          public private(set) var os_version:String = ""

          public private(set) var hasAppVersion:Bool = false
          public private(set) var app_version:String = ""

          public private(set) var hasDeviceUuid:Bool = false
          public private(set) var device_uuid:String = ""

          public private(set) var hasUserId:Bool = false
          public private(set) var user_id:String = ""

          public private(set) var hasLanguagePreference:Bool = false
          public private(set) var language_preference:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasId {
              output.writeString(1, value:id)
            }
            if hasNotificationToken {
              output.writeString(2, value:notification_token)
            }
            if hasPlatform {
              output.writeString(3, value:platform)
            }
            if hasOsVersion {
              output.writeString(4, value:os_version)
            }
            if hasAppVersion {
              output.writeString(5, value:app_version)
            }
            if hasDeviceUuid {
              output.writeString(6, value:device_uuid)
            }
            if hasUserId {
              output.writeString(7, value:user_id)
            }
            if hasLanguagePreference {
              output.writeString(8, value:language_preference)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasId {
              size += WireFormat.computeStringSize(1, value:id)
            }
            if hasNotificationToken {
              size += WireFormat.computeStringSize(2, value:notification_token)
            }
            if hasPlatform {
              size += WireFormat.computeStringSize(3, value:platform)
            }
            if hasOsVersion {
              size += WireFormat.computeStringSize(4, value:os_version)
            }
            if hasAppVersion {
              size += WireFormat.computeStringSize(5, value:app_version)
            }
            if hasDeviceUuid {
              size += WireFormat.computeStringSize(6, value:device_uuid)
            }
            if hasUserId {
              size += WireFormat.computeStringSize(7, value:user_id)
            }
            if hasLanguagePreference {
              size += WireFormat.computeStringSize(8, value:language_preference)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.Containers.Device {
            return UserService.Containers.Device.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.Containers.Device {
            return UserService.Containers.Device.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.Containers.Device {
            return UserService.Containers.Device.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.Containers.Device {
            return UserService.Containers.Device.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.Containers.Device {
            return UserService.Containers.Device.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.Containers.Device {
            return UserService.Containers.Device.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.Containers.DeviceBuilder {
            return UserService.Containers.Device.classBuilder() as UserService.Containers.DeviceBuilder
          }
          public func builder() -> UserService.Containers.DeviceBuilder {
            return classBuilder() as UserService.Containers.DeviceBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.Containers.DeviceBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.Containers.Device.builder()
          }
          public func toBuilder() -> UserService.Containers.DeviceBuilder {
            return UserService.Containers.Device.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.Containers.Device) -> UserService.Containers.DeviceBuilder {
            return UserService.Containers.Device.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasId {
              output += "\(indent) id: \(id) \n"
            }
            if hasNotificationToken {
              output += "\(indent) notification_token: \(notification_token) \n"
            }
            if hasPlatform {
              output += "\(indent) platform: \(platform) \n"
            }
            if hasOsVersion {
              output += "\(indent) os_version: \(os_version) \n"
            }
            if hasAppVersion {
              output += "\(indent) app_version: \(app_version) \n"
            }
            if hasDeviceUuid {
              output += "\(indent) device_uuid: \(device_uuid) \n"
            }
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            if hasLanguagePreference {
              output += "\(indent) language_preference: \(language_preference) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasId {
                     hashCode = (hashCode &* 31) &+ id.hashValue
                  }
                  if hasNotificationToken {
                     hashCode = (hashCode &* 31) &+ notification_token.hashValue
                  }
                  if hasPlatform {
                     hashCode = (hashCode &* 31) &+ platform.hashValue
                  }
                  if hasOsVersion {
                     hashCode = (hashCode &* 31) &+ os_version.hashValue
                  }
                  if hasAppVersion {
                     hashCode = (hashCode &* 31) &+ app_version.hashValue
                  }
                  if hasDeviceUuid {
                     hashCode = (hashCode &* 31) &+ device_uuid.hashValue
                  }
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  if hasLanguagePreference {
                     hashCode = (hashCode &* 31) &+ language_preference.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.Containers.Device"
          }
          override public func className() -> String {
              return "UserService.Containers.Device"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.Containers.Device.self
          }


          //Meta information declaration end

        }

        final public class DeviceBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.Containers.Device

          required override public init () {
             builderResult = UserService.Containers.Device()
             super.init()
          }
          public var hasId:Bool {
               get {
                    return builderResult.hasId
               }
          }
          public var id:String {
               get {
                    return builderResult.id
               }
               set (value) {
                   builderResult.hasId = true
                   builderResult.id = value
               }
          }
          public func clearId() -> UserService.Containers.DeviceBuilder{
               builderResult.hasId = false
               builderResult.id = ""
               return self
          }
          public var hasNotificationToken:Bool {
               get {
                    return builderResult.hasNotificationToken
               }
          }
          public var notification_token:String {
               get {
                    return builderResult.notification_token
               }
               set (value) {
                   builderResult.hasNotificationToken = true
                   builderResult.notification_token = value
               }
          }
          public func clearNotificationToken() -> UserService.Containers.DeviceBuilder{
               builderResult.hasNotificationToken = false
               builderResult.notification_token = ""
               return self
          }
          public var hasPlatform:Bool {
               get {
                    return builderResult.hasPlatform
               }
          }
          public var platform:String {
               get {
                    return builderResult.platform
               }
               set (value) {
                   builderResult.hasPlatform = true
                   builderResult.platform = value
               }
          }
          public func clearPlatform() -> UserService.Containers.DeviceBuilder{
               builderResult.hasPlatform = false
               builderResult.platform = ""
               return self
          }
          public var hasOsVersion:Bool {
               get {
                    return builderResult.hasOsVersion
               }
          }
          public var os_version:String {
               get {
                    return builderResult.os_version
               }
               set (value) {
                   builderResult.hasOsVersion = true
                   builderResult.os_version = value
               }
          }
          public func clearOsVersion() -> UserService.Containers.DeviceBuilder{
               builderResult.hasOsVersion = false
               builderResult.os_version = ""
               return self
          }
          public var hasAppVersion:Bool {
               get {
                    return builderResult.hasAppVersion
               }
          }
          public var app_version:String {
               get {
                    return builderResult.app_version
               }
               set (value) {
                   builderResult.hasAppVersion = true
                   builderResult.app_version = value
               }
          }
          public func clearAppVersion() -> UserService.Containers.DeviceBuilder{
               builderResult.hasAppVersion = false
               builderResult.app_version = ""
               return self
          }
          public var hasDeviceUuid:Bool {
               get {
                    return builderResult.hasDeviceUuid
               }
          }
          public var device_uuid:String {
               get {
                    return builderResult.device_uuid
               }
               set (value) {
                   builderResult.hasDeviceUuid = true
                   builderResult.device_uuid = value
               }
          }
          public func clearDeviceUuid() -> UserService.Containers.DeviceBuilder{
               builderResult.hasDeviceUuid = false
               builderResult.device_uuid = ""
               return self
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> UserService.Containers.DeviceBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          public var hasLanguagePreference:Bool {
               get {
                    return builderResult.hasLanguagePreference
               }
          }
          public var language_preference:String {
               get {
                    return builderResult.language_preference
               }
               set (value) {
                   builderResult.hasLanguagePreference = true
                   builderResult.language_preference = value
               }
          }
          public func clearLanguagePreference() -> UserService.Containers.DeviceBuilder{
               builderResult.hasLanguagePreference = false
               builderResult.language_preference = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.Containers.DeviceBuilder {
            builderResult = UserService.Containers.Device()
            return self
          }
          public override func clone() -> UserService.Containers.DeviceBuilder {
            return UserService.Containers.Device.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.Containers.Device {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.Containers.Device {
            var returnMe:UserService.Containers.Device = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.Containers.Device) -> UserService.Containers.DeviceBuilder {
            if other.hasId {
                 id = other.id
            }
            if other.hasNotificationToken {
                 notification_token = other.notification_token
            }
            if other.hasPlatform {
                 platform = other.platform
            }
            if other.hasOsVersion {
                 os_version = other.os_version
            }
            if other.hasAppVersion {
                 app_version = other.app_version
            }
            if other.hasDeviceUuid {
                 device_uuid = other.device_uuid
            }
            if other.hasUserId {
                 user_id = other.user_id
            }
            if other.hasLanguagePreference {
                 language_preference = other.language_preference
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.Containers.DeviceBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.Containers.DeviceBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                id = input.readString()

              case 18 :
                notification_token = input.readString()

              case 26 :
                platform = input.readString()

              case 34 :
                os_version = input.readString()

              case 42 :
                app_version = input.readString()

              case 50 :
                device_uuid = input.readString()

              case 58 :
                user_id = input.readString()

              case 66 :
                language_preference = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class AccessRequest : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "id": return id
                 case "user_id": return user_id
                 default: return nil
                 }
          }

          public private(set) var hasId:Bool = false
          public private(set) var id:String = ""

          public private(set) var hasUserId:Bool = false
          public private(set) var user_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasId {
              output.writeString(1, value:id)
            }
            if hasUserId {
              output.writeString(2, value:user_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasId {
              size += WireFormat.computeStringSize(1, value:id)
            }
            if hasUserId {
              size += WireFormat.computeStringSize(2, value:user_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.Containers.AccessRequest {
            return UserService.Containers.AccessRequest.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.Containers.AccessRequest {
            return UserService.Containers.AccessRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.Containers.AccessRequest {
            return UserService.Containers.AccessRequest.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.Containers.AccessRequest {
            return UserService.Containers.AccessRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.Containers.AccessRequest {
            return UserService.Containers.AccessRequest.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.Containers.AccessRequest {
            return UserService.Containers.AccessRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.Containers.AccessRequestBuilder {
            return UserService.Containers.AccessRequest.classBuilder() as UserService.Containers.AccessRequestBuilder
          }
          public func builder() -> UserService.Containers.AccessRequestBuilder {
            return classBuilder() as UserService.Containers.AccessRequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.Containers.AccessRequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.Containers.AccessRequest.builder()
          }
          public func toBuilder() -> UserService.Containers.AccessRequestBuilder {
            return UserService.Containers.AccessRequest.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.Containers.AccessRequest) -> UserService.Containers.AccessRequestBuilder {
            return UserService.Containers.AccessRequest.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasId {
              output += "\(indent) id: \(id) \n"
            }
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasId {
                     hashCode = (hashCode &* 31) &+ id.hashValue
                  }
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.Containers.AccessRequest"
          }
          override public func className() -> String {
              return "UserService.Containers.AccessRequest"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.Containers.AccessRequest.self
          }


          //Meta information declaration end

        }

        final public class AccessRequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.Containers.AccessRequest

          required override public init () {
             builderResult = UserService.Containers.AccessRequest()
             super.init()
          }
          public var hasId:Bool {
               get {
                    return builderResult.hasId
               }
          }
          public var id:String {
               get {
                    return builderResult.id
               }
               set (value) {
                   builderResult.hasId = true
                   builderResult.id = value
               }
          }
          public func clearId() -> UserService.Containers.AccessRequestBuilder{
               builderResult.hasId = false
               builderResult.id = ""
               return self
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> UserService.Containers.AccessRequestBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.Containers.AccessRequestBuilder {
            builderResult = UserService.Containers.AccessRequest()
            return self
          }
          public override func clone() -> UserService.Containers.AccessRequestBuilder {
            return UserService.Containers.AccessRequest.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.Containers.AccessRequest {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.Containers.AccessRequest {
            var returnMe:UserService.Containers.AccessRequest = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.Containers.AccessRequest) -> UserService.Containers.AccessRequestBuilder {
            if other.hasId {
                 id = other.id
            }
            if other.hasUserId {
                 user_id = other.user_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.Containers.AccessRequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.Containers.AccessRequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                id = input.readString()

              case 18 :
                user_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.Containers {
        return UserService.Containers.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.Containers {
        return UserService.Containers.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.Containers {
        return UserService.Containers.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.Containers {
        return UserService.Containers.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.Containers {
        return UserService.Containers.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.Containers {
        return UserService.Containers.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.ContainersBuilder {
        return UserService.Containers.classBuilder() as UserService.ContainersBuilder
      }
      public func builder() -> UserService.ContainersBuilder {
        return classBuilder() as UserService.ContainersBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.ContainersBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.Containers.builder()
      }
      public func toBuilder() -> UserService.ContainersBuilder {
        return UserService.Containers.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.Containers) -> UserService.ContainersBuilder {
        return UserService.Containers.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.Containers"
      }
      override public func className() -> String {
          return "UserService.Containers"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.Containers.self
      }


      //Meta information declaration end

    }

    final public class ContainersBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.Containers

      required override public init () {
         builderResult = UserService.Containers()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.ContainersBuilder {
        builderResult = UserService.Containers()
        return self
      }
      public override func clone() -> UserService.ContainersBuilder {
        return UserService.Containers.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.Containers {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.Containers {
        var returnMe:UserService.Containers = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.Containers) -> UserService.ContainersBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.ContainersBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.ContainersBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class CreateUser : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "password": return password
                 case "email": return email
                 default: return nil
                 }
          }

          public private(set) var hasPassword:Bool = false
          public private(set) var password:String = ""

          public private(set) var hasEmail:Bool = false
          public private(set) var email:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasPassword {
              output.writeString(1, value:password)
            }
            if hasEmail {
              output.writeString(2, value:email)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasPassword {
              size += WireFormat.computeStringSize(1, value:password)
            }
            if hasEmail {
              size += WireFormat.computeStringSize(2, value:email)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.CreateUser.Request {
            return UserService.CreateUser.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.CreateUser.Request {
            return UserService.CreateUser.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.CreateUser.Request {
            return UserService.CreateUser.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.CreateUser.Request {
            return UserService.CreateUser.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.CreateUser.Request {
            return UserService.CreateUser.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CreateUser.Request {
            return UserService.CreateUser.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.CreateUser.RequestBuilder {
            return UserService.CreateUser.Request.classBuilder() as UserService.CreateUser.RequestBuilder
          }
          public func builder() -> UserService.CreateUser.RequestBuilder {
            return classBuilder() as UserService.CreateUser.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.CreateUser.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.CreateUser.Request.builder()
          }
          public func toBuilder() -> UserService.CreateUser.RequestBuilder {
            return UserService.CreateUser.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.CreateUser.Request) -> UserService.CreateUser.RequestBuilder {
            return UserService.CreateUser.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasPassword {
              output += "\(indent) password: \(password) \n"
            }
            if hasEmail {
              output += "\(indent) email: \(email) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasPassword {
                     hashCode = (hashCode &* 31) &+ password.hashValue
                  }
                  if hasEmail {
                     hashCode = (hashCode &* 31) &+ email.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.CreateUser.Request"
          }
          override public func className() -> String {
              return "UserService.CreateUser.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.CreateUser.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.CreateUser.Request

          required override public init () {
             builderResult = UserService.CreateUser.Request()
             super.init()
          }
          public var hasPassword:Bool {
               get {
                    return builderResult.hasPassword
               }
          }
          public var password:String {
               get {
                    return builderResult.password
               }
               set (value) {
                   builderResult.hasPassword = true
                   builderResult.password = value
               }
          }
          public func clearPassword() -> UserService.CreateUser.RequestBuilder{
               builderResult.hasPassword = false
               builderResult.password = ""
               return self
          }
          public var hasEmail:Bool {
               get {
                    return builderResult.hasEmail
               }
          }
          public var email:String {
               get {
                    return builderResult.email
               }
               set (value) {
                   builderResult.hasEmail = true
                   builderResult.email = value
               }
          }
          public func clearEmail() -> UserService.CreateUser.RequestBuilder{
               builderResult.hasEmail = false
               builderResult.email = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.CreateUser.RequestBuilder {
            builderResult = UserService.CreateUser.Request()
            return self
          }
          public override func clone() -> UserService.CreateUser.RequestBuilder {
            return UserService.CreateUser.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.CreateUser.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.CreateUser.Request {
            var returnMe:UserService.CreateUser.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.CreateUser.Request) -> UserService.CreateUser.RequestBuilder {
            if other.hasPassword {
                 password = other.password
            }
            if other.hasEmail {
                 email = other.email
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.CreateUser.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CreateUser.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                password = input.readString()

              case 18 :
                email = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "user": return user
                 default: return nil
                 }
          }

          public private(set) var hasUser:Bool = false
          public private(set) var user:UserService.Containers.User = UserService.Containers.User()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUser {
              output.writeMessage(1, value:user)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUser {
              size += WireFormat.computeMessageSize(1, value:user)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.CreateUser.Response {
            return UserService.CreateUser.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.CreateUser.Response {
            return UserService.CreateUser.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.CreateUser.Response {
            return UserService.CreateUser.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.CreateUser.Response {
            return UserService.CreateUser.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.CreateUser.Response {
            return UserService.CreateUser.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CreateUser.Response {
            return UserService.CreateUser.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.CreateUser.ResponseBuilder {
            return UserService.CreateUser.Response.classBuilder() as UserService.CreateUser.ResponseBuilder
          }
          public func builder() -> UserService.CreateUser.ResponseBuilder {
            return classBuilder() as UserService.CreateUser.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.CreateUser.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.CreateUser.Response.builder()
          }
          public func toBuilder() -> UserService.CreateUser.ResponseBuilder {
            return UserService.CreateUser.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.CreateUser.Response) -> UserService.CreateUser.ResponseBuilder {
            return UserService.CreateUser.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUser {
              output += "\(indent) user {\n"
              user.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUser {
                    hashCode = (hashCode &* 31) &+ user.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.CreateUser.Response"
          }
          override public func className() -> String {
              return "UserService.CreateUser.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.CreateUser.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.CreateUser.Response

          required override public init () {
             builderResult = UserService.CreateUser.Response()
             super.init()
          }
          public var hasUser:Bool {
               get {
                   return builderResult.hasUser
               }
          }
          public var user:UserService.Containers.User {
               get {
                   return builderResult.user
               }
               set (value) {
                   builderResult.hasUser = true
                   builderResult.user = value
               }
          }
          public func setUserBuilder(builderForValue:UserService.Containers.UserBuilder) -> UserService.CreateUser.ResponseBuilder {
            user = builderForValue.build()
            return self
          }
          public func mergeUser(value:UserService.Containers.User) -> UserService.CreateUser.ResponseBuilder {
            if (builderResult.hasUser) {
              builderResult.user = UserService.Containers.User.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
            } else {
              builderResult.user = value
            }
            builderResult.hasUser = true
            return self
          }
          public func clearUser() -> UserService.CreateUser.ResponseBuilder {
            builderResult.hasUser = false
            builderResult.user = UserService.Containers.User()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.CreateUser.ResponseBuilder {
            builderResult = UserService.CreateUser.Response()
            return self
          }
          public override func clone() -> UserService.CreateUser.ResponseBuilder {
            return UserService.CreateUser.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.CreateUser.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.CreateUser.Response {
            var returnMe:UserService.CreateUser.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.CreateUser.Response) -> UserService.CreateUser.ResponseBuilder {
            if (other.hasUser) {
                mergeUser(other.user)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.CreateUser.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CreateUser.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:UserService.Containers.UserBuilder = UserService.Containers.User.builder()
                if hasUser {
                  subBuilder.mergeFrom(user)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                user = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.CreateUser {
        return UserService.CreateUser.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.CreateUser {
        return UserService.CreateUser.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.CreateUser {
        return UserService.CreateUser.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.CreateUser {
        return UserService.CreateUser.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.CreateUser {
        return UserService.CreateUser.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CreateUser {
        return UserService.CreateUser.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.CreateUserBuilder {
        return UserService.CreateUser.classBuilder() as UserService.CreateUserBuilder
      }
      public func builder() -> UserService.CreateUserBuilder {
        return classBuilder() as UserService.CreateUserBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.CreateUserBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.CreateUser.builder()
      }
      public func toBuilder() -> UserService.CreateUserBuilder {
        return UserService.CreateUser.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.CreateUser) -> UserService.CreateUserBuilder {
        return UserService.CreateUser.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.CreateUser"
      }
      override public func className() -> String {
          return "UserService.CreateUser"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.CreateUser.self
      }


      //Meta information declaration end

    }

    final public class CreateUserBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.CreateUser

      required override public init () {
         builderResult = UserService.CreateUser()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.CreateUserBuilder {
        builderResult = UserService.CreateUser()
        return self
      }
      public override func clone() -> UserService.CreateUserBuilder {
        return UserService.CreateUser.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.CreateUser {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.CreateUser {
        var returnMe:UserService.CreateUser = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.CreateUser) -> UserService.CreateUserBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.CreateUserBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CreateUserBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class BulkCreateUsers : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var users:Array<UserService.Containers.User>  = Array<UserService.Containers.User>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementusers in users {
                output.writeMessage(1, value:oneElementusers)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementusers in users {
                size += WireFormat.computeMessageSize(1, value:oneElementusers)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.BulkCreateUsers.Request {
            return UserService.BulkCreateUsers.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.BulkCreateUsers.Request {
            return UserService.BulkCreateUsers.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.BulkCreateUsers.Request {
            return UserService.BulkCreateUsers.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.BulkCreateUsers.Request {
            return UserService.BulkCreateUsers.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.BulkCreateUsers.Request {
            return UserService.BulkCreateUsers.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.BulkCreateUsers.Request {
            return UserService.BulkCreateUsers.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.BulkCreateUsers.RequestBuilder {
            return UserService.BulkCreateUsers.Request.classBuilder() as UserService.BulkCreateUsers.RequestBuilder
          }
          public func builder() -> UserService.BulkCreateUsers.RequestBuilder {
            return classBuilder() as UserService.BulkCreateUsers.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.BulkCreateUsers.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.BulkCreateUsers.Request.builder()
          }
          public func toBuilder() -> UserService.BulkCreateUsers.RequestBuilder {
            return UserService.BulkCreateUsers.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.BulkCreateUsers.Request) -> UserService.BulkCreateUsers.RequestBuilder {
            return UserService.BulkCreateUsers.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var usersElementIndex:Int = 0
            for oneElementusers in users {
                output += "\(indent) users[\(usersElementIndex)] {\n"
                oneElementusers.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                usersElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementusers in users {
                      hashCode = (hashCode &* 31) &+ oneElementusers.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.BulkCreateUsers.Request"
          }
          override public func className() -> String {
              return "UserService.BulkCreateUsers.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.BulkCreateUsers.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.BulkCreateUsers.Request

          required override public init () {
             builderResult = UserService.BulkCreateUsers.Request()
             super.init()
          }
          public var users:Array<UserService.Containers.User> {
               get {
                   return builderResult.users
               }
               set (value) {
                   builderResult.users = value
               }
          }
          public func clearUsers() -> UserService.BulkCreateUsers.RequestBuilder {
            builderResult.users.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.BulkCreateUsers.RequestBuilder {
            builderResult = UserService.BulkCreateUsers.Request()
            return self
          }
          public override func clone() -> UserService.BulkCreateUsers.RequestBuilder {
            return UserService.BulkCreateUsers.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.BulkCreateUsers.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.BulkCreateUsers.Request {
            var returnMe:UserService.BulkCreateUsers.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.BulkCreateUsers.Request) -> UserService.BulkCreateUsers.RequestBuilder {
            if !other.users.isEmpty  {
               builderResult.users += other.users
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.BulkCreateUsers.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.BulkCreateUsers.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = UserService.Containers.User.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                users += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var users:Array<UserService.Containers.User>  = Array<UserService.Containers.User>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementusers in users {
                output.writeMessage(1, value:oneElementusers)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementusers in users {
                size += WireFormat.computeMessageSize(1, value:oneElementusers)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.BulkCreateUsers.Response {
            return UserService.BulkCreateUsers.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.BulkCreateUsers.Response {
            return UserService.BulkCreateUsers.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.BulkCreateUsers.Response {
            return UserService.BulkCreateUsers.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.BulkCreateUsers.Response {
            return UserService.BulkCreateUsers.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.BulkCreateUsers.Response {
            return UserService.BulkCreateUsers.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.BulkCreateUsers.Response {
            return UserService.BulkCreateUsers.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.BulkCreateUsers.ResponseBuilder {
            return UserService.BulkCreateUsers.Response.classBuilder() as UserService.BulkCreateUsers.ResponseBuilder
          }
          public func builder() -> UserService.BulkCreateUsers.ResponseBuilder {
            return classBuilder() as UserService.BulkCreateUsers.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.BulkCreateUsers.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.BulkCreateUsers.Response.builder()
          }
          public func toBuilder() -> UserService.BulkCreateUsers.ResponseBuilder {
            return UserService.BulkCreateUsers.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.BulkCreateUsers.Response) -> UserService.BulkCreateUsers.ResponseBuilder {
            return UserService.BulkCreateUsers.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var usersElementIndex:Int = 0
            for oneElementusers in users {
                output += "\(indent) users[\(usersElementIndex)] {\n"
                oneElementusers.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                usersElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementusers in users {
                      hashCode = (hashCode &* 31) &+ oneElementusers.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.BulkCreateUsers.Response"
          }
          override public func className() -> String {
              return "UserService.BulkCreateUsers.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.BulkCreateUsers.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.BulkCreateUsers.Response

          required override public init () {
             builderResult = UserService.BulkCreateUsers.Response()
             super.init()
          }
          public var users:Array<UserService.Containers.User> {
               get {
                   return builderResult.users
               }
               set (value) {
                   builderResult.users = value
               }
          }
          public func clearUsers() -> UserService.BulkCreateUsers.ResponseBuilder {
            builderResult.users.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.BulkCreateUsers.ResponseBuilder {
            builderResult = UserService.BulkCreateUsers.Response()
            return self
          }
          public override func clone() -> UserService.BulkCreateUsers.ResponseBuilder {
            return UserService.BulkCreateUsers.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.BulkCreateUsers.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.BulkCreateUsers.Response {
            var returnMe:UserService.BulkCreateUsers.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.BulkCreateUsers.Response) -> UserService.BulkCreateUsers.ResponseBuilder {
            if !other.users.isEmpty  {
               builderResult.users += other.users
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.BulkCreateUsers.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.BulkCreateUsers.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = UserService.Containers.User.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                users += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.BulkCreateUsers {
        return UserService.BulkCreateUsers.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.BulkCreateUsers {
        return UserService.BulkCreateUsers.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.BulkCreateUsers {
        return UserService.BulkCreateUsers.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.BulkCreateUsers {
        return UserService.BulkCreateUsers.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.BulkCreateUsers {
        return UserService.BulkCreateUsers.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.BulkCreateUsers {
        return UserService.BulkCreateUsers.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.BulkCreateUsersBuilder {
        return UserService.BulkCreateUsers.classBuilder() as UserService.BulkCreateUsersBuilder
      }
      public func builder() -> UserService.BulkCreateUsersBuilder {
        return classBuilder() as UserService.BulkCreateUsersBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.BulkCreateUsersBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.BulkCreateUsers.builder()
      }
      public func toBuilder() -> UserService.BulkCreateUsersBuilder {
        return UserService.BulkCreateUsers.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.BulkCreateUsers) -> UserService.BulkCreateUsersBuilder {
        return UserService.BulkCreateUsers.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.BulkCreateUsers"
      }
      override public func className() -> String {
          return "UserService.BulkCreateUsers"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.BulkCreateUsers.self
      }


      //Meta information declaration end

    }

    final public class BulkCreateUsersBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.BulkCreateUsers

      required override public init () {
         builderResult = UserService.BulkCreateUsers()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.BulkCreateUsersBuilder {
        builderResult = UserService.BulkCreateUsers()
        return self
      }
      public override func clone() -> UserService.BulkCreateUsersBuilder {
        return UserService.BulkCreateUsers.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.BulkCreateUsers {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.BulkCreateUsers {
        var returnMe:UserService.BulkCreateUsers = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.BulkCreateUsers) -> UserService.BulkCreateUsersBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.BulkCreateUsersBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.BulkCreateUsersBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class UpdateUser : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "user": return user
                 default: return nil
                 }
          }

          public private(set) var hasUser:Bool = false
          public private(set) var user:UserService.Containers.User = UserService.Containers.User()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUser {
              output.writeMessage(1, value:user)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUser {
              size += WireFormat.computeMessageSize(1, value:user)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.UpdateUser.Request {
            return UserService.UpdateUser.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser.Request {
            return UserService.UpdateUser.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.UpdateUser.Request {
            return UserService.UpdateUser.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.UpdateUser.Request {
            return UserService.UpdateUser.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.UpdateUser.Request {
            return UserService.UpdateUser.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser.Request {
            return UserService.UpdateUser.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.UpdateUser.RequestBuilder {
            return UserService.UpdateUser.Request.classBuilder() as UserService.UpdateUser.RequestBuilder
          }
          public func builder() -> UserService.UpdateUser.RequestBuilder {
            return classBuilder() as UserService.UpdateUser.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.UpdateUser.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.UpdateUser.Request.builder()
          }
          public func toBuilder() -> UserService.UpdateUser.RequestBuilder {
            return UserService.UpdateUser.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.UpdateUser.Request) -> UserService.UpdateUser.RequestBuilder {
            return UserService.UpdateUser.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUser {
              output += "\(indent) user {\n"
              user.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUser {
                    hashCode = (hashCode &* 31) &+ user.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.UpdateUser.Request"
          }
          override public func className() -> String {
              return "UserService.UpdateUser.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.UpdateUser.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.UpdateUser.Request

          required override public init () {
             builderResult = UserService.UpdateUser.Request()
             super.init()
          }
          public var hasUser:Bool {
               get {
                   return builderResult.hasUser
               }
          }
          public var user:UserService.Containers.User {
               get {
                   return builderResult.user
               }
               set (value) {
                   builderResult.hasUser = true
                   builderResult.user = value
               }
          }
          public func setUserBuilder(builderForValue:UserService.Containers.UserBuilder) -> UserService.UpdateUser.RequestBuilder {
            user = builderForValue.build()
            return self
          }
          public func mergeUser(value:UserService.Containers.User) -> UserService.UpdateUser.RequestBuilder {
            if (builderResult.hasUser) {
              builderResult.user = UserService.Containers.User.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
            } else {
              builderResult.user = value
            }
            builderResult.hasUser = true
            return self
          }
          public func clearUser() -> UserService.UpdateUser.RequestBuilder {
            builderResult.hasUser = false
            builderResult.user = UserService.Containers.User()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.UpdateUser.RequestBuilder {
            builderResult = UserService.UpdateUser.Request()
            return self
          }
          public override func clone() -> UserService.UpdateUser.RequestBuilder {
            return UserService.UpdateUser.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.UpdateUser.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.UpdateUser.Request {
            var returnMe:UserService.UpdateUser.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.UpdateUser.Request) -> UserService.UpdateUser.RequestBuilder {
            if (other.hasUser) {
                mergeUser(other.user)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.UpdateUser.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:UserService.Containers.UserBuilder = UserService.Containers.User.builder()
                if hasUser {
                  subBuilder.mergeFrom(user)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                user = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "user": return user
                 default: return nil
                 }
          }

          public private(set) var hasUser:Bool = false
          public private(set) var user:UserService.Containers.User = UserService.Containers.User()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUser {
              output.writeMessage(1, value:user)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUser {
              size += WireFormat.computeMessageSize(1, value:user)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.UpdateUser.Response {
            return UserService.UpdateUser.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser.Response {
            return UserService.UpdateUser.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.UpdateUser.Response {
            return UserService.UpdateUser.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.UpdateUser.Response {
            return UserService.UpdateUser.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.UpdateUser.Response {
            return UserService.UpdateUser.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser.Response {
            return UserService.UpdateUser.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.UpdateUser.ResponseBuilder {
            return UserService.UpdateUser.Response.classBuilder() as UserService.UpdateUser.ResponseBuilder
          }
          public func builder() -> UserService.UpdateUser.ResponseBuilder {
            return classBuilder() as UserService.UpdateUser.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.UpdateUser.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.UpdateUser.Response.builder()
          }
          public func toBuilder() -> UserService.UpdateUser.ResponseBuilder {
            return UserService.UpdateUser.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.UpdateUser.Response) -> UserService.UpdateUser.ResponseBuilder {
            return UserService.UpdateUser.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUser {
              output += "\(indent) user {\n"
              user.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUser {
                    hashCode = (hashCode &* 31) &+ user.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.UpdateUser.Response"
          }
          override public func className() -> String {
              return "UserService.UpdateUser.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.UpdateUser.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.UpdateUser.Response

          required override public init () {
             builderResult = UserService.UpdateUser.Response()
             super.init()
          }
          public var hasUser:Bool {
               get {
                   return builderResult.hasUser
               }
          }
          public var user:UserService.Containers.User {
               get {
                   return builderResult.user
               }
               set (value) {
                   builderResult.hasUser = true
                   builderResult.user = value
               }
          }
          public func setUserBuilder(builderForValue:UserService.Containers.UserBuilder) -> UserService.UpdateUser.ResponseBuilder {
            user = builderForValue.build()
            return self
          }
          public func mergeUser(value:UserService.Containers.User) -> UserService.UpdateUser.ResponseBuilder {
            if (builderResult.hasUser) {
              builderResult.user = UserService.Containers.User.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
            } else {
              builderResult.user = value
            }
            builderResult.hasUser = true
            return self
          }
          public func clearUser() -> UserService.UpdateUser.ResponseBuilder {
            builderResult.hasUser = false
            builderResult.user = UserService.Containers.User()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.UpdateUser.ResponseBuilder {
            builderResult = UserService.UpdateUser.Response()
            return self
          }
          public override func clone() -> UserService.UpdateUser.ResponseBuilder {
            return UserService.UpdateUser.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.UpdateUser.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.UpdateUser.Response {
            var returnMe:UserService.UpdateUser.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.UpdateUser.Response) -> UserService.UpdateUser.ResponseBuilder {
            if (other.hasUser) {
                mergeUser(other.user)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.UpdateUser.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:UserService.Containers.UserBuilder = UserService.Containers.User.builder()
                if hasUser {
                  subBuilder.mergeFrom(user)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                user = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.UpdateUser {
        return UserService.UpdateUser.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser {
        return UserService.UpdateUser.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.UpdateUser {
        return UserService.UpdateUser.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.UpdateUser {
        return UserService.UpdateUser.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.UpdateUser {
        return UserService.UpdateUser.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser {
        return UserService.UpdateUser.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.UpdateUserBuilder {
        return UserService.UpdateUser.classBuilder() as UserService.UpdateUserBuilder
      }
      public func builder() -> UserService.UpdateUserBuilder {
        return classBuilder() as UserService.UpdateUserBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.UpdateUserBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.UpdateUser.builder()
      }
      public func toBuilder() -> UserService.UpdateUserBuilder {
        return UserService.UpdateUser.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.UpdateUser) -> UserService.UpdateUserBuilder {
        return UserService.UpdateUser.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.UpdateUser"
      }
      override public func className() -> String {
          return "UserService.UpdateUser"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.UpdateUser.self
      }


      //Meta information declaration end

    }

    final public class UpdateUserBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.UpdateUser

      required override public init () {
         builderResult = UserService.UpdateUser()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.UpdateUserBuilder {
        builderResult = UserService.UpdateUser()
        return self
      }
      public override func clone() -> UserService.UpdateUserBuilder {
        return UserService.UpdateUser.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.UpdateUser {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.UpdateUser {
        var returnMe:UserService.UpdateUser = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.UpdateUser) -> UserService.UpdateUserBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.UpdateUserBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUserBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetUser : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {


          //OneOf declaration start

          public enum LookupKey {
            case LookupKeyOneOfNotSet

            public func checkOneOfIsSet() -> Bool {
                 switch self {
                 case .LookupKeyOneOfNotSet:
                      return false
                 default:
                      return true
                 }
            }
            case Email(String)

            public static func getEmail(value:LookupKey) ->String? {
                 switch value {
                 case .Email(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
          }



          //OneOf declaration end

          private var storageLookupKey:UserService.GetUser.Request.LookupKey =  UserService.GetUser.Request.LookupKey.LookupKeyOneOfNotSet
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "email": return email
                 default: return nil
                 }
          }

          public private(set) var hasEmail:Bool {
                get {
                     if UserService.GetUser.Request.LookupKey.getEmail(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var email:String!{
               get {
                    return UserService.GetUser.Request.LookupKey.getEmail(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = UserService.GetUser.Request.LookupKey.Email(newvalue)
               }
          }
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasEmail {
              output.writeString(1, value:email)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasEmail {
              size += WireFormat.computeStringSize(1, value:email)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.GetUser.Request {
            return UserService.GetUser.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.GetUser.Request {
            return UserService.GetUser.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.GetUser.Request {
            return UserService.GetUser.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.GetUser.Request {
            return UserService.GetUser.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.GetUser.Request {
            return UserService.GetUser.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetUser.Request {
            return UserService.GetUser.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.GetUser.RequestBuilder {
            return UserService.GetUser.Request.classBuilder() as UserService.GetUser.RequestBuilder
          }
          public func builder() -> UserService.GetUser.RequestBuilder {
            return classBuilder() as UserService.GetUser.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.GetUser.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.GetUser.Request.builder()
          }
          public func toBuilder() -> UserService.GetUser.RequestBuilder {
            return UserService.GetUser.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.GetUser.Request) -> UserService.GetUser.RequestBuilder {
            return UserService.GetUser.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasEmail {
              output += "\(indent) email: \(email) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasEmail {
                     hashCode = (hashCode &* 31) &+ email.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.GetUser.Request"
          }
          override public func className() -> String {
              return "UserService.GetUser.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.GetUser.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.GetUser.Request

          required override public init () {
             builderResult = UserService.GetUser.Request()
             super.init()
          }
          public var hasEmail:Bool {
               get {
                    return builderResult.hasEmail
               }
          }
          public var email:String {
               get {
                    return builderResult.email
               }
               set (value) {
                   builderResult.hasEmail = true
                   builderResult.email = value
               }
          }
          public func clearEmail() -> UserService.GetUser.RequestBuilder{
               builderResult.hasEmail = false
               builderResult.email = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.GetUser.RequestBuilder {
            builderResult = UserService.GetUser.Request()
            return self
          }
          public override func clone() -> UserService.GetUser.RequestBuilder {
            return UserService.GetUser.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.GetUser.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.GetUser.Request {
            var returnMe:UserService.GetUser.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.GetUser.Request) -> UserService.GetUser.RequestBuilder {
            if other.hasEmail {
                 email = other.email
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.GetUser.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetUser.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                email = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "user": return user
                 default: return nil
                 }
          }

          public private(set) var hasUser:Bool = false
          public private(set) var user:UserService.Containers.User = UserService.Containers.User()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUser {
              output.writeMessage(1, value:user)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUser {
              size += WireFormat.computeMessageSize(1, value:user)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.GetUser.Response {
            return UserService.GetUser.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.GetUser.Response {
            return UserService.GetUser.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.GetUser.Response {
            return UserService.GetUser.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.GetUser.Response {
            return UserService.GetUser.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.GetUser.Response {
            return UserService.GetUser.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetUser.Response {
            return UserService.GetUser.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.GetUser.ResponseBuilder {
            return UserService.GetUser.Response.classBuilder() as UserService.GetUser.ResponseBuilder
          }
          public func builder() -> UserService.GetUser.ResponseBuilder {
            return classBuilder() as UserService.GetUser.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.GetUser.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.GetUser.Response.builder()
          }
          public func toBuilder() -> UserService.GetUser.ResponseBuilder {
            return UserService.GetUser.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.GetUser.Response) -> UserService.GetUser.ResponseBuilder {
            return UserService.GetUser.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUser {
              output += "\(indent) user {\n"
              user.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUser {
                    hashCode = (hashCode &* 31) &+ user.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.GetUser.Response"
          }
          override public func className() -> String {
              return "UserService.GetUser.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.GetUser.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.GetUser.Response

          required override public init () {
             builderResult = UserService.GetUser.Response()
             super.init()
          }
          public var hasUser:Bool {
               get {
                   return builderResult.hasUser
               }
          }
          public var user:UserService.Containers.User {
               get {
                   return builderResult.user
               }
               set (value) {
                   builderResult.hasUser = true
                   builderResult.user = value
               }
          }
          public func setUserBuilder(builderForValue:UserService.Containers.UserBuilder) -> UserService.GetUser.ResponseBuilder {
            user = builderForValue.build()
            return self
          }
          public func mergeUser(value:UserService.Containers.User) -> UserService.GetUser.ResponseBuilder {
            if (builderResult.hasUser) {
              builderResult.user = UserService.Containers.User.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
            } else {
              builderResult.user = value
            }
            builderResult.hasUser = true
            return self
          }
          public func clearUser() -> UserService.GetUser.ResponseBuilder {
            builderResult.hasUser = false
            builderResult.user = UserService.Containers.User()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.GetUser.ResponseBuilder {
            builderResult = UserService.GetUser.Response()
            return self
          }
          public override func clone() -> UserService.GetUser.ResponseBuilder {
            return UserService.GetUser.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.GetUser.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.GetUser.Response {
            var returnMe:UserService.GetUser.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.GetUser.Response) -> UserService.GetUser.ResponseBuilder {
            if (other.hasUser) {
                mergeUser(other.user)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.GetUser.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetUser.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:UserService.Containers.UserBuilder = UserService.Containers.User.builder()
                if hasUser {
                  subBuilder.mergeFrom(user)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                user = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.GetUser {
        return UserService.GetUser.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.GetUser {
        return UserService.GetUser.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.GetUser {
        return UserService.GetUser.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.GetUser {
        return UserService.GetUser.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.GetUser {
        return UserService.GetUser.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetUser {
        return UserService.GetUser.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.GetUserBuilder {
        return UserService.GetUser.classBuilder() as UserService.GetUserBuilder
      }
      public func builder() -> UserService.GetUserBuilder {
        return classBuilder() as UserService.GetUserBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.GetUserBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.GetUser.builder()
      }
      public func toBuilder() -> UserService.GetUserBuilder {
        return UserService.GetUser.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.GetUser) -> UserService.GetUserBuilder {
        return UserService.GetUser.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.GetUser"
      }
      override public func className() -> String {
          return "UserService.GetUser"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.GetUser.self
      }


      //Meta information declaration end

    }

    final public class GetUserBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.GetUser

      required override public init () {
         builderResult = UserService.GetUser()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.GetUserBuilder {
        builderResult = UserService.GetUser()
        return self
      }
      public override func clone() -> UserService.GetUserBuilder {
        return UserService.GetUser.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.GetUser {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.GetUser {
        var returnMe:UserService.GetUser = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.GetUser) -> UserService.GetUserBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.GetUserBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetUserBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class ValidUser : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "user_id": return user_id
                 default: return nil
                 }
          }

          public private(set) var hasUserId:Bool = false
          public private(set) var user_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUserId {
              output.writeString(1, value:user_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUserId {
              size += WireFormat.computeStringSize(1, value:user_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.ValidUser.Request {
            return UserService.ValidUser.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.ValidUser.Request {
            return UserService.ValidUser.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.ValidUser.Request {
            return UserService.ValidUser.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.ValidUser.Request {
            return UserService.ValidUser.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.ValidUser.Request {
            return UserService.ValidUser.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.ValidUser.Request {
            return UserService.ValidUser.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.ValidUser.RequestBuilder {
            return UserService.ValidUser.Request.classBuilder() as UserService.ValidUser.RequestBuilder
          }
          public func builder() -> UserService.ValidUser.RequestBuilder {
            return classBuilder() as UserService.ValidUser.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.ValidUser.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.ValidUser.Request.builder()
          }
          public func toBuilder() -> UserService.ValidUser.RequestBuilder {
            return UserService.ValidUser.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.ValidUser.Request) -> UserService.ValidUser.RequestBuilder {
            return UserService.ValidUser.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.ValidUser.Request"
          }
          override public func className() -> String {
              return "UserService.ValidUser.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.ValidUser.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.ValidUser.Request

          required override public init () {
             builderResult = UserService.ValidUser.Request()
             super.init()
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> UserService.ValidUser.RequestBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.ValidUser.RequestBuilder {
            builderResult = UserService.ValidUser.Request()
            return self
          }
          public override func clone() -> UserService.ValidUser.RequestBuilder {
            return UserService.ValidUser.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.ValidUser.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.ValidUser.Request {
            var returnMe:UserService.ValidUser.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.ValidUser.Request) -> UserService.ValidUser.RequestBuilder {
            if other.hasUserId {
                 user_id = other.user_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.ValidUser.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.ValidUser.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                user_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "exists": return exists
                 default: return nil
                 }
          }

          public private(set) var hasExists:Bool = false
          public private(set) var exists:Bool = false

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasExists {
              output.writeBool(1, value:exists)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasExists {
              size += WireFormat.computeBoolSize(1, value:exists)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.ValidUser.Response {
            return UserService.ValidUser.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.ValidUser.Response {
            return UserService.ValidUser.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.ValidUser.Response {
            return UserService.ValidUser.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.ValidUser.Response {
            return UserService.ValidUser.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.ValidUser.Response {
            return UserService.ValidUser.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.ValidUser.Response {
            return UserService.ValidUser.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.ValidUser.ResponseBuilder {
            return UserService.ValidUser.Response.classBuilder() as UserService.ValidUser.ResponseBuilder
          }
          public func builder() -> UserService.ValidUser.ResponseBuilder {
            return classBuilder() as UserService.ValidUser.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.ValidUser.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.ValidUser.Response.builder()
          }
          public func toBuilder() -> UserService.ValidUser.ResponseBuilder {
            return UserService.ValidUser.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.ValidUser.Response) -> UserService.ValidUser.ResponseBuilder {
            return UserService.ValidUser.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasExists {
              output += "\(indent) exists: \(exists) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasExists {
                     hashCode = (hashCode &* 31) &+ exists.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.ValidUser.Response"
          }
          override public func className() -> String {
              return "UserService.ValidUser.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.ValidUser.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.ValidUser.Response

          required override public init () {
             builderResult = UserService.ValidUser.Response()
             super.init()
          }
          public var hasExists:Bool {
               get {
                    return builderResult.hasExists
               }
          }
          public var exists:Bool {
               get {
                    return builderResult.exists
               }
               set (value) {
                   builderResult.hasExists = true
                   builderResult.exists = value
               }
          }
          public func clearExists() -> UserService.ValidUser.ResponseBuilder{
               builderResult.hasExists = false
               builderResult.exists = false
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.ValidUser.ResponseBuilder {
            builderResult = UserService.ValidUser.Response()
            return self
          }
          public override func clone() -> UserService.ValidUser.ResponseBuilder {
            return UserService.ValidUser.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.ValidUser.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.ValidUser.Response {
            var returnMe:UserService.ValidUser.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.ValidUser.Response) -> UserService.ValidUser.ResponseBuilder {
            if other.hasExists {
                 exists = other.exists
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.ValidUser.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.ValidUser.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 8 :
                exists = input.readBool()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.ValidUser {
        return UserService.ValidUser.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.ValidUser {
        return UserService.ValidUser.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.ValidUser {
        return UserService.ValidUser.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.ValidUser {
        return UserService.ValidUser.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.ValidUser {
        return UserService.ValidUser.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.ValidUser {
        return UserService.ValidUser.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.ValidUserBuilder {
        return UserService.ValidUser.classBuilder() as UserService.ValidUserBuilder
      }
      public func builder() -> UserService.ValidUserBuilder {
        return classBuilder() as UserService.ValidUserBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.ValidUserBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.ValidUser.builder()
      }
      public func toBuilder() -> UserService.ValidUserBuilder {
        return UserService.ValidUser.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.ValidUser) -> UserService.ValidUserBuilder {
        return UserService.ValidUser.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.ValidUser"
      }
      override public func className() -> String {
          return "UserService.ValidUser"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.ValidUser.self
      }


      //Meta information declaration end

    }

    final public class ValidUserBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.ValidUser

      required override public init () {
         builderResult = UserService.ValidUser()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.ValidUserBuilder {
        builderResult = UserService.ValidUser()
        return self
      }
      public override func clone() -> UserService.ValidUserBuilder {
        return UserService.ValidUser.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.ValidUser {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.ValidUser {
        var returnMe:UserService.ValidUser = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.ValidUser) -> UserService.ValidUserBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.ValidUserBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.ValidUserBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class AuthenticateUser : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {


          //Nested type declaration start

            final public class Credentials : GeneratedMessage {
              override public subscript (key: String) -> Any? {
                     switch key {
                     case "key": return key
                     case "secret": return secret
                     default: return nil
                     }
              }

              public private(set) var hasKey:Bool = false
              public private(set) var key:String = ""

              public private(set) var hasSecret:Bool = false
              public private(set) var secret:String = ""

              required public init() {
                   super.init()
              }
              override public func isInitialized() -> Bool {
               return true
              }
              override public func writeToCodedOutputStream(output:CodedOutputStream) {
                if hasKey {
                  output.writeString(1, value:key)
                }
                if hasSecret {
                  output.writeString(2, value:secret)
                }
                unknownFields.writeToCodedOutputStream(output)
              }
              override public func serializedSize() -> Int32 {
                var size:Int32 = memoizedSerializedSize
                if size != -1 {
                 return size
                }

                size = 0
                if hasKey {
                  size += WireFormat.computeStringSize(1, value:key)
                }
                if hasSecret {
                  size += WireFormat.computeStringSize(2, value:secret)
                }
                size += unknownFields.serializedSize()
                memoizedSerializedSize = size
                return size
              }
              public class func parseFromData(data:[Byte]) -> UserService.AuthenticateUser.Request.Credentials {
                return UserService.AuthenticateUser.Request.Credentials.builder().mergeFromData(data).build()
              }
              public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Request.Credentials {
                return UserService.AuthenticateUser.Request.Credentials.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
              }
              public class func parseFromInputStream(input:NSInputStream) -> UserService.AuthenticateUser.Request.Credentials {
                return UserService.AuthenticateUser.Request.Credentials.builder().mergeFromInputStream(input).build()
              }
              public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.AuthenticateUser.Request.Credentials {
                return UserService.AuthenticateUser.Request.Credentials.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
              }
              public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.AuthenticateUser.Request.Credentials {
                return UserService.AuthenticateUser.Request.Credentials.builder().mergeFromCodedInputStream(input).build()
              }
              public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Request.Credentials {
                return UserService.AuthenticateUser.Request.Credentials.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
              }
              public class func builder() -> UserService.AuthenticateUser.Request.CredentialsBuilder {
                return UserService.AuthenticateUser.Request.Credentials.classBuilder() as UserService.AuthenticateUser.Request.CredentialsBuilder
              }
              public func builder() -> UserService.AuthenticateUser.Request.CredentialsBuilder {
                return classBuilder() as UserService.AuthenticateUser.Request.CredentialsBuilder
              }
              public override class func classBuilder() -> MessageBuilder {
                return UserService.AuthenticateUser.Request.CredentialsBuilder()
              }
              public override func classBuilder() -> MessageBuilder {
                return UserService.AuthenticateUser.Request.Credentials.builder()
              }
              public func toBuilder() -> UserService.AuthenticateUser.Request.CredentialsBuilder {
                return UserService.AuthenticateUser.Request.Credentials.builderWithPrototype(self)
              }
              public class func builderWithPrototype(prototype:UserService.AuthenticateUser.Request.Credentials) -> UserService.AuthenticateUser.Request.CredentialsBuilder {
                return UserService.AuthenticateUser.Request.Credentials.builder().mergeFrom(prototype)
              }
              override public func writeDescriptionTo(inout output:String, indent:String) {
                if hasKey {
                  output += "\(indent) key: \(key) \n"
                }
                if hasSecret {
                  output += "\(indent) secret: \(secret) \n"
                }
                unknownFields.writeDescriptionTo(&output, indent:indent)
              }
              override public var hashValue:Int {
                  get {
                      var hashCode:Int = 7
                      if hasKey {
                         hashCode = (hashCode &* 31) &+ key.hashValue
                      }
                      if hasSecret {
                         hashCode = (hashCode &* 31) &+ secret.hashValue
                      }
                      hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                      return hashCode
                  }
              }


              //Meta information declaration start

              override public class func className() -> String {
                  return "UserService.AuthenticateUser.Request.Credentials"
              }
              override public func className() -> String {
                  return "UserService.AuthenticateUser.Request.Credentials"
              }
              override public func classMetaType() -> GeneratedMessage.Type {
                  return UserService.AuthenticateUser.Request.Credentials.self
              }


              //Meta information declaration end

            }

            final public class CredentialsBuilder : GeneratedMessageBuilder {
              private var builderResult:UserService.AuthenticateUser.Request.Credentials

              required override public init () {
                 builderResult = UserService.AuthenticateUser.Request.Credentials()
                 super.init()
              }
              public var hasKey:Bool {
                   get {
                        return builderResult.hasKey
                   }
              }
              public var key:String {
                   get {
                        return builderResult.key
                   }
                   set (value) {
                       builderResult.hasKey = true
                       builderResult.key = value
                   }
              }
              public func clearKey() -> UserService.AuthenticateUser.Request.CredentialsBuilder{
                   builderResult.hasKey = false
                   builderResult.key = ""
                   return self
              }
              public var hasSecret:Bool {
                   get {
                        return builderResult.hasSecret
                   }
              }
              public var secret:String {
                   get {
                        return builderResult.secret
                   }
                   set (value) {
                       builderResult.hasSecret = true
                       builderResult.secret = value
                   }
              }
              public func clearSecret() -> UserService.AuthenticateUser.Request.CredentialsBuilder{
                   builderResult.hasSecret = false
                   builderResult.secret = ""
                   return self
              }
              override public var internalGetResult:GeneratedMessage {
                   get {
                      return builderResult
                   }
              }
              public override func clear() -> UserService.AuthenticateUser.Request.CredentialsBuilder {
                builderResult = UserService.AuthenticateUser.Request.Credentials()
                return self
              }
              public override func clone() -> UserService.AuthenticateUser.Request.CredentialsBuilder {
                return UserService.AuthenticateUser.Request.Credentials.builderWithPrototype(builderResult)
              }
              public override func build() -> UserService.AuthenticateUser.Request.Credentials {
                   checkInitialized()
                   return buildPartial()
              }
              public func buildPartial() -> UserService.AuthenticateUser.Request.Credentials {
                var returnMe:UserService.AuthenticateUser.Request.Credentials = builderResult
                return returnMe
              }
              public func mergeFrom(other:UserService.AuthenticateUser.Request.Credentials) -> UserService.AuthenticateUser.Request.CredentialsBuilder {
                if other.hasKey {
                     key = other.key
                }
                if other.hasSecret {
                     secret = other.secret
                }
                mergeUnknownFields(other.unknownFields)
                return self
              }
              public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.AuthenticateUser.Request.CredentialsBuilder {
                   return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
              }
              public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Request.CredentialsBuilder {
                var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
                while (true) {
                  var tag = input.readTag()
                  switch tag {
                  case 0: 
                    self.unknownFields = unknownFieldsBuilder.build()
                    return self

                  case 10 :
                    key = input.readString()

                  case 18 :
                    secret = input.readString()

                  default:
                    if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                       unknownFields = unknownFieldsBuilder.build()
                       return self
                    }
                  }
                }
              }
            }



          //Nested type declaration end



            //Enum type declaration start 

            public enum AuthBackend:Int32 {
              case Internal = 0
              case Google = 1

              public static func IsValidValue(value:Int32) ->Bool {
                  if let check = AuthBackend(rawValue:value) {
                      return true
                  }
                  return false
              }
            }



            //Enum type declaration end 

          override public subscript (key: String) -> Any? {
                 switch key {
                 case "backend": return Int(self.backend.rawValue)
                 case "credentials": return credentials
                 default: return nil
                 }
          }

          public private(set) var backend:UserService.AuthenticateUser.Request.AuthBackend = UserService.AuthenticateUser.Request.AuthBackend.Internal
          public private(set) var hasBackend:Bool = false
          public private(set) var hasCredentials:Bool = false
          public private(set) var credentials:UserService.AuthenticateUser.Request.Credentials = UserService.AuthenticateUser.Request.Credentials()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasBackend {
              output.writeEnum(1, value:backend.rawValue)
            }
            if hasCredentials {
              output.writeMessage(2, value:credentials)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if (hasBackend) {
              size += WireFormat.computeEnumSize(1, value:backend.rawValue)
            }
            if hasCredentials {
              size += WireFormat.computeMessageSize(2, value:credentials)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.AuthenticateUser.Request {
            return UserService.AuthenticateUser.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Request {
            return UserService.AuthenticateUser.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.AuthenticateUser.Request {
            return UserService.AuthenticateUser.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.AuthenticateUser.Request {
            return UserService.AuthenticateUser.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.AuthenticateUser.Request {
            return UserService.AuthenticateUser.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Request {
            return UserService.AuthenticateUser.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.AuthenticateUser.RequestBuilder {
            return UserService.AuthenticateUser.Request.classBuilder() as UserService.AuthenticateUser.RequestBuilder
          }
          public func builder() -> UserService.AuthenticateUser.RequestBuilder {
            return classBuilder() as UserService.AuthenticateUser.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.AuthenticateUser.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.AuthenticateUser.Request.builder()
          }
          public func toBuilder() -> UserService.AuthenticateUser.RequestBuilder {
            return UserService.AuthenticateUser.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.AuthenticateUser.Request) -> UserService.AuthenticateUser.RequestBuilder {
            return UserService.AuthenticateUser.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if (hasBackend) {
              output += "\(indent) backend: \(backend.rawValue)\n"
            }
            if hasCredentials {
              output += "\(indent) credentials {\n"
              credentials.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasBackend {
                     hashCode = (hashCode &* 31) &+ Int(backend.rawValue)
                  }
                  if hasCredentials {
                    hashCode = (hashCode &* 31) &+ credentials.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.AuthenticateUser.Request"
          }
          override public func className() -> String {
              return "UserService.AuthenticateUser.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.AuthenticateUser.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.AuthenticateUser.Request

          required override public init () {
             builderResult = UserService.AuthenticateUser.Request()
             super.init()
          }
            public var hasBackend:Bool{
                get {
                    return builderResult.hasBackend
                }
            }
            public var backend:UserService.AuthenticateUser.Request.AuthBackend {
                get {
                    return builderResult.backend
                }
                set (value) {
                    builderResult.hasBackend = true
                    builderResult.backend = value
                }
            }
            public func clearBackend() -> UserService.AuthenticateUser.RequestBuilder {
               builderResult.hasBackend = false
               builderResult.backend = .Internal
               return self
            }
          public var hasCredentials:Bool {
               get {
                   return builderResult.hasCredentials
               }
          }
          public var credentials:UserService.AuthenticateUser.Request.Credentials {
               get {
                   return builderResult.credentials
               }
               set (value) {
                   builderResult.hasCredentials = true
                   builderResult.credentials = value
               }
          }
          public func setCredentialsBuilder(builderForValue:UserService.AuthenticateUser.Request.CredentialsBuilder) -> UserService.AuthenticateUser.RequestBuilder {
            credentials = builderForValue.build()
            return self
          }
          public func mergeCredentials(value:UserService.AuthenticateUser.Request.Credentials) -> UserService.AuthenticateUser.RequestBuilder {
            if (builderResult.hasCredentials) {
              builderResult.credentials = UserService.AuthenticateUser.Request.Credentials.builderWithPrototype(builderResult.credentials).mergeFrom(value).buildPartial()
            } else {
              builderResult.credentials = value
            }
            builderResult.hasCredentials = true
            return self
          }
          public func clearCredentials() -> UserService.AuthenticateUser.RequestBuilder {
            builderResult.hasCredentials = false
            builderResult.credentials = UserService.AuthenticateUser.Request.Credentials()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.AuthenticateUser.RequestBuilder {
            builderResult = UserService.AuthenticateUser.Request()
            return self
          }
          public override func clone() -> UserService.AuthenticateUser.RequestBuilder {
            return UserService.AuthenticateUser.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.AuthenticateUser.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.AuthenticateUser.Request {
            var returnMe:UserService.AuthenticateUser.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.AuthenticateUser.Request) -> UserService.AuthenticateUser.RequestBuilder {
            if other.hasBackend {
                 backend = other.backend
            }
            if (other.hasCredentials) {
                mergeCredentials(other.credentials)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.AuthenticateUser.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 8 :
                let valueIntbackend = input.readEnum()
                if let enumsbackend = UserService.AuthenticateUser.Request.AuthBackend(rawValue:valueIntbackend){
                     backend = enumsbackend
                } else {
                     unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntbackend))
                }

              case 18 :
                var subBuilder:UserService.AuthenticateUser.Request.CredentialsBuilder = UserService.AuthenticateUser.Request.Credentials.builder()
                if hasCredentials {
                  subBuilder.mergeFrom(credentials)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                credentials = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "user": return user
                 case "authenticated": return authenticated
                 case "token": return token
                 case "new_user": return new_user
                 default: return nil
                 }
          }

          public private(set) var hasUser:Bool = false
          public private(set) var user:UserService.Containers.User = UserService.Containers.User()
          public private(set) var hasAuthenticated:Bool = false
          public private(set) var authenticated:Bool = false

          public private(set) var hasToken:Bool = false
          public private(set) var token:String = ""

          public private(set) var hasNewUser:Bool = false
          public private(set) var new_user:Bool = false

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUser {
              output.writeMessage(1, value:user)
            }
            if hasAuthenticated {
              output.writeBool(2, value:authenticated)
            }
            if hasToken {
              output.writeString(3, value:token)
            }
            if hasNewUser {
              output.writeBool(4, value:new_user)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUser {
              size += WireFormat.computeMessageSize(1, value:user)
            }
            if hasAuthenticated {
              size += WireFormat.computeBoolSize(2, value:authenticated)
            }
            if hasToken {
              size += WireFormat.computeStringSize(3, value:token)
            }
            if hasNewUser {
              size += WireFormat.computeBoolSize(4, value:new_user)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.AuthenticateUser.Response {
            return UserService.AuthenticateUser.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Response {
            return UserService.AuthenticateUser.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.AuthenticateUser.Response {
            return UserService.AuthenticateUser.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.AuthenticateUser.Response {
            return UserService.AuthenticateUser.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.AuthenticateUser.Response {
            return UserService.AuthenticateUser.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Response {
            return UserService.AuthenticateUser.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.AuthenticateUser.ResponseBuilder {
            return UserService.AuthenticateUser.Response.classBuilder() as UserService.AuthenticateUser.ResponseBuilder
          }
          public func builder() -> UserService.AuthenticateUser.ResponseBuilder {
            return classBuilder() as UserService.AuthenticateUser.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.AuthenticateUser.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.AuthenticateUser.Response.builder()
          }
          public func toBuilder() -> UserService.AuthenticateUser.ResponseBuilder {
            return UserService.AuthenticateUser.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.AuthenticateUser.Response) -> UserService.AuthenticateUser.ResponseBuilder {
            return UserService.AuthenticateUser.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUser {
              output += "\(indent) user {\n"
              user.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasAuthenticated {
              output += "\(indent) authenticated: \(authenticated) \n"
            }
            if hasToken {
              output += "\(indent) token: \(token) \n"
            }
            if hasNewUser {
              output += "\(indent) new_user: \(new_user) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUser {
                    hashCode = (hashCode &* 31) &+ user.hashValue
                  }
                  if hasAuthenticated {
                     hashCode = (hashCode &* 31) &+ authenticated.hashValue
                  }
                  if hasToken {
                     hashCode = (hashCode &* 31) &+ token.hashValue
                  }
                  if hasNewUser {
                     hashCode = (hashCode &* 31) &+ new_user.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.AuthenticateUser.Response"
          }
          override public func className() -> String {
              return "UserService.AuthenticateUser.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.AuthenticateUser.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.AuthenticateUser.Response

          required override public init () {
             builderResult = UserService.AuthenticateUser.Response()
             super.init()
          }
          public var hasUser:Bool {
               get {
                   return builderResult.hasUser
               }
          }
          public var user:UserService.Containers.User {
               get {
                   return builderResult.user
               }
               set (value) {
                   builderResult.hasUser = true
                   builderResult.user = value
               }
          }
          public func setUserBuilder(builderForValue:UserService.Containers.UserBuilder) -> UserService.AuthenticateUser.ResponseBuilder {
            user = builderForValue.build()
            return self
          }
          public func mergeUser(value:UserService.Containers.User) -> UserService.AuthenticateUser.ResponseBuilder {
            if (builderResult.hasUser) {
              builderResult.user = UserService.Containers.User.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
            } else {
              builderResult.user = value
            }
            builderResult.hasUser = true
            return self
          }
          public func clearUser() -> UserService.AuthenticateUser.ResponseBuilder {
            builderResult.hasUser = false
            builderResult.user = UserService.Containers.User()
            return self
          }
          public var hasAuthenticated:Bool {
               get {
                    return builderResult.hasAuthenticated
               }
          }
          public var authenticated:Bool {
               get {
                    return builderResult.authenticated
               }
               set (value) {
                   builderResult.hasAuthenticated = true
                   builderResult.authenticated = value
               }
          }
          public func clearAuthenticated() -> UserService.AuthenticateUser.ResponseBuilder{
               builderResult.hasAuthenticated = false
               builderResult.authenticated = false
               return self
          }
          public var hasToken:Bool {
               get {
                    return builderResult.hasToken
               }
          }
          public var token:String {
               get {
                    return builderResult.token
               }
               set (value) {
                   builderResult.hasToken = true
                   builderResult.token = value
               }
          }
          public func clearToken() -> UserService.AuthenticateUser.ResponseBuilder{
               builderResult.hasToken = false
               builderResult.token = ""
               return self
          }
          public var hasNewUser:Bool {
               get {
                    return builderResult.hasNewUser
               }
          }
          public var new_user:Bool {
               get {
                    return builderResult.new_user
               }
               set (value) {
                   builderResult.hasNewUser = true
                   builderResult.new_user = value
               }
          }
          public func clearNewUser() -> UserService.AuthenticateUser.ResponseBuilder{
               builderResult.hasNewUser = false
               builderResult.new_user = false
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.AuthenticateUser.ResponseBuilder {
            builderResult = UserService.AuthenticateUser.Response()
            return self
          }
          public override func clone() -> UserService.AuthenticateUser.ResponseBuilder {
            return UserService.AuthenticateUser.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.AuthenticateUser.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.AuthenticateUser.Response {
            var returnMe:UserService.AuthenticateUser.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.AuthenticateUser.Response) -> UserService.AuthenticateUser.ResponseBuilder {
            if (other.hasUser) {
                mergeUser(other.user)
            }
            if other.hasAuthenticated {
                 authenticated = other.authenticated
            }
            if other.hasToken {
                 token = other.token
            }
            if other.hasNewUser {
                 new_user = other.new_user
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.AuthenticateUser.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:UserService.Containers.UserBuilder = UserService.Containers.User.builder()
                if hasUser {
                  subBuilder.mergeFrom(user)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                user = subBuilder.buildPartial()

              case 16 :
                authenticated = input.readBool()

              case 26 :
                token = input.readString()

              case 32 :
                new_user = input.readBool()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.AuthenticateUser {
        return UserService.AuthenticateUser.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser {
        return UserService.AuthenticateUser.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.AuthenticateUser {
        return UserService.AuthenticateUser.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.AuthenticateUser {
        return UserService.AuthenticateUser.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.AuthenticateUser {
        return UserService.AuthenticateUser.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser {
        return UserService.AuthenticateUser.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.AuthenticateUserBuilder {
        return UserService.AuthenticateUser.classBuilder() as UserService.AuthenticateUserBuilder
      }
      public func builder() -> UserService.AuthenticateUserBuilder {
        return classBuilder() as UserService.AuthenticateUserBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.AuthenticateUserBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.AuthenticateUser.builder()
      }
      public func toBuilder() -> UserService.AuthenticateUserBuilder {
        return UserService.AuthenticateUser.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.AuthenticateUser) -> UserService.AuthenticateUserBuilder {
        return UserService.AuthenticateUser.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.AuthenticateUser"
      }
      override public func className() -> String {
          return "UserService.AuthenticateUser"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.AuthenticateUser.self
      }


      //Meta information declaration end

    }

    final public class AuthenticateUserBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.AuthenticateUser

      required override public init () {
         builderResult = UserService.AuthenticateUser()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.AuthenticateUserBuilder {
        builderResult = UserService.AuthenticateUser()
        return self
      }
      public override func clone() -> UserService.AuthenticateUserBuilder {
        return UserService.AuthenticateUser.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.AuthenticateUser {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.AuthenticateUser {
        var returnMe:UserService.AuthenticateUser = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.AuthenticateUser) -> UserService.AuthenticateUserBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.AuthenticateUserBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUserBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class SendVerificationCode : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "user_id": return user_id
                 default: return nil
                 }
          }

          public private(set) var hasUserId:Bool = false
          public private(set) var user_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUserId {
              output.writeString(1, value:user_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUserId {
              size += WireFormat.computeStringSize(1, value:user_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.SendVerificationCode.Request {
            return UserService.SendVerificationCode.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode.Request {
            return UserService.SendVerificationCode.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.SendVerificationCode.Request {
            return UserService.SendVerificationCode.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.SendVerificationCode.Request {
            return UserService.SendVerificationCode.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.SendVerificationCode.Request {
            return UserService.SendVerificationCode.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode.Request {
            return UserService.SendVerificationCode.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.SendVerificationCode.RequestBuilder {
            return UserService.SendVerificationCode.Request.classBuilder() as UserService.SendVerificationCode.RequestBuilder
          }
          public func builder() -> UserService.SendVerificationCode.RequestBuilder {
            return classBuilder() as UserService.SendVerificationCode.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.SendVerificationCode.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.SendVerificationCode.Request.builder()
          }
          public func toBuilder() -> UserService.SendVerificationCode.RequestBuilder {
            return UserService.SendVerificationCode.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.SendVerificationCode.Request) -> UserService.SendVerificationCode.RequestBuilder {
            return UserService.SendVerificationCode.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.SendVerificationCode.Request"
          }
          override public func className() -> String {
              return "UserService.SendVerificationCode.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.SendVerificationCode.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.SendVerificationCode.Request

          required override public init () {
             builderResult = UserService.SendVerificationCode.Request()
             super.init()
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> UserService.SendVerificationCode.RequestBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.SendVerificationCode.RequestBuilder {
            builderResult = UserService.SendVerificationCode.Request()
            return self
          }
          public override func clone() -> UserService.SendVerificationCode.RequestBuilder {
            return UserService.SendVerificationCode.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.SendVerificationCode.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.SendVerificationCode.Request {
            var returnMe:UserService.SendVerificationCode.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.SendVerificationCode.Request) -> UserService.SendVerificationCode.RequestBuilder {
            if other.hasUserId {
                 user_id = other.user_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.SendVerificationCode.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                user_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "message_id": return message_id
                 default: return nil
                 }
          }

          public private(set) var hasMessageId:Bool = false
          public private(set) var message_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasMessageId {
              output.writeString(1, value:message_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasMessageId {
              size += WireFormat.computeStringSize(1, value:message_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.SendVerificationCode.Response {
            return UserService.SendVerificationCode.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode.Response {
            return UserService.SendVerificationCode.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.SendVerificationCode.Response {
            return UserService.SendVerificationCode.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.SendVerificationCode.Response {
            return UserService.SendVerificationCode.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.SendVerificationCode.Response {
            return UserService.SendVerificationCode.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode.Response {
            return UserService.SendVerificationCode.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.SendVerificationCode.ResponseBuilder {
            return UserService.SendVerificationCode.Response.classBuilder() as UserService.SendVerificationCode.ResponseBuilder
          }
          public func builder() -> UserService.SendVerificationCode.ResponseBuilder {
            return classBuilder() as UserService.SendVerificationCode.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.SendVerificationCode.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.SendVerificationCode.Response.builder()
          }
          public func toBuilder() -> UserService.SendVerificationCode.ResponseBuilder {
            return UserService.SendVerificationCode.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.SendVerificationCode.Response) -> UserService.SendVerificationCode.ResponseBuilder {
            return UserService.SendVerificationCode.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasMessageId {
              output += "\(indent) message_id: \(message_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasMessageId {
                     hashCode = (hashCode &* 31) &+ message_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.SendVerificationCode.Response"
          }
          override public func className() -> String {
              return "UserService.SendVerificationCode.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.SendVerificationCode.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.SendVerificationCode.Response

          required override public init () {
             builderResult = UserService.SendVerificationCode.Response()
             super.init()
          }
          public var hasMessageId:Bool {
               get {
                    return builderResult.hasMessageId
               }
          }
          public var message_id:String {
               get {
                    return builderResult.message_id
               }
               set (value) {
                   builderResult.hasMessageId = true
                   builderResult.message_id = value
               }
          }
          public func clearMessageId() -> UserService.SendVerificationCode.ResponseBuilder{
               builderResult.hasMessageId = false
               builderResult.message_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.SendVerificationCode.ResponseBuilder {
            builderResult = UserService.SendVerificationCode.Response()
            return self
          }
          public override func clone() -> UserService.SendVerificationCode.ResponseBuilder {
            return UserService.SendVerificationCode.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.SendVerificationCode.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.SendVerificationCode.Response {
            var returnMe:UserService.SendVerificationCode.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.SendVerificationCode.Response) -> UserService.SendVerificationCode.ResponseBuilder {
            if other.hasMessageId {
                 message_id = other.message_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.SendVerificationCode.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                message_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.SendVerificationCode {
        return UserService.SendVerificationCode.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode {
        return UserService.SendVerificationCode.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.SendVerificationCode {
        return UserService.SendVerificationCode.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.SendVerificationCode {
        return UserService.SendVerificationCode.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.SendVerificationCode {
        return UserService.SendVerificationCode.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode {
        return UserService.SendVerificationCode.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.SendVerificationCodeBuilder {
        return UserService.SendVerificationCode.classBuilder() as UserService.SendVerificationCodeBuilder
      }
      public func builder() -> UserService.SendVerificationCodeBuilder {
        return classBuilder() as UserService.SendVerificationCodeBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.SendVerificationCodeBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.SendVerificationCode.builder()
      }
      public func toBuilder() -> UserService.SendVerificationCodeBuilder {
        return UserService.SendVerificationCode.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.SendVerificationCode) -> UserService.SendVerificationCodeBuilder {
        return UserService.SendVerificationCode.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.SendVerificationCode"
      }
      override public func className() -> String {
          return "UserService.SendVerificationCode"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.SendVerificationCode.self
      }


      //Meta information declaration end

    }

    final public class SendVerificationCodeBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.SendVerificationCode

      required override public init () {
         builderResult = UserService.SendVerificationCode()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.SendVerificationCodeBuilder {
        builderResult = UserService.SendVerificationCode()
        return self
      }
      public override func clone() -> UserService.SendVerificationCodeBuilder {
        return UserService.SendVerificationCode.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.SendVerificationCode {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.SendVerificationCode {
        var returnMe:UserService.SendVerificationCode = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.SendVerificationCode) -> UserService.SendVerificationCodeBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.SendVerificationCodeBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCodeBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class VerifyVerificationCode : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "user_id": return user_id
                 case "code": return code
                 default: return nil
                 }
          }

          public private(set) var hasUserId:Bool = false
          public private(set) var user_id:String = ""

          public private(set) var hasCode:Bool = false
          public private(set) var code:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUserId {
              output.writeString(1, value:user_id)
            }
            if hasCode {
              output.writeString(2, value:code)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUserId {
              size += WireFormat.computeStringSize(1, value:user_id)
            }
            if hasCode {
              size += WireFormat.computeStringSize(2, value:code)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.VerifyVerificationCode.Request {
            return UserService.VerifyVerificationCode.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode.Request {
            return UserService.VerifyVerificationCode.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.VerifyVerificationCode.Request {
            return UserService.VerifyVerificationCode.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.VerifyVerificationCode.Request {
            return UserService.VerifyVerificationCode.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.VerifyVerificationCode.Request {
            return UserService.VerifyVerificationCode.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode.Request {
            return UserService.VerifyVerificationCode.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.VerifyVerificationCode.RequestBuilder {
            return UserService.VerifyVerificationCode.Request.classBuilder() as UserService.VerifyVerificationCode.RequestBuilder
          }
          public func builder() -> UserService.VerifyVerificationCode.RequestBuilder {
            return classBuilder() as UserService.VerifyVerificationCode.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.VerifyVerificationCode.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.VerifyVerificationCode.Request.builder()
          }
          public func toBuilder() -> UserService.VerifyVerificationCode.RequestBuilder {
            return UserService.VerifyVerificationCode.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.VerifyVerificationCode.Request) -> UserService.VerifyVerificationCode.RequestBuilder {
            return UserService.VerifyVerificationCode.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            if hasCode {
              output += "\(indent) code: \(code) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  if hasCode {
                     hashCode = (hashCode &* 31) &+ code.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.VerifyVerificationCode.Request"
          }
          override public func className() -> String {
              return "UserService.VerifyVerificationCode.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.VerifyVerificationCode.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.VerifyVerificationCode.Request

          required override public init () {
             builderResult = UserService.VerifyVerificationCode.Request()
             super.init()
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> UserService.VerifyVerificationCode.RequestBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          public var hasCode:Bool {
               get {
                    return builderResult.hasCode
               }
          }
          public var code:String {
               get {
                    return builderResult.code
               }
               set (value) {
                   builderResult.hasCode = true
                   builderResult.code = value
               }
          }
          public func clearCode() -> UserService.VerifyVerificationCode.RequestBuilder{
               builderResult.hasCode = false
               builderResult.code = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.VerifyVerificationCode.RequestBuilder {
            builderResult = UserService.VerifyVerificationCode.Request()
            return self
          }
          public override func clone() -> UserService.VerifyVerificationCode.RequestBuilder {
            return UserService.VerifyVerificationCode.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.VerifyVerificationCode.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.VerifyVerificationCode.Request {
            var returnMe:UserService.VerifyVerificationCode.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.VerifyVerificationCode.Request) -> UserService.VerifyVerificationCode.RequestBuilder {
            if other.hasUserId {
                 user_id = other.user_id
            }
            if other.hasCode {
                 code = other.code
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.VerifyVerificationCode.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                user_id = input.readString()

              case 18 :
                code = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "verified": return verified
                 default: return nil
                 }
          }

          public private(set) var hasVerified:Bool = false
          public private(set) var verified:Bool = false

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasVerified {
              output.writeBool(1, value:verified)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasVerified {
              size += WireFormat.computeBoolSize(1, value:verified)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.VerifyVerificationCode.Response {
            return UserService.VerifyVerificationCode.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode.Response {
            return UserService.VerifyVerificationCode.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.VerifyVerificationCode.Response {
            return UserService.VerifyVerificationCode.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.VerifyVerificationCode.Response {
            return UserService.VerifyVerificationCode.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.VerifyVerificationCode.Response {
            return UserService.VerifyVerificationCode.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode.Response {
            return UserService.VerifyVerificationCode.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.VerifyVerificationCode.ResponseBuilder {
            return UserService.VerifyVerificationCode.Response.classBuilder() as UserService.VerifyVerificationCode.ResponseBuilder
          }
          public func builder() -> UserService.VerifyVerificationCode.ResponseBuilder {
            return classBuilder() as UserService.VerifyVerificationCode.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.VerifyVerificationCode.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.VerifyVerificationCode.Response.builder()
          }
          public func toBuilder() -> UserService.VerifyVerificationCode.ResponseBuilder {
            return UserService.VerifyVerificationCode.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.VerifyVerificationCode.Response) -> UserService.VerifyVerificationCode.ResponseBuilder {
            return UserService.VerifyVerificationCode.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasVerified {
              output += "\(indent) verified: \(verified) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasVerified {
                     hashCode = (hashCode &* 31) &+ verified.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.VerifyVerificationCode.Response"
          }
          override public func className() -> String {
              return "UserService.VerifyVerificationCode.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.VerifyVerificationCode.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.VerifyVerificationCode.Response

          required override public init () {
             builderResult = UserService.VerifyVerificationCode.Response()
             super.init()
          }
          public var hasVerified:Bool {
               get {
                    return builderResult.hasVerified
               }
          }
          public var verified:Bool {
               get {
                    return builderResult.verified
               }
               set (value) {
                   builderResult.hasVerified = true
                   builderResult.verified = value
               }
          }
          public func clearVerified() -> UserService.VerifyVerificationCode.ResponseBuilder{
               builderResult.hasVerified = false
               builderResult.verified = false
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.VerifyVerificationCode.ResponseBuilder {
            builderResult = UserService.VerifyVerificationCode.Response()
            return self
          }
          public override func clone() -> UserService.VerifyVerificationCode.ResponseBuilder {
            return UserService.VerifyVerificationCode.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.VerifyVerificationCode.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.VerifyVerificationCode.Response {
            var returnMe:UserService.VerifyVerificationCode.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.VerifyVerificationCode.Response) -> UserService.VerifyVerificationCode.ResponseBuilder {
            if other.hasVerified {
                 verified = other.verified
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.VerifyVerificationCode.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 8 :
                verified = input.readBool()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.VerifyVerificationCode {
        return UserService.VerifyVerificationCode.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode {
        return UserService.VerifyVerificationCode.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.VerifyVerificationCode {
        return UserService.VerifyVerificationCode.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.VerifyVerificationCode {
        return UserService.VerifyVerificationCode.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.VerifyVerificationCode {
        return UserService.VerifyVerificationCode.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode {
        return UserService.VerifyVerificationCode.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.VerifyVerificationCodeBuilder {
        return UserService.VerifyVerificationCode.classBuilder() as UserService.VerifyVerificationCodeBuilder
      }
      public func builder() -> UserService.VerifyVerificationCodeBuilder {
        return classBuilder() as UserService.VerifyVerificationCodeBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.VerifyVerificationCodeBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.VerifyVerificationCode.builder()
      }
      public func toBuilder() -> UserService.VerifyVerificationCodeBuilder {
        return UserService.VerifyVerificationCode.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.VerifyVerificationCode) -> UserService.VerifyVerificationCodeBuilder {
        return UserService.VerifyVerificationCode.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.VerifyVerificationCode"
      }
      override public func className() -> String {
          return "UserService.VerifyVerificationCode"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.VerifyVerificationCode.self
      }


      //Meta information declaration end

    }

    final public class VerifyVerificationCodeBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.VerifyVerificationCode

      required override public init () {
         builderResult = UserService.VerifyVerificationCode()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.VerifyVerificationCodeBuilder {
        builderResult = UserService.VerifyVerificationCode()
        return self
      }
      public override func clone() -> UserService.VerifyVerificationCodeBuilder {
        return UserService.VerifyVerificationCode.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.VerifyVerificationCode {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.VerifyVerificationCode {
        var returnMe:UserService.VerifyVerificationCode = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.VerifyVerificationCode) -> UserService.VerifyVerificationCodeBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.VerifyVerificationCodeBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCodeBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetAuthorizationInstructions : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "provider": return Int(self.provider.rawValue)
                 default: return nil
                 }
          }

          public private(set) var provider:UserService.Provider = UserService.Provider.Internal
          public private(set) var hasProvider:Bool = false
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProvider {
              output.writeEnum(1, value:provider.rawValue)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if (hasProvider) {
              size += WireFormat.computeEnumSize(1, value:provider.rawValue)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.GetAuthorizationInstructions.Request {
            return UserService.GetAuthorizationInstructions.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.GetAuthorizationInstructions.Request {
            return UserService.GetAuthorizationInstructions.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.GetAuthorizationInstructions.Request {
            return UserService.GetAuthorizationInstructions.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.GetAuthorizationInstructions.Request {
            return UserService.GetAuthorizationInstructions.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.GetAuthorizationInstructions.Request {
            return UserService.GetAuthorizationInstructions.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetAuthorizationInstructions.Request {
            return UserService.GetAuthorizationInstructions.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.GetAuthorizationInstructions.RequestBuilder {
            return UserService.GetAuthorizationInstructions.Request.classBuilder() as UserService.GetAuthorizationInstructions.RequestBuilder
          }
          public func builder() -> UserService.GetAuthorizationInstructions.RequestBuilder {
            return classBuilder() as UserService.GetAuthorizationInstructions.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.GetAuthorizationInstructions.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.GetAuthorizationInstructions.Request.builder()
          }
          public func toBuilder() -> UserService.GetAuthorizationInstructions.RequestBuilder {
            return UserService.GetAuthorizationInstructions.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.GetAuthorizationInstructions.Request) -> UserService.GetAuthorizationInstructions.RequestBuilder {
            return UserService.GetAuthorizationInstructions.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if (hasProvider) {
              output += "\(indent) provider: \(provider.rawValue)\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProvider {
                     hashCode = (hashCode &* 31) &+ Int(provider.rawValue)
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.GetAuthorizationInstructions.Request"
          }
          override public func className() -> String {
              return "UserService.GetAuthorizationInstructions.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.GetAuthorizationInstructions.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.GetAuthorizationInstructions.Request

          required override public init () {
             builderResult = UserService.GetAuthorizationInstructions.Request()
             super.init()
          }
            public var hasProvider:Bool{
                get {
                    return builderResult.hasProvider
                }
            }
            public var provider:UserService.Provider {
                get {
                    return builderResult.provider
                }
                set (value) {
                    builderResult.hasProvider = true
                    builderResult.provider = value
                }
            }
            public func clearProvider() -> UserService.GetAuthorizationInstructions.RequestBuilder {
               builderResult.hasProvider = false
               builderResult.provider = .Internal
               return self
            }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.GetAuthorizationInstructions.RequestBuilder {
            builderResult = UserService.GetAuthorizationInstructions.Request()
            return self
          }
          public override func clone() -> UserService.GetAuthorizationInstructions.RequestBuilder {
            return UserService.GetAuthorizationInstructions.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.GetAuthorizationInstructions.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.GetAuthorizationInstructions.Request {
            var returnMe:UserService.GetAuthorizationInstructions.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.GetAuthorizationInstructions.Request) -> UserService.GetAuthorizationInstructions.RequestBuilder {
            if other.hasProvider {
                 provider = other.provider
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.GetAuthorizationInstructions.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetAuthorizationInstructions.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 8 :
                let valueIntprovider = input.readEnum()
                if let enumsprovider = UserService.Provider(rawValue:valueIntprovider){
                     provider = enumsprovider
                } else {
                     unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntprovider))
                }

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "authorization_url": return authorization_url
                 default: return nil
                 }
          }

          public private(set) var hasAuthorizationUrl:Bool = false
          public private(set) var authorization_url:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasAuthorizationUrl {
              output.writeString(2, value:authorization_url)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasAuthorizationUrl {
              size += WireFormat.computeStringSize(2, value:authorization_url)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.GetAuthorizationInstructions.Response {
            return UserService.GetAuthorizationInstructions.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.GetAuthorizationInstructions.Response {
            return UserService.GetAuthorizationInstructions.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.GetAuthorizationInstructions.Response {
            return UserService.GetAuthorizationInstructions.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.GetAuthorizationInstructions.Response {
            return UserService.GetAuthorizationInstructions.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.GetAuthorizationInstructions.Response {
            return UserService.GetAuthorizationInstructions.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetAuthorizationInstructions.Response {
            return UserService.GetAuthorizationInstructions.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.GetAuthorizationInstructions.ResponseBuilder {
            return UserService.GetAuthorizationInstructions.Response.classBuilder() as UserService.GetAuthorizationInstructions.ResponseBuilder
          }
          public func builder() -> UserService.GetAuthorizationInstructions.ResponseBuilder {
            return classBuilder() as UserService.GetAuthorizationInstructions.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.GetAuthorizationInstructions.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.GetAuthorizationInstructions.Response.builder()
          }
          public func toBuilder() -> UserService.GetAuthorizationInstructions.ResponseBuilder {
            return UserService.GetAuthorizationInstructions.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.GetAuthorizationInstructions.Response) -> UserService.GetAuthorizationInstructions.ResponseBuilder {
            return UserService.GetAuthorizationInstructions.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasAuthorizationUrl {
              output += "\(indent) authorization_url: \(authorization_url) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasAuthorizationUrl {
                     hashCode = (hashCode &* 31) &+ authorization_url.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.GetAuthorizationInstructions.Response"
          }
          override public func className() -> String {
              return "UserService.GetAuthorizationInstructions.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.GetAuthorizationInstructions.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.GetAuthorizationInstructions.Response

          required override public init () {
             builderResult = UserService.GetAuthorizationInstructions.Response()
             super.init()
          }
          public var hasAuthorizationUrl:Bool {
               get {
                    return builderResult.hasAuthorizationUrl
               }
          }
          public var authorization_url:String {
               get {
                    return builderResult.authorization_url
               }
               set (value) {
                   builderResult.hasAuthorizationUrl = true
                   builderResult.authorization_url = value
               }
          }
          public func clearAuthorizationUrl() -> UserService.GetAuthorizationInstructions.ResponseBuilder{
               builderResult.hasAuthorizationUrl = false
               builderResult.authorization_url = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.GetAuthorizationInstructions.ResponseBuilder {
            builderResult = UserService.GetAuthorizationInstructions.Response()
            return self
          }
          public override func clone() -> UserService.GetAuthorizationInstructions.ResponseBuilder {
            return UserService.GetAuthorizationInstructions.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.GetAuthorizationInstructions.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.GetAuthorizationInstructions.Response {
            var returnMe:UserService.GetAuthorizationInstructions.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.GetAuthorizationInstructions.Response) -> UserService.GetAuthorizationInstructions.ResponseBuilder {
            if other.hasAuthorizationUrl {
                 authorization_url = other.authorization_url
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.GetAuthorizationInstructions.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetAuthorizationInstructions.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 18 :
                authorization_url = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.GetAuthorizationInstructions {
        return UserService.GetAuthorizationInstructions.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.GetAuthorizationInstructions {
        return UserService.GetAuthorizationInstructions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.GetAuthorizationInstructions {
        return UserService.GetAuthorizationInstructions.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.GetAuthorizationInstructions {
        return UserService.GetAuthorizationInstructions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.GetAuthorizationInstructions {
        return UserService.GetAuthorizationInstructions.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetAuthorizationInstructions {
        return UserService.GetAuthorizationInstructions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.GetAuthorizationInstructionsBuilder {
        return UserService.GetAuthorizationInstructions.classBuilder() as UserService.GetAuthorizationInstructionsBuilder
      }
      public func builder() -> UserService.GetAuthorizationInstructionsBuilder {
        return classBuilder() as UserService.GetAuthorizationInstructionsBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.GetAuthorizationInstructionsBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.GetAuthorizationInstructions.builder()
      }
      public func toBuilder() -> UserService.GetAuthorizationInstructionsBuilder {
        return UserService.GetAuthorizationInstructions.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.GetAuthorizationInstructions) -> UserService.GetAuthorizationInstructionsBuilder {
        return UserService.GetAuthorizationInstructions.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.GetAuthorizationInstructions"
      }
      override public func className() -> String {
          return "UserService.GetAuthorizationInstructions"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.GetAuthorizationInstructions.self
      }


      //Meta information declaration end

    }

    final public class GetAuthorizationInstructionsBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.GetAuthorizationInstructions

      required override public init () {
         builderResult = UserService.GetAuthorizationInstructions()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.GetAuthorizationInstructionsBuilder {
        builderResult = UserService.GetAuthorizationInstructions()
        return self
      }
      public override func clone() -> UserService.GetAuthorizationInstructionsBuilder {
        return UserService.GetAuthorizationInstructions.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.GetAuthorizationInstructions {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.GetAuthorizationInstructions {
        var returnMe:UserService.GetAuthorizationInstructions = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.GetAuthorizationInstructions) -> UserService.GetAuthorizationInstructionsBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.GetAuthorizationInstructionsBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetAuthorizationInstructionsBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class CompleteAuthorization : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "provider": return Int(self.provider.rawValue)
                 case "oauth2_details": return oauth2_details
                 case "oauth_sdk_details": return oauth_sdk_details
                 default: return nil
                 }
          }

          public private(set) var provider:UserService.Provider = UserService.Provider.Internal
          public private(set) var hasProvider:Bool = false
          public private(set) var hasOauth2Details:Bool = false
          public private(set) var oauth2_details:UserService.Containers.OAuth2Details = UserService.Containers.OAuth2Details()
          public private(set) var hasOauthSdkDetails:Bool = false
          public private(set) var oauth_sdk_details:UserService.Containers.OAuthSDKDetails = UserService.Containers.OAuthSDKDetails()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasProvider {
              output.writeEnum(1, value:provider.rawValue)
            }
            if hasOauth2Details {
              output.writeMessage(2, value:oauth2_details)
            }
            if hasOauthSdkDetails {
              output.writeMessage(3, value:oauth_sdk_details)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if (hasProvider) {
              size += WireFormat.computeEnumSize(1, value:provider.rawValue)
            }
            if hasOauth2Details {
              size += WireFormat.computeMessageSize(2, value:oauth2_details)
            }
            if hasOauthSdkDetails {
              size += WireFormat.computeMessageSize(3, value:oauth_sdk_details)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.CompleteAuthorization.Request {
            return UserService.CompleteAuthorization.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.CompleteAuthorization.Request {
            return UserService.CompleteAuthorization.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.CompleteAuthorization.Request {
            return UserService.CompleteAuthorization.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.CompleteAuthorization.Request {
            return UserService.CompleteAuthorization.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.CompleteAuthorization.Request {
            return UserService.CompleteAuthorization.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CompleteAuthorization.Request {
            return UserService.CompleteAuthorization.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.CompleteAuthorization.RequestBuilder {
            return UserService.CompleteAuthorization.Request.classBuilder() as UserService.CompleteAuthorization.RequestBuilder
          }
          public func builder() -> UserService.CompleteAuthorization.RequestBuilder {
            return classBuilder() as UserService.CompleteAuthorization.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.CompleteAuthorization.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.CompleteAuthorization.Request.builder()
          }
          public func toBuilder() -> UserService.CompleteAuthorization.RequestBuilder {
            return UserService.CompleteAuthorization.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.CompleteAuthorization.Request) -> UserService.CompleteAuthorization.RequestBuilder {
            return UserService.CompleteAuthorization.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if (hasProvider) {
              output += "\(indent) provider: \(provider.rawValue)\n"
            }
            if hasOauth2Details {
              output += "\(indent) oauth2_details {\n"
              oauth2_details.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasOauthSdkDetails {
              output += "\(indent) oauth_sdk_details {\n"
              oauth_sdk_details.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasProvider {
                     hashCode = (hashCode &* 31) &+ Int(provider.rawValue)
                  }
                  if hasOauth2Details {
                    hashCode = (hashCode &* 31) &+ oauth2_details.hashValue
                  }
                  if hasOauthSdkDetails {
                    hashCode = (hashCode &* 31) &+ oauth_sdk_details.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.CompleteAuthorization.Request"
          }
          override public func className() -> String {
              return "UserService.CompleteAuthorization.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.CompleteAuthorization.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.CompleteAuthorization.Request

          required override public init () {
             builderResult = UserService.CompleteAuthorization.Request()
             super.init()
          }
            public var hasProvider:Bool{
                get {
                    return builderResult.hasProvider
                }
            }
            public var provider:UserService.Provider {
                get {
                    return builderResult.provider
                }
                set (value) {
                    builderResult.hasProvider = true
                    builderResult.provider = value
                }
            }
            public func clearProvider() -> UserService.CompleteAuthorization.RequestBuilder {
               builderResult.hasProvider = false
               builderResult.provider = .Internal
               return self
            }
          public var hasOauth2Details:Bool {
               get {
                   return builderResult.hasOauth2Details
               }
          }
          public var oauth2_details:UserService.Containers.OAuth2Details {
               get {
                   return builderResult.oauth2_details
               }
               set (value) {
                   builderResult.hasOauth2Details = true
                   builderResult.oauth2_details = value
               }
          }
          public func setOauth2DetailsBuilder(builderForValue:UserService.Containers.OAuth2DetailsBuilder) -> UserService.CompleteAuthorization.RequestBuilder {
            oauth2_details = builderForValue.build()
            return self
          }
          public func mergeOauth2Details(value:UserService.Containers.OAuth2Details) -> UserService.CompleteAuthorization.RequestBuilder {
            if (builderResult.hasOauth2Details) {
              builderResult.oauth2_details = UserService.Containers.OAuth2Details.builderWithPrototype(builderResult.oauth2_details).mergeFrom(value).buildPartial()
            } else {
              builderResult.oauth2_details = value
            }
            builderResult.hasOauth2Details = true
            return self
          }
          public func clearOauth2Details() -> UserService.CompleteAuthorization.RequestBuilder {
            builderResult.hasOauth2Details = false
            builderResult.oauth2_details = UserService.Containers.OAuth2Details()
            return self
          }
          public var hasOauthSdkDetails:Bool {
               get {
                   return builderResult.hasOauthSdkDetails
               }
          }
          public var oauth_sdk_details:UserService.Containers.OAuthSDKDetails {
               get {
                   return builderResult.oauth_sdk_details
               }
               set (value) {
                   builderResult.hasOauthSdkDetails = true
                   builderResult.oauth_sdk_details = value
               }
          }
          public func setOauthSdkDetailsBuilder(builderForValue:UserService.Containers.OAuthSDKDetailsBuilder) -> UserService.CompleteAuthorization.RequestBuilder {
            oauth_sdk_details = builderForValue.build()
            return self
          }
          public func mergeOauthSdkDetails(value:UserService.Containers.OAuthSDKDetails) -> UserService.CompleteAuthorization.RequestBuilder {
            if (builderResult.hasOauthSdkDetails) {
              builderResult.oauth_sdk_details = UserService.Containers.OAuthSDKDetails.builderWithPrototype(builderResult.oauth_sdk_details).mergeFrom(value).buildPartial()
            } else {
              builderResult.oauth_sdk_details = value
            }
            builderResult.hasOauthSdkDetails = true
            return self
          }
          public func clearOauthSdkDetails() -> UserService.CompleteAuthorization.RequestBuilder {
            builderResult.hasOauthSdkDetails = false
            builderResult.oauth_sdk_details = UserService.Containers.OAuthSDKDetails()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.CompleteAuthorization.RequestBuilder {
            builderResult = UserService.CompleteAuthorization.Request()
            return self
          }
          public override func clone() -> UserService.CompleteAuthorization.RequestBuilder {
            return UserService.CompleteAuthorization.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.CompleteAuthorization.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.CompleteAuthorization.Request {
            var returnMe:UserService.CompleteAuthorization.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.CompleteAuthorization.Request) -> UserService.CompleteAuthorization.RequestBuilder {
            if other.hasProvider {
                 provider = other.provider
            }
            if (other.hasOauth2Details) {
                mergeOauth2Details(other.oauth2_details)
            }
            if (other.hasOauthSdkDetails) {
                mergeOauthSdkDetails(other.oauth_sdk_details)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.CompleteAuthorization.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CompleteAuthorization.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 8 :
                let valueIntprovider = input.readEnum()
                if let enumsprovider = UserService.Provider(rawValue:valueIntprovider){
                     provider = enumsprovider
                } else {
                     unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntprovider))
                }

              case 18 :
                var subBuilder:UserService.Containers.OAuth2DetailsBuilder = UserService.Containers.OAuth2Details.builder()
                if hasOauth2Details {
                  subBuilder.mergeFrom(oauth2_details)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                oauth2_details = subBuilder.buildPartial()

              case 26 :
                var subBuilder:UserService.Containers.OAuthSDKDetailsBuilder = UserService.Containers.OAuthSDKDetails.builder()
                if hasOauthSdkDetails {
                  subBuilder.mergeFrom(oauth_sdk_details)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                oauth_sdk_details = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "user": return user
                 case "identity": return identity
                 case "new_user": return new_user
                 default: return nil
                 }
          }

          public private(set) var hasUser:Bool = false
          public private(set) var user:UserService.Containers.User = UserService.Containers.User()
          public private(set) var hasIdentity:Bool = false
          public private(set) var identity:UserService.Containers.Identity = UserService.Containers.Identity()
          public private(set) var hasNewUser:Bool = false
          public private(set) var new_user:Bool = false

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUser {
              output.writeMessage(1, value:user)
            }
            if hasIdentity {
              output.writeMessage(2, value:identity)
            }
            if hasNewUser {
              output.writeBool(3, value:new_user)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUser {
              size += WireFormat.computeMessageSize(1, value:user)
            }
            if hasIdentity {
              size += WireFormat.computeMessageSize(2, value:identity)
            }
            if hasNewUser {
              size += WireFormat.computeBoolSize(3, value:new_user)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.CompleteAuthorization.Response {
            return UserService.CompleteAuthorization.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.CompleteAuthorization.Response {
            return UserService.CompleteAuthorization.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.CompleteAuthorization.Response {
            return UserService.CompleteAuthorization.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.CompleteAuthorization.Response {
            return UserService.CompleteAuthorization.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.CompleteAuthorization.Response {
            return UserService.CompleteAuthorization.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CompleteAuthorization.Response {
            return UserService.CompleteAuthorization.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.CompleteAuthorization.ResponseBuilder {
            return UserService.CompleteAuthorization.Response.classBuilder() as UserService.CompleteAuthorization.ResponseBuilder
          }
          public func builder() -> UserService.CompleteAuthorization.ResponseBuilder {
            return classBuilder() as UserService.CompleteAuthorization.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.CompleteAuthorization.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.CompleteAuthorization.Response.builder()
          }
          public func toBuilder() -> UserService.CompleteAuthorization.ResponseBuilder {
            return UserService.CompleteAuthorization.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.CompleteAuthorization.Response) -> UserService.CompleteAuthorization.ResponseBuilder {
            return UserService.CompleteAuthorization.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUser {
              output += "\(indent) user {\n"
              user.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasIdentity {
              output += "\(indent) identity {\n"
              identity.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasNewUser {
              output += "\(indent) new_user: \(new_user) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUser {
                    hashCode = (hashCode &* 31) &+ user.hashValue
                  }
                  if hasIdentity {
                    hashCode = (hashCode &* 31) &+ identity.hashValue
                  }
                  if hasNewUser {
                     hashCode = (hashCode &* 31) &+ new_user.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.CompleteAuthorization.Response"
          }
          override public func className() -> String {
              return "UserService.CompleteAuthorization.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.CompleteAuthorization.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.CompleteAuthorization.Response

          required override public init () {
             builderResult = UserService.CompleteAuthorization.Response()
             super.init()
          }
          public var hasUser:Bool {
               get {
                   return builderResult.hasUser
               }
          }
          public var user:UserService.Containers.User {
               get {
                   return builderResult.user
               }
               set (value) {
                   builderResult.hasUser = true
                   builderResult.user = value
               }
          }
          public func setUserBuilder(builderForValue:UserService.Containers.UserBuilder) -> UserService.CompleteAuthorization.ResponseBuilder {
            user = builderForValue.build()
            return self
          }
          public func mergeUser(value:UserService.Containers.User) -> UserService.CompleteAuthorization.ResponseBuilder {
            if (builderResult.hasUser) {
              builderResult.user = UserService.Containers.User.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
            } else {
              builderResult.user = value
            }
            builderResult.hasUser = true
            return self
          }
          public func clearUser() -> UserService.CompleteAuthorization.ResponseBuilder {
            builderResult.hasUser = false
            builderResult.user = UserService.Containers.User()
            return self
          }
          public var hasIdentity:Bool {
               get {
                   return builderResult.hasIdentity
               }
          }
          public var identity:UserService.Containers.Identity {
               get {
                   return builderResult.identity
               }
               set (value) {
                   builderResult.hasIdentity = true
                   builderResult.identity = value
               }
          }
          public func setIdentityBuilder(builderForValue:UserService.Containers.IdentityBuilder) -> UserService.CompleteAuthorization.ResponseBuilder {
            identity = builderForValue.build()
            return self
          }
          public func mergeIdentity(value:UserService.Containers.Identity) -> UserService.CompleteAuthorization.ResponseBuilder {
            if (builderResult.hasIdentity) {
              builderResult.identity = UserService.Containers.Identity.builderWithPrototype(builderResult.identity).mergeFrom(value).buildPartial()
            } else {
              builderResult.identity = value
            }
            builderResult.hasIdentity = true
            return self
          }
          public func clearIdentity() -> UserService.CompleteAuthorization.ResponseBuilder {
            builderResult.hasIdentity = false
            builderResult.identity = UserService.Containers.Identity()
            return self
          }
          public var hasNewUser:Bool {
               get {
                    return builderResult.hasNewUser
               }
          }
          public var new_user:Bool {
               get {
                    return builderResult.new_user
               }
               set (value) {
                   builderResult.hasNewUser = true
                   builderResult.new_user = value
               }
          }
          public func clearNewUser() -> UserService.CompleteAuthorization.ResponseBuilder{
               builderResult.hasNewUser = false
               builderResult.new_user = false
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.CompleteAuthorization.ResponseBuilder {
            builderResult = UserService.CompleteAuthorization.Response()
            return self
          }
          public override func clone() -> UserService.CompleteAuthorization.ResponseBuilder {
            return UserService.CompleteAuthorization.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.CompleteAuthorization.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.CompleteAuthorization.Response {
            var returnMe:UserService.CompleteAuthorization.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.CompleteAuthorization.Response) -> UserService.CompleteAuthorization.ResponseBuilder {
            if (other.hasUser) {
                mergeUser(other.user)
            }
            if (other.hasIdentity) {
                mergeIdentity(other.identity)
            }
            if other.hasNewUser {
                 new_user = other.new_user
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.CompleteAuthorization.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CompleteAuthorization.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:UserService.Containers.UserBuilder = UserService.Containers.User.builder()
                if hasUser {
                  subBuilder.mergeFrom(user)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                user = subBuilder.buildPartial()

              case 18 :
                var subBuilder:UserService.Containers.IdentityBuilder = UserService.Containers.Identity.builder()
                if hasIdentity {
                  subBuilder.mergeFrom(identity)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                identity = subBuilder.buildPartial()

              case 24 :
                new_user = input.readBool()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.CompleteAuthorization {
        return UserService.CompleteAuthorization.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.CompleteAuthorization {
        return UserService.CompleteAuthorization.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.CompleteAuthorization {
        return UserService.CompleteAuthorization.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.CompleteAuthorization {
        return UserService.CompleteAuthorization.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.CompleteAuthorization {
        return UserService.CompleteAuthorization.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CompleteAuthorization {
        return UserService.CompleteAuthorization.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.CompleteAuthorizationBuilder {
        return UserService.CompleteAuthorization.classBuilder() as UserService.CompleteAuthorizationBuilder
      }
      public func builder() -> UserService.CompleteAuthorizationBuilder {
        return classBuilder() as UserService.CompleteAuthorizationBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.CompleteAuthorizationBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.CompleteAuthorization.builder()
      }
      public func toBuilder() -> UserService.CompleteAuthorizationBuilder {
        return UserService.CompleteAuthorization.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.CompleteAuthorization) -> UserService.CompleteAuthorizationBuilder {
        return UserService.CompleteAuthorization.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.CompleteAuthorization"
      }
      override public func className() -> String {
          return "UserService.CompleteAuthorization"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.CompleteAuthorization.self
      }


      //Meta information declaration end

    }

    final public class CompleteAuthorizationBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.CompleteAuthorization

      required override public init () {
         builderResult = UserService.CompleteAuthorization()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.CompleteAuthorizationBuilder {
        builderResult = UserService.CompleteAuthorization()
        return self
      }
      public override func clone() -> UserService.CompleteAuthorizationBuilder {
        return UserService.CompleteAuthorization.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.CompleteAuthorization {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.CompleteAuthorization {
        var returnMe:UserService.CompleteAuthorization = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.CompleteAuthorization) -> UserService.CompleteAuthorizationBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.CompleteAuthorizationBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.CompleteAuthorizationBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class DeleteIdentity : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "identity": return identity
                 default: return nil
                 }
          }

          public private(set) var hasIdentity:Bool = false
          public private(set) var identity:UserService.Containers.Identity = UserService.Containers.Identity()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasIdentity {
              output.writeMessage(1, value:identity)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasIdentity {
              size += WireFormat.computeMessageSize(1, value:identity)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.DeleteIdentity.Request {
            return UserService.DeleteIdentity.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.DeleteIdentity.Request {
            return UserService.DeleteIdentity.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.DeleteIdentity.Request {
            return UserService.DeleteIdentity.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.DeleteIdentity.Request {
            return UserService.DeleteIdentity.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.DeleteIdentity.Request {
            return UserService.DeleteIdentity.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.DeleteIdentity.Request {
            return UserService.DeleteIdentity.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.DeleteIdentity.RequestBuilder {
            return UserService.DeleteIdentity.Request.classBuilder() as UserService.DeleteIdentity.RequestBuilder
          }
          public func builder() -> UserService.DeleteIdentity.RequestBuilder {
            return classBuilder() as UserService.DeleteIdentity.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.DeleteIdentity.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.DeleteIdentity.Request.builder()
          }
          public func toBuilder() -> UserService.DeleteIdentity.RequestBuilder {
            return UserService.DeleteIdentity.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.DeleteIdentity.Request) -> UserService.DeleteIdentity.RequestBuilder {
            return UserService.DeleteIdentity.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasIdentity {
              output += "\(indent) identity {\n"
              identity.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasIdentity {
                    hashCode = (hashCode &* 31) &+ identity.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.DeleteIdentity.Request"
          }
          override public func className() -> String {
              return "UserService.DeleteIdentity.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.DeleteIdentity.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.DeleteIdentity.Request

          required override public init () {
             builderResult = UserService.DeleteIdentity.Request()
             super.init()
          }
          public var hasIdentity:Bool {
               get {
                   return builderResult.hasIdentity
               }
          }
          public var identity:UserService.Containers.Identity {
               get {
                   return builderResult.identity
               }
               set (value) {
                   builderResult.hasIdentity = true
                   builderResult.identity = value
               }
          }
          public func setIdentityBuilder(builderForValue:UserService.Containers.IdentityBuilder) -> UserService.DeleteIdentity.RequestBuilder {
            identity = builderForValue.build()
            return self
          }
          public func mergeIdentity(value:UserService.Containers.Identity) -> UserService.DeleteIdentity.RequestBuilder {
            if (builderResult.hasIdentity) {
              builderResult.identity = UserService.Containers.Identity.builderWithPrototype(builderResult.identity).mergeFrom(value).buildPartial()
            } else {
              builderResult.identity = value
            }
            builderResult.hasIdentity = true
            return self
          }
          public func clearIdentity() -> UserService.DeleteIdentity.RequestBuilder {
            builderResult.hasIdentity = false
            builderResult.identity = UserService.Containers.Identity()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.DeleteIdentity.RequestBuilder {
            builderResult = UserService.DeleteIdentity.Request()
            return self
          }
          public override func clone() -> UserService.DeleteIdentity.RequestBuilder {
            return UserService.DeleteIdentity.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.DeleteIdentity.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.DeleteIdentity.Request {
            var returnMe:UserService.DeleteIdentity.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.DeleteIdentity.Request) -> UserService.DeleteIdentity.RequestBuilder {
            if (other.hasIdentity) {
                mergeIdentity(other.identity)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.DeleteIdentity.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.DeleteIdentity.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:UserService.Containers.IdentityBuilder = UserService.Containers.Identity.builder()
                if hasIdentity {
                  subBuilder.mergeFrom(identity)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                identity = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.DeleteIdentity.Response {
            return UserService.DeleteIdentity.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.DeleteIdentity.Response {
            return UserService.DeleteIdentity.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.DeleteIdentity.Response {
            return UserService.DeleteIdentity.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.DeleteIdentity.Response {
            return UserService.DeleteIdentity.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.DeleteIdentity.Response {
            return UserService.DeleteIdentity.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.DeleteIdentity.Response {
            return UserService.DeleteIdentity.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.DeleteIdentity.ResponseBuilder {
            return UserService.DeleteIdentity.Response.classBuilder() as UserService.DeleteIdentity.ResponseBuilder
          }
          public func builder() -> UserService.DeleteIdentity.ResponseBuilder {
            return classBuilder() as UserService.DeleteIdentity.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.DeleteIdentity.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.DeleteIdentity.Response.builder()
          }
          public func toBuilder() -> UserService.DeleteIdentity.ResponseBuilder {
            return UserService.DeleteIdentity.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.DeleteIdentity.Response) -> UserService.DeleteIdentity.ResponseBuilder {
            return UserService.DeleteIdentity.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.DeleteIdentity.Response"
          }
          override public func className() -> String {
              return "UserService.DeleteIdentity.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.DeleteIdentity.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.DeleteIdentity.Response

          required override public init () {
             builderResult = UserService.DeleteIdentity.Response()
             super.init()
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.DeleteIdentity.ResponseBuilder {
            builderResult = UserService.DeleteIdentity.Response()
            return self
          }
          public override func clone() -> UserService.DeleteIdentity.ResponseBuilder {
            return UserService.DeleteIdentity.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.DeleteIdentity.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.DeleteIdentity.Response {
            var returnMe:UserService.DeleteIdentity.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.DeleteIdentity.Response) -> UserService.DeleteIdentity.ResponseBuilder {
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.DeleteIdentity.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.DeleteIdentity.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.DeleteIdentity {
        return UserService.DeleteIdentity.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.DeleteIdentity {
        return UserService.DeleteIdentity.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.DeleteIdentity {
        return UserService.DeleteIdentity.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.DeleteIdentity {
        return UserService.DeleteIdentity.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.DeleteIdentity {
        return UserService.DeleteIdentity.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.DeleteIdentity {
        return UserService.DeleteIdentity.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.DeleteIdentityBuilder {
        return UserService.DeleteIdentity.classBuilder() as UserService.DeleteIdentityBuilder
      }
      public func builder() -> UserService.DeleteIdentityBuilder {
        return classBuilder() as UserService.DeleteIdentityBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.DeleteIdentityBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.DeleteIdentity.builder()
      }
      public func toBuilder() -> UserService.DeleteIdentityBuilder {
        return UserService.DeleteIdentity.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.DeleteIdentity) -> UserService.DeleteIdentityBuilder {
        return UserService.DeleteIdentity.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.DeleteIdentity"
      }
      override public func className() -> String {
          return "UserService.DeleteIdentity"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.DeleteIdentity.self
      }


      //Meta information declaration end

    }

    final public class DeleteIdentityBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.DeleteIdentity

      required override public init () {
         builderResult = UserService.DeleteIdentity()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.DeleteIdentityBuilder {
        builderResult = UserService.DeleteIdentity()
        return self
      }
      public override func clone() -> UserService.DeleteIdentityBuilder {
        return UserService.DeleteIdentity.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.DeleteIdentity {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.DeleteIdentity {
        var returnMe:UserService.DeleteIdentity = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.DeleteIdentity) -> UserService.DeleteIdentityBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.DeleteIdentityBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.DeleteIdentityBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetIdentities : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "user_id": return user_id
                 default: return nil
                 }
          }

          public private(set) var hasUserId:Bool = false
          public private(set) var user_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUserId {
              output.writeString(1, value:user_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUserId {
              size += WireFormat.computeStringSize(1, value:user_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.GetIdentities.Request {
            return UserService.GetIdentities.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.GetIdentities.Request {
            return UserService.GetIdentities.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.GetIdentities.Request {
            return UserService.GetIdentities.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.GetIdentities.Request {
            return UserService.GetIdentities.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.GetIdentities.Request {
            return UserService.GetIdentities.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetIdentities.Request {
            return UserService.GetIdentities.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.GetIdentities.RequestBuilder {
            return UserService.GetIdentities.Request.classBuilder() as UserService.GetIdentities.RequestBuilder
          }
          public func builder() -> UserService.GetIdentities.RequestBuilder {
            return classBuilder() as UserService.GetIdentities.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.GetIdentities.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.GetIdentities.Request.builder()
          }
          public func toBuilder() -> UserService.GetIdentities.RequestBuilder {
            return UserService.GetIdentities.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.GetIdentities.Request) -> UserService.GetIdentities.RequestBuilder {
            return UserService.GetIdentities.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.GetIdentities.Request"
          }
          override public func className() -> String {
              return "UserService.GetIdentities.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.GetIdentities.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.GetIdentities.Request

          required override public init () {
             builderResult = UserService.GetIdentities.Request()
             super.init()
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> UserService.GetIdentities.RequestBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.GetIdentities.RequestBuilder {
            builderResult = UserService.GetIdentities.Request()
            return self
          }
          public override func clone() -> UserService.GetIdentities.RequestBuilder {
            return UserService.GetIdentities.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.GetIdentities.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.GetIdentities.Request {
            var returnMe:UserService.GetIdentities.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.GetIdentities.Request) -> UserService.GetIdentities.RequestBuilder {
            if other.hasUserId {
                 user_id = other.user_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.GetIdentities.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetIdentities.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                user_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var identities:Array<UserService.Containers.Identity>  = Array<UserService.Containers.Identity>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementidentities in identities {
                output.writeMessage(1, value:oneElementidentities)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementidentities in identities {
                size += WireFormat.computeMessageSize(1, value:oneElementidentities)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.GetIdentities.Response {
            return UserService.GetIdentities.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.GetIdentities.Response {
            return UserService.GetIdentities.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.GetIdentities.Response {
            return UserService.GetIdentities.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.GetIdentities.Response {
            return UserService.GetIdentities.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.GetIdentities.Response {
            return UserService.GetIdentities.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetIdentities.Response {
            return UserService.GetIdentities.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.GetIdentities.ResponseBuilder {
            return UserService.GetIdentities.Response.classBuilder() as UserService.GetIdentities.ResponseBuilder
          }
          public func builder() -> UserService.GetIdentities.ResponseBuilder {
            return classBuilder() as UserService.GetIdentities.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.GetIdentities.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.GetIdentities.Response.builder()
          }
          public func toBuilder() -> UserService.GetIdentities.ResponseBuilder {
            return UserService.GetIdentities.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.GetIdentities.Response) -> UserService.GetIdentities.ResponseBuilder {
            return UserService.GetIdentities.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var identitiesElementIndex:Int = 0
            for oneElementidentities in identities {
                output += "\(indent) identities[\(identitiesElementIndex)] {\n"
                oneElementidentities.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                identitiesElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementidentities in identities {
                      hashCode = (hashCode &* 31) &+ oneElementidentities.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.GetIdentities.Response"
          }
          override public func className() -> String {
              return "UserService.GetIdentities.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.GetIdentities.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.GetIdentities.Response

          required override public init () {
             builderResult = UserService.GetIdentities.Response()
             super.init()
          }
          public var identities:Array<UserService.Containers.Identity> {
               get {
                   return builderResult.identities
               }
               set (value) {
                   builderResult.identities = value
               }
          }
          public func clearIdentities() -> UserService.GetIdentities.ResponseBuilder {
            builderResult.identities.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.GetIdentities.ResponseBuilder {
            builderResult = UserService.GetIdentities.Response()
            return self
          }
          public override func clone() -> UserService.GetIdentities.ResponseBuilder {
            return UserService.GetIdentities.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.GetIdentities.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.GetIdentities.Response {
            var returnMe:UserService.GetIdentities.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.GetIdentities.Response) -> UserService.GetIdentities.ResponseBuilder {
            if !other.identities.isEmpty  {
               builderResult.identities += other.identities
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.GetIdentities.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetIdentities.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = UserService.Containers.Identity.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                identities += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.GetIdentities {
        return UserService.GetIdentities.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.GetIdentities {
        return UserService.GetIdentities.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.GetIdentities {
        return UserService.GetIdentities.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.GetIdentities {
        return UserService.GetIdentities.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.GetIdentities {
        return UserService.GetIdentities.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetIdentities {
        return UserService.GetIdentities.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.GetIdentitiesBuilder {
        return UserService.GetIdentities.classBuilder() as UserService.GetIdentitiesBuilder
      }
      public func builder() -> UserService.GetIdentitiesBuilder {
        return classBuilder() as UserService.GetIdentitiesBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.GetIdentitiesBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.GetIdentities.builder()
      }
      public func toBuilder() -> UserService.GetIdentitiesBuilder {
        return UserService.GetIdentities.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.GetIdentities) -> UserService.GetIdentitiesBuilder {
        return UserService.GetIdentities.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.GetIdentities"
      }
      override public func className() -> String {
          return "UserService.GetIdentities"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.GetIdentities.self
      }


      //Meta information declaration end

    }

    final public class GetIdentitiesBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.GetIdentities

      required override public init () {
         builderResult = UserService.GetIdentities()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.GetIdentitiesBuilder {
        builderResult = UserService.GetIdentities()
        return self
      }
      public override func clone() -> UserService.GetIdentitiesBuilder {
        return UserService.GetIdentities.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.GetIdentities {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.GetIdentities {
        var returnMe:UserService.GetIdentities = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.GetIdentities) -> UserService.GetIdentitiesBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.GetIdentitiesBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.GetIdentitiesBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class RecordDevice : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "device": return device
                 default: return nil
                 }
          }

          public private(set) var hasDevice:Bool = false
          public private(set) var device:UserService.Containers.Device = UserService.Containers.Device()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasDevice {
              output.writeMessage(1, value:device)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasDevice {
              size += WireFormat.computeMessageSize(1, value:device)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.RecordDevice.Request {
            return UserService.RecordDevice.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.RecordDevice.Request {
            return UserService.RecordDevice.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.RecordDevice.Request {
            return UserService.RecordDevice.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.RecordDevice.Request {
            return UserService.RecordDevice.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.RecordDevice.Request {
            return UserService.RecordDevice.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.RecordDevice.Request {
            return UserService.RecordDevice.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.RecordDevice.RequestBuilder {
            return UserService.RecordDevice.Request.classBuilder() as UserService.RecordDevice.RequestBuilder
          }
          public func builder() -> UserService.RecordDevice.RequestBuilder {
            return classBuilder() as UserService.RecordDevice.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.RecordDevice.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.RecordDevice.Request.builder()
          }
          public func toBuilder() -> UserService.RecordDevice.RequestBuilder {
            return UserService.RecordDevice.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.RecordDevice.Request) -> UserService.RecordDevice.RequestBuilder {
            return UserService.RecordDevice.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasDevice {
              output += "\(indent) device {\n"
              device.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasDevice {
                    hashCode = (hashCode &* 31) &+ device.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.RecordDevice.Request"
          }
          override public func className() -> String {
              return "UserService.RecordDevice.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.RecordDevice.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.RecordDevice.Request

          required override public init () {
             builderResult = UserService.RecordDevice.Request()
             super.init()
          }
          public var hasDevice:Bool {
               get {
                   return builderResult.hasDevice
               }
          }
          public var device:UserService.Containers.Device {
               get {
                   return builderResult.device
               }
               set (value) {
                   builderResult.hasDevice = true
                   builderResult.device = value
               }
          }
          public func setDeviceBuilder(builderForValue:UserService.Containers.DeviceBuilder) -> UserService.RecordDevice.RequestBuilder {
            device = builderForValue.build()
            return self
          }
          public func mergeDevice(value:UserService.Containers.Device) -> UserService.RecordDevice.RequestBuilder {
            if (builderResult.hasDevice) {
              builderResult.device = UserService.Containers.Device.builderWithPrototype(builderResult.device).mergeFrom(value).buildPartial()
            } else {
              builderResult.device = value
            }
            builderResult.hasDevice = true
            return self
          }
          public func clearDevice() -> UserService.RecordDevice.RequestBuilder {
            builderResult.hasDevice = false
            builderResult.device = UserService.Containers.Device()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.RecordDevice.RequestBuilder {
            builderResult = UserService.RecordDevice.Request()
            return self
          }
          public override func clone() -> UserService.RecordDevice.RequestBuilder {
            return UserService.RecordDevice.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.RecordDevice.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.RecordDevice.Request {
            var returnMe:UserService.RecordDevice.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.RecordDevice.Request) -> UserService.RecordDevice.RequestBuilder {
            if (other.hasDevice) {
                mergeDevice(other.device)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.RecordDevice.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.RecordDevice.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:UserService.Containers.DeviceBuilder = UserService.Containers.Device.builder()
                if hasDevice {
                  subBuilder.mergeFrom(device)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                device = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "device": return device
                 default: return nil
                 }
          }

          public private(set) var hasDevice:Bool = false
          public private(set) var device:UserService.Containers.Device = UserService.Containers.Device()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasDevice {
              output.writeMessage(1, value:device)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasDevice {
              size += WireFormat.computeMessageSize(1, value:device)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.RecordDevice.Response {
            return UserService.RecordDevice.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.RecordDevice.Response {
            return UserService.RecordDevice.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.RecordDevice.Response {
            return UserService.RecordDevice.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.RecordDevice.Response {
            return UserService.RecordDevice.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.RecordDevice.Response {
            return UserService.RecordDevice.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.RecordDevice.Response {
            return UserService.RecordDevice.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.RecordDevice.ResponseBuilder {
            return UserService.RecordDevice.Response.classBuilder() as UserService.RecordDevice.ResponseBuilder
          }
          public func builder() -> UserService.RecordDevice.ResponseBuilder {
            return classBuilder() as UserService.RecordDevice.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.RecordDevice.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.RecordDevice.Response.builder()
          }
          public func toBuilder() -> UserService.RecordDevice.ResponseBuilder {
            return UserService.RecordDevice.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.RecordDevice.Response) -> UserService.RecordDevice.ResponseBuilder {
            return UserService.RecordDevice.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasDevice {
              output += "\(indent) device {\n"
              device.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasDevice {
                    hashCode = (hashCode &* 31) &+ device.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.RecordDevice.Response"
          }
          override public func className() -> String {
              return "UserService.RecordDevice.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.RecordDevice.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.RecordDevice.Response

          required override public init () {
             builderResult = UserService.RecordDevice.Response()
             super.init()
          }
          public var hasDevice:Bool {
               get {
                   return builderResult.hasDevice
               }
          }
          public var device:UserService.Containers.Device {
               get {
                   return builderResult.device
               }
               set (value) {
                   builderResult.hasDevice = true
                   builderResult.device = value
               }
          }
          public func setDeviceBuilder(builderForValue:UserService.Containers.DeviceBuilder) -> UserService.RecordDevice.ResponseBuilder {
            device = builderForValue.build()
            return self
          }
          public func mergeDevice(value:UserService.Containers.Device) -> UserService.RecordDevice.ResponseBuilder {
            if (builderResult.hasDevice) {
              builderResult.device = UserService.Containers.Device.builderWithPrototype(builderResult.device).mergeFrom(value).buildPartial()
            } else {
              builderResult.device = value
            }
            builderResult.hasDevice = true
            return self
          }
          public func clearDevice() -> UserService.RecordDevice.ResponseBuilder {
            builderResult.hasDevice = false
            builderResult.device = UserService.Containers.Device()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.RecordDevice.ResponseBuilder {
            builderResult = UserService.RecordDevice.Response()
            return self
          }
          public override func clone() -> UserService.RecordDevice.ResponseBuilder {
            return UserService.RecordDevice.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.RecordDevice.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.RecordDevice.Response {
            var returnMe:UserService.RecordDevice.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.RecordDevice.Response) -> UserService.RecordDevice.ResponseBuilder {
            if (other.hasDevice) {
                mergeDevice(other.device)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.RecordDevice.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.RecordDevice.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:UserService.Containers.DeviceBuilder = UserService.Containers.Device.builder()
                if hasDevice {
                  subBuilder.mergeFrom(device)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                device = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.RecordDevice {
        return UserService.RecordDevice.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.RecordDevice {
        return UserService.RecordDevice.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.RecordDevice {
        return UserService.RecordDevice.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.RecordDevice {
        return UserService.RecordDevice.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.RecordDevice {
        return UserService.RecordDevice.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.RecordDevice {
        return UserService.RecordDevice.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.RecordDeviceBuilder {
        return UserService.RecordDevice.classBuilder() as UserService.RecordDeviceBuilder
      }
      public func builder() -> UserService.RecordDeviceBuilder {
        return classBuilder() as UserService.RecordDeviceBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.RecordDeviceBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.RecordDevice.builder()
      }
      public func toBuilder() -> UserService.RecordDeviceBuilder {
        return UserService.RecordDevice.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.RecordDevice) -> UserService.RecordDeviceBuilder {
        return UserService.RecordDevice.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.RecordDevice"
      }
      override public func className() -> String {
          return "UserService.RecordDevice"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.RecordDevice.self
      }


      //Meta information declaration end

    }

    final public class RecordDeviceBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.RecordDevice

      required override public init () {
         builderResult = UserService.RecordDevice()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.RecordDeviceBuilder {
        builderResult = UserService.RecordDevice()
        return self
      }
      public override func clone() -> UserService.RecordDeviceBuilder {
        return UserService.RecordDevice.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.RecordDevice {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.RecordDevice {
        var returnMe:UserService.RecordDevice = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.RecordDevice) -> UserService.RecordDeviceBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.RecordDeviceBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.RecordDeviceBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class RequestAccess : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "user_id": return user_id
                 default: return nil
                 }
          }

          public private(set) var hasUserId:Bool = false
          public private(set) var user_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUserId {
              output.writeString(1, value:user_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUserId {
              size += WireFormat.computeStringSize(1, value:user_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.RequestAccess.Request {
            return UserService.RequestAccess.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.RequestAccess.Request {
            return UserService.RequestAccess.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.RequestAccess.Request {
            return UserService.RequestAccess.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.RequestAccess.Request {
            return UserService.RequestAccess.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.RequestAccess.Request {
            return UserService.RequestAccess.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.RequestAccess.Request {
            return UserService.RequestAccess.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.RequestAccess.RequestBuilder {
            return UserService.RequestAccess.Request.classBuilder() as UserService.RequestAccess.RequestBuilder
          }
          public func builder() -> UserService.RequestAccess.RequestBuilder {
            return classBuilder() as UserService.RequestAccess.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.RequestAccess.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.RequestAccess.Request.builder()
          }
          public func toBuilder() -> UserService.RequestAccess.RequestBuilder {
            return UserService.RequestAccess.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.RequestAccess.Request) -> UserService.RequestAccess.RequestBuilder {
            return UserService.RequestAccess.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasUserId {
              output += "\(indent) user_id: \(user_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ user_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.RequestAccess.Request"
          }
          override public func className() -> String {
              return "UserService.RequestAccess.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.RequestAccess.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.RequestAccess.Request

          required override public init () {
             builderResult = UserService.RequestAccess.Request()
             super.init()
          }
          public var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          public var user_id:String {
               get {
                    return builderResult.user_id
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.user_id = value
               }
          }
          public func clearUserId() -> UserService.RequestAccess.RequestBuilder{
               builderResult.hasUserId = false
               builderResult.user_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.RequestAccess.RequestBuilder {
            builderResult = UserService.RequestAccess.Request()
            return self
          }
          public override func clone() -> UserService.RequestAccess.RequestBuilder {
            return UserService.RequestAccess.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.RequestAccess.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.RequestAccess.Request {
            var returnMe:UserService.RequestAccess.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.RequestAccess.Request) -> UserService.RequestAccess.RequestBuilder {
            if other.hasUserId {
                 user_id = other.user_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.RequestAccess.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.RequestAccess.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                user_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "access_request": return access_request
                 default: return nil
                 }
          }

          public private(set) var hasAccessRequest:Bool = false
          public private(set) var access_request:UserService.Containers.AccessRequest = UserService.Containers.AccessRequest()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasAccessRequest {
              output.writeMessage(1, value:access_request)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasAccessRequest {
              size += WireFormat.computeMessageSize(1, value:access_request)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> UserService.RequestAccess.Response {
            return UserService.RequestAccess.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.RequestAccess.Response {
            return UserService.RequestAccess.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> UserService.RequestAccess.Response {
            return UserService.RequestAccess.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.RequestAccess.Response {
            return UserService.RequestAccess.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.RequestAccess.Response {
            return UserService.RequestAccess.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.RequestAccess.Response {
            return UserService.RequestAccess.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> UserService.RequestAccess.ResponseBuilder {
            return UserService.RequestAccess.Response.classBuilder() as UserService.RequestAccess.ResponseBuilder
          }
          public func builder() -> UserService.RequestAccess.ResponseBuilder {
            return classBuilder() as UserService.RequestAccess.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return UserService.RequestAccess.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return UserService.RequestAccess.Response.builder()
          }
          public func toBuilder() -> UserService.RequestAccess.ResponseBuilder {
            return UserService.RequestAccess.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:UserService.RequestAccess.Response) -> UserService.RequestAccess.ResponseBuilder {
            return UserService.RequestAccess.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasAccessRequest {
              output += "\(indent) access_request {\n"
              access_request.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasAccessRequest {
                    hashCode = (hashCode &* 31) &+ access_request.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "UserService.RequestAccess.Response"
          }
          override public func className() -> String {
              return "UserService.RequestAccess.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return UserService.RequestAccess.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:UserService.RequestAccess.Response

          required override public init () {
             builderResult = UserService.RequestAccess.Response()
             super.init()
          }
          public var hasAccessRequest:Bool {
               get {
                   return builderResult.hasAccessRequest
               }
          }
          public var access_request:UserService.Containers.AccessRequest {
               get {
                   return builderResult.access_request
               }
               set (value) {
                   builderResult.hasAccessRequest = true
                   builderResult.access_request = value
               }
          }
          public func setAccessRequestBuilder(builderForValue:UserService.Containers.AccessRequestBuilder) -> UserService.RequestAccess.ResponseBuilder {
            access_request = builderForValue.build()
            return self
          }
          public func mergeAccessRequest(value:UserService.Containers.AccessRequest) -> UserService.RequestAccess.ResponseBuilder {
            if (builderResult.hasAccessRequest) {
              builderResult.access_request = UserService.Containers.AccessRequest.builderWithPrototype(builderResult.access_request).mergeFrom(value).buildPartial()
            } else {
              builderResult.access_request = value
            }
            builderResult.hasAccessRequest = true
            return self
          }
          public func clearAccessRequest() -> UserService.RequestAccess.ResponseBuilder {
            builderResult.hasAccessRequest = false
            builderResult.access_request = UserService.Containers.AccessRequest()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> UserService.RequestAccess.ResponseBuilder {
            builderResult = UserService.RequestAccess.Response()
            return self
          }
          public override func clone() -> UserService.RequestAccess.ResponseBuilder {
            return UserService.RequestAccess.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> UserService.RequestAccess.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> UserService.RequestAccess.Response {
            var returnMe:UserService.RequestAccess.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:UserService.RequestAccess.Response) -> UserService.RequestAccess.ResponseBuilder {
            if (other.hasAccessRequest) {
                mergeAccessRequest(other.access_request)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.RequestAccess.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.RequestAccess.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:UserService.Containers.AccessRequestBuilder = UserService.Containers.AccessRequest.builder()
                if hasAccessRequest {
                  subBuilder.mergeFrom(access_request)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                access_request = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> UserService.RequestAccess {
        return UserService.RequestAccess.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService.RequestAccess {
        return UserService.RequestAccess.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> UserService.RequestAccess {
        return UserService.RequestAccess.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService.RequestAccess {
        return UserService.RequestAccess.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService.RequestAccess {
        return UserService.RequestAccess.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.RequestAccess {
        return UserService.RequestAccess.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> UserService.RequestAccessBuilder {
        return UserService.RequestAccess.classBuilder() as UserService.RequestAccessBuilder
      }
      public func builder() -> UserService.RequestAccessBuilder {
        return classBuilder() as UserService.RequestAccessBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return UserService.RequestAccessBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return UserService.RequestAccess.builder()
      }
      public func toBuilder() -> UserService.RequestAccessBuilder {
        return UserService.RequestAccess.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:UserService.RequestAccess) -> UserService.RequestAccessBuilder {
        return UserService.RequestAccess.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "UserService.RequestAccess"
      }
      override public func className() -> String {
          return "UserService.RequestAccess"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return UserService.RequestAccess.self
      }


      //Meta information declaration end

    }

    final public class RequestAccessBuilder : GeneratedMessageBuilder {
      private var builderResult:UserService.RequestAccess

      required override public init () {
         builderResult = UserService.RequestAccess()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> UserService.RequestAccessBuilder {
        builderResult = UserService.RequestAccess()
        return self
      }
      public override func clone() -> UserService.RequestAccessBuilder {
        return UserService.RequestAccess.builderWithPrototype(builderResult)
      }
      public override func build() -> UserService.RequestAccess {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> UserService.RequestAccess {
        var returnMe:UserService.RequestAccess = builderResult
        return returnMe
      }
      public func mergeFrom(other:UserService.RequestAccess) -> UserService.RequestAccessBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserService.RequestAccessBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService.RequestAccessBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



    //Enum type declaration start 

    public enum Provider:Int32 {
      case Internal = 0
      case Linkedin = 1
      case Google = 2

      public static func IsValidValue(value:Int32) ->Bool {
          if let check = Provider(rawValue:value) {
              return true
          }
          return false
      }
    }



    //Enum type declaration end 

  override public subscript (key: String) -> Any? {
         switch key {
         default: return nil
         }
  }

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  public class func parseFromData(data:[Byte]) -> UserService {
    return UserService.builder().mergeFromData(data).build()
  }
  public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> UserService {
    return UserService.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> UserService {
    return UserService.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->UserService {
    return UserService.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> UserService {
    return UserService.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserService {
    return UserService.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> UserServiceBuilder {
    return UserService.classBuilder() as UserServiceBuilder
  }
  public func builder() -> UserServiceBuilder {
    return classBuilder() as UserServiceBuilder
  }
  public override class func classBuilder() -> MessageBuilder {
    return UserServiceBuilder()
  }
  public override func classBuilder() -> MessageBuilder {
    return UserService.builder()
  }
  public func toBuilder() -> UserServiceBuilder {
    return UserService.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:UserService) -> UserServiceBuilder {
    return UserService.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "UserService"
  }
  override public func className() -> String {
      return "UserService"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return UserService.self
  }


  //Meta information declaration end

}

final public class UserServiceBuilder : GeneratedMessageBuilder {
  private var builderResult:UserService

  required override public init () {
     builderResult = UserService()
     super.init()
  }
  override public var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  public override func clear() -> UserServiceBuilder {
    builderResult = UserService()
    return self
  }
  public override func clone() -> UserServiceBuilder {
    return UserService.builderWithPrototype(builderResult)
  }
  public override func build() -> UserService {
       checkInitialized()
       return buildPartial()
  }
  public func buildPartial() -> UserService {
    var returnMe:UserService = builderResult
    return returnMe
  }
  public func mergeFrom(other:UserService) -> UserServiceBuilder {
    mergeUnknownFields(other.unknownFields)
    return self
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream) ->UserServiceBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserServiceBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


public extension UserService.Containers.User {
    class func parseFromNSData(data:NSData) -> UserService.Containers.User {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.User.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.Containers.User {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.User.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.Containers.OAuth2Details {
    class func parseFromNSData(data:NSData) -> UserService.Containers.OAuth2Details {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.OAuth2Details.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.Containers.OAuth2Details {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.OAuth2Details.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.Containers.OAuthSDKDetails {
    class func parseFromNSData(data:NSData) -> UserService.Containers.OAuthSDKDetails {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.OAuthSDKDetails.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.Containers.OAuthSDKDetails {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.OAuthSDKDetails.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.Containers.Identity {
    class func parseFromNSData(data:NSData) -> UserService.Containers.Identity {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.Identity.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.Containers.Identity {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.Identity.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.Containers.Device {
    class func parseFromNSData(data:NSData) -> UserService.Containers.Device {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.Device.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.Containers.Device {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.Device.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.Containers.AccessRequest {
    class func parseFromNSData(data:NSData) -> UserService.Containers.AccessRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.AccessRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.Containers.AccessRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.AccessRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.Containers {
    class func parseFromNSData(data:NSData) -> UserService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.Containers.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.CreateUser.Request {
    class func parseFromNSData(data:NSData) -> UserService.CreateUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CreateUser.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.CreateUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CreateUser.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.CreateUser.Response {
    class func parseFromNSData(data:NSData) -> UserService.CreateUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CreateUser.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.CreateUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CreateUser.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.CreateUser {
    class func parseFromNSData(data:NSData) -> UserService.CreateUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CreateUser.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.CreateUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CreateUser.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.BulkCreateUsers.Request {
    class func parseFromNSData(data:NSData) -> UserService.BulkCreateUsers.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.BulkCreateUsers.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.BulkCreateUsers.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.BulkCreateUsers.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.BulkCreateUsers.Response {
    class func parseFromNSData(data:NSData) -> UserService.BulkCreateUsers.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.BulkCreateUsers.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.BulkCreateUsers.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.BulkCreateUsers.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.BulkCreateUsers {
    class func parseFromNSData(data:NSData) -> UserService.BulkCreateUsers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.BulkCreateUsers.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.BulkCreateUsers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.BulkCreateUsers.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.UpdateUser.Request {
    class func parseFromNSData(data:NSData) -> UserService.UpdateUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.UpdateUser.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.UpdateUser.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.UpdateUser.Response {
    class func parseFromNSData(data:NSData) -> UserService.UpdateUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.UpdateUser.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.UpdateUser.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.UpdateUser {
    class func parseFromNSData(data:NSData) -> UserService.UpdateUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.UpdateUser.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.UpdateUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.UpdateUser.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.GetUser.Request {
    class func parseFromNSData(data:NSData) -> UserService.GetUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetUser.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.GetUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetUser.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.GetUser.Response {
    class func parseFromNSData(data:NSData) -> UserService.GetUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetUser.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.GetUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetUser.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.GetUser {
    class func parseFromNSData(data:NSData) -> UserService.GetUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetUser.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.GetUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetUser.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.ValidUser.Request {
    class func parseFromNSData(data:NSData) -> UserService.ValidUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.ValidUser.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.ValidUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.ValidUser.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.ValidUser.Response {
    class func parseFromNSData(data:NSData) -> UserService.ValidUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.ValidUser.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.ValidUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.ValidUser.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.ValidUser {
    class func parseFromNSData(data:NSData) -> UserService.ValidUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.ValidUser.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.ValidUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.ValidUser.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.AuthenticateUser.Request.Credentials {
    class func parseFromNSData(data:NSData) -> UserService.AuthenticateUser.Request.Credentials {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.AuthenticateUser.Request.Credentials.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Request.Credentials {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.AuthenticateUser.Request.Credentials.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.AuthenticateUser.Request {
    class func parseFromNSData(data:NSData) -> UserService.AuthenticateUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.AuthenticateUser.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.AuthenticateUser.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.AuthenticateUser.Response {
    class func parseFromNSData(data:NSData) -> UserService.AuthenticateUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.AuthenticateUser.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.AuthenticateUser.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.AuthenticateUser {
    class func parseFromNSData(data:NSData) -> UserService.AuthenticateUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.AuthenticateUser.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.AuthenticateUser {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.AuthenticateUser.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.SendVerificationCode.Request {
    class func parseFromNSData(data:NSData) -> UserService.SendVerificationCode.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.SendVerificationCode.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.SendVerificationCode.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.SendVerificationCode.Response {
    class func parseFromNSData(data:NSData) -> UserService.SendVerificationCode.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.SendVerificationCode.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.SendVerificationCode.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.SendVerificationCode {
    class func parseFromNSData(data:NSData) -> UserService.SendVerificationCode {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.SendVerificationCode.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.SendVerificationCode {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.SendVerificationCode.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.VerifyVerificationCode.Request {
    class func parseFromNSData(data:NSData) -> UserService.VerifyVerificationCode.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.VerifyVerificationCode.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.VerifyVerificationCode.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.VerifyVerificationCode.Response {
    class func parseFromNSData(data:NSData) -> UserService.VerifyVerificationCode.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.VerifyVerificationCode.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.VerifyVerificationCode.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.VerifyVerificationCode {
    class func parseFromNSData(data:NSData) -> UserService.VerifyVerificationCode {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.VerifyVerificationCode.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.VerifyVerificationCode {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.VerifyVerificationCode.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.GetAuthorizationInstructions.Request {
    class func parseFromNSData(data:NSData) -> UserService.GetAuthorizationInstructions.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetAuthorizationInstructions.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.GetAuthorizationInstructions.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetAuthorizationInstructions.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.GetAuthorizationInstructions.Response {
    class func parseFromNSData(data:NSData) -> UserService.GetAuthorizationInstructions.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetAuthorizationInstructions.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.GetAuthorizationInstructions.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetAuthorizationInstructions.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.GetAuthorizationInstructions {
    class func parseFromNSData(data:NSData) -> UserService.GetAuthorizationInstructions {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetAuthorizationInstructions.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.GetAuthorizationInstructions {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetAuthorizationInstructions.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.CompleteAuthorization.Request {
    class func parseFromNSData(data:NSData) -> UserService.CompleteAuthorization.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CompleteAuthorization.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.CompleteAuthorization.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CompleteAuthorization.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.CompleteAuthorization.Response {
    class func parseFromNSData(data:NSData) -> UserService.CompleteAuthorization.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CompleteAuthorization.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.CompleteAuthorization.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CompleteAuthorization.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.CompleteAuthorization {
    class func parseFromNSData(data:NSData) -> UserService.CompleteAuthorization {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CompleteAuthorization.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.CompleteAuthorization {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.CompleteAuthorization.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.DeleteIdentity.Request {
    class func parseFromNSData(data:NSData) -> UserService.DeleteIdentity.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.DeleteIdentity.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.DeleteIdentity.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.DeleteIdentity.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.DeleteIdentity.Response {
    class func parseFromNSData(data:NSData) -> UserService.DeleteIdentity.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.DeleteIdentity.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.DeleteIdentity.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.DeleteIdentity.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.DeleteIdentity {
    class func parseFromNSData(data:NSData) -> UserService.DeleteIdentity {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.DeleteIdentity.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.DeleteIdentity {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.DeleteIdentity.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.GetIdentities.Request {
    class func parseFromNSData(data:NSData) -> UserService.GetIdentities.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetIdentities.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.GetIdentities.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetIdentities.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.GetIdentities.Response {
    class func parseFromNSData(data:NSData) -> UserService.GetIdentities.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetIdentities.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.GetIdentities.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetIdentities.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.GetIdentities {
    class func parseFromNSData(data:NSData) -> UserService.GetIdentities {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetIdentities.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.GetIdentities {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.GetIdentities.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.RecordDevice.Request {
    class func parseFromNSData(data:NSData) -> UserService.RecordDevice.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.RecordDevice.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.RecordDevice.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.RecordDevice.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.RecordDevice.Response {
    class func parseFromNSData(data:NSData) -> UserService.RecordDevice.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.RecordDevice.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.RecordDevice.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.RecordDevice.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.RecordDevice {
    class func parseFromNSData(data:NSData) -> UserService.RecordDevice {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.RecordDevice.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.RecordDevice {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.RecordDevice.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.RequestAccess.Request {
    class func parseFromNSData(data:NSData) -> UserService.RequestAccess.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.RequestAccess.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.RequestAccess.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.RequestAccess.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.RequestAccess.Response {
    class func parseFromNSData(data:NSData) -> UserService.RequestAccess.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.RequestAccess.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.RequestAccess.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.RequestAccess.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService.RequestAccess {
    class func parseFromNSData(data:NSData) -> UserService.RequestAccess {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.RequestAccess.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService.RequestAccess {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.RequestAccess.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension UserService {
    class func parseFromNSData(data:NSData) -> UserService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> UserService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return UserService.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
