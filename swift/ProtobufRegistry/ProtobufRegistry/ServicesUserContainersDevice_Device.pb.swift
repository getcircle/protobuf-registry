// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.User.Containers{ public struct Device { }}

public func == (lhs: Services.User.Containers.Device.DeviceV1, rhs: Services.User.Containers.Device.DeviceV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasNotificationToken == rhs.hasNotificationToken) && (!lhs.hasNotificationToken || lhs.notificationToken == rhs.notificationToken)
  fieldCheck = fieldCheck && (lhs.hasPlatform == rhs.hasPlatform) && (!lhs.hasPlatform || lhs.platform == rhs.platform)
  fieldCheck = fieldCheck && (lhs.hasOsVersion == rhs.hasOsVersion) && (!lhs.hasOsVersion || lhs.osVersion == rhs.osVersion)
  fieldCheck = fieldCheck && (lhs.hasAppVersion == rhs.hasAppVersion) && (!lhs.hasAppVersion || lhs.appVersion == rhs.appVersion)
  fieldCheck = fieldCheck && (lhs.hasDeviceUuid == rhs.hasDeviceUuid) && (!lhs.hasDeviceUuid || lhs.deviceUuid == rhs.deviceUuid)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  fieldCheck = fieldCheck && (lhs.hasLanguagePreference == rhs.hasLanguagePreference) && (!lhs.hasLanguagePreference || lhs.languagePreference == rhs.languagePreference)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.User.Containers.Device {
  public struct DeviceRoot {
    public static var sharedInstance : DeviceRoot {
     struct Static {
         static let instance : DeviceRoot = DeviceRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class DeviceV1 : GeneratedMessage, GeneratedMessageProtocol {
    public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "notificationToken": return notificationToken
           case "platform": return platform
           case "osVersion": return osVersion
           case "appVersion": return appVersion
           case "deviceUuid": return deviceUuid
           case "userId": return userId
           case "languagePreference": return languagePreference
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasNotificationToken:Bool = false
    public private(set) var notificationToken:String = ""

    public private(set) var hasPlatform:Bool = false
    public private(set) var platform:String = ""

    public private(set) var hasOsVersion:Bool = false
    public private(set) var osVersion:String = ""

    public private(set) var hasAppVersion:Bool = false
    public private(set) var appVersion:String = ""

    public private(set) var hasDeviceUuid:Bool = false
    public private(set) var deviceUuid:String = ""

    public private(set) var hasUserId:Bool = false
    public private(set) var userId:String = ""

    public private(set) var hasLanguagePreference:Bool = false
    public private(set) var languagePreference:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasNotificationToken {
        output.writeString(3, value:notificationToken)
      }
      if hasPlatform {
        output.writeString(4, value:platform)
      }
      if hasOsVersion {
        output.writeString(5, value:osVersion)
      }
      if hasAppVersion {
        output.writeString(6, value:appVersion)
      }
      if hasDeviceUuid {
        output.writeString(7, value:deviceUuid)
      }
      if hasUserId {
        output.writeString(8, value:userId)
      }
      if hasLanguagePreference {
        output.writeString(9, value:languagePreference)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasNotificationToken {
        serialize_size += notificationToken.computeStringSize(3)
      }
      if hasPlatform {
        serialize_size += platform.computeStringSize(4)
      }
      if hasOsVersion {
        serialize_size += osVersion.computeStringSize(5)
      }
      if hasAppVersion {
        serialize_size += appVersion.computeStringSize(6)
      }
      if hasDeviceUuid {
        serialize_size += deviceUuid.computeStringSize(7)
      }
      if hasUserId {
        serialize_size += userId.computeStringSize(8)
      }
      if hasLanguagePreference {
        serialize_size += languagePreference.computeStringSize(9)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.User.Containers.Device.DeviceV1 {
      return Services.User.Containers.Device.DeviceV1.builder().mergeFromData(data, extensionRegistry:Services.User.Containers.Device.DeviceRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.Device.DeviceV1 {
      return Services.User.Containers.Device.DeviceV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.User.Containers.Device.DeviceV1 {
      return Services.User.Containers.Device.DeviceV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.User.Containers.Device.DeviceV1 {
      return Services.User.Containers.Device.DeviceV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.User.Containers.Device.DeviceV1 {
      return Services.User.Containers.Device.DeviceV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.Device.DeviceV1 {
      return Services.User.Containers.Device.DeviceV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.User.Containers.Device.DeviceV1Builder {
      return Services.User.Containers.Device.DeviceV1.classBuilder() as! Services.User.Containers.Device.DeviceV1Builder
    }
    public func builder() -> Services.User.Containers.Device.DeviceV1Builder {
      return classBuilder() as! Services.User.Containers.Device.DeviceV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Containers.Device.DeviceV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Containers.Device.DeviceV1.builder()
    }
    public func toBuilder() -> Services.User.Containers.Device.DeviceV1Builder {
      return Services.User.Containers.Device.DeviceV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Containers.Device.DeviceV1) -> Services.User.Containers.Device.DeviceV1Builder {
      return Services.User.Containers.Device.DeviceV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasNotificationToken {
        output += "\(indent) notificationToken: \(notificationToken) \n"
      }
      if hasPlatform {
        output += "\(indent) platform: \(platform) \n"
      }
      if hasOsVersion {
        output += "\(indent) osVersion: \(osVersion) \n"
      }
      if hasAppVersion {
        output += "\(indent) appVersion: \(appVersion) \n"
      }
      if hasDeviceUuid {
        output += "\(indent) deviceUuid: \(deviceUuid) \n"
      }
      if hasUserId {
        output += "\(indent) userId: \(userId) \n"
      }
      if hasLanguagePreference {
        output += "\(indent) languagePreference: \(languagePreference) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasNotificationToken {
               hashCode = (hashCode &* 31) &+ notificationToken.hashValue
            }
            if hasPlatform {
               hashCode = (hashCode &* 31) &+ platform.hashValue
            }
            if hasOsVersion {
               hashCode = (hashCode &* 31) &+ osVersion.hashValue
            }
            if hasAppVersion {
               hashCode = (hashCode &* 31) &+ appVersion.hashValue
            }
            if hasDeviceUuid {
               hashCode = (hashCode &* 31) &+ deviceUuid.hashValue
            }
            if hasUserId {
               hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            if hasLanguagePreference {
               hashCode = (hashCode &* 31) &+ languagePreference.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Containers.Device.DeviceV1"
    }
    override public func className() -> String {
        return "Services.User.Containers.Device.DeviceV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Containers.Device.DeviceV1.self
    }
    //Meta information declaration end

  }

  final public class DeviceV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.User.Containers.Device.DeviceV1

    required override public init () {
       builderResult = Services.User.Containers.Device.DeviceV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.User.Containers.Device.DeviceV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.User.Containers.Device.DeviceV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.User.Containers.Device.DeviceV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.User.Containers.Device.DeviceV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasNotificationToken:Bool {
         get {
              return builderResult.hasNotificationToken
         }
    }
    public var notificationToken:String {
         get {
              return builderResult.notificationToken
         }
         set (value) {
             builderResult.hasNotificationToken = true
             builderResult.notificationToken = value
         }
    }
    public func setNotificationToken(value:String)-> Services.User.Containers.Device.DeviceV1Builder {
      self.notificationToken = value
      return self
    }
    public func clearNotificationToken() -> Services.User.Containers.Device.DeviceV1Builder{
         builderResult.hasNotificationToken = false
         builderResult.notificationToken = ""
         return self
    }
    public var hasPlatform:Bool {
         get {
              return builderResult.hasPlatform
         }
    }
    public var platform:String {
         get {
              return builderResult.platform
         }
         set (value) {
             builderResult.hasPlatform = true
             builderResult.platform = value
         }
    }
    public func setPlatform(value:String)-> Services.User.Containers.Device.DeviceV1Builder {
      self.platform = value
      return self
    }
    public func clearPlatform() -> Services.User.Containers.Device.DeviceV1Builder{
         builderResult.hasPlatform = false
         builderResult.platform = ""
         return self
    }
    public var hasOsVersion:Bool {
         get {
              return builderResult.hasOsVersion
         }
    }
    public var osVersion:String {
         get {
              return builderResult.osVersion
         }
         set (value) {
             builderResult.hasOsVersion = true
             builderResult.osVersion = value
         }
    }
    public func setOsVersion(value:String)-> Services.User.Containers.Device.DeviceV1Builder {
      self.osVersion = value
      return self
    }
    public func clearOsVersion() -> Services.User.Containers.Device.DeviceV1Builder{
         builderResult.hasOsVersion = false
         builderResult.osVersion = ""
         return self
    }
    public var hasAppVersion:Bool {
         get {
              return builderResult.hasAppVersion
         }
    }
    public var appVersion:String {
         get {
              return builderResult.appVersion
         }
         set (value) {
             builderResult.hasAppVersion = true
             builderResult.appVersion = value
         }
    }
    public func setAppVersion(value:String)-> Services.User.Containers.Device.DeviceV1Builder {
      self.appVersion = value
      return self
    }
    public func clearAppVersion() -> Services.User.Containers.Device.DeviceV1Builder{
         builderResult.hasAppVersion = false
         builderResult.appVersion = ""
         return self
    }
    public var hasDeviceUuid:Bool {
         get {
              return builderResult.hasDeviceUuid
         }
    }
    public var deviceUuid:String {
         get {
              return builderResult.deviceUuid
         }
         set (value) {
             builderResult.hasDeviceUuid = true
             builderResult.deviceUuid = value
         }
    }
    public func setDeviceUuid(value:String)-> Services.User.Containers.Device.DeviceV1Builder {
      self.deviceUuid = value
      return self
    }
    public func clearDeviceUuid() -> Services.User.Containers.Device.DeviceV1Builder{
         builderResult.hasDeviceUuid = false
         builderResult.deviceUuid = ""
         return self
    }
    public var hasUserId:Bool {
         get {
              return builderResult.hasUserId
         }
    }
    public var userId:String {
         get {
              return builderResult.userId
         }
         set (value) {
             builderResult.hasUserId = true
             builderResult.userId = value
         }
    }
    public func setUserId(value:String)-> Services.User.Containers.Device.DeviceV1Builder {
      self.userId = value
      return self
    }
    public func clearUserId() -> Services.User.Containers.Device.DeviceV1Builder{
         builderResult.hasUserId = false
         builderResult.userId = ""
         return self
    }
    public var hasLanguagePreference:Bool {
         get {
              return builderResult.hasLanguagePreference
         }
    }
    public var languagePreference:String {
         get {
              return builderResult.languagePreference
         }
         set (value) {
             builderResult.hasLanguagePreference = true
             builderResult.languagePreference = value
         }
    }
    public func setLanguagePreference(value:String)-> Services.User.Containers.Device.DeviceV1Builder {
      self.languagePreference = value
      return self
    }
    public func clearLanguagePreference() -> Services.User.Containers.Device.DeviceV1Builder{
         builderResult.hasLanguagePreference = false
         builderResult.languagePreference = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.User.Containers.Device.DeviceV1Builder {
      builderResult = Services.User.Containers.Device.DeviceV1()
      return self
    }
    public override func clone() -> Services.User.Containers.Device.DeviceV1Builder {
      return Services.User.Containers.Device.DeviceV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.User.Containers.Device.DeviceV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.User.Containers.Device.DeviceV1 {
      var returnMe:Services.User.Containers.Device.DeviceV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.User.Containers.Device.DeviceV1) -> Services.User.Containers.Device.DeviceV1Builder {
      if (other == Services.User.Containers.Device.DeviceV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasNotificationToken {
           notificationToken = other.notificationToken
      }
      if other.hasPlatform {
           platform = other.platform
      }
      if other.hasOsVersion {
           osVersion = other.osVersion
      }
      if other.hasAppVersion {
           appVersion = other.appVersion
      }
      if other.hasDeviceUuid {
           deviceUuid = other.deviceUuid
      }
      if other.hasUserId {
           userId = other.userId
      }
      if other.hasLanguagePreference {
           languagePreference = other.languagePreference
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.User.Containers.Device.DeviceV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.Device.DeviceV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          notificationToken = input.readString()

        case 34 :
          platform = input.readString()

        case 42 :
          osVersion = input.readString()

        case 50 :
          appVersion = input.readString()

        case 58 :
          deviceUuid = input.readString()

        case 66 :
          userId = input.readString()

        case 74 :
          languagePreference = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
