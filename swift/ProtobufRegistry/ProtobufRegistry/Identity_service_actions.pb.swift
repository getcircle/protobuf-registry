// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
import ProtocolBuffers

internal struct IdentityServiceActionsRoot {
  internal static var sharedInstance : IdentityServiceActionsRoot {
   struct Static {
       static let instance : IdentityServiceActionsRoot = IdentityServiceActionsRoot()
   }
   return Static.instance
  }
  var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    IdentityRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  internal func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

internal func == (lhs: IdentityService.GetIdentity, rhs: IdentityService.GetIdentity) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IdentityService.GetIdentities, rhs: IdentityService.GetIdentities) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IdentityService.CreateIdentity, rhs: IdentityService.CreateIdentity) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: IdentityService, rhs: IdentityService) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final internal class IdentityService : GeneratedMessage {


  //Nested type declaration start

    final internal class GetIdentity : GeneratedMessage {


      //Nested type declaration start

        final internal class Request : GeneratedMessage {
          private(set) var types:Identity.Types = Identity.Types.Internal
          private(set) var hasTypes:Bool = false
          private(set) var hasKey:Bool = false
          private(set) var key:String = ""

          required internal init() {
               super.init()
          }
          override internal func isInitialized() -> Bool {
           return true
          }
          override internal func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasTypes {
              output.writeEnum(1, value:types.rawValue)
            }
            if hasKey {
              output.writeString(2, value:key)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override internal func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if (hasTypes) {
              size += WireFormat.computeEnumSize(1, value:types.rawValue)
            }
            if hasKey {
              size += WireFormat.computeStringSize(2, value:key)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          internal class func parseFromData(data:[Byte]) -> IdentityService.GetIdentity.Request {
            return IdentityService.GetIdentity.Request.builder().mergeFromData(data).build()
          }
          internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentity.Request {
            return IdentityService.GetIdentity.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          internal class func parseFromInputStream(input:NSInputStream) -> IdentityService.GetIdentity.Request {
            return IdentityService.GetIdentity.Request.builder().mergeFromInputStream(input).build()
          }
          internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IdentityService.GetIdentity.Request {
            return IdentityService.GetIdentity.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          internal class func parseFromCodedInputStream(input:CodedInputStream) -> IdentityService.GetIdentity.Request {
            return IdentityService.GetIdentity.Request.builder().mergeFromCodedInputStream(input).build()
          }
          internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentity.Request {
            return IdentityService.GetIdentity.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          internal class func builder() -> IdentityService.GetIdentity.RequestBuilder {
            return IdentityService.GetIdentity.Request.classBuilder() as IdentityService.GetIdentity.RequestBuilder
          }
          internal func builder() -> IdentityService.GetIdentity.RequestBuilder {
            return classBuilder() as IdentityService.GetIdentity.RequestBuilder
          }
          internal override class func classBuilder() -> MessageBuilder {
            return IdentityService.GetIdentity.RequestBuilder()
          }
          internal override func classBuilder() -> MessageBuilder {
            return IdentityService.GetIdentity.Request.builder()
          }
          internal func toBuilder() -> IdentityService.GetIdentity.RequestBuilder {
            return IdentityService.GetIdentity.Request.builderWithPrototype(self)
          }
          internal class func builderWithPrototype(prototype:IdentityService.GetIdentity.Request) -> IdentityService.GetIdentity.RequestBuilder {
            return IdentityService.GetIdentity.Request.builder().mergeFrom(prototype)
          }
          override internal func writeDescriptionTo(inout output:String, indent:String) {
            if (hasTypes) {
              output += "\(indent) types: \(types.rawValue)\n"
            }
            if hasKey {
              output += "\(indent) key: \(key) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override internal var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasTypes {
                     hashCode = (hashCode &* 31) &+ Int(types.rawValue)
                  }
                  if hasKey {
                     hashCode = (hashCode &* 31) &+ key.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override internal class func className() -> String {
              return "IdentityService.GetIdentity.Request"
          }
          override internal func className() -> String {
              return "IdentityService.GetIdentity.Request"
          }
          override internal func classMetaType() -> GeneratedMessage.Type {
              return IdentityService.GetIdentity.Request.self
          }


          //Meta information declaration end

        }

        final internal class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:IdentityService.GetIdentity.Request

          required override internal init () {
             builderResult = IdentityService.GetIdentity.Request()
             super.init()
          }
            var hasTypes:Bool{
                get {
                    return builderResult.hasTypes
                }
            }
            var types:Identity.Types {
                get {
                    return builderResult.types
                }
                set (value) {
                    builderResult.hasTypes = true
                    builderResult.types = value
                }
            }
            internal func clearTypes() -> IdentityService.GetIdentity.RequestBuilder {
               builderResult.hasTypes = false
               builderResult.types = .Internal
               return self
            }
          var hasKey:Bool {
               get {
                    return builderResult.hasKey
               }
          }
          var key:String {
               get {
                    return builderResult.key
               }
               set (value) {
                   builderResult.hasKey = true
                   builderResult.key = value
               }
          }
          internal func clearKey() -> IdentityService.GetIdentity.RequestBuilder{
               builderResult.hasKey = false
               builderResult.key = ""
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> IdentityService.GetIdentity.RequestBuilder {
            builderResult = IdentityService.GetIdentity.Request()
            return self
          }
          internal override func clone() -> IdentityService.GetIdentity.RequestBuilder {
            return IdentityService.GetIdentity.Request.builderWithPrototype(builderResult)
          }
          internal override func build() -> IdentityService.GetIdentity.Request {
               checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> IdentityService.GetIdentity.Request {
            var returnMe:IdentityService.GetIdentity.Request = builderResult
            return returnMe
          }
          internal func mergeFrom(other:IdentityService.GetIdentity.Request) -> IdentityService.GetIdentity.RequestBuilder {
            if (other == IdentityService.GetIdentity.Request()) {
             return self
            }
            if other.hasTypes {
                 types = other.types
            }
            if other.hasKey {
                 key = other.key
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IdentityService.GetIdentity.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentity.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 8 :
                let valueInttypes = input.readEnum()
                if let enumstypes = Identity.Types(rawValue:valueInttypes){
                     types = enumstypes
                } else {
                     unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueInttypes))
                }

              case 18 :
                key = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final internal class Response : GeneratedMessage {
          private(set) var hasIdentity:Bool = false
          private(set) var identity:Identity = Identity()
          required internal init() {
               super.init()
          }
          override internal func isInitialized() -> Bool {
           return true
          }
          override internal func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasIdentity {
              output.writeMessage(1, value:identity)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override internal func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasIdentity {
              size += WireFormat.computeMessageSize(1, value:identity)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          internal class func parseFromData(data:[Byte]) -> IdentityService.GetIdentity.Response {
            return IdentityService.GetIdentity.Response.builder().mergeFromData(data).build()
          }
          internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentity.Response {
            return IdentityService.GetIdentity.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          internal class func parseFromInputStream(input:NSInputStream) -> IdentityService.GetIdentity.Response {
            return IdentityService.GetIdentity.Response.builder().mergeFromInputStream(input).build()
          }
          internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IdentityService.GetIdentity.Response {
            return IdentityService.GetIdentity.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          internal class func parseFromCodedInputStream(input:CodedInputStream) -> IdentityService.GetIdentity.Response {
            return IdentityService.GetIdentity.Response.builder().mergeFromCodedInputStream(input).build()
          }
          internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentity.Response {
            return IdentityService.GetIdentity.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          internal class func builder() -> IdentityService.GetIdentity.ResponseBuilder {
            return IdentityService.GetIdentity.Response.classBuilder() as IdentityService.GetIdentity.ResponseBuilder
          }
          internal func builder() -> IdentityService.GetIdentity.ResponseBuilder {
            return classBuilder() as IdentityService.GetIdentity.ResponseBuilder
          }
          internal override class func classBuilder() -> MessageBuilder {
            return IdentityService.GetIdentity.ResponseBuilder()
          }
          internal override func classBuilder() -> MessageBuilder {
            return IdentityService.GetIdentity.Response.builder()
          }
          internal func toBuilder() -> IdentityService.GetIdentity.ResponseBuilder {
            return IdentityService.GetIdentity.Response.builderWithPrototype(self)
          }
          internal class func builderWithPrototype(prototype:IdentityService.GetIdentity.Response) -> IdentityService.GetIdentity.ResponseBuilder {
            return IdentityService.GetIdentity.Response.builder().mergeFrom(prototype)
          }
          override internal func writeDescriptionTo(inout output:String, indent:String) {
            if hasIdentity {
              output += "\(indent) identity {\n"
              identity.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override internal var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasIdentity {
                    hashCode = (hashCode &* 31) &+ identity.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override internal class func className() -> String {
              return "IdentityService.GetIdentity.Response"
          }
          override internal func className() -> String {
              return "IdentityService.GetIdentity.Response"
          }
          override internal func classMetaType() -> GeneratedMessage.Type {
              return IdentityService.GetIdentity.Response.self
          }


          //Meta information declaration end

        }

        final internal class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:IdentityService.GetIdentity.Response

          required override internal init () {
             builderResult = IdentityService.GetIdentity.Response()
             super.init()
          }
          var hasIdentity:Bool {
               get {
                   return builderResult.hasIdentity
               }
          }
          var identity:Identity {
               get {
                   return builderResult.identity
               }
               set (value) {
                   builderResult.hasIdentity = true
                   builderResult.identity = value
               }
          }
          internal func setIdentityBuilder(builderForValue:IdentityBuilder) -> IdentityService.GetIdentity.ResponseBuilder {
            identity = builderForValue.build()
            return self
          }
          internal func mergeIdentity(value:Identity) -> IdentityService.GetIdentity.ResponseBuilder {
            if (builderResult.hasIdentity) {
              builderResult.identity = Identity.builderWithPrototype(builderResult.identity).mergeFrom(value).buildPartial()
            } else {
              builderResult.identity = value
            }
            builderResult.hasIdentity = true
            return self
          }
          internal func clearIdentity() -> IdentityService.GetIdentity.ResponseBuilder {
            builderResult.hasIdentity = false
            builderResult.identity = Identity()
            return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> IdentityService.GetIdentity.ResponseBuilder {
            builderResult = IdentityService.GetIdentity.Response()
            return self
          }
          internal override func clone() -> IdentityService.GetIdentity.ResponseBuilder {
            return IdentityService.GetIdentity.Response.builderWithPrototype(builderResult)
          }
          internal override func build() -> IdentityService.GetIdentity.Response {
               checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> IdentityService.GetIdentity.Response {
            var returnMe:IdentityService.GetIdentity.Response = builderResult
            return returnMe
          }
          internal func mergeFrom(other:IdentityService.GetIdentity.Response) -> IdentityService.GetIdentity.ResponseBuilder {
            if (other == IdentityService.GetIdentity.Response()) {
             return self
            }
            if (other.hasIdentity) {
                mergeIdentity(other.identity)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IdentityService.GetIdentity.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentity.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:IdentityBuilder = Identity.builder()
                if hasIdentity {
                  subBuilder.mergeFrom(identity)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                identity = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      required internal init() {
           super.init()
      }
      override internal func isInitialized() -> Bool {
       return true
      }
      override internal func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override internal func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      internal class func parseFromData(data:[Byte]) -> IdentityService.GetIdentity {
        return IdentityService.GetIdentity.builder().mergeFromData(data).build()
      }
      internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentity {
        return IdentityService.GetIdentity.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      internal class func parseFromInputStream(input:NSInputStream) -> IdentityService.GetIdentity {
        return IdentityService.GetIdentity.builder().mergeFromInputStream(input).build()
      }
      internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IdentityService.GetIdentity {
        return IdentityService.GetIdentity.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      internal class func parseFromCodedInputStream(input:CodedInputStream) -> IdentityService.GetIdentity {
        return IdentityService.GetIdentity.builder().mergeFromCodedInputStream(input).build()
      }
      internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentity {
        return IdentityService.GetIdentity.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      internal class func builder() -> IdentityService.GetIdentityBuilder {
        return IdentityService.GetIdentity.classBuilder() as IdentityService.GetIdentityBuilder
      }
      internal func builder() -> IdentityService.GetIdentityBuilder {
        return classBuilder() as IdentityService.GetIdentityBuilder
      }
      internal override class func classBuilder() -> MessageBuilder {
        return IdentityService.GetIdentityBuilder()
      }
      internal override func classBuilder() -> MessageBuilder {
        return IdentityService.GetIdentity.builder()
      }
      internal func toBuilder() -> IdentityService.GetIdentityBuilder {
        return IdentityService.GetIdentity.builderWithPrototype(self)
      }
      internal class func builderWithPrototype(prototype:IdentityService.GetIdentity) -> IdentityService.GetIdentityBuilder {
        return IdentityService.GetIdentity.builder().mergeFrom(prototype)
      }
      override internal func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override internal var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override internal class func className() -> String {
          return "IdentityService.GetIdentity"
      }
      override internal func className() -> String {
          return "IdentityService.GetIdentity"
      }
      override internal func classMetaType() -> GeneratedMessage.Type {
          return IdentityService.GetIdentity.self
      }


      //Meta information declaration end

    }

    final internal class GetIdentityBuilder : GeneratedMessageBuilder {
      private var builderResult:IdentityService.GetIdentity

      required override internal init () {
         builderResult = IdentityService.GetIdentity()
         super.init()
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> IdentityService.GetIdentityBuilder {
        builderResult = IdentityService.GetIdentity()
        return self
      }
      internal override func clone() -> IdentityService.GetIdentityBuilder {
        return IdentityService.GetIdentity.builderWithPrototype(builderResult)
      }
      internal override func build() -> IdentityService.GetIdentity {
           checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> IdentityService.GetIdentity {
        var returnMe:IdentityService.GetIdentity = builderResult
        return returnMe
      }
      internal func mergeFrom(other:IdentityService.GetIdentity) -> IdentityService.GetIdentityBuilder {
        if (other == IdentityService.GetIdentity()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IdentityService.GetIdentityBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentityBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final internal class GetIdentities : GeneratedMessage {


      //Nested type declaration start

        final internal class Request : GeneratedMessage {
          private(set) var hasUserId:Bool = false
          private(set) var userId:String = ""

          required internal init() {
               super.init()
          }
          override internal func isInitialized() -> Bool {
           return true
          }
          override internal func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasUserId {
              output.writeString(1, value:userId)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override internal func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasUserId {
              size += WireFormat.computeStringSize(1, value:userId)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          internal class func parseFromData(data:[Byte]) -> IdentityService.GetIdentities.Request {
            return IdentityService.GetIdentities.Request.builder().mergeFromData(data).build()
          }
          internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentities.Request {
            return IdentityService.GetIdentities.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          internal class func parseFromInputStream(input:NSInputStream) -> IdentityService.GetIdentities.Request {
            return IdentityService.GetIdentities.Request.builder().mergeFromInputStream(input).build()
          }
          internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IdentityService.GetIdentities.Request {
            return IdentityService.GetIdentities.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          internal class func parseFromCodedInputStream(input:CodedInputStream) -> IdentityService.GetIdentities.Request {
            return IdentityService.GetIdentities.Request.builder().mergeFromCodedInputStream(input).build()
          }
          internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentities.Request {
            return IdentityService.GetIdentities.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          internal class func builder() -> IdentityService.GetIdentities.RequestBuilder {
            return IdentityService.GetIdentities.Request.classBuilder() as IdentityService.GetIdentities.RequestBuilder
          }
          internal func builder() -> IdentityService.GetIdentities.RequestBuilder {
            return classBuilder() as IdentityService.GetIdentities.RequestBuilder
          }
          internal override class func classBuilder() -> MessageBuilder {
            return IdentityService.GetIdentities.RequestBuilder()
          }
          internal override func classBuilder() -> MessageBuilder {
            return IdentityService.GetIdentities.Request.builder()
          }
          internal func toBuilder() -> IdentityService.GetIdentities.RequestBuilder {
            return IdentityService.GetIdentities.Request.builderWithPrototype(self)
          }
          internal class func builderWithPrototype(prototype:IdentityService.GetIdentities.Request) -> IdentityService.GetIdentities.RequestBuilder {
            return IdentityService.GetIdentities.Request.builder().mergeFrom(prototype)
          }
          override internal func writeDescriptionTo(inout output:String, indent:String) {
            if hasUserId {
              output += "\(indent) userId: \(userId) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override internal var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasUserId {
                     hashCode = (hashCode &* 31) &+ userId.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override internal class func className() -> String {
              return "IdentityService.GetIdentities.Request"
          }
          override internal func className() -> String {
              return "IdentityService.GetIdentities.Request"
          }
          override internal func classMetaType() -> GeneratedMessage.Type {
              return IdentityService.GetIdentities.Request.self
          }


          //Meta information declaration end

        }

        final internal class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:IdentityService.GetIdentities.Request

          required override internal init () {
             builderResult = IdentityService.GetIdentities.Request()
             super.init()
          }
          var hasUserId:Bool {
               get {
                    return builderResult.hasUserId
               }
          }
          var userId:String {
               get {
                    return builderResult.userId
               }
               set (value) {
                   builderResult.hasUserId = true
                   builderResult.userId = value
               }
          }
          internal func clearUserId() -> IdentityService.GetIdentities.RequestBuilder{
               builderResult.hasUserId = false
               builderResult.userId = ""
               return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> IdentityService.GetIdentities.RequestBuilder {
            builderResult = IdentityService.GetIdentities.Request()
            return self
          }
          internal override func clone() -> IdentityService.GetIdentities.RequestBuilder {
            return IdentityService.GetIdentities.Request.builderWithPrototype(builderResult)
          }
          internal override func build() -> IdentityService.GetIdentities.Request {
               checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> IdentityService.GetIdentities.Request {
            var returnMe:IdentityService.GetIdentities.Request = builderResult
            return returnMe
          }
          internal func mergeFrom(other:IdentityService.GetIdentities.Request) -> IdentityService.GetIdentities.RequestBuilder {
            if (other == IdentityService.GetIdentities.Request()) {
             return self
            }
            if other.hasUserId {
                 userId = other.userId
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IdentityService.GetIdentities.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentities.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                userId = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final internal class Response : GeneratedMessage {
          private(set) var identities:Array<Identity>  = Array<Identity>()
          required internal init() {
               super.init()
          }
          override internal func isInitialized() -> Bool {
           return true
          }
          override internal func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementidentities in identities {
                output.writeMessage(1, value:oneElementidentities)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override internal func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementidentities in identities {
                size += WireFormat.computeMessageSize(1, value:oneElementidentities)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          internal class func parseFromData(data:[Byte]) -> IdentityService.GetIdentities.Response {
            return IdentityService.GetIdentities.Response.builder().mergeFromData(data).build()
          }
          internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentities.Response {
            return IdentityService.GetIdentities.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          internal class func parseFromInputStream(input:NSInputStream) -> IdentityService.GetIdentities.Response {
            return IdentityService.GetIdentities.Response.builder().mergeFromInputStream(input).build()
          }
          internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IdentityService.GetIdentities.Response {
            return IdentityService.GetIdentities.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          internal class func parseFromCodedInputStream(input:CodedInputStream) -> IdentityService.GetIdentities.Response {
            return IdentityService.GetIdentities.Response.builder().mergeFromCodedInputStream(input).build()
          }
          internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentities.Response {
            return IdentityService.GetIdentities.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          internal class func builder() -> IdentityService.GetIdentities.ResponseBuilder {
            return IdentityService.GetIdentities.Response.classBuilder() as IdentityService.GetIdentities.ResponseBuilder
          }
          internal func builder() -> IdentityService.GetIdentities.ResponseBuilder {
            return classBuilder() as IdentityService.GetIdentities.ResponseBuilder
          }
          internal override class func classBuilder() -> MessageBuilder {
            return IdentityService.GetIdentities.ResponseBuilder()
          }
          internal override func classBuilder() -> MessageBuilder {
            return IdentityService.GetIdentities.Response.builder()
          }
          internal func toBuilder() -> IdentityService.GetIdentities.ResponseBuilder {
            return IdentityService.GetIdentities.Response.builderWithPrototype(self)
          }
          internal class func builderWithPrototype(prototype:IdentityService.GetIdentities.Response) -> IdentityService.GetIdentities.ResponseBuilder {
            return IdentityService.GetIdentities.Response.builder().mergeFrom(prototype)
          }
          override internal func writeDescriptionTo(inout output:String, indent:String) {
            var identitiesElementIndex:Int = 0
            for oneElementidentities in identities {
                output += "\(indent) identities[\(identitiesElementIndex)] {\n"
                oneElementidentities.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                identitiesElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override internal var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementidentities in identities {
                      hashCode = (hashCode &* 31) &+ oneElementidentities.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override internal class func className() -> String {
              return "IdentityService.GetIdentities.Response"
          }
          override internal func className() -> String {
              return "IdentityService.GetIdentities.Response"
          }
          override internal func classMetaType() -> GeneratedMessage.Type {
              return IdentityService.GetIdentities.Response.self
          }


          //Meta information declaration end

        }

        final internal class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:IdentityService.GetIdentities.Response

          required override internal init () {
             builderResult = IdentityService.GetIdentities.Response()
             super.init()
          }
          var identities:Array<Identity> {
               get {
                   return builderResult.identities
               }
               set (value) {
                   builderResult.identities = value
               }
          }
          internal func clearIdentities() -> IdentityService.GetIdentities.ResponseBuilder {
            builderResult.identities.removeAll(keepCapacity: false)
            return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> IdentityService.GetIdentities.ResponseBuilder {
            builderResult = IdentityService.GetIdentities.Response()
            return self
          }
          internal override func clone() -> IdentityService.GetIdentities.ResponseBuilder {
            return IdentityService.GetIdentities.Response.builderWithPrototype(builderResult)
          }
          internal override func build() -> IdentityService.GetIdentities.Response {
               checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> IdentityService.GetIdentities.Response {
            var returnMe:IdentityService.GetIdentities.Response = builderResult
            return returnMe
          }
          internal func mergeFrom(other:IdentityService.GetIdentities.Response) -> IdentityService.GetIdentities.ResponseBuilder {
            if (other == IdentityService.GetIdentities.Response()) {
             return self
            }
            if !other.identities.isEmpty  {
               builderResult.identities += other.identities
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IdentityService.GetIdentities.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentities.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = Identity.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                identities += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      required internal init() {
           super.init()
      }
      override internal func isInitialized() -> Bool {
       return true
      }
      override internal func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override internal func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      internal class func parseFromData(data:[Byte]) -> IdentityService.GetIdentities {
        return IdentityService.GetIdentities.builder().mergeFromData(data).build()
      }
      internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentities {
        return IdentityService.GetIdentities.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      internal class func parseFromInputStream(input:NSInputStream) -> IdentityService.GetIdentities {
        return IdentityService.GetIdentities.builder().mergeFromInputStream(input).build()
      }
      internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IdentityService.GetIdentities {
        return IdentityService.GetIdentities.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      internal class func parseFromCodedInputStream(input:CodedInputStream) -> IdentityService.GetIdentities {
        return IdentityService.GetIdentities.builder().mergeFromCodedInputStream(input).build()
      }
      internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentities {
        return IdentityService.GetIdentities.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      internal class func builder() -> IdentityService.GetIdentitiesBuilder {
        return IdentityService.GetIdentities.classBuilder() as IdentityService.GetIdentitiesBuilder
      }
      internal func builder() -> IdentityService.GetIdentitiesBuilder {
        return classBuilder() as IdentityService.GetIdentitiesBuilder
      }
      internal override class func classBuilder() -> MessageBuilder {
        return IdentityService.GetIdentitiesBuilder()
      }
      internal override func classBuilder() -> MessageBuilder {
        return IdentityService.GetIdentities.builder()
      }
      internal func toBuilder() -> IdentityService.GetIdentitiesBuilder {
        return IdentityService.GetIdentities.builderWithPrototype(self)
      }
      internal class func builderWithPrototype(prototype:IdentityService.GetIdentities) -> IdentityService.GetIdentitiesBuilder {
        return IdentityService.GetIdentities.builder().mergeFrom(prototype)
      }
      override internal func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override internal var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override internal class func className() -> String {
          return "IdentityService.GetIdentities"
      }
      override internal func className() -> String {
          return "IdentityService.GetIdentities"
      }
      override internal func classMetaType() -> GeneratedMessage.Type {
          return IdentityService.GetIdentities.self
      }


      //Meta information declaration end

    }

    final internal class GetIdentitiesBuilder : GeneratedMessageBuilder {
      private var builderResult:IdentityService.GetIdentities

      required override internal init () {
         builderResult = IdentityService.GetIdentities()
         super.init()
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> IdentityService.GetIdentitiesBuilder {
        builderResult = IdentityService.GetIdentities()
        return self
      }
      internal override func clone() -> IdentityService.GetIdentitiesBuilder {
        return IdentityService.GetIdentities.builderWithPrototype(builderResult)
      }
      internal override func build() -> IdentityService.GetIdentities {
           checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> IdentityService.GetIdentities {
        var returnMe:IdentityService.GetIdentities = builderResult
        return returnMe
      }
      internal func mergeFrom(other:IdentityService.GetIdentities) -> IdentityService.GetIdentitiesBuilder {
        if (other == IdentityService.GetIdentities()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IdentityService.GetIdentitiesBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentitiesBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final internal class CreateIdentity : GeneratedMessage {


      //Nested type declaration start

        final internal class Request : GeneratedMessage {
          private(set) var hasIdentity:Bool = false
          private(set) var identity:Identity = Identity()
          required internal init() {
               super.init()
          }
          override internal func isInitialized() -> Bool {
           return true
          }
          override internal func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasIdentity {
              output.writeMessage(1, value:identity)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override internal func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasIdentity {
              size += WireFormat.computeMessageSize(1, value:identity)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          internal class func parseFromData(data:[Byte]) -> IdentityService.CreateIdentity.Request {
            return IdentityService.CreateIdentity.Request.builder().mergeFromData(data).build()
          }
          internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> IdentityService.CreateIdentity.Request {
            return IdentityService.CreateIdentity.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          internal class func parseFromInputStream(input:NSInputStream) -> IdentityService.CreateIdentity.Request {
            return IdentityService.CreateIdentity.Request.builder().mergeFromInputStream(input).build()
          }
          internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IdentityService.CreateIdentity.Request {
            return IdentityService.CreateIdentity.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          internal class func parseFromCodedInputStream(input:CodedInputStream) -> IdentityService.CreateIdentity.Request {
            return IdentityService.CreateIdentity.Request.builder().mergeFromCodedInputStream(input).build()
          }
          internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.CreateIdentity.Request {
            return IdentityService.CreateIdentity.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          internal class func builder() -> IdentityService.CreateIdentity.RequestBuilder {
            return IdentityService.CreateIdentity.Request.classBuilder() as IdentityService.CreateIdentity.RequestBuilder
          }
          internal func builder() -> IdentityService.CreateIdentity.RequestBuilder {
            return classBuilder() as IdentityService.CreateIdentity.RequestBuilder
          }
          internal override class func classBuilder() -> MessageBuilder {
            return IdentityService.CreateIdentity.RequestBuilder()
          }
          internal override func classBuilder() -> MessageBuilder {
            return IdentityService.CreateIdentity.Request.builder()
          }
          internal func toBuilder() -> IdentityService.CreateIdentity.RequestBuilder {
            return IdentityService.CreateIdentity.Request.builderWithPrototype(self)
          }
          internal class func builderWithPrototype(prototype:IdentityService.CreateIdentity.Request) -> IdentityService.CreateIdentity.RequestBuilder {
            return IdentityService.CreateIdentity.Request.builder().mergeFrom(prototype)
          }
          override internal func writeDescriptionTo(inout output:String, indent:String) {
            if hasIdentity {
              output += "\(indent) identity {\n"
              identity.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override internal var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasIdentity {
                    hashCode = (hashCode &* 31) &+ identity.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override internal class func className() -> String {
              return "IdentityService.CreateIdentity.Request"
          }
          override internal func className() -> String {
              return "IdentityService.CreateIdentity.Request"
          }
          override internal func classMetaType() -> GeneratedMessage.Type {
              return IdentityService.CreateIdentity.Request.self
          }


          //Meta information declaration end

        }

        final internal class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:IdentityService.CreateIdentity.Request

          required override internal init () {
             builderResult = IdentityService.CreateIdentity.Request()
             super.init()
          }
          var hasIdentity:Bool {
               get {
                   return builderResult.hasIdentity
               }
          }
          var identity:Identity {
               get {
                   return builderResult.identity
               }
               set (value) {
                   builderResult.hasIdentity = true
                   builderResult.identity = value
               }
          }
          internal func setIdentityBuilder(builderForValue:IdentityBuilder) -> IdentityService.CreateIdentity.RequestBuilder {
            identity = builderForValue.build()
            return self
          }
          internal func mergeIdentity(value:Identity) -> IdentityService.CreateIdentity.RequestBuilder {
            if (builderResult.hasIdentity) {
              builderResult.identity = Identity.builderWithPrototype(builderResult.identity).mergeFrom(value).buildPartial()
            } else {
              builderResult.identity = value
            }
            builderResult.hasIdentity = true
            return self
          }
          internal func clearIdentity() -> IdentityService.CreateIdentity.RequestBuilder {
            builderResult.hasIdentity = false
            builderResult.identity = Identity()
            return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> IdentityService.CreateIdentity.RequestBuilder {
            builderResult = IdentityService.CreateIdentity.Request()
            return self
          }
          internal override func clone() -> IdentityService.CreateIdentity.RequestBuilder {
            return IdentityService.CreateIdentity.Request.builderWithPrototype(builderResult)
          }
          internal override func build() -> IdentityService.CreateIdentity.Request {
               checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> IdentityService.CreateIdentity.Request {
            var returnMe:IdentityService.CreateIdentity.Request = builderResult
            return returnMe
          }
          internal func mergeFrom(other:IdentityService.CreateIdentity.Request) -> IdentityService.CreateIdentity.RequestBuilder {
            if (other == IdentityService.CreateIdentity.Request()) {
             return self
            }
            if (other.hasIdentity) {
                mergeIdentity(other.identity)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IdentityService.CreateIdentity.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.CreateIdentity.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:IdentityBuilder = Identity.builder()
                if hasIdentity {
                  subBuilder.mergeFrom(identity)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                identity = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final internal class Response : GeneratedMessage {
          private(set) var hasIdentity:Bool = false
          private(set) var identity:Identity = Identity()
          required internal init() {
               super.init()
          }
          override internal func isInitialized() -> Bool {
           return true
          }
          override internal func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasIdentity {
              output.writeMessage(1, value:identity)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override internal func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasIdentity {
              size += WireFormat.computeMessageSize(1, value:identity)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          internal class func parseFromData(data:[Byte]) -> IdentityService.CreateIdentity.Response {
            return IdentityService.CreateIdentity.Response.builder().mergeFromData(data).build()
          }
          internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> IdentityService.CreateIdentity.Response {
            return IdentityService.CreateIdentity.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          internal class func parseFromInputStream(input:NSInputStream) -> IdentityService.CreateIdentity.Response {
            return IdentityService.CreateIdentity.Response.builder().mergeFromInputStream(input).build()
          }
          internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IdentityService.CreateIdentity.Response {
            return IdentityService.CreateIdentity.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          internal class func parseFromCodedInputStream(input:CodedInputStream) -> IdentityService.CreateIdentity.Response {
            return IdentityService.CreateIdentity.Response.builder().mergeFromCodedInputStream(input).build()
          }
          internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.CreateIdentity.Response {
            return IdentityService.CreateIdentity.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          internal class func builder() -> IdentityService.CreateIdentity.ResponseBuilder {
            return IdentityService.CreateIdentity.Response.classBuilder() as IdentityService.CreateIdentity.ResponseBuilder
          }
          internal func builder() -> IdentityService.CreateIdentity.ResponseBuilder {
            return classBuilder() as IdentityService.CreateIdentity.ResponseBuilder
          }
          internal override class func classBuilder() -> MessageBuilder {
            return IdentityService.CreateIdentity.ResponseBuilder()
          }
          internal override func classBuilder() -> MessageBuilder {
            return IdentityService.CreateIdentity.Response.builder()
          }
          internal func toBuilder() -> IdentityService.CreateIdentity.ResponseBuilder {
            return IdentityService.CreateIdentity.Response.builderWithPrototype(self)
          }
          internal class func builderWithPrototype(prototype:IdentityService.CreateIdentity.Response) -> IdentityService.CreateIdentity.ResponseBuilder {
            return IdentityService.CreateIdentity.Response.builder().mergeFrom(prototype)
          }
          override internal func writeDescriptionTo(inout output:String, indent:String) {
            if hasIdentity {
              output += "\(indent) identity {\n"
              identity.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override internal var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasIdentity {
                    hashCode = (hashCode &* 31) &+ identity.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override internal class func className() -> String {
              return "IdentityService.CreateIdentity.Response"
          }
          override internal func className() -> String {
              return "IdentityService.CreateIdentity.Response"
          }
          override internal func classMetaType() -> GeneratedMessage.Type {
              return IdentityService.CreateIdentity.Response.self
          }


          //Meta information declaration end

        }

        final internal class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:IdentityService.CreateIdentity.Response

          required override internal init () {
             builderResult = IdentityService.CreateIdentity.Response()
             super.init()
          }
          var hasIdentity:Bool {
               get {
                   return builderResult.hasIdentity
               }
          }
          var identity:Identity {
               get {
                   return builderResult.identity
               }
               set (value) {
                   builderResult.hasIdentity = true
                   builderResult.identity = value
               }
          }
          internal func setIdentityBuilder(builderForValue:IdentityBuilder) -> IdentityService.CreateIdentity.ResponseBuilder {
            identity = builderForValue.build()
            return self
          }
          internal func mergeIdentity(value:Identity) -> IdentityService.CreateIdentity.ResponseBuilder {
            if (builderResult.hasIdentity) {
              builderResult.identity = Identity.builderWithPrototype(builderResult.identity).mergeFrom(value).buildPartial()
            } else {
              builderResult.identity = value
            }
            builderResult.hasIdentity = true
            return self
          }
          internal func clearIdentity() -> IdentityService.CreateIdentity.ResponseBuilder {
            builderResult.hasIdentity = false
            builderResult.identity = Identity()
            return self
          }
          override internal var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          internal override func clear() -> IdentityService.CreateIdentity.ResponseBuilder {
            builderResult = IdentityService.CreateIdentity.Response()
            return self
          }
          internal override func clone() -> IdentityService.CreateIdentity.ResponseBuilder {
            return IdentityService.CreateIdentity.Response.builderWithPrototype(builderResult)
          }
          internal override func build() -> IdentityService.CreateIdentity.Response {
               checkInitialized()
               return buildPartial()
          }
          internal func buildPartial() -> IdentityService.CreateIdentity.Response {
            var returnMe:IdentityService.CreateIdentity.Response = builderResult
            return returnMe
          }
          internal func mergeFrom(other:IdentityService.CreateIdentity.Response) -> IdentityService.CreateIdentity.ResponseBuilder {
            if (other == IdentityService.CreateIdentity.Response()) {
             return self
            }
            if (other.hasIdentity) {
                mergeIdentity(other.identity)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IdentityService.CreateIdentity.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.CreateIdentity.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:IdentityBuilder = Identity.builder()
                if hasIdentity {
                  subBuilder.mergeFrom(identity)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                identity = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      required internal init() {
           super.init()
      }
      override internal func isInitialized() -> Bool {
       return true
      }
      override internal func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override internal func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      internal class func parseFromData(data:[Byte]) -> IdentityService.CreateIdentity {
        return IdentityService.CreateIdentity.builder().mergeFromData(data).build()
      }
      internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> IdentityService.CreateIdentity {
        return IdentityService.CreateIdentity.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      internal class func parseFromInputStream(input:NSInputStream) -> IdentityService.CreateIdentity {
        return IdentityService.CreateIdentity.builder().mergeFromInputStream(input).build()
      }
      internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IdentityService.CreateIdentity {
        return IdentityService.CreateIdentity.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      internal class func parseFromCodedInputStream(input:CodedInputStream) -> IdentityService.CreateIdentity {
        return IdentityService.CreateIdentity.builder().mergeFromCodedInputStream(input).build()
      }
      internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.CreateIdentity {
        return IdentityService.CreateIdentity.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      internal class func builder() -> IdentityService.CreateIdentityBuilder {
        return IdentityService.CreateIdentity.classBuilder() as IdentityService.CreateIdentityBuilder
      }
      internal func builder() -> IdentityService.CreateIdentityBuilder {
        return classBuilder() as IdentityService.CreateIdentityBuilder
      }
      internal override class func classBuilder() -> MessageBuilder {
        return IdentityService.CreateIdentityBuilder()
      }
      internal override func classBuilder() -> MessageBuilder {
        return IdentityService.CreateIdentity.builder()
      }
      internal func toBuilder() -> IdentityService.CreateIdentityBuilder {
        return IdentityService.CreateIdentity.builderWithPrototype(self)
      }
      internal class func builderWithPrototype(prototype:IdentityService.CreateIdentity) -> IdentityService.CreateIdentityBuilder {
        return IdentityService.CreateIdentity.builder().mergeFrom(prototype)
      }
      override internal func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override internal var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override internal class func className() -> String {
          return "IdentityService.CreateIdentity"
      }
      override internal func className() -> String {
          return "IdentityService.CreateIdentity"
      }
      override internal func classMetaType() -> GeneratedMessage.Type {
          return IdentityService.CreateIdentity.self
      }


      //Meta information declaration end

    }

    final internal class CreateIdentityBuilder : GeneratedMessageBuilder {
      private var builderResult:IdentityService.CreateIdentity

      required override internal init () {
         builderResult = IdentityService.CreateIdentity()
         super.init()
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> IdentityService.CreateIdentityBuilder {
        builderResult = IdentityService.CreateIdentity()
        return self
      }
      internal override func clone() -> IdentityService.CreateIdentityBuilder {
        return IdentityService.CreateIdentity.builderWithPrototype(builderResult)
      }
      internal override func build() -> IdentityService.CreateIdentity {
           checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> IdentityService.CreateIdentity {
        var returnMe:IdentityService.CreateIdentity = builderResult
        return returnMe
      }
      internal func mergeFrom(other:IdentityService.CreateIdentity) -> IdentityService.CreateIdentityBuilder {
        if (other == IdentityService.CreateIdentity()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IdentityService.CreateIdentityBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService.CreateIdentityBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> IdentityService {
    return IdentityService.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> IdentityService {
    return IdentityService.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> IdentityService {
    return IdentityService.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->IdentityService {
    return IdentityService.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> IdentityService {
    return IdentityService.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityService {
    return IdentityService.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> IdentityServiceBuilder {
    return IdentityService.classBuilder() as IdentityServiceBuilder
  }
  internal func builder() -> IdentityServiceBuilder {
    return classBuilder() as IdentityServiceBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return IdentityServiceBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return IdentityService.builder()
  }
  internal func toBuilder() -> IdentityServiceBuilder {
    return IdentityService.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:IdentityService) -> IdentityServiceBuilder {
    return IdentityService.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "IdentityService"
  }
  override internal func className() -> String {
      return "IdentityService"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return IdentityService.self
  }


  //Meta information declaration end

}

final internal class IdentityServiceBuilder : GeneratedMessageBuilder {
  private var builderResult:IdentityService

  required override internal init () {
     builderResult = IdentityService()
     super.init()
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> IdentityServiceBuilder {
    builderResult = IdentityService()
    return self
  }
  internal override func clone() -> IdentityServiceBuilder {
    return IdentityService.builderWithPrototype(builderResult)
  }
  internal override func build() -> IdentityService {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> IdentityService {
    var returnMe:IdentityService = builderResult
    return returnMe
  }
  internal func mergeFrom(other:IdentityService) -> IdentityServiceBuilder {
    if (other == IdentityService()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->IdentityServiceBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> IdentityServiceBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


internal extension IdentityService.GetIdentity {
    class func parseFromNSData(data:NSData) -> IdentityService.GetIdentity {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return IdentityService.GetIdentity.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentity {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return IdentityService.GetIdentity.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension IdentityService.GetIdentities {
    class func parseFromNSData(data:NSData) -> IdentityService.GetIdentities {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return IdentityService.GetIdentities.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> IdentityService.GetIdentities {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return IdentityService.GetIdentities.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension IdentityService.CreateIdentity {
    class func parseFromNSData(data:NSData) -> IdentityService.CreateIdentity {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return IdentityService.CreateIdentity.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> IdentityService.CreateIdentity {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return IdentityService.CreateIdentity.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension IdentityService {
    class func parseFromNSData(data:NSData) -> IdentityService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return IdentityService.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> IdentityService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return IdentityService.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
