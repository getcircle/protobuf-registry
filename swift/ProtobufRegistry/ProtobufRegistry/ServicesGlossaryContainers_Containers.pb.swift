// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.Glossary{ public struct Containers { }}

public func == (lhs: Services.Glossary.Containers.TermV1, rhs: Services.Glossary.Containers.TermV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasDefinition == rhs.hasDefinition) && (!lhs.hasDefinition || lhs.definition == rhs.definition)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.hasCreatedByProfile == rhs.hasCreatedByProfile) && (!lhs.hasCreatedByProfile || lhs.createdByProfile == rhs.createdByProfile)
  fieldCheck = fieldCheck && (lhs.hasCreated == rhs.hasCreated) && (!lhs.hasCreated || lhs.created == rhs.created)
  fieldCheck = fieldCheck && (lhs.hasChanged == rhs.hasChanged) && (!lhs.hasChanged || lhs.changed == rhs.changed)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.Glossary.Containers {
  public struct ContainersRoot {
    public static var sharedInstance : ContainersRoot {
     struct Static {
         static let instance : ContainersRoot = ContainersRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class TermV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "name": return name
           case "definition": return definition
           case "organizationId": return organizationId
           case "createdByProfile": return createdByProfile
           case "created": return created
           case "changed": return changed
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasDefinition:Bool = false
    public private(set) var definition:String = ""

    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    public private(set) var hasCreatedByProfile:Bool = false
    public private(set) var createdByProfile:String = ""

    public private(set) var hasCreated:Bool = false
    public private(set) var created:String = ""

    public private(set) var hasChanged:Bool = false
    public private(set) var changed:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasName {
        output.writeString(2, value:name)
      }
      if hasDefinition {
        output.writeString(3, value:definition)
      }
      if hasOrganizationId {
        output.writeString(4, value:organizationId)
      }
      if hasCreatedByProfile {
        output.writeString(5, value:createdByProfile)
      }
      if hasCreated {
        output.writeString(6, value:created)
      }
      if hasChanged {
        output.writeString(7, value:changed)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasName {
        serialize_size += name.computeStringSize(2)
      }
      if hasDefinition {
        serialize_size += definition.computeStringSize(3)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(4)
      }
      if hasCreatedByProfile {
        serialize_size += createdByProfile.computeStringSize(5)
      }
      if hasCreated {
        serialize_size += created.computeStringSize(6)
      }
      if hasChanged {
        serialize_size += changed.computeStringSize(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Glossary.Containers.TermV1 {
      return Services.Glossary.Containers.TermV1.builder().mergeFromData(data, extensionRegistry:Services.Glossary.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Glossary.Containers.TermV1 {
      return Services.Glossary.Containers.TermV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Glossary.Containers.TermV1 {
      return Services.Glossary.Containers.TermV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Glossary.Containers.TermV1 {
      return Services.Glossary.Containers.TermV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Glossary.Containers.TermV1 {
      return Services.Glossary.Containers.TermV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Glossary.Containers.TermV1 {
      return Services.Glossary.Containers.TermV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Glossary.Containers.TermV1Builder {
      return Services.Glossary.Containers.TermV1.classBuilder() as! Services.Glossary.Containers.TermV1Builder
    }
    public func builder() -> Services.Glossary.Containers.TermV1Builder {
      return classBuilder() as! Services.Glossary.Containers.TermV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Glossary.Containers.TermV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Glossary.Containers.TermV1.builder()
    }
    public func toBuilder() -> Services.Glossary.Containers.TermV1Builder {
      return Services.Glossary.Containers.TermV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Glossary.Containers.TermV1) -> Services.Glossary.Containers.TermV1Builder {
      return Services.Glossary.Containers.TermV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasDefinition {
        output += "\(indent) definition: \(definition) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      if hasCreatedByProfile {
        output += "\(indent) createdByProfile: \(createdByProfile) \n"
      }
      if hasCreated {
        output += "\(indent) created: \(created) \n"
      }
      if hasChanged {
        output += "\(indent) changed: \(changed) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasDefinition {
               hashCode = (hashCode &* 31) &+ definition.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            if hasCreatedByProfile {
               hashCode = (hashCode &* 31) &+ createdByProfile.hashValue
            }
            if hasCreated {
               hashCode = (hashCode &* 31) &+ created.hashValue
            }
            if hasChanged {
               hashCode = (hashCode &* 31) &+ changed.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Glossary.Containers.TermV1"
    }
    override public func className() -> String {
        return "Services.Glossary.Containers.TermV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Glossary.Containers.TermV1.self
    }
    //Meta information declaration end

  }

  final public class TermV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Glossary.Containers.TermV1

    required override public init () {
       builderResult = Services.Glossary.Containers.TermV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Glossary.Containers.TermV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Glossary.Containers.TermV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String)-> Services.Glossary.Containers.TermV1Builder {
      self.name = value
      return self
    }
    public func clearName() -> Services.Glossary.Containers.TermV1Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasDefinition:Bool {
         get {
              return builderResult.hasDefinition
         }
    }
    public var definition:String {
         get {
              return builderResult.definition
         }
         set (value) {
             builderResult.hasDefinition = true
             builderResult.definition = value
         }
    }
    public func setDefinition(value:String)-> Services.Glossary.Containers.TermV1Builder {
      self.definition = value
      return self
    }
    public func clearDefinition() -> Services.Glossary.Containers.TermV1Builder{
         builderResult.hasDefinition = false
         builderResult.definition = ""
         return self
    }
    public var hasOrganizationId:Bool {
         get {
              return builderResult.hasOrganizationId
         }
    }
    public var organizationId:String {
         get {
              return builderResult.organizationId
         }
         set (value) {
             builderResult.hasOrganizationId = true
             builderResult.organizationId = value
         }
    }
    public func setOrganizationId(value:String)-> Services.Glossary.Containers.TermV1Builder {
      self.organizationId = value
      return self
    }
    public func clearOrganizationId() -> Services.Glossary.Containers.TermV1Builder{
         builderResult.hasOrganizationId = false
         builderResult.organizationId = ""
         return self
    }
    public var hasCreatedByProfile:Bool {
         get {
              return builderResult.hasCreatedByProfile
         }
    }
    public var createdByProfile:String {
         get {
              return builderResult.createdByProfile
         }
         set (value) {
             builderResult.hasCreatedByProfile = true
             builderResult.createdByProfile = value
         }
    }
    public func setCreatedByProfile(value:String)-> Services.Glossary.Containers.TermV1Builder {
      self.createdByProfile = value
      return self
    }
    public func clearCreatedByProfile() -> Services.Glossary.Containers.TermV1Builder{
         builderResult.hasCreatedByProfile = false
         builderResult.createdByProfile = ""
         return self
    }
    public var hasCreated:Bool {
         get {
              return builderResult.hasCreated
         }
    }
    public var created:String {
         get {
              return builderResult.created
         }
         set (value) {
             builderResult.hasCreated = true
             builderResult.created = value
         }
    }
    public func setCreated(value:String)-> Services.Glossary.Containers.TermV1Builder {
      self.created = value
      return self
    }
    public func clearCreated() -> Services.Glossary.Containers.TermV1Builder{
         builderResult.hasCreated = false
         builderResult.created = ""
         return self
    }
    public var hasChanged:Bool {
         get {
              return builderResult.hasChanged
         }
    }
    public var changed:String {
         get {
              return builderResult.changed
         }
         set (value) {
             builderResult.hasChanged = true
             builderResult.changed = value
         }
    }
    public func setChanged(value:String)-> Services.Glossary.Containers.TermV1Builder {
      self.changed = value
      return self
    }
    public func clearChanged() -> Services.Glossary.Containers.TermV1Builder{
         builderResult.hasChanged = false
         builderResult.changed = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Glossary.Containers.TermV1Builder {
      builderResult = Services.Glossary.Containers.TermV1()
      return self
    }
    public override func clone() -> Services.Glossary.Containers.TermV1Builder {
      return Services.Glossary.Containers.TermV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Glossary.Containers.TermV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Glossary.Containers.TermV1 {
      var returnMe:Services.Glossary.Containers.TermV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Glossary.Containers.TermV1) -> Services.Glossary.Containers.TermV1Builder {
      if (other == Services.Glossary.Containers.TermV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasName {
           name = other.name
      }
      if other.hasDefinition {
           definition = other.definition
      }
      if other.hasOrganizationId {
           organizationId = other.organizationId
      }
      if other.hasCreatedByProfile {
           createdByProfile = other.createdByProfile
      }
      if other.hasCreated {
           created = other.created
      }
      if other.hasChanged {
           changed = other.changed
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Glossary.Containers.TermV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Glossary.Containers.TermV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          name = input.readString()

        case 26 :
          definition = input.readString()

        case 34 :
          organizationId = input.readString()

        case 42 :
          createdByProfile = input.readString()

        case 50 :
          created = input.readString()

        case 58 :
          changed = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
