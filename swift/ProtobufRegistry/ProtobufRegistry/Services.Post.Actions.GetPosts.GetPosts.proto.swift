// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file get_posts.proto

import Foundation

public extension Services.Post.Actions{ public struct GetPosts { }}

public func == (lhs: Services.Post.Actions.GetPosts.RequestV1, rhs: Services.Post.Actions.GetPosts.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasByProfileId == rhs.hasByProfileId) && (!lhs.hasByProfileId || lhs.byProfileId == rhs.byProfileId)
  fieldCheck = fieldCheck && (lhs.hasState == rhs.hasState) && (!lhs.hasState || lhs.state == rhs.state)
  fieldCheck = fieldCheck && (lhs.hasAllStates == rhs.hasAllStates) && (!lhs.hasAllStates || lhs.allStates == rhs.allStates)
  fieldCheck = fieldCheck && (lhs.ids == rhs.ids)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Post.Actions.GetPosts.ResponseV1, rhs: Services.Post.Actions.GetPosts.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.posts == rhs.posts)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Post.Actions.GetPosts {
  public struct GetPostsRoot {
    public static var sharedInstance : GetPostsRoot {
     struct Static {
         static let instance : GetPostsRoot = GetPostsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Post.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasByProfileId:Bool = false
    public private(set) var byProfileId:String = ""

    public private(set) var state:Services.Post.Containers.PostStateV1 = Services.Post.Containers.PostStateV1.Draft
    public private(set) var hasState:Bool = false
    public private(set) var hasAllStates:Bool = false
    public private(set) var allStates:Bool = false

    public private(set) var ids:Array<String> = Array<String>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasByProfileId {
        try output.writeString(1, value:byProfileId)
      }
      if hasState {
        try output.writeEnum(2, value:state.rawValue)
      }
      if hasAllStates {
        try output.writeBool(3, value:allStates)
      }
      if !ids.isEmpty {
        for oneValueids in ids {
          try output.writeString(4, value:oneValueids)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasByProfileId {
        serialize_size += byProfileId.computeStringSize(1)
      }
      if (hasState) {
        serialize_size += state.rawValue.computeEnumSize(2)
      }
      if hasAllStates {
        serialize_size += allStates.computeBoolSize(3)
      }
      var dataSizeIds:Int32 = 0
      for oneValueids in ids {
          dataSizeIds += oneValueids.computeStringSizeNoTag()
      }
      serialize_size += dataSizeIds
      serialize_size += 1 * Int32(ids.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Post.Actions.GetPosts.RequestV1> {
      var mergedArray = Array<Services.Post.Actions.GetPosts.RequestV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Post.Actions.GetPosts.RequestV1? {
      return try Services.Post.Actions.GetPosts.RequestV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Post.Actions.GetPosts.RequestV1 {
      return try Services.Post.Actions.GetPosts.RequestV1.Builder().mergeFromData(data, extensionRegistry:Services.Post.Actions.GetPosts.GetPostsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.GetPosts.RequestV1 {
      return try Services.Post.Actions.GetPosts.RequestV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Post.Actions.GetPosts.RequestV1 {
      return try Services.Post.Actions.GetPosts.RequestV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.GetPosts.RequestV1 {
      return try Services.Post.Actions.GetPosts.RequestV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Post.Actions.GetPosts.RequestV1 {
      return try Services.Post.Actions.GetPosts.RequestV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.GetPosts.RequestV1 {
      return try Services.Post.Actions.GetPosts.RequestV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Post.Actions.GetPosts.RequestV1.Builder {
      return Services.Post.Actions.GetPosts.RequestV1.classBuilder() as! Services.Post.Actions.GetPosts.RequestV1.Builder
    }
    public func getBuilder() -> Services.Post.Actions.GetPosts.RequestV1.Builder {
      return classBuilder() as! Services.Post.Actions.GetPosts.RequestV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Post.Actions.GetPosts.RequestV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Post.Actions.GetPosts.RequestV1.Builder()
    }
    public func toBuilder() throws -> Services.Post.Actions.GetPosts.RequestV1.Builder {
      return try Services.Post.Actions.GetPosts.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Post.Actions.GetPosts.RequestV1) throws -> Services.Post.Actions.GetPosts.RequestV1.Builder {
      return try Services.Post.Actions.GetPosts.RequestV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasByProfileId {
        output += "\(indent) byProfileId: \(byProfileId) \n"
      }
      if (hasState) {
        output += "\(indent) state: \(state.rawValue)\n"
      }
      if hasAllStates {
        output += "\(indent) allStates: \(allStates) \n"
      }
      var idsElementIndex:Int = 0
      for oneValueids in ids  {
          output += "\(indent) ids[\(idsElementIndex)]: \(oneValueids)\n"
          idsElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasByProfileId {
               hashCode = (hashCode &* 31) &+ byProfileId.hashValue
            }
            if hasState {
               hashCode = (hashCode &* 31) &+ Int(state.rawValue)
            }
            if hasAllStates {
               hashCode = (hashCode &* 31) &+ allStates.hashValue
            }
            for oneValueids in ids {
                hashCode = (hashCode &* 31) &+ oneValueids.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Post.Actions.GetPosts.RequestV1"
    }
    override public func className() -> String {
        return "Services.Post.Actions.GetPosts.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Post.Actions.GetPosts.RequestV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Post.Actions.GetPosts.RequestV1 = Services.Post.Actions.GetPosts.RequestV1()
      public func getMessage() -> Services.Post.Actions.GetPosts.RequestV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasByProfileId:Bool {
           get {
                return builderResult.hasByProfileId
           }
      }
      public var byProfileId:String {
           get {
                return builderResult.byProfileId
           }
           set (value) {
               builderResult.hasByProfileId = true
               builderResult.byProfileId = value
           }
      }
      public func setByProfileId(value:String) -> Services.Post.Actions.GetPosts.RequestV1.Builder {
        self.byProfileId = value
        return self
      }
      public func clearByProfileId() -> Services.Post.Actions.GetPosts.RequestV1.Builder{
           builderResult.hasByProfileId = false
           builderResult.byProfileId = ""
           return self
      }
        public var hasState:Bool{
            get {
                return builderResult.hasState
            }
        }
        public var state:Services.Post.Containers.PostStateV1 {
            get {
                return builderResult.state
            }
            set (value) {
                builderResult.hasState = true
                builderResult.state = value
            }
        }
        public func setState(value:Services.Post.Containers.PostStateV1) -> Services.Post.Actions.GetPosts.RequestV1.Builder {
          self.state = value
          return self
        }
        public func clearState() -> Services.Post.Actions.GetPosts.RequestV1.Builder {
           builderResult.hasState = false
           builderResult.state = .Draft
           return self
        }
      public var hasAllStates:Bool {
           get {
                return builderResult.hasAllStates
           }
      }
      public var allStates:Bool {
           get {
                return builderResult.allStates
           }
           set (value) {
               builderResult.hasAllStates = true
               builderResult.allStates = value
           }
      }
      public func setAllStates(value:Bool) -> Services.Post.Actions.GetPosts.RequestV1.Builder {
        self.allStates = value
        return self
      }
      public func clearAllStates() -> Services.Post.Actions.GetPosts.RequestV1.Builder{
           builderResult.hasAllStates = false
           builderResult.allStates = false
           return self
      }
      public var ids:Array<String> {
           get {
               return builderResult.ids
           }
           set (array) {
               builderResult.ids = array
           }
      }
      public func setIds(value:Array<String>) -> Services.Post.Actions.GetPosts.RequestV1.Builder {
        self.ids = value
        return self
      }
      public func clearIds() -> Services.Post.Actions.GetPosts.RequestV1.Builder {
         builderResult.ids.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Post.Actions.GetPosts.RequestV1.Builder {
        builderResult = Services.Post.Actions.GetPosts.RequestV1()
        return self
      }
      public override func clone() throws -> Services.Post.Actions.GetPosts.RequestV1.Builder {
        return try Services.Post.Actions.GetPosts.RequestV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Post.Actions.GetPosts.RequestV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Post.Actions.GetPosts.RequestV1 {
        let returnMe:Services.Post.Actions.GetPosts.RequestV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Post.Actions.GetPosts.RequestV1) throws -> Services.Post.Actions.GetPosts.RequestV1.Builder {
        if other == Services.Post.Actions.GetPosts.RequestV1() {
         return self
        }
        if other.hasByProfileId {
             byProfileId = other.byProfileId
        }
        if other.hasState {
             state = other.state
        }
        if other.hasAllStates {
             allStates = other.allStates
        }
        if !other.ids.isEmpty {
            builderResult.ids += other.ids
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Post.Actions.GetPosts.RequestV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.GetPosts.RequestV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            byProfileId = try input.readString()

          case 16 :
            let valueIntstate = try input.readEnum()
            if let enumsstate = Services.Post.Containers.PostStateV1(rawValue:valueIntstate){
                 state = enumsstate
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntstate))
            }

          case 24 :
            allStates = try input.readBool()

          case 34 :
            ids += [try input.readString()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var posts:Array<Services.Post.Containers.PostV1>  = Array<Services.Post.Containers.PostV1>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      for oneElementposts in posts {
          try output.writeMessage(1, value:oneElementposts)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementposts in posts {
          serialize_size += oneElementposts.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Post.Actions.GetPosts.ResponseV1> {
      var mergedArray = Array<Services.Post.Actions.GetPosts.ResponseV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Post.Actions.GetPosts.ResponseV1? {
      return try Services.Post.Actions.GetPosts.ResponseV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Post.Actions.GetPosts.ResponseV1 {
      return try Services.Post.Actions.GetPosts.ResponseV1.Builder().mergeFromData(data, extensionRegistry:Services.Post.Actions.GetPosts.GetPostsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.GetPosts.ResponseV1 {
      return try Services.Post.Actions.GetPosts.ResponseV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Post.Actions.GetPosts.ResponseV1 {
      return try Services.Post.Actions.GetPosts.ResponseV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.GetPosts.ResponseV1 {
      return try Services.Post.Actions.GetPosts.ResponseV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Post.Actions.GetPosts.ResponseV1 {
      return try Services.Post.Actions.GetPosts.ResponseV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.GetPosts.ResponseV1 {
      return try Services.Post.Actions.GetPosts.ResponseV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Post.Actions.GetPosts.ResponseV1.Builder {
      return Services.Post.Actions.GetPosts.ResponseV1.classBuilder() as! Services.Post.Actions.GetPosts.ResponseV1.Builder
    }
    public func getBuilder() -> Services.Post.Actions.GetPosts.ResponseV1.Builder {
      return classBuilder() as! Services.Post.Actions.GetPosts.ResponseV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Post.Actions.GetPosts.ResponseV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Post.Actions.GetPosts.ResponseV1.Builder()
    }
    public func toBuilder() throws -> Services.Post.Actions.GetPosts.ResponseV1.Builder {
      return try Services.Post.Actions.GetPosts.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Post.Actions.GetPosts.ResponseV1) throws -> Services.Post.Actions.GetPosts.ResponseV1.Builder {
      return try Services.Post.Actions.GetPosts.ResponseV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      var postsElementIndex:Int = 0
      for oneElementposts in posts {
          output += "\(indent) posts[\(postsElementIndex)] {\n"
          try oneElementposts.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          postsElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementposts in posts {
                hashCode = (hashCode &* 31) &+ oneElementposts.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Post.Actions.GetPosts.ResponseV1"
    }
    override public func className() -> String {
        return "Services.Post.Actions.GetPosts.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Post.Actions.GetPosts.ResponseV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Post.Actions.GetPosts.ResponseV1 = Services.Post.Actions.GetPosts.ResponseV1()
      public func getMessage() -> Services.Post.Actions.GetPosts.ResponseV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var posts:Array<Services.Post.Containers.PostV1> {
           get {
               return builderResult.posts
           }
           set (value) {
               builderResult.posts = value
           }
      }
      public func setPosts(value:Array<Services.Post.Containers.PostV1>) -> Services.Post.Actions.GetPosts.ResponseV1.Builder {
        self.posts = value
        return self
      }
      public func clearPosts() -> Services.Post.Actions.GetPosts.ResponseV1.Builder {
        builderResult.posts.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Post.Actions.GetPosts.ResponseV1.Builder {
        builderResult = Services.Post.Actions.GetPosts.ResponseV1()
        return self
      }
      public override func clone() throws -> Services.Post.Actions.GetPosts.ResponseV1.Builder {
        return try Services.Post.Actions.GetPosts.ResponseV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Post.Actions.GetPosts.ResponseV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Post.Actions.GetPosts.ResponseV1 {
        let returnMe:Services.Post.Actions.GetPosts.ResponseV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Post.Actions.GetPosts.ResponseV1) throws -> Services.Post.Actions.GetPosts.ResponseV1.Builder {
        if other == Services.Post.Actions.GetPosts.ResponseV1() {
         return self
        }
        if !other.posts.isEmpty  {
           builderResult.posts += other.posts
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Post.Actions.GetPosts.ResponseV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.GetPosts.ResponseV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder = Services.Post.Containers.PostV1.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            posts += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
