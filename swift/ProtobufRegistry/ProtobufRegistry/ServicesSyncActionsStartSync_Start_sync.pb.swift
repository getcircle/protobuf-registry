// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.Sync.Actions{ public struct StartSync { }}

public func == (lhs: Services.Sync.Actions.StartSync.RequestV1, rhs: Services.Sync.Actions.StartSync.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasSource == rhs.hasSource) && (!lhs.hasSource || lhs.source == rhs.source)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Sync.Actions.StartSync.ResponseV1, rhs: Services.Sync.Actions.StartSync.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasSyncId == rhs.hasSyncId) && (!lhs.hasSyncId || lhs.syncId == rhs.syncId)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.Sync.Actions.StartSync {
  public struct StartSyncRoot {
    public static var sharedInstance : StartSyncRoot {
     struct Static {
         static let instance : StartSyncRoot = StartSyncRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Sync.Containers.Source.SourceRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "source": return self.source
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var source:Services.Sync.Containers.Source.SourceV1 = Services.Sync.Containers.Source.SourceV1.Ldap
    public private(set) var hasSource:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasSource {
        output.writeEnum(2, value:source.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if (hasSource) {
        serialize_size += source.rawValue.computeEnumSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Sync.Actions.StartSync.RequestV1 {
      return Services.Sync.Actions.StartSync.RequestV1.builder().mergeFromData(data, extensionRegistry:Services.Sync.Actions.StartSync.StartSyncRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Sync.Actions.StartSync.RequestV1 {
      return Services.Sync.Actions.StartSync.RequestV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Sync.Actions.StartSync.RequestV1 {
      return Services.Sync.Actions.StartSync.RequestV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Sync.Actions.StartSync.RequestV1 {
      return Services.Sync.Actions.StartSync.RequestV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Sync.Actions.StartSync.RequestV1 {
      return Services.Sync.Actions.StartSync.RequestV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Sync.Actions.StartSync.RequestV1 {
      return Services.Sync.Actions.StartSync.RequestV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Sync.Actions.StartSync.RequestV1Builder {
      return Services.Sync.Actions.StartSync.RequestV1.classBuilder() as! Services.Sync.Actions.StartSync.RequestV1Builder
    }
    public func builder() -> Services.Sync.Actions.StartSync.RequestV1Builder {
      return classBuilder() as! Services.Sync.Actions.StartSync.RequestV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Sync.Actions.StartSync.RequestV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Sync.Actions.StartSync.RequestV1.builder()
    }
    public func toBuilder() -> Services.Sync.Actions.StartSync.RequestV1Builder {
      return Services.Sync.Actions.StartSync.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Sync.Actions.StartSync.RequestV1) -> Services.Sync.Actions.StartSync.RequestV1Builder {
      return Services.Sync.Actions.StartSync.RequestV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if (hasSource) {
        output += "\(indent) source: \(source.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasSource {
               hashCode = (hashCode &* 31) &+ Int(source.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Sync.Actions.StartSync.RequestV1"
    }
    override public func className() -> String {
        return "Services.Sync.Actions.StartSync.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Sync.Actions.StartSync.RequestV1.self
    }
    //Meta information declaration end

  }

  final public class RequestV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Sync.Actions.StartSync.RequestV1

    required override public init () {
       builderResult = Services.Sync.Actions.StartSync.RequestV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Sync.Actions.StartSync.RequestV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Sync.Actions.StartSync.RequestV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
      public var hasSource:Bool{
          get {
              return builderResult.hasSource
          }
      }
      public var source:Services.Sync.Containers.Source.SourceV1 {
          get {
              return builderResult.source
          }
          set (value) {
              builderResult.hasSource = true
              builderResult.source = value
          }
      }
      public func setSource(value:Services.Sync.Containers.Source.SourceV1)-> Services.Sync.Actions.StartSync.RequestV1Builder {
        self.source = value
        return self
      }
      public func clearSource() -> Services.Sync.Actions.StartSync.RequestV1Builder {
         builderResult.hasSource = false
         builderResult.source = .Ldap
         return self
      }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Sync.Actions.StartSync.RequestV1Builder {
      builderResult = Services.Sync.Actions.StartSync.RequestV1()
      return self
    }
    public override func clone() -> Services.Sync.Actions.StartSync.RequestV1Builder {
      return Services.Sync.Actions.StartSync.RequestV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Sync.Actions.StartSync.RequestV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Sync.Actions.StartSync.RequestV1 {
      var returnMe:Services.Sync.Actions.StartSync.RequestV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Sync.Actions.StartSync.RequestV1) -> Services.Sync.Actions.StartSync.RequestV1Builder {
      if (other == Services.Sync.Actions.StartSync.RequestV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasSource {
           source = other.source
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Sync.Actions.StartSync.RequestV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Sync.Actions.StartSync.RequestV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 16 :
          let valueIntsource = input.readEnum()
          if let enumssource = Services.Sync.Containers.Source.SourceV1(rawValue:valueIntsource){
               source = enumssource
          } else {
               unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntsource))
          }

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "syncId": return syncId
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasSyncId:Bool = false
    public private(set) var syncId:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasSyncId {
        output.writeString(2, value:syncId)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasSyncId {
        serialize_size += syncId.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Sync.Actions.StartSync.ResponseV1 {
      return Services.Sync.Actions.StartSync.ResponseV1.builder().mergeFromData(data, extensionRegistry:Services.Sync.Actions.StartSync.StartSyncRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Sync.Actions.StartSync.ResponseV1 {
      return Services.Sync.Actions.StartSync.ResponseV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Sync.Actions.StartSync.ResponseV1 {
      return Services.Sync.Actions.StartSync.ResponseV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Sync.Actions.StartSync.ResponseV1 {
      return Services.Sync.Actions.StartSync.ResponseV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Sync.Actions.StartSync.ResponseV1 {
      return Services.Sync.Actions.StartSync.ResponseV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Sync.Actions.StartSync.ResponseV1 {
      return Services.Sync.Actions.StartSync.ResponseV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Sync.Actions.StartSync.ResponseV1Builder {
      return Services.Sync.Actions.StartSync.ResponseV1.classBuilder() as! Services.Sync.Actions.StartSync.ResponseV1Builder
    }
    public func builder() -> Services.Sync.Actions.StartSync.ResponseV1Builder {
      return classBuilder() as! Services.Sync.Actions.StartSync.ResponseV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Sync.Actions.StartSync.ResponseV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Sync.Actions.StartSync.ResponseV1.builder()
    }
    public func toBuilder() -> Services.Sync.Actions.StartSync.ResponseV1Builder {
      return Services.Sync.Actions.StartSync.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Sync.Actions.StartSync.ResponseV1) -> Services.Sync.Actions.StartSync.ResponseV1Builder {
      return Services.Sync.Actions.StartSync.ResponseV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasSyncId {
        output += "\(indent) syncId: \(syncId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasSyncId {
               hashCode = (hashCode &* 31) &+ syncId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Sync.Actions.StartSync.ResponseV1"
    }
    override public func className() -> String {
        return "Services.Sync.Actions.StartSync.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Sync.Actions.StartSync.ResponseV1.self
    }
    //Meta information declaration end

  }

  final public class ResponseV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Sync.Actions.StartSync.ResponseV1

    required override public init () {
       builderResult = Services.Sync.Actions.StartSync.ResponseV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Sync.Actions.StartSync.ResponseV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Sync.Actions.StartSync.ResponseV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasSyncId:Bool {
         get {
              return builderResult.hasSyncId
         }
    }
    public var syncId:String {
         get {
              return builderResult.syncId
         }
         set (value) {
             builderResult.hasSyncId = true
             builderResult.syncId = value
         }
    }
    public func setSyncId(value:String)-> Services.Sync.Actions.StartSync.ResponseV1Builder {
      self.syncId = value
      return self
    }
    public func clearSyncId() -> Services.Sync.Actions.StartSync.ResponseV1Builder{
         builderResult.hasSyncId = false
         builderResult.syncId = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Sync.Actions.StartSync.ResponseV1Builder {
      builderResult = Services.Sync.Actions.StartSync.ResponseV1()
      return self
    }
    public override func clone() -> Services.Sync.Actions.StartSync.ResponseV1Builder {
      return Services.Sync.Actions.StartSync.ResponseV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Sync.Actions.StartSync.ResponseV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Sync.Actions.StartSync.ResponseV1 {
      var returnMe:Services.Sync.Actions.StartSync.ResponseV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Sync.Actions.StartSync.ResponseV1) -> Services.Sync.Actions.StartSync.ResponseV1Builder {
      if (other == Services.Sync.Actions.StartSync.ResponseV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasSyncId {
           syncId = other.syncId
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Sync.Actions.StartSync.ResponseV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Sync.Actions.StartSync.ResponseV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          syncId = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
