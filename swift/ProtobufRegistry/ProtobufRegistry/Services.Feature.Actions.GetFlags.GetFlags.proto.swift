// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file get_flags.proto

import Foundation

public extension Services{ public struct Feature { public struct Actions { public struct GetFlags { }}}}

public func == (lhs: Services.Feature.Actions.GetFlags.RequestV1, rhs: Services.Feature.Actions.GetFlags.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Feature.Actions.GetFlags.ResponseV1, rhs: Services.Feature.Actions.GetFlags.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.flags == rhs.flags)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry, rhs: Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Feature.Actions.GetFlags {
  public struct GetFlagsRoot {
    public static var sharedInstance : GetFlagsRoot {
     struct Static {
         static let instance : GetFlagsRoot = GetFlagsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Feature.Actions.GetFlags.RequestV1> {
      var mergedArray = Array<Services.Feature.Actions.GetFlags.RequestV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Feature.Actions.GetFlags.RequestV1? {
      return try Services.Feature.Actions.GetFlags.RequestV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Feature.Actions.GetFlags.RequestV1 {
      return try Services.Feature.Actions.GetFlags.RequestV1.Builder().mergeFromData(data, extensionRegistry:Services.Feature.Actions.GetFlags.GetFlagsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Feature.Actions.GetFlags.RequestV1 {
      return try Services.Feature.Actions.GetFlags.RequestV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Feature.Actions.GetFlags.RequestV1 {
      return try Services.Feature.Actions.GetFlags.RequestV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Feature.Actions.GetFlags.RequestV1 {
      return try Services.Feature.Actions.GetFlags.RequestV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Feature.Actions.GetFlags.RequestV1 {
      return try Services.Feature.Actions.GetFlags.RequestV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Feature.Actions.GetFlags.RequestV1 {
      return try Services.Feature.Actions.GetFlags.RequestV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Feature.Actions.GetFlags.RequestV1.Builder {
      return Services.Feature.Actions.GetFlags.RequestV1.classBuilder() as! Services.Feature.Actions.GetFlags.RequestV1.Builder
    }
    public func getBuilder() -> Services.Feature.Actions.GetFlags.RequestV1.Builder {
      return classBuilder() as! Services.Feature.Actions.GetFlags.RequestV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Feature.Actions.GetFlags.RequestV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Feature.Actions.GetFlags.RequestV1.Builder()
    }
    public func toBuilder() throws -> Services.Feature.Actions.GetFlags.RequestV1.Builder {
      return try Services.Feature.Actions.GetFlags.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Feature.Actions.GetFlags.RequestV1) throws -> Services.Feature.Actions.GetFlags.RequestV1.Builder {
      return try Services.Feature.Actions.GetFlags.RequestV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Feature.Actions.GetFlags.RequestV1"
    }
    override public func className() -> String {
        return "Services.Feature.Actions.GetFlags.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Feature.Actions.GetFlags.RequestV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Feature.Actions.GetFlags.RequestV1 = Services.Feature.Actions.GetFlags.RequestV1()
      public func getMessage() -> Services.Feature.Actions.GetFlags.RequestV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Feature.Actions.GetFlags.RequestV1.Builder {
        builderResult = Services.Feature.Actions.GetFlags.RequestV1()
        return self
      }
      public override func clone() throws -> Services.Feature.Actions.GetFlags.RequestV1.Builder {
        return try Services.Feature.Actions.GetFlags.RequestV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Feature.Actions.GetFlags.RequestV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Feature.Actions.GetFlags.RequestV1 {
        let returnMe:Services.Feature.Actions.GetFlags.RequestV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Feature.Actions.GetFlags.RequestV1) throws -> Services.Feature.Actions.GetFlags.RequestV1.Builder {
        if other == Services.Feature.Actions.GetFlags.RequestV1() {
         return self
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Feature.Actions.GetFlags.RequestV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Feature.Actions.GetFlags.RequestV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class FlagsEntry : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var hasKey:Bool = false
        public private(set) var key:String = ""

        public private(set) var hasValue:Bool = false
        public private(set) var value:Bool = false

        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasKey {
            try output.writeString(1, value:key)
          }
          if hasValue {
            try output.writeBool(2, value:value)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasKey {
            serialize_size += key.computeStringSize(1)
          }
          if hasValue {
            serialize_size += value.computeBoolSize(2)
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry> {
          var mergedArray = Array<Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry? {
          return try Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry {
          return try Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder().mergeFromData(data, extensionRegistry:Services.Feature.Actions.GetFlags.GetFlagsRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry {
          return try Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry {
          return try Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry {
          return try Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry {
          return try Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry {
          return try Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder {
          return Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.classBuilder() as! Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder
        }
        public func getBuilder() -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder {
          return classBuilder() as! Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder()
        }
        public func toBuilder() throws -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder {
          return try Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry) throws -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder {
          return try Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder().mergeFrom(prototype)
        }
        override public func writeDescriptionTo(inout output:String, indent:String) throws {
          if hasKey {
            output += "\(indent) key: \(key) \n"
          }
          if hasValue {
            output += "\(indent) value: \(value) \n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasKey {
                   hashCode = (hashCode &* 31) &+ key.hashValue
                }
                if hasValue {
                   hashCode = (hashCode &* 31) &+ value.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry"
        }
        override public func className() -> String {
            return "Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry = Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry()
          public func getMessage() -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasKey:Bool {
               get {
                    return builderResult.hasKey
               }
          }
          public var key:String {
               get {
                    return builderResult.key
               }
               set (value) {
                   builderResult.hasKey = true
                   builderResult.key = value
               }
          }
          public func setKey(value:String) -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder {
            self.key = value
            return self
          }
          public func clearKey() -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder{
               builderResult.hasKey = false
               builderResult.key = ""
               return self
          }
          public var hasValue:Bool {
               get {
                    return builderResult.hasValue
               }
          }
          public var value:Bool {
               get {
                    return builderResult.value
               }
               set (value) {
                   builderResult.hasValue = true
                   builderResult.value = value
               }
          }
          public func setValue(value:Bool) -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder {
            self.value = value
            return self
          }
          public func clearValue() -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder{
               builderResult.hasValue = false
               builderResult.value = false
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder {
            builderResult = Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry()
            return self
          }
          public override func clone() throws -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder {
            return try Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.builderWithPrototype(builderResult)
          }
          public override func build() throws -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry {
            let returnMe:Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry = builderResult
            return returnMe
          }
          public func mergeFrom(other:Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry) throws -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder {
            if other == Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry() {
             return self
            }
            if other.hasKey {
                 key = other.key
            }
            if other.hasValue {
                 value = other.value
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = try input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                key = try input.readString()

              case 16 :
                value = try input.readBool()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end

    public private(set) var flags:Array<Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry>  = Array<Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      for oneElementflags in flags {
          try output.writeMessage(1, value:oneElementflags)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementflags in flags {
          serialize_size += oneElementflags.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Feature.Actions.GetFlags.ResponseV1> {
      var mergedArray = Array<Services.Feature.Actions.GetFlags.ResponseV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Feature.Actions.GetFlags.ResponseV1? {
      return try Services.Feature.Actions.GetFlags.ResponseV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Feature.Actions.GetFlags.ResponseV1 {
      return try Services.Feature.Actions.GetFlags.ResponseV1.Builder().mergeFromData(data, extensionRegistry:Services.Feature.Actions.GetFlags.GetFlagsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Feature.Actions.GetFlags.ResponseV1 {
      return try Services.Feature.Actions.GetFlags.ResponseV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Feature.Actions.GetFlags.ResponseV1 {
      return try Services.Feature.Actions.GetFlags.ResponseV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Feature.Actions.GetFlags.ResponseV1 {
      return try Services.Feature.Actions.GetFlags.ResponseV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Feature.Actions.GetFlags.ResponseV1 {
      return try Services.Feature.Actions.GetFlags.ResponseV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Feature.Actions.GetFlags.ResponseV1 {
      return try Services.Feature.Actions.GetFlags.ResponseV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Feature.Actions.GetFlags.ResponseV1.Builder {
      return Services.Feature.Actions.GetFlags.ResponseV1.classBuilder() as! Services.Feature.Actions.GetFlags.ResponseV1.Builder
    }
    public func getBuilder() -> Services.Feature.Actions.GetFlags.ResponseV1.Builder {
      return classBuilder() as! Services.Feature.Actions.GetFlags.ResponseV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Feature.Actions.GetFlags.ResponseV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Feature.Actions.GetFlags.ResponseV1.Builder()
    }
    public func toBuilder() throws -> Services.Feature.Actions.GetFlags.ResponseV1.Builder {
      return try Services.Feature.Actions.GetFlags.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Feature.Actions.GetFlags.ResponseV1) throws -> Services.Feature.Actions.GetFlags.ResponseV1.Builder {
      return try Services.Feature.Actions.GetFlags.ResponseV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      var flagsElementIndex:Int = 0
      for oneElementflags in flags {
          output += "\(indent) flags[\(flagsElementIndex)] {\n"
          try oneElementflags.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          flagsElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementflags in flags {
                hashCode = (hashCode &* 31) &+ oneElementflags.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Feature.Actions.GetFlags.ResponseV1"
    }
    override public func className() -> String {
        return "Services.Feature.Actions.GetFlags.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Feature.Actions.GetFlags.ResponseV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Feature.Actions.GetFlags.ResponseV1 = Services.Feature.Actions.GetFlags.ResponseV1()
      public func getMessage() -> Services.Feature.Actions.GetFlags.ResponseV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var flags:Array<Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry> {
           get {
               return builderResult.flags
           }
           set (value) {
               builderResult.flags = value
           }
      }
      public func setFlags(value:Array<Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry>) -> Services.Feature.Actions.GetFlags.ResponseV1.Builder {
        self.flags = value
        return self
      }
      public func clearFlags() -> Services.Feature.Actions.GetFlags.ResponseV1.Builder {
        builderResult.flags.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Feature.Actions.GetFlags.ResponseV1.Builder {
        builderResult = Services.Feature.Actions.GetFlags.ResponseV1()
        return self
      }
      public override func clone() throws -> Services.Feature.Actions.GetFlags.ResponseV1.Builder {
        return try Services.Feature.Actions.GetFlags.ResponseV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Feature.Actions.GetFlags.ResponseV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Feature.Actions.GetFlags.ResponseV1 {
        let returnMe:Services.Feature.Actions.GetFlags.ResponseV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Feature.Actions.GetFlags.ResponseV1) throws -> Services.Feature.Actions.GetFlags.ResponseV1.Builder {
        if other == Services.Feature.Actions.GetFlags.ResponseV1() {
         return self
        }
        if !other.flags.isEmpty  {
           builderResult.flags += other.flags
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Feature.Actions.GetFlags.ResponseV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Feature.Actions.GetFlags.ResponseV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder = Services.Feature.Actions.GetFlags.ResponseV1.FlagsEntry.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            flags += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
