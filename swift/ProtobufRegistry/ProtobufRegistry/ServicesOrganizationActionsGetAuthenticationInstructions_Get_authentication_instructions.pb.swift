// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.Organization.Actions{ public struct GetAuthenticationInstructions { }}

public func == (lhs: Services.Organization.Actions.GetAuthenticationInstructions.RequestV1, rhs: Services.Organization.Actions.GetAuthenticationInstructions.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasDomain == rhs.hasDomain) && (!lhs.hasDomain || lhs.domain == rhs.domain)
  fieldCheck = fieldCheck && (lhs.hasRedirectUri == rhs.hasRedirectUri) && (!lhs.hasRedirectUri || lhs.redirectUri == rhs.redirectUri)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1, rhs: Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasBackend == rhs.hasBackend) && (!lhs.hasBackend || lhs.backend == rhs.backend)
  fieldCheck = fieldCheck && (lhs.hasAuthorizationUrl == rhs.hasAuthorizationUrl) && (!lhs.hasAuthorizationUrl || lhs.authorizationUrl == rhs.authorizationUrl)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.Organization.Actions.GetAuthenticationInstructions {
  public struct GetAuthenticationInstructionsRoot {
    public static var sharedInstance : GetAuthenticationInstructionsRoot {
     struct Static {
         static let instance : GetAuthenticationInstructionsRoot = GetAuthenticationInstructionsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.User.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.User.Actions.AuthenticateUser.AuthenticateUserRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "domain": return domain
           case "redirectUri": return redirectUri
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasDomain:Bool = false
    public private(set) var domain:String = ""

    public private(set) var hasRedirectUri:Bool = false
    public private(set) var redirectUri:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasDomain {
        output.writeString(2, value:domain)
      }
      if hasRedirectUri {
        output.writeString(3, value:redirectUri)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasDomain {
        serialize_size += domain.computeStringSize(2)
      }
      if hasRedirectUri {
        serialize_size += redirectUri.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1 {
      return Services.Organization.Actions.GetAuthenticationInstructions.RequestV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Actions.GetAuthenticationInstructions.GetAuthenticationInstructionsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1 {
      return Services.Organization.Actions.GetAuthenticationInstructions.RequestV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1 {
      return Services.Organization.Actions.GetAuthenticationInstructions.RequestV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Actions.GetAuthenticationInstructions.RequestV1 {
      return Services.Organization.Actions.GetAuthenticationInstructions.RequestV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1 {
      return Services.Organization.Actions.GetAuthenticationInstructions.RequestV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1 {
      return Services.Organization.Actions.GetAuthenticationInstructions.RequestV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder {
      return Services.Organization.Actions.GetAuthenticationInstructions.RequestV1.classBuilder() as! Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder
    }
    public func builder() -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder {
      return classBuilder() as! Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetAuthenticationInstructions.RequestV1.builder()
    }
    public func toBuilder() -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder {
      return Services.Organization.Actions.GetAuthenticationInstructions.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Actions.GetAuthenticationInstructions.RequestV1) -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder {
      return Services.Organization.Actions.GetAuthenticationInstructions.RequestV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasDomain {
        output += "\(indent) domain: \(domain) \n"
      }
      if hasRedirectUri {
        output += "\(indent) redirectUri: \(redirectUri) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasDomain {
               hashCode = (hashCode &* 31) &+ domain.hashValue
            }
            if hasRedirectUri {
               hashCode = (hashCode &* 31) &+ redirectUri.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Actions.GetAuthenticationInstructions.RequestV1"
    }
    override public func className() -> String {
        return "Services.Organization.Actions.GetAuthenticationInstructions.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Actions.GetAuthenticationInstructions.RequestV1.self
    }
    //Meta information declaration end

  }

  final public class RequestV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Actions.GetAuthenticationInstructions.RequestV1

    required override public init () {
       builderResult = Services.Organization.Actions.GetAuthenticationInstructions.RequestV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasDomain:Bool {
         get {
              return builderResult.hasDomain
         }
    }
    public var domain:String {
         get {
              return builderResult.domain
         }
         set (value) {
             builderResult.hasDomain = true
             builderResult.domain = value
         }
    }
    public func setDomain(value:String)-> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder {
      self.domain = value
      return self
    }
    public func clearDomain() -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder{
         builderResult.hasDomain = false
         builderResult.domain = ""
         return self
    }
    public var hasRedirectUri:Bool {
         get {
              return builderResult.hasRedirectUri
         }
    }
    public var redirectUri:String {
         get {
              return builderResult.redirectUri
         }
         set (value) {
             builderResult.hasRedirectUri = true
             builderResult.redirectUri = value
         }
    }
    public func setRedirectUri(value:String)-> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder {
      self.redirectUri = value
      return self
    }
    public func clearRedirectUri() -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder{
         builderResult.hasRedirectUri = false
         builderResult.redirectUri = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder {
      builderResult = Services.Organization.Actions.GetAuthenticationInstructions.RequestV1()
      return self
    }
    public override func clone() -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder {
      return Services.Organization.Actions.GetAuthenticationInstructions.RequestV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1 {
      var returnMe:Services.Organization.Actions.GetAuthenticationInstructions.RequestV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Actions.GetAuthenticationInstructions.RequestV1) -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder {
      if (other == Services.Organization.Actions.GetAuthenticationInstructions.RequestV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasDomain {
           domain = other.domain
      }
      if other.hasRedirectUri {
           redirectUri = other.redirectUri
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Actions.GetAuthenticationInstructions.RequestV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          domain = input.readString()

        case 26 :
          redirectUri = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "backend": return self.backend
           case "authorizationUrl": return authorizationUrl
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var backend:Services.User.Actions.AuthenticateUser.RequestV1.AuthBackendV1 = Services.User.Actions.AuthenticateUser.RequestV1.AuthBackendV1.Internal
    public private(set) var hasBackend:Bool = false
    public private(set) var hasAuthorizationUrl:Bool = false
    public private(set) var authorizationUrl:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasBackend {
        output.writeEnum(2, value:backend.rawValue)
      }
      if hasAuthorizationUrl {
        output.writeString(3, value:authorizationUrl)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if (hasBackend) {
        serialize_size += backend.rawValue.computeEnumSize(2)
      }
      if hasAuthorizationUrl {
        serialize_size += authorizationUrl.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1 {
      return Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Actions.GetAuthenticationInstructions.GetAuthenticationInstructionsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1 {
      return Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1 {
      return Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1 {
      return Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1 {
      return Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1 {
      return Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder {
      return Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1.classBuilder() as! Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder
    }
    public func builder() -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder {
      return classBuilder() as! Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1.builder()
    }
    public func toBuilder() -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder {
      return Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1) -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder {
      return Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if (hasBackend) {
        output += "\(indent) backend: \(backend.rawValue)\n"
      }
      if hasAuthorizationUrl {
        output += "\(indent) authorizationUrl: \(authorizationUrl) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasBackend {
               hashCode = (hashCode &* 31) &+ Int(backend.rawValue)
            }
            if hasAuthorizationUrl {
               hashCode = (hashCode &* 31) &+ authorizationUrl.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1"
    }
    override public func className() -> String {
        return "Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1.self
    }
    //Meta information declaration end

  }

  final public class ResponseV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1

    required override public init () {
       builderResult = Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
      public var hasBackend:Bool{
          get {
              return builderResult.hasBackend
          }
      }
      public var backend:Services.User.Actions.AuthenticateUser.RequestV1.AuthBackendV1 {
          get {
              return builderResult.backend
          }
          set (value) {
              builderResult.hasBackend = true
              builderResult.backend = value
          }
      }
      public func setBackend(value:Services.User.Actions.AuthenticateUser.RequestV1.AuthBackendV1)-> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder {
        self.backend = value
        return self
      }
      public func clearBackend() -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder {
         builderResult.hasBackend = false
         builderResult.backend = .Internal
         return self
      }
    public var hasAuthorizationUrl:Bool {
         get {
              return builderResult.hasAuthorizationUrl
         }
    }
    public var authorizationUrl:String {
         get {
              return builderResult.authorizationUrl
         }
         set (value) {
             builderResult.hasAuthorizationUrl = true
             builderResult.authorizationUrl = value
         }
    }
    public func setAuthorizationUrl(value:String)-> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder {
      self.authorizationUrl = value
      return self
    }
    public func clearAuthorizationUrl() -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder{
         builderResult.hasAuthorizationUrl = false
         builderResult.authorizationUrl = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder {
      builderResult = Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1()
      return self
    }
    public override func clone() -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder {
      return Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1 {
      var returnMe:Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1) -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder {
      if (other == Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasBackend {
           backend = other.backend
      }
      if other.hasAuthorizationUrl {
           authorizationUrl = other.authorizationUrl
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Actions.GetAuthenticationInstructions.ResponseV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 16 :
          let valueIntbackend = input.readEnum()
          if let enumsbackend = Services.User.Actions.AuthenticateUser.RequestV1.AuthBackendV1(rawValue:valueIntbackend){
               backend = enumsbackend
          } else {
               unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntbackend))
          }

        case 26 :
          authorizationUrl = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
