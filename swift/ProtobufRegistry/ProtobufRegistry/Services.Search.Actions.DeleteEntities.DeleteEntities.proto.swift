// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file delete_entities.proto

import Foundation

public extension Services.Search.Actions{ public struct DeleteEntities { }}

public func == (lhs: Services.Search.Actions.DeleteEntities.RequestV1, rhs: Services.Search.Actions.DeleteEntities.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTypes == rhs.hasTypes) && (!lhs.hasTypes || lhs.types == rhs.types)
  fieldCheck = fieldCheck && (lhs.ids == rhs.ids)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Search.Actions.DeleteEntities.ResponseV1, rhs: Services.Search.Actions.DeleteEntities.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Search.Actions.DeleteEntities {
  public struct DeleteEntitiesRoot {
    public static var sharedInstance : DeleteEntitiesRoot {
     struct Static {
         static let instance : DeleteEntitiesRoot = DeleteEntitiesRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Search.Containers.Entity.EntityRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var types:Services.Search.Containers.Entity.EntityTypeV1 = Services.Search.Containers.Entity.EntityTypeV1.Profile
    public private(set) var hasTypes:Bool = false
    public private(set) var ids:Array<String> = Array<String>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasTypes {
        try output.writeEnum(1, value:types.rawValue)
      }
      if !ids.isEmpty {
        for oneValueids in ids {
          try output.writeString(2, value:oneValueids)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasTypes) {
        serialize_size += types.rawValue.computeEnumSize(1)
      }
      var dataSizeIds:Int32 = 0
      for oneValueids in ids {
          dataSizeIds += oneValueids.computeStringSizeNoTag()
      }
      serialize_size += dataSizeIds
      serialize_size += 1 * Int32(ids.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Search.Actions.DeleteEntities.RequestV1> {
      var mergedArray = Array<Services.Search.Actions.DeleteEntities.RequestV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Search.Actions.DeleteEntities.RequestV1? {
      return try Services.Search.Actions.DeleteEntities.RequestV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Search.Actions.DeleteEntities.RequestV1 {
      return try Services.Search.Actions.DeleteEntities.RequestV1.Builder().mergeFromData(data, extensionRegistry:Services.Search.Actions.DeleteEntities.DeleteEntitiesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Search.Actions.DeleteEntities.RequestV1 {
      return try Services.Search.Actions.DeleteEntities.RequestV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Search.Actions.DeleteEntities.RequestV1 {
      return try Services.Search.Actions.DeleteEntities.RequestV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Search.Actions.DeleteEntities.RequestV1 {
      return try Services.Search.Actions.DeleteEntities.RequestV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Search.Actions.DeleteEntities.RequestV1 {
      return try Services.Search.Actions.DeleteEntities.RequestV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Search.Actions.DeleteEntities.RequestV1 {
      return try Services.Search.Actions.DeleteEntities.RequestV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Search.Actions.DeleteEntities.RequestV1.Builder {
      return Services.Search.Actions.DeleteEntities.RequestV1.classBuilder() as! Services.Search.Actions.DeleteEntities.RequestV1.Builder
    }
    public func getBuilder() -> Services.Search.Actions.DeleteEntities.RequestV1.Builder {
      return classBuilder() as! Services.Search.Actions.DeleteEntities.RequestV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Search.Actions.DeleteEntities.RequestV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Search.Actions.DeleteEntities.RequestV1.Builder()
    }
    public func toBuilder() throws -> Services.Search.Actions.DeleteEntities.RequestV1.Builder {
      return try Services.Search.Actions.DeleteEntities.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Search.Actions.DeleteEntities.RequestV1) throws -> Services.Search.Actions.DeleteEntities.RequestV1.Builder {
      return try Services.Search.Actions.DeleteEntities.RequestV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if (hasTypes) {
        output += "\(indent) types: \(types.rawValue)\n"
      }
      var idsElementIndex:Int = 0
      for oneValueids in ids  {
          output += "\(indent) ids[\(idsElementIndex)]: \(oneValueids)\n"
          idsElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasTypes {
               hashCode = (hashCode &* 31) &+ Int(types.rawValue)
            }
            for oneValueids in ids {
                hashCode = (hashCode &* 31) &+ oneValueids.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Search.Actions.DeleteEntities.RequestV1"
    }
    override public func className() -> String {
        return "Services.Search.Actions.DeleteEntities.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Search.Actions.DeleteEntities.RequestV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Search.Actions.DeleteEntities.RequestV1 = Services.Search.Actions.DeleteEntities.RequestV1()
      public func getMessage() -> Services.Search.Actions.DeleteEntities.RequestV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasTypes:Bool{
            get {
                return builderResult.hasTypes
            }
        }
        public var types:Services.Search.Containers.Entity.EntityTypeV1 {
            get {
                return builderResult.types
            }
            set (value) {
                builderResult.hasTypes = true
                builderResult.types = value
            }
        }
        public func setTypes(value:Services.Search.Containers.Entity.EntityTypeV1) -> Services.Search.Actions.DeleteEntities.RequestV1.Builder {
          self.types = value
          return self
        }
        public func clearTypes() -> Services.Search.Actions.DeleteEntities.RequestV1.Builder {
           builderResult.hasTypes = false
           builderResult.types = .Profile
           return self
        }
      public var ids:Array<String> {
           get {
               return builderResult.ids
           }
           set (array) {
               builderResult.ids = array
           }
      }
      public func setIds(value:Array<String>) -> Services.Search.Actions.DeleteEntities.RequestV1.Builder {
        self.ids = value
        return self
      }
      public func clearIds() -> Services.Search.Actions.DeleteEntities.RequestV1.Builder {
         builderResult.ids.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Search.Actions.DeleteEntities.RequestV1.Builder {
        builderResult = Services.Search.Actions.DeleteEntities.RequestV1()
        return self
      }
      public override func clone() throws -> Services.Search.Actions.DeleteEntities.RequestV1.Builder {
        return try Services.Search.Actions.DeleteEntities.RequestV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Search.Actions.DeleteEntities.RequestV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Search.Actions.DeleteEntities.RequestV1 {
        let returnMe:Services.Search.Actions.DeleteEntities.RequestV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Search.Actions.DeleteEntities.RequestV1) throws -> Services.Search.Actions.DeleteEntities.RequestV1.Builder {
        if other == Services.Search.Actions.DeleteEntities.RequestV1() {
         return self
        }
        if other.hasTypes {
             types = other.types
        }
        if !other.ids.isEmpty {
            builderResult.ids += other.ids
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Search.Actions.DeleteEntities.RequestV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Search.Actions.DeleteEntities.RequestV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            let valueInttypes = try input.readEnum()
            if let enumstypes = Services.Search.Containers.Entity.EntityTypeV1(rawValue:valueInttypes){
                 types = enumstypes
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueInttypes))
            }

          case 18 :
            ids += [try input.readString()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Search.Actions.DeleteEntities.ResponseV1> {
      var mergedArray = Array<Services.Search.Actions.DeleteEntities.ResponseV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Search.Actions.DeleteEntities.ResponseV1? {
      return try Services.Search.Actions.DeleteEntities.ResponseV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Search.Actions.DeleteEntities.ResponseV1 {
      return try Services.Search.Actions.DeleteEntities.ResponseV1.Builder().mergeFromData(data, extensionRegistry:Services.Search.Actions.DeleteEntities.DeleteEntitiesRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Search.Actions.DeleteEntities.ResponseV1 {
      return try Services.Search.Actions.DeleteEntities.ResponseV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Search.Actions.DeleteEntities.ResponseV1 {
      return try Services.Search.Actions.DeleteEntities.ResponseV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Search.Actions.DeleteEntities.ResponseV1 {
      return try Services.Search.Actions.DeleteEntities.ResponseV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Search.Actions.DeleteEntities.ResponseV1 {
      return try Services.Search.Actions.DeleteEntities.ResponseV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Search.Actions.DeleteEntities.ResponseV1 {
      return try Services.Search.Actions.DeleteEntities.ResponseV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Search.Actions.DeleteEntities.ResponseV1.Builder {
      return Services.Search.Actions.DeleteEntities.ResponseV1.classBuilder() as! Services.Search.Actions.DeleteEntities.ResponseV1.Builder
    }
    public func getBuilder() -> Services.Search.Actions.DeleteEntities.ResponseV1.Builder {
      return classBuilder() as! Services.Search.Actions.DeleteEntities.ResponseV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Search.Actions.DeleteEntities.ResponseV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Search.Actions.DeleteEntities.ResponseV1.Builder()
    }
    public func toBuilder() throws -> Services.Search.Actions.DeleteEntities.ResponseV1.Builder {
      return try Services.Search.Actions.DeleteEntities.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Search.Actions.DeleteEntities.ResponseV1) throws -> Services.Search.Actions.DeleteEntities.ResponseV1.Builder {
      return try Services.Search.Actions.DeleteEntities.ResponseV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Search.Actions.DeleteEntities.ResponseV1"
    }
    override public func className() -> String {
        return "Services.Search.Actions.DeleteEntities.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Search.Actions.DeleteEntities.ResponseV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Search.Actions.DeleteEntities.ResponseV1 = Services.Search.Actions.DeleteEntities.ResponseV1()
      public func getMessage() -> Services.Search.Actions.DeleteEntities.ResponseV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Search.Actions.DeleteEntities.ResponseV1.Builder {
        builderResult = Services.Search.Actions.DeleteEntities.ResponseV1()
        return self
      }
      public override func clone() throws -> Services.Search.Actions.DeleteEntities.ResponseV1.Builder {
        return try Services.Search.Actions.DeleteEntities.ResponseV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Search.Actions.DeleteEntities.ResponseV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Search.Actions.DeleteEntities.ResponseV1 {
        let returnMe:Services.Search.Actions.DeleteEntities.ResponseV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Search.Actions.DeleteEntities.ResponseV1) throws -> Services.Search.Actions.DeleteEntities.ResponseV1.Builder {
        if other == Services.Search.Actions.DeleteEntities.ResponseV1() {
         return self
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Search.Actions.DeleteEntities.ResponseV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Search.Actions.DeleteEntities.ResponseV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
