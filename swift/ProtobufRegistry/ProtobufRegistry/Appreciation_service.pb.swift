// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

public struct AppreciationServiceRoot {
  public static var sharedInstance : AppreciationServiceRoot {
   struct Static {
       static let instance : AppreciationServiceRoot = AppreciationServiceRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

public func == (lhs: AppreciationService.Containers, rhs: AppreciationService.Containers) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: AppreciationService.CreateAppreciation, rhs: AppreciationService.CreateAppreciation) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: AppreciationService.GetAppreciation, rhs: AppreciationService.GetAppreciation) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: AppreciationService.DeleteAppreciation, rhs: AppreciationService.DeleteAppreciation) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: AppreciationService.UpdateAppreciation, rhs: AppreciationService.UpdateAppreciation) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: AppreciationService, rhs: AppreciationService) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final public class AppreciationService : GeneratedMessage {


  //Nested type declaration start

    final public class Containers : GeneratedMessage {


      //Nested type declaration start

        final public class Appreciation : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "id": return id
                 case "destination_profile_id": return destination_profile_id
                 case "source_profile_id": return source_profile_id
                 case "content": return content
                 case "created": return created
                 case "changed": return changed
                 default: return nil
                 }
          }

          public private(set) var hasId:Bool = false
          public private(set) var id:String = ""

          public private(set) var hasDestinationProfileId:Bool = false
          public private(set) var destination_profile_id:String = ""

          public private(set) var hasSourceProfileId:Bool = false
          public private(set) var source_profile_id:String = ""

          public private(set) var hasContent:Bool = false
          public private(set) var content:String = ""

          public private(set) var hasCreated:Bool = false
          public private(set) var created:String = ""

          public private(set) var hasChanged:Bool = false
          public private(set) var changed:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasId {
              output.writeString(1, value:id)
            }
            if hasDestinationProfileId {
              output.writeString(2, value:destination_profile_id)
            }
            if hasSourceProfileId {
              output.writeString(3, value:source_profile_id)
            }
            if hasContent {
              output.writeString(4, value:content)
            }
            if hasCreated {
              output.writeString(5, value:created)
            }
            if hasChanged {
              output.writeString(6, value:changed)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasId {
              size += WireFormat.computeStringSize(1, value:id)
            }
            if hasDestinationProfileId {
              size += WireFormat.computeStringSize(2, value:destination_profile_id)
            }
            if hasSourceProfileId {
              size += WireFormat.computeStringSize(3, value:source_profile_id)
            }
            if hasContent {
              size += WireFormat.computeStringSize(4, value:content)
            }
            if hasCreated {
              size += WireFormat.computeStringSize(5, value:created)
            }
            if hasChanged {
              size += WireFormat.computeStringSize(6, value:changed)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> AppreciationService.Containers.Appreciation {
            return AppreciationService.Containers.Appreciation.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AppreciationService.Containers.Appreciation {
            return AppreciationService.Containers.Appreciation.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> AppreciationService.Containers.Appreciation {
            return AppreciationService.Containers.Appreciation.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AppreciationService.Containers.Appreciation {
            return AppreciationService.Containers.Appreciation.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> AppreciationService.Containers.Appreciation {
            return AppreciationService.Containers.Appreciation.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.Containers.Appreciation {
            return AppreciationService.Containers.Appreciation.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> AppreciationService.Containers.AppreciationBuilder {
            return AppreciationService.Containers.Appreciation.classBuilder() as AppreciationService.Containers.AppreciationBuilder
          }
          public func builder() -> AppreciationService.Containers.AppreciationBuilder {
            return classBuilder() as AppreciationService.Containers.AppreciationBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return AppreciationService.Containers.AppreciationBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return AppreciationService.Containers.Appreciation.builder()
          }
          public func toBuilder() -> AppreciationService.Containers.AppreciationBuilder {
            return AppreciationService.Containers.Appreciation.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:AppreciationService.Containers.Appreciation) -> AppreciationService.Containers.AppreciationBuilder {
            return AppreciationService.Containers.Appreciation.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasId {
              output += "\(indent) id: \(id) \n"
            }
            if hasDestinationProfileId {
              output += "\(indent) destination_profile_id: \(destination_profile_id) \n"
            }
            if hasSourceProfileId {
              output += "\(indent) source_profile_id: \(source_profile_id) \n"
            }
            if hasContent {
              output += "\(indent) content: \(content) \n"
            }
            if hasCreated {
              output += "\(indent) created: \(created) \n"
            }
            if hasChanged {
              output += "\(indent) changed: \(changed) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasId {
                     hashCode = (hashCode &* 31) &+ id.hashValue
                  }
                  if hasDestinationProfileId {
                     hashCode = (hashCode &* 31) &+ destination_profile_id.hashValue
                  }
                  if hasSourceProfileId {
                     hashCode = (hashCode &* 31) &+ source_profile_id.hashValue
                  }
                  if hasContent {
                     hashCode = (hashCode &* 31) &+ content.hashValue
                  }
                  if hasCreated {
                     hashCode = (hashCode &* 31) &+ created.hashValue
                  }
                  if hasChanged {
                     hashCode = (hashCode &* 31) &+ changed.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "AppreciationService.Containers.Appreciation"
          }
          override public func className() -> String {
              return "AppreciationService.Containers.Appreciation"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return AppreciationService.Containers.Appreciation.self
          }


          //Meta information declaration end

        }

        final public class AppreciationBuilder : GeneratedMessageBuilder {
          private var builderResult:AppreciationService.Containers.Appreciation

          required override public init () {
             builderResult = AppreciationService.Containers.Appreciation()
             super.init()
          }
          public var hasId:Bool {
               get {
                    return builderResult.hasId
               }
          }
          public var id:String {
               get {
                    return builderResult.id
               }
               set (value) {
                   builderResult.hasId = true
                   builderResult.id = value
               }
          }
          public func clearId() -> AppreciationService.Containers.AppreciationBuilder{
               builderResult.hasId = false
               builderResult.id = ""
               return self
          }
          public var hasDestinationProfileId:Bool {
               get {
                    return builderResult.hasDestinationProfileId
               }
          }
          public var destination_profile_id:String {
               get {
                    return builderResult.destination_profile_id
               }
               set (value) {
                   builderResult.hasDestinationProfileId = true
                   builderResult.destination_profile_id = value
               }
          }
          public func clearDestinationProfileId() -> AppreciationService.Containers.AppreciationBuilder{
               builderResult.hasDestinationProfileId = false
               builderResult.destination_profile_id = ""
               return self
          }
          public var hasSourceProfileId:Bool {
               get {
                    return builderResult.hasSourceProfileId
               }
          }
          public var source_profile_id:String {
               get {
                    return builderResult.source_profile_id
               }
               set (value) {
                   builderResult.hasSourceProfileId = true
                   builderResult.source_profile_id = value
               }
          }
          public func clearSourceProfileId() -> AppreciationService.Containers.AppreciationBuilder{
               builderResult.hasSourceProfileId = false
               builderResult.source_profile_id = ""
               return self
          }
          public var hasContent:Bool {
               get {
                    return builderResult.hasContent
               }
          }
          public var content:String {
               get {
                    return builderResult.content
               }
               set (value) {
                   builderResult.hasContent = true
                   builderResult.content = value
               }
          }
          public func clearContent() -> AppreciationService.Containers.AppreciationBuilder{
               builderResult.hasContent = false
               builderResult.content = ""
               return self
          }
          public var hasCreated:Bool {
               get {
                    return builderResult.hasCreated
               }
          }
          public var created:String {
               get {
                    return builderResult.created
               }
               set (value) {
                   builderResult.hasCreated = true
                   builderResult.created = value
               }
          }
          public func clearCreated() -> AppreciationService.Containers.AppreciationBuilder{
               builderResult.hasCreated = false
               builderResult.created = ""
               return self
          }
          public var hasChanged:Bool {
               get {
                    return builderResult.hasChanged
               }
          }
          public var changed:String {
               get {
                    return builderResult.changed
               }
               set (value) {
                   builderResult.hasChanged = true
                   builderResult.changed = value
               }
          }
          public func clearChanged() -> AppreciationService.Containers.AppreciationBuilder{
               builderResult.hasChanged = false
               builderResult.changed = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> AppreciationService.Containers.AppreciationBuilder {
            builderResult = AppreciationService.Containers.Appreciation()
            return self
          }
          public override func clone() -> AppreciationService.Containers.AppreciationBuilder {
            return AppreciationService.Containers.Appreciation.builderWithPrototype(builderResult)
          }
          public override func build() -> AppreciationService.Containers.Appreciation {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> AppreciationService.Containers.Appreciation {
            var returnMe:AppreciationService.Containers.Appreciation = builderResult
            return returnMe
          }
          public func mergeFrom(other:AppreciationService.Containers.Appreciation) -> AppreciationService.Containers.AppreciationBuilder {
            if other.hasId {
                 id = other.id
            }
            if other.hasDestinationProfileId {
                 destination_profile_id = other.destination_profile_id
            }
            if other.hasSourceProfileId {
                 source_profile_id = other.source_profile_id
            }
            if other.hasContent {
                 content = other.content
            }
            if other.hasCreated {
                 created = other.created
            }
            if other.hasChanged {
                 changed = other.changed
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->AppreciationService.Containers.AppreciationBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.Containers.AppreciationBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                id = input.readString()

              case 18 :
                destination_profile_id = input.readString()

              case 26 :
                source_profile_id = input.readString()

              case 34 :
                content = input.readString()

              case 42 :
                created = input.readString()

              case 50 :
                changed = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> AppreciationService.Containers {
        return AppreciationService.Containers.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AppreciationService.Containers {
        return AppreciationService.Containers.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> AppreciationService.Containers {
        return AppreciationService.Containers.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AppreciationService.Containers {
        return AppreciationService.Containers.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> AppreciationService.Containers {
        return AppreciationService.Containers.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.Containers {
        return AppreciationService.Containers.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> AppreciationService.ContainersBuilder {
        return AppreciationService.Containers.classBuilder() as AppreciationService.ContainersBuilder
      }
      public func builder() -> AppreciationService.ContainersBuilder {
        return classBuilder() as AppreciationService.ContainersBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return AppreciationService.ContainersBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return AppreciationService.Containers.builder()
      }
      public func toBuilder() -> AppreciationService.ContainersBuilder {
        return AppreciationService.Containers.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:AppreciationService.Containers) -> AppreciationService.ContainersBuilder {
        return AppreciationService.Containers.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "AppreciationService.Containers"
      }
      override public func className() -> String {
          return "AppreciationService.Containers"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return AppreciationService.Containers.self
      }


      //Meta information declaration end

    }

    final public class ContainersBuilder : GeneratedMessageBuilder {
      private var builderResult:AppreciationService.Containers

      required override public init () {
         builderResult = AppreciationService.Containers()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> AppreciationService.ContainersBuilder {
        builderResult = AppreciationService.Containers()
        return self
      }
      public override func clone() -> AppreciationService.ContainersBuilder {
        return AppreciationService.Containers.builderWithPrototype(builderResult)
      }
      public override func build() -> AppreciationService.Containers {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> AppreciationService.Containers {
        var returnMe:AppreciationService.Containers = builderResult
        return returnMe
      }
      public func mergeFrom(other:AppreciationService.Containers) -> AppreciationService.ContainersBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->AppreciationService.ContainersBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.ContainersBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class CreateAppreciation : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "appreciation": return appreciation
                 default: return nil
                 }
          }

          public private(set) var hasAppreciation:Bool = false
          public private(set) var appreciation:AppreciationService.Containers.Appreciation = AppreciationService.Containers.Appreciation()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasAppreciation {
              output.writeMessage(1, value:appreciation)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasAppreciation {
              size += WireFormat.computeMessageSize(1, value:appreciation)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> AppreciationService.CreateAppreciation.Request {
            return AppreciationService.CreateAppreciation.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AppreciationService.CreateAppreciation.Request {
            return AppreciationService.CreateAppreciation.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> AppreciationService.CreateAppreciation.Request {
            return AppreciationService.CreateAppreciation.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AppreciationService.CreateAppreciation.Request {
            return AppreciationService.CreateAppreciation.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> AppreciationService.CreateAppreciation.Request {
            return AppreciationService.CreateAppreciation.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.CreateAppreciation.Request {
            return AppreciationService.CreateAppreciation.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> AppreciationService.CreateAppreciation.RequestBuilder {
            return AppreciationService.CreateAppreciation.Request.classBuilder() as AppreciationService.CreateAppreciation.RequestBuilder
          }
          public func builder() -> AppreciationService.CreateAppreciation.RequestBuilder {
            return classBuilder() as AppreciationService.CreateAppreciation.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return AppreciationService.CreateAppreciation.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return AppreciationService.CreateAppreciation.Request.builder()
          }
          public func toBuilder() -> AppreciationService.CreateAppreciation.RequestBuilder {
            return AppreciationService.CreateAppreciation.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:AppreciationService.CreateAppreciation.Request) -> AppreciationService.CreateAppreciation.RequestBuilder {
            return AppreciationService.CreateAppreciation.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasAppreciation {
              output += "\(indent) appreciation {\n"
              appreciation.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasAppreciation {
                    hashCode = (hashCode &* 31) &+ appreciation.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "AppreciationService.CreateAppreciation.Request"
          }
          override public func className() -> String {
              return "AppreciationService.CreateAppreciation.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return AppreciationService.CreateAppreciation.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:AppreciationService.CreateAppreciation.Request

          required override public init () {
             builderResult = AppreciationService.CreateAppreciation.Request()
             super.init()
          }
          public var hasAppreciation:Bool {
               get {
                   return builderResult.hasAppreciation
               }
          }
          public var appreciation:AppreciationService.Containers.Appreciation {
               get {
                   return builderResult.appreciation
               }
               set (value) {
                   builderResult.hasAppreciation = true
                   builderResult.appreciation = value
               }
          }
          public func setAppreciationBuilder(builderForValue:AppreciationService.Containers.AppreciationBuilder) -> AppreciationService.CreateAppreciation.RequestBuilder {
            appreciation = builderForValue.build()
            return self
          }
          public func mergeAppreciation(value:AppreciationService.Containers.Appreciation) -> AppreciationService.CreateAppreciation.RequestBuilder {
            if (builderResult.hasAppreciation) {
              builderResult.appreciation = AppreciationService.Containers.Appreciation.builderWithPrototype(builderResult.appreciation).mergeFrom(value).buildPartial()
            } else {
              builderResult.appreciation = value
            }
            builderResult.hasAppreciation = true
            return self
          }
          public func clearAppreciation() -> AppreciationService.CreateAppreciation.RequestBuilder {
            builderResult.hasAppreciation = false
            builderResult.appreciation = AppreciationService.Containers.Appreciation()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> AppreciationService.CreateAppreciation.RequestBuilder {
            builderResult = AppreciationService.CreateAppreciation.Request()
            return self
          }
          public override func clone() -> AppreciationService.CreateAppreciation.RequestBuilder {
            return AppreciationService.CreateAppreciation.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> AppreciationService.CreateAppreciation.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> AppreciationService.CreateAppreciation.Request {
            var returnMe:AppreciationService.CreateAppreciation.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:AppreciationService.CreateAppreciation.Request) -> AppreciationService.CreateAppreciation.RequestBuilder {
            if (other.hasAppreciation) {
                mergeAppreciation(other.appreciation)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->AppreciationService.CreateAppreciation.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.CreateAppreciation.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:AppreciationService.Containers.AppreciationBuilder = AppreciationService.Containers.Appreciation.builder()
                if hasAppreciation {
                  subBuilder.mergeFrom(appreciation)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                appreciation = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "appreciation": return appreciation
                 default: return nil
                 }
          }

          public private(set) var hasAppreciation:Bool = false
          public private(set) var appreciation:AppreciationService.Containers.Appreciation = AppreciationService.Containers.Appreciation()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasAppreciation {
              output.writeMessage(1, value:appreciation)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasAppreciation {
              size += WireFormat.computeMessageSize(1, value:appreciation)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> AppreciationService.CreateAppreciation.Response {
            return AppreciationService.CreateAppreciation.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AppreciationService.CreateAppreciation.Response {
            return AppreciationService.CreateAppreciation.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> AppreciationService.CreateAppreciation.Response {
            return AppreciationService.CreateAppreciation.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AppreciationService.CreateAppreciation.Response {
            return AppreciationService.CreateAppreciation.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> AppreciationService.CreateAppreciation.Response {
            return AppreciationService.CreateAppreciation.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.CreateAppreciation.Response {
            return AppreciationService.CreateAppreciation.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> AppreciationService.CreateAppreciation.ResponseBuilder {
            return AppreciationService.CreateAppreciation.Response.classBuilder() as AppreciationService.CreateAppreciation.ResponseBuilder
          }
          public func builder() -> AppreciationService.CreateAppreciation.ResponseBuilder {
            return classBuilder() as AppreciationService.CreateAppreciation.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return AppreciationService.CreateAppreciation.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return AppreciationService.CreateAppreciation.Response.builder()
          }
          public func toBuilder() -> AppreciationService.CreateAppreciation.ResponseBuilder {
            return AppreciationService.CreateAppreciation.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:AppreciationService.CreateAppreciation.Response) -> AppreciationService.CreateAppreciation.ResponseBuilder {
            return AppreciationService.CreateAppreciation.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasAppreciation {
              output += "\(indent) appreciation {\n"
              appreciation.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasAppreciation {
                    hashCode = (hashCode &* 31) &+ appreciation.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "AppreciationService.CreateAppreciation.Response"
          }
          override public func className() -> String {
              return "AppreciationService.CreateAppreciation.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return AppreciationService.CreateAppreciation.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:AppreciationService.CreateAppreciation.Response

          required override public init () {
             builderResult = AppreciationService.CreateAppreciation.Response()
             super.init()
          }
          public var hasAppreciation:Bool {
               get {
                   return builderResult.hasAppreciation
               }
          }
          public var appreciation:AppreciationService.Containers.Appreciation {
               get {
                   return builderResult.appreciation
               }
               set (value) {
                   builderResult.hasAppreciation = true
                   builderResult.appreciation = value
               }
          }
          public func setAppreciationBuilder(builderForValue:AppreciationService.Containers.AppreciationBuilder) -> AppreciationService.CreateAppreciation.ResponseBuilder {
            appreciation = builderForValue.build()
            return self
          }
          public func mergeAppreciation(value:AppreciationService.Containers.Appreciation) -> AppreciationService.CreateAppreciation.ResponseBuilder {
            if (builderResult.hasAppreciation) {
              builderResult.appreciation = AppreciationService.Containers.Appreciation.builderWithPrototype(builderResult.appreciation).mergeFrom(value).buildPartial()
            } else {
              builderResult.appreciation = value
            }
            builderResult.hasAppreciation = true
            return self
          }
          public func clearAppreciation() -> AppreciationService.CreateAppreciation.ResponseBuilder {
            builderResult.hasAppreciation = false
            builderResult.appreciation = AppreciationService.Containers.Appreciation()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> AppreciationService.CreateAppreciation.ResponseBuilder {
            builderResult = AppreciationService.CreateAppreciation.Response()
            return self
          }
          public override func clone() -> AppreciationService.CreateAppreciation.ResponseBuilder {
            return AppreciationService.CreateAppreciation.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> AppreciationService.CreateAppreciation.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> AppreciationService.CreateAppreciation.Response {
            var returnMe:AppreciationService.CreateAppreciation.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:AppreciationService.CreateAppreciation.Response) -> AppreciationService.CreateAppreciation.ResponseBuilder {
            if (other.hasAppreciation) {
                mergeAppreciation(other.appreciation)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->AppreciationService.CreateAppreciation.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.CreateAppreciation.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:AppreciationService.Containers.AppreciationBuilder = AppreciationService.Containers.Appreciation.builder()
                if hasAppreciation {
                  subBuilder.mergeFrom(appreciation)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                appreciation = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> AppreciationService.CreateAppreciation {
        return AppreciationService.CreateAppreciation.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AppreciationService.CreateAppreciation {
        return AppreciationService.CreateAppreciation.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> AppreciationService.CreateAppreciation {
        return AppreciationService.CreateAppreciation.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AppreciationService.CreateAppreciation {
        return AppreciationService.CreateAppreciation.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> AppreciationService.CreateAppreciation {
        return AppreciationService.CreateAppreciation.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.CreateAppreciation {
        return AppreciationService.CreateAppreciation.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> AppreciationService.CreateAppreciationBuilder {
        return AppreciationService.CreateAppreciation.classBuilder() as AppreciationService.CreateAppreciationBuilder
      }
      public func builder() -> AppreciationService.CreateAppreciationBuilder {
        return classBuilder() as AppreciationService.CreateAppreciationBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return AppreciationService.CreateAppreciationBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return AppreciationService.CreateAppreciation.builder()
      }
      public func toBuilder() -> AppreciationService.CreateAppreciationBuilder {
        return AppreciationService.CreateAppreciation.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:AppreciationService.CreateAppreciation) -> AppreciationService.CreateAppreciationBuilder {
        return AppreciationService.CreateAppreciation.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "AppreciationService.CreateAppreciation"
      }
      override public func className() -> String {
          return "AppreciationService.CreateAppreciation"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return AppreciationService.CreateAppreciation.self
      }


      //Meta information declaration end

    }

    final public class CreateAppreciationBuilder : GeneratedMessageBuilder {
      private var builderResult:AppreciationService.CreateAppreciation

      required override public init () {
         builderResult = AppreciationService.CreateAppreciation()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> AppreciationService.CreateAppreciationBuilder {
        builderResult = AppreciationService.CreateAppreciation()
        return self
      }
      public override func clone() -> AppreciationService.CreateAppreciationBuilder {
        return AppreciationService.CreateAppreciation.builderWithPrototype(builderResult)
      }
      public override func build() -> AppreciationService.CreateAppreciation {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> AppreciationService.CreateAppreciation {
        var returnMe:AppreciationService.CreateAppreciation = builderResult
        return returnMe
      }
      public func mergeFrom(other:AppreciationService.CreateAppreciation) -> AppreciationService.CreateAppreciationBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->AppreciationService.CreateAppreciationBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.CreateAppreciationBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetAppreciation : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "destination_profile_id": return destination_profile_id
                 default: return nil
                 }
          }

          public private(set) var hasDestinationProfileId:Bool = false
          public private(set) var destination_profile_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasDestinationProfileId {
              output.writeString(1, value:destination_profile_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasDestinationProfileId {
              size += WireFormat.computeStringSize(1, value:destination_profile_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> AppreciationService.GetAppreciation.Request {
            return AppreciationService.GetAppreciation.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AppreciationService.GetAppreciation.Request {
            return AppreciationService.GetAppreciation.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> AppreciationService.GetAppreciation.Request {
            return AppreciationService.GetAppreciation.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AppreciationService.GetAppreciation.Request {
            return AppreciationService.GetAppreciation.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> AppreciationService.GetAppreciation.Request {
            return AppreciationService.GetAppreciation.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.GetAppreciation.Request {
            return AppreciationService.GetAppreciation.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> AppreciationService.GetAppreciation.RequestBuilder {
            return AppreciationService.GetAppreciation.Request.classBuilder() as AppreciationService.GetAppreciation.RequestBuilder
          }
          public func builder() -> AppreciationService.GetAppreciation.RequestBuilder {
            return classBuilder() as AppreciationService.GetAppreciation.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return AppreciationService.GetAppreciation.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return AppreciationService.GetAppreciation.Request.builder()
          }
          public func toBuilder() -> AppreciationService.GetAppreciation.RequestBuilder {
            return AppreciationService.GetAppreciation.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:AppreciationService.GetAppreciation.Request) -> AppreciationService.GetAppreciation.RequestBuilder {
            return AppreciationService.GetAppreciation.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasDestinationProfileId {
              output += "\(indent) destination_profile_id: \(destination_profile_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasDestinationProfileId {
                     hashCode = (hashCode &* 31) &+ destination_profile_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "AppreciationService.GetAppreciation.Request"
          }
          override public func className() -> String {
              return "AppreciationService.GetAppreciation.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return AppreciationService.GetAppreciation.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:AppreciationService.GetAppreciation.Request

          required override public init () {
             builderResult = AppreciationService.GetAppreciation.Request()
             super.init()
          }
          public var hasDestinationProfileId:Bool {
               get {
                    return builderResult.hasDestinationProfileId
               }
          }
          public var destination_profile_id:String {
               get {
                    return builderResult.destination_profile_id
               }
               set (value) {
                   builderResult.hasDestinationProfileId = true
                   builderResult.destination_profile_id = value
               }
          }
          public func clearDestinationProfileId() -> AppreciationService.GetAppreciation.RequestBuilder{
               builderResult.hasDestinationProfileId = false
               builderResult.destination_profile_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> AppreciationService.GetAppreciation.RequestBuilder {
            builderResult = AppreciationService.GetAppreciation.Request()
            return self
          }
          public override func clone() -> AppreciationService.GetAppreciation.RequestBuilder {
            return AppreciationService.GetAppreciation.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> AppreciationService.GetAppreciation.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> AppreciationService.GetAppreciation.Request {
            var returnMe:AppreciationService.GetAppreciation.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:AppreciationService.GetAppreciation.Request) -> AppreciationService.GetAppreciation.RequestBuilder {
            if other.hasDestinationProfileId {
                 destination_profile_id = other.destination_profile_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->AppreciationService.GetAppreciation.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.GetAppreciation.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                destination_profile_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var appreciation:Array<AppreciationService.Containers.Appreciation>  = Array<AppreciationService.Containers.Appreciation>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementappreciation in appreciation {
                output.writeMessage(1, value:oneElementappreciation)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementappreciation in appreciation {
                size += WireFormat.computeMessageSize(1, value:oneElementappreciation)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> AppreciationService.GetAppreciation.Response {
            return AppreciationService.GetAppreciation.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AppreciationService.GetAppreciation.Response {
            return AppreciationService.GetAppreciation.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> AppreciationService.GetAppreciation.Response {
            return AppreciationService.GetAppreciation.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AppreciationService.GetAppreciation.Response {
            return AppreciationService.GetAppreciation.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> AppreciationService.GetAppreciation.Response {
            return AppreciationService.GetAppreciation.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.GetAppreciation.Response {
            return AppreciationService.GetAppreciation.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> AppreciationService.GetAppreciation.ResponseBuilder {
            return AppreciationService.GetAppreciation.Response.classBuilder() as AppreciationService.GetAppreciation.ResponseBuilder
          }
          public func builder() -> AppreciationService.GetAppreciation.ResponseBuilder {
            return classBuilder() as AppreciationService.GetAppreciation.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return AppreciationService.GetAppreciation.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return AppreciationService.GetAppreciation.Response.builder()
          }
          public func toBuilder() -> AppreciationService.GetAppreciation.ResponseBuilder {
            return AppreciationService.GetAppreciation.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:AppreciationService.GetAppreciation.Response) -> AppreciationService.GetAppreciation.ResponseBuilder {
            return AppreciationService.GetAppreciation.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var appreciationElementIndex:Int = 0
            for oneElementappreciation in appreciation {
                output += "\(indent) appreciation[\(appreciationElementIndex)] {\n"
                oneElementappreciation.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                appreciationElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementappreciation in appreciation {
                      hashCode = (hashCode &* 31) &+ oneElementappreciation.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "AppreciationService.GetAppreciation.Response"
          }
          override public func className() -> String {
              return "AppreciationService.GetAppreciation.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return AppreciationService.GetAppreciation.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:AppreciationService.GetAppreciation.Response

          required override public init () {
             builderResult = AppreciationService.GetAppreciation.Response()
             super.init()
          }
          public var appreciation:Array<AppreciationService.Containers.Appreciation> {
               get {
                   return builderResult.appreciation
               }
               set (value) {
                   builderResult.appreciation = value
               }
          }
          public func clearAppreciation() -> AppreciationService.GetAppreciation.ResponseBuilder {
            builderResult.appreciation.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> AppreciationService.GetAppreciation.ResponseBuilder {
            builderResult = AppreciationService.GetAppreciation.Response()
            return self
          }
          public override func clone() -> AppreciationService.GetAppreciation.ResponseBuilder {
            return AppreciationService.GetAppreciation.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> AppreciationService.GetAppreciation.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> AppreciationService.GetAppreciation.Response {
            var returnMe:AppreciationService.GetAppreciation.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:AppreciationService.GetAppreciation.Response) -> AppreciationService.GetAppreciation.ResponseBuilder {
            if !other.appreciation.isEmpty  {
               builderResult.appreciation += other.appreciation
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->AppreciationService.GetAppreciation.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.GetAppreciation.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = AppreciationService.Containers.Appreciation.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                appreciation += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> AppreciationService.GetAppreciation {
        return AppreciationService.GetAppreciation.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AppreciationService.GetAppreciation {
        return AppreciationService.GetAppreciation.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> AppreciationService.GetAppreciation {
        return AppreciationService.GetAppreciation.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AppreciationService.GetAppreciation {
        return AppreciationService.GetAppreciation.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> AppreciationService.GetAppreciation {
        return AppreciationService.GetAppreciation.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.GetAppreciation {
        return AppreciationService.GetAppreciation.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> AppreciationService.GetAppreciationBuilder {
        return AppreciationService.GetAppreciation.classBuilder() as AppreciationService.GetAppreciationBuilder
      }
      public func builder() -> AppreciationService.GetAppreciationBuilder {
        return classBuilder() as AppreciationService.GetAppreciationBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return AppreciationService.GetAppreciationBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return AppreciationService.GetAppreciation.builder()
      }
      public func toBuilder() -> AppreciationService.GetAppreciationBuilder {
        return AppreciationService.GetAppreciation.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:AppreciationService.GetAppreciation) -> AppreciationService.GetAppreciationBuilder {
        return AppreciationService.GetAppreciation.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "AppreciationService.GetAppreciation"
      }
      override public func className() -> String {
          return "AppreciationService.GetAppreciation"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return AppreciationService.GetAppreciation.self
      }


      //Meta information declaration end

    }

    final public class GetAppreciationBuilder : GeneratedMessageBuilder {
      private var builderResult:AppreciationService.GetAppreciation

      required override public init () {
         builderResult = AppreciationService.GetAppreciation()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> AppreciationService.GetAppreciationBuilder {
        builderResult = AppreciationService.GetAppreciation()
        return self
      }
      public override func clone() -> AppreciationService.GetAppreciationBuilder {
        return AppreciationService.GetAppreciation.builderWithPrototype(builderResult)
      }
      public override func build() -> AppreciationService.GetAppreciation {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> AppreciationService.GetAppreciation {
        var returnMe:AppreciationService.GetAppreciation = builderResult
        return returnMe
      }
      public func mergeFrom(other:AppreciationService.GetAppreciation) -> AppreciationService.GetAppreciationBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->AppreciationService.GetAppreciationBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.GetAppreciationBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class DeleteAppreciation : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "appreciation": return appreciation
                 default: return nil
                 }
          }

          public private(set) var hasAppreciation:Bool = false
          public private(set) var appreciation:AppreciationService.Containers.Appreciation = AppreciationService.Containers.Appreciation()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasAppreciation {
              output.writeMessage(1, value:appreciation)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasAppreciation {
              size += WireFormat.computeMessageSize(1, value:appreciation)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> AppreciationService.DeleteAppreciation.Request {
            return AppreciationService.DeleteAppreciation.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AppreciationService.DeleteAppreciation.Request {
            return AppreciationService.DeleteAppreciation.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> AppreciationService.DeleteAppreciation.Request {
            return AppreciationService.DeleteAppreciation.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AppreciationService.DeleteAppreciation.Request {
            return AppreciationService.DeleteAppreciation.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> AppreciationService.DeleteAppreciation.Request {
            return AppreciationService.DeleteAppreciation.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.DeleteAppreciation.Request {
            return AppreciationService.DeleteAppreciation.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> AppreciationService.DeleteAppreciation.RequestBuilder {
            return AppreciationService.DeleteAppreciation.Request.classBuilder() as AppreciationService.DeleteAppreciation.RequestBuilder
          }
          public func builder() -> AppreciationService.DeleteAppreciation.RequestBuilder {
            return classBuilder() as AppreciationService.DeleteAppreciation.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return AppreciationService.DeleteAppreciation.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return AppreciationService.DeleteAppreciation.Request.builder()
          }
          public func toBuilder() -> AppreciationService.DeleteAppreciation.RequestBuilder {
            return AppreciationService.DeleteAppreciation.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:AppreciationService.DeleteAppreciation.Request) -> AppreciationService.DeleteAppreciation.RequestBuilder {
            return AppreciationService.DeleteAppreciation.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasAppreciation {
              output += "\(indent) appreciation {\n"
              appreciation.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasAppreciation {
                    hashCode = (hashCode &* 31) &+ appreciation.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "AppreciationService.DeleteAppreciation.Request"
          }
          override public func className() -> String {
              return "AppreciationService.DeleteAppreciation.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return AppreciationService.DeleteAppreciation.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:AppreciationService.DeleteAppreciation.Request

          required override public init () {
             builderResult = AppreciationService.DeleteAppreciation.Request()
             super.init()
          }
          public var hasAppreciation:Bool {
               get {
                   return builderResult.hasAppreciation
               }
          }
          public var appreciation:AppreciationService.Containers.Appreciation {
               get {
                   return builderResult.appreciation
               }
               set (value) {
                   builderResult.hasAppreciation = true
                   builderResult.appreciation = value
               }
          }
          public func setAppreciationBuilder(builderForValue:AppreciationService.Containers.AppreciationBuilder) -> AppreciationService.DeleteAppreciation.RequestBuilder {
            appreciation = builderForValue.build()
            return self
          }
          public func mergeAppreciation(value:AppreciationService.Containers.Appreciation) -> AppreciationService.DeleteAppreciation.RequestBuilder {
            if (builderResult.hasAppreciation) {
              builderResult.appreciation = AppreciationService.Containers.Appreciation.builderWithPrototype(builderResult.appreciation).mergeFrom(value).buildPartial()
            } else {
              builderResult.appreciation = value
            }
            builderResult.hasAppreciation = true
            return self
          }
          public func clearAppreciation() -> AppreciationService.DeleteAppreciation.RequestBuilder {
            builderResult.hasAppreciation = false
            builderResult.appreciation = AppreciationService.Containers.Appreciation()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> AppreciationService.DeleteAppreciation.RequestBuilder {
            builderResult = AppreciationService.DeleteAppreciation.Request()
            return self
          }
          public override func clone() -> AppreciationService.DeleteAppreciation.RequestBuilder {
            return AppreciationService.DeleteAppreciation.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> AppreciationService.DeleteAppreciation.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> AppreciationService.DeleteAppreciation.Request {
            var returnMe:AppreciationService.DeleteAppreciation.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:AppreciationService.DeleteAppreciation.Request) -> AppreciationService.DeleteAppreciation.RequestBuilder {
            if (other.hasAppreciation) {
                mergeAppreciation(other.appreciation)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->AppreciationService.DeleteAppreciation.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.DeleteAppreciation.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:AppreciationService.Containers.AppreciationBuilder = AppreciationService.Containers.Appreciation.builder()
                if hasAppreciation {
                  subBuilder.mergeFrom(appreciation)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                appreciation = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 default: return nil
                 }
          }

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> AppreciationService.DeleteAppreciation.Response {
            return AppreciationService.DeleteAppreciation.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AppreciationService.DeleteAppreciation.Response {
            return AppreciationService.DeleteAppreciation.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> AppreciationService.DeleteAppreciation.Response {
            return AppreciationService.DeleteAppreciation.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AppreciationService.DeleteAppreciation.Response {
            return AppreciationService.DeleteAppreciation.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> AppreciationService.DeleteAppreciation.Response {
            return AppreciationService.DeleteAppreciation.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.DeleteAppreciation.Response {
            return AppreciationService.DeleteAppreciation.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> AppreciationService.DeleteAppreciation.ResponseBuilder {
            return AppreciationService.DeleteAppreciation.Response.classBuilder() as AppreciationService.DeleteAppreciation.ResponseBuilder
          }
          public func builder() -> AppreciationService.DeleteAppreciation.ResponseBuilder {
            return classBuilder() as AppreciationService.DeleteAppreciation.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return AppreciationService.DeleteAppreciation.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return AppreciationService.DeleteAppreciation.Response.builder()
          }
          public func toBuilder() -> AppreciationService.DeleteAppreciation.ResponseBuilder {
            return AppreciationService.DeleteAppreciation.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:AppreciationService.DeleteAppreciation.Response) -> AppreciationService.DeleteAppreciation.ResponseBuilder {
            return AppreciationService.DeleteAppreciation.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "AppreciationService.DeleteAppreciation.Response"
          }
          override public func className() -> String {
              return "AppreciationService.DeleteAppreciation.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return AppreciationService.DeleteAppreciation.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:AppreciationService.DeleteAppreciation.Response

          required override public init () {
             builderResult = AppreciationService.DeleteAppreciation.Response()
             super.init()
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> AppreciationService.DeleteAppreciation.ResponseBuilder {
            builderResult = AppreciationService.DeleteAppreciation.Response()
            return self
          }
          public override func clone() -> AppreciationService.DeleteAppreciation.ResponseBuilder {
            return AppreciationService.DeleteAppreciation.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> AppreciationService.DeleteAppreciation.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> AppreciationService.DeleteAppreciation.Response {
            var returnMe:AppreciationService.DeleteAppreciation.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:AppreciationService.DeleteAppreciation.Response) -> AppreciationService.DeleteAppreciation.ResponseBuilder {
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->AppreciationService.DeleteAppreciation.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.DeleteAppreciation.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> AppreciationService.DeleteAppreciation {
        return AppreciationService.DeleteAppreciation.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AppreciationService.DeleteAppreciation {
        return AppreciationService.DeleteAppreciation.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> AppreciationService.DeleteAppreciation {
        return AppreciationService.DeleteAppreciation.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AppreciationService.DeleteAppreciation {
        return AppreciationService.DeleteAppreciation.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> AppreciationService.DeleteAppreciation {
        return AppreciationService.DeleteAppreciation.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.DeleteAppreciation {
        return AppreciationService.DeleteAppreciation.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> AppreciationService.DeleteAppreciationBuilder {
        return AppreciationService.DeleteAppreciation.classBuilder() as AppreciationService.DeleteAppreciationBuilder
      }
      public func builder() -> AppreciationService.DeleteAppreciationBuilder {
        return classBuilder() as AppreciationService.DeleteAppreciationBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return AppreciationService.DeleteAppreciationBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return AppreciationService.DeleteAppreciation.builder()
      }
      public func toBuilder() -> AppreciationService.DeleteAppreciationBuilder {
        return AppreciationService.DeleteAppreciation.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:AppreciationService.DeleteAppreciation) -> AppreciationService.DeleteAppreciationBuilder {
        return AppreciationService.DeleteAppreciation.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "AppreciationService.DeleteAppreciation"
      }
      override public func className() -> String {
          return "AppreciationService.DeleteAppreciation"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return AppreciationService.DeleteAppreciation.self
      }


      //Meta information declaration end

    }

    final public class DeleteAppreciationBuilder : GeneratedMessageBuilder {
      private var builderResult:AppreciationService.DeleteAppreciation

      required override public init () {
         builderResult = AppreciationService.DeleteAppreciation()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> AppreciationService.DeleteAppreciationBuilder {
        builderResult = AppreciationService.DeleteAppreciation()
        return self
      }
      public override func clone() -> AppreciationService.DeleteAppreciationBuilder {
        return AppreciationService.DeleteAppreciation.builderWithPrototype(builderResult)
      }
      public override func build() -> AppreciationService.DeleteAppreciation {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> AppreciationService.DeleteAppreciation {
        var returnMe:AppreciationService.DeleteAppreciation = builderResult
        return returnMe
      }
      public func mergeFrom(other:AppreciationService.DeleteAppreciation) -> AppreciationService.DeleteAppreciationBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->AppreciationService.DeleteAppreciationBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.DeleteAppreciationBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class UpdateAppreciation : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "appreciation": return appreciation
                 default: return nil
                 }
          }

          public private(set) var hasAppreciation:Bool = false
          public private(set) var appreciation:AppreciationService.Containers.Appreciation = AppreciationService.Containers.Appreciation()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasAppreciation {
              output.writeMessage(1, value:appreciation)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasAppreciation {
              size += WireFormat.computeMessageSize(1, value:appreciation)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> AppreciationService.UpdateAppreciation.Request {
            return AppreciationService.UpdateAppreciation.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AppreciationService.UpdateAppreciation.Request {
            return AppreciationService.UpdateAppreciation.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> AppreciationService.UpdateAppreciation.Request {
            return AppreciationService.UpdateAppreciation.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AppreciationService.UpdateAppreciation.Request {
            return AppreciationService.UpdateAppreciation.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> AppreciationService.UpdateAppreciation.Request {
            return AppreciationService.UpdateAppreciation.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.UpdateAppreciation.Request {
            return AppreciationService.UpdateAppreciation.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> AppreciationService.UpdateAppreciation.RequestBuilder {
            return AppreciationService.UpdateAppreciation.Request.classBuilder() as AppreciationService.UpdateAppreciation.RequestBuilder
          }
          public func builder() -> AppreciationService.UpdateAppreciation.RequestBuilder {
            return classBuilder() as AppreciationService.UpdateAppreciation.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return AppreciationService.UpdateAppreciation.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return AppreciationService.UpdateAppreciation.Request.builder()
          }
          public func toBuilder() -> AppreciationService.UpdateAppreciation.RequestBuilder {
            return AppreciationService.UpdateAppreciation.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:AppreciationService.UpdateAppreciation.Request) -> AppreciationService.UpdateAppreciation.RequestBuilder {
            return AppreciationService.UpdateAppreciation.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasAppreciation {
              output += "\(indent) appreciation {\n"
              appreciation.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasAppreciation {
                    hashCode = (hashCode &* 31) &+ appreciation.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "AppreciationService.UpdateAppreciation.Request"
          }
          override public func className() -> String {
              return "AppreciationService.UpdateAppreciation.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return AppreciationService.UpdateAppreciation.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:AppreciationService.UpdateAppreciation.Request

          required override public init () {
             builderResult = AppreciationService.UpdateAppreciation.Request()
             super.init()
          }
          public var hasAppreciation:Bool {
               get {
                   return builderResult.hasAppreciation
               }
          }
          public var appreciation:AppreciationService.Containers.Appreciation {
               get {
                   return builderResult.appreciation
               }
               set (value) {
                   builderResult.hasAppreciation = true
                   builderResult.appreciation = value
               }
          }
          public func setAppreciationBuilder(builderForValue:AppreciationService.Containers.AppreciationBuilder) -> AppreciationService.UpdateAppreciation.RequestBuilder {
            appreciation = builderForValue.build()
            return self
          }
          public func mergeAppreciation(value:AppreciationService.Containers.Appreciation) -> AppreciationService.UpdateAppreciation.RequestBuilder {
            if (builderResult.hasAppreciation) {
              builderResult.appreciation = AppreciationService.Containers.Appreciation.builderWithPrototype(builderResult.appreciation).mergeFrom(value).buildPartial()
            } else {
              builderResult.appreciation = value
            }
            builderResult.hasAppreciation = true
            return self
          }
          public func clearAppreciation() -> AppreciationService.UpdateAppreciation.RequestBuilder {
            builderResult.hasAppreciation = false
            builderResult.appreciation = AppreciationService.Containers.Appreciation()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> AppreciationService.UpdateAppreciation.RequestBuilder {
            builderResult = AppreciationService.UpdateAppreciation.Request()
            return self
          }
          public override func clone() -> AppreciationService.UpdateAppreciation.RequestBuilder {
            return AppreciationService.UpdateAppreciation.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> AppreciationService.UpdateAppreciation.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> AppreciationService.UpdateAppreciation.Request {
            var returnMe:AppreciationService.UpdateAppreciation.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:AppreciationService.UpdateAppreciation.Request) -> AppreciationService.UpdateAppreciation.RequestBuilder {
            if (other.hasAppreciation) {
                mergeAppreciation(other.appreciation)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->AppreciationService.UpdateAppreciation.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.UpdateAppreciation.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:AppreciationService.Containers.AppreciationBuilder = AppreciationService.Containers.Appreciation.builder()
                if hasAppreciation {
                  subBuilder.mergeFrom(appreciation)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                appreciation = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          override public subscript (key: String) -> Any? {
                 switch key {
                 case "appreciation": return appreciation
                 default: return nil
                 }
          }

          public private(set) var hasAppreciation:Bool = false
          public private(set) var appreciation:AppreciationService.Containers.Appreciation = AppreciationService.Containers.Appreciation()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasAppreciation {
              output.writeMessage(1, value:appreciation)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasAppreciation {
              size += WireFormat.computeMessageSize(1, value:appreciation)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> AppreciationService.UpdateAppreciation.Response {
            return AppreciationService.UpdateAppreciation.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AppreciationService.UpdateAppreciation.Response {
            return AppreciationService.UpdateAppreciation.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> AppreciationService.UpdateAppreciation.Response {
            return AppreciationService.UpdateAppreciation.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AppreciationService.UpdateAppreciation.Response {
            return AppreciationService.UpdateAppreciation.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> AppreciationService.UpdateAppreciation.Response {
            return AppreciationService.UpdateAppreciation.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.UpdateAppreciation.Response {
            return AppreciationService.UpdateAppreciation.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> AppreciationService.UpdateAppreciation.ResponseBuilder {
            return AppreciationService.UpdateAppreciation.Response.classBuilder() as AppreciationService.UpdateAppreciation.ResponseBuilder
          }
          public func builder() -> AppreciationService.UpdateAppreciation.ResponseBuilder {
            return classBuilder() as AppreciationService.UpdateAppreciation.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return AppreciationService.UpdateAppreciation.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return AppreciationService.UpdateAppreciation.Response.builder()
          }
          public func toBuilder() -> AppreciationService.UpdateAppreciation.ResponseBuilder {
            return AppreciationService.UpdateAppreciation.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:AppreciationService.UpdateAppreciation.Response) -> AppreciationService.UpdateAppreciation.ResponseBuilder {
            return AppreciationService.UpdateAppreciation.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasAppreciation {
              output += "\(indent) appreciation {\n"
              appreciation.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasAppreciation {
                    hashCode = (hashCode &* 31) &+ appreciation.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "AppreciationService.UpdateAppreciation.Response"
          }
          override public func className() -> String {
              return "AppreciationService.UpdateAppreciation.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return AppreciationService.UpdateAppreciation.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:AppreciationService.UpdateAppreciation.Response

          required override public init () {
             builderResult = AppreciationService.UpdateAppreciation.Response()
             super.init()
          }
          public var hasAppreciation:Bool {
               get {
                   return builderResult.hasAppreciation
               }
          }
          public var appreciation:AppreciationService.Containers.Appreciation {
               get {
                   return builderResult.appreciation
               }
               set (value) {
                   builderResult.hasAppreciation = true
                   builderResult.appreciation = value
               }
          }
          public func setAppreciationBuilder(builderForValue:AppreciationService.Containers.AppreciationBuilder) -> AppreciationService.UpdateAppreciation.ResponseBuilder {
            appreciation = builderForValue.build()
            return self
          }
          public func mergeAppreciation(value:AppreciationService.Containers.Appreciation) -> AppreciationService.UpdateAppreciation.ResponseBuilder {
            if (builderResult.hasAppreciation) {
              builderResult.appreciation = AppreciationService.Containers.Appreciation.builderWithPrototype(builderResult.appreciation).mergeFrom(value).buildPartial()
            } else {
              builderResult.appreciation = value
            }
            builderResult.hasAppreciation = true
            return self
          }
          public func clearAppreciation() -> AppreciationService.UpdateAppreciation.ResponseBuilder {
            builderResult.hasAppreciation = false
            builderResult.appreciation = AppreciationService.Containers.Appreciation()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> AppreciationService.UpdateAppreciation.ResponseBuilder {
            builderResult = AppreciationService.UpdateAppreciation.Response()
            return self
          }
          public override func clone() -> AppreciationService.UpdateAppreciation.ResponseBuilder {
            return AppreciationService.UpdateAppreciation.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> AppreciationService.UpdateAppreciation.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> AppreciationService.UpdateAppreciation.Response {
            var returnMe:AppreciationService.UpdateAppreciation.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:AppreciationService.UpdateAppreciation.Response) -> AppreciationService.UpdateAppreciation.ResponseBuilder {
            if (other.hasAppreciation) {
                mergeAppreciation(other.appreciation)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->AppreciationService.UpdateAppreciation.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.UpdateAppreciation.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:AppreciationService.Containers.AppreciationBuilder = AppreciationService.Containers.Appreciation.builder()
                if hasAppreciation {
                  subBuilder.mergeFrom(appreciation)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                appreciation = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      override public subscript (key: String) -> Any? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> AppreciationService.UpdateAppreciation {
        return AppreciationService.UpdateAppreciation.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AppreciationService.UpdateAppreciation {
        return AppreciationService.UpdateAppreciation.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> AppreciationService.UpdateAppreciation {
        return AppreciationService.UpdateAppreciation.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AppreciationService.UpdateAppreciation {
        return AppreciationService.UpdateAppreciation.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> AppreciationService.UpdateAppreciation {
        return AppreciationService.UpdateAppreciation.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.UpdateAppreciation {
        return AppreciationService.UpdateAppreciation.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> AppreciationService.UpdateAppreciationBuilder {
        return AppreciationService.UpdateAppreciation.classBuilder() as AppreciationService.UpdateAppreciationBuilder
      }
      public func builder() -> AppreciationService.UpdateAppreciationBuilder {
        return classBuilder() as AppreciationService.UpdateAppreciationBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return AppreciationService.UpdateAppreciationBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return AppreciationService.UpdateAppreciation.builder()
      }
      public func toBuilder() -> AppreciationService.UpdateAppreciationBuilder {
        return AppreciationService.UpdateAppreciation.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:AppreciationService.UpdateAppreciation) -> AppreciationService.UpdateAppreciationBuilder {
        return AppreciationService.UpdateAppreciation.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "AppreciationService.UpdateAppreciation"
      }
      override public func className() -> String {
          return "AppreciationService.UpdateAppreciation"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return AppreciationService.UpdateAppreciation.self
      }


      //Meta information declaration end

    }

    final public class UpdateAppreciationBuilder : GeneratedMessageBuilder {
      private var builderResult:AppreciationService.UpdateAppreciation

      required override public init () {
         builderResult = AppreciationService.UpdateAppreciation()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> AppreciationService.UpdateAppreciationBuilder {
        builderResult = AppreciationService.UpdateAppreciation()
        return self
      }
      public override func clone() -> AppreciationService.UpdateAppreciationBuilder {
        return AppreciationService.UpdateAppreciation.builderWithPrototype(builderResult)
      }
      public override func build() -> AppreciationService.UpdateAppreciation {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> AppreciationService.UpdateAppreciation {
        var returnMe:AppreciationService.UpdateAppreciation = builderResult
        return returnMe
      }
      public func mergeFrom(other:AppreciationService.UpdateAppreciation) -> AppreciationService.UpdateAppreciationBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->AppreciationService.UpdateAppreciationBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService.UpdateAppreciationBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end

  override public subscript (key: String) -> Any? {
         switch key {
         default: return nil
         }
  }

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  public class func parseFromData(data:[Byte]) -> AppreciationService {
    return AppreciationService.builder().mergeFromData(data).build()
  }
  public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AppreciationService {
    return AppreciationService.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> AppreciationService {
    return AppreciationService.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AppreciationService {
    return AppreciationService.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> AppreciationService {
    return AppreciationService.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationService {
    return AppreciationService.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> AppreciationServiceBuilder {
    return AppreciationService.classBuilder() as AppreciationServiceBuilder
  }
  public func builder() -> AppreciationServiceBuilder {
    return classBuilder() as AppreciationServiceBuilder
  }
  public override class func classBuilder() -> MessageBuilder {
    return AppreciationServiceBuilder()
  }
  public override func classBuilder() -> MessageBuilder {
    return AppreciationService.builder()
  }
  public func toBuilder() -> AppreciationServiceBuilder {
    return AppreciationService.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:AppreciationService) -> AppreciationServiceBuilder {
    return AppreciationService.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "AppreciationService"
  }
  override public func className() -> String {
      return "AppreciationService"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return AppreciationService.self
  }


  //Meta information declaration end

}

final public class AppreciationServiceBuilder : GeneratedMessageBuilder {
  private var builderResult:AppreciationService

  required override public init () {
     builderResult = AppreciationService()
     super.init()
  }
  override public var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  public override func clear() -> AppreciationServiceBuilder {
    builderResult = AppreciationService()
    return self
  }
  public override func clone() -> AppreciationServiceBuilder {
    return AppreciationService.builderWithPrototype(builderResult)
  }
  public override func build() -> AppreciationService {
       checkInitialized()
       return buildPartial()
  }
  public func buildPartial() -> AppreciationService {
    var returnMe:AppreciationService = builderResult
    return returnMe
  }
  public func mergeFrom(other:AppreciationService) -> AppreciationServiceBuilder {
    mergeUnknownFields(other.unknownFields)
    return self
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream) ->AppreciationServiceBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AppreciationServiceBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


public extension AppreciationService.Containers.Appreciation {
    class func parseFromNSData(data:NSData) -> AppreciationService.Containers.Appreciation {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.Containers.Appreciation.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AppreciationService.Containers.Appreciation {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.Containers.Appreciation.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension AppreciationService.Containers {
    class func parseFromNSData(data:NSData) -> AppreciationService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.Containers.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AppreciationService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.Containers.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension AppreciationService.CreateAppreciation.Request {
    class func parseFromNSData(data:NSData) -> AppreciationService.CreateAppreciation.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.CreateAppreciation.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AppreciationService.CreateAppreciation.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.CreateAppreciation.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension AppreciationService.CreateAppreciation.Response {
    class func parseFromNSData(data:NSData) -> AppreciationService.CreateAppreciation.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.CreateAppreciation.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AppreciationService.CreateAppreciation.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.CreateAppreciation.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension AppreciationService.CreateAppreciation {
    class func parseFromNSData(data:NSData) -> AppreciationService.CreateAppreciation {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.CreateAppreciation.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AppreciationService.CreateAppreciation {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.CreateAppreciation.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension AppreciationService.GetAppreciation.Request {
    class func parseFromNSData(data:NSData) -> AppreciationService.GetAppreciation.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.GetAppreciation.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AppreciationService.GetAppreciation.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.GetAppreciation.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension AppreciationService.GetAppreciation.Response {
    class func parseFromNSData(data:NSData) -> AppreciationService.GetAppreciation.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.GetAppreciation.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AppreciationService.GetAppreciation.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.GetAppreciation.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension AppreciationService.GetAppreciation {
    class func parseFromNSData(data:NSData) -> AppreciationService.GetAppreciation {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.GetAppreciation.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AppreciationService.GetAppreciation {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.GetAppreciation.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension AppreciationService.DeleteAppreciation.Request {
    class func parseFromNSData(data:NSData) -> AppreciationService.DeleteAppreciation.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.DeleteAppreciation.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AppreciationService.DeleteAppreciation.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.DeleteAppreciation.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension AppreciationService.DeleteAppreciation.Response {
    class func parseFromNSData(data:NSData) -> AppreciationService.DeleteAppreciation.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.DeleteAppreciation.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AppreciationService.DeleteAppreciation.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.DeleteAppreciation.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension AppreciationService.DeleteAppreciation {
    class func parseFromNSData(data:NSData) -> AppreciationService.DeleteAppreciation {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.DeleteAppreciation.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AppreciationService.DeleteAppreciation {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.DeleteAppreciation.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension AppreciationService.UpdateAppreciation.Request {
    class func parseFromNSData(data:NSData) -> AppreciationService.UpdateAppreciation.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.UpdateAppreciation.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AppreciationService.UpdateAppreciation.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.UpdateAppreciation.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension AppreciationService.UpdateAppreciation.Response {
    class func parseFromNSData(data:NSData) -> AppreciationService.UpdateAppreciation.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.UpdateAppreciation.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AppreciationService.UpdateAppreciation.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.UpdateAppreciation.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension AppreciationService.UpdateAppreciation {
    class func parseFromNSData(data:NSData) -> AppreciationService.UpdateAppreciation {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.UpdateAppreciation.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AppreciationService.UpdateAppreciation {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.UpdateAppreciation.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension AppreciationService {
    class func parseFromNSData(data:NSData) -> AppreciationService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AppreciationService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AppreciationService.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
