// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

public struct OrganizationServiceRoot {
  public static var sharedInstance : OrganizationServiceRoot {
   struct Static {
       static let instance : OrganizationServiceRoot = OrganizationServiceRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

public func == (lhs: OrganizationService.Containers, rhs: OrganizationService.Containers) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: OrganizationService.CreateOrganization, rhs: OrganizationService.CreateOrganization) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: OrganizationService.GetOrganization, rhs: OrganizationService.GetOrganization) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: OrganizationService.CreateTeam, rhs: OrganizationService.CreateTeam) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: OrganizationService.GetTeam, rhs: OrganizationService.GetTeam) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: OrganizationService.GetTeams, rhs: OrganizationService.GetTeams) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: OrganizationService.CreateAddress, rhs: OrganizationService.CreateAddress) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: OrganizationService.DeleteAddress, rhs: OrganizationService.DeleteAddress) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: OrganizationService.GetAddress, rhs: OrganizationService.GetAddress) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: OrganizationService.GetAddresses, rhs: OrganizationService.GetAddresses) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: OrganizationService, rhs: OrganizationService) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final public class OrganizationService : GeneratedMessage {


  //Nested type declaration start

    final public class Containers : GeneratedMessage {


      //Nested type declaration start

        final public class Organization : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "id": return id
                 case "name": return name
                 case "domain": return domain
                 default: return nil
                 }
          }

          public private(set) var hasId:Bool = false
          public private(set) var id:String = ""

          public private(set) var hasName:Bool = false
          public private(set) var name:String = ""

          public private(set) var hasDomain:Bool = false
          public private(set) var domain:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasId {
              output.writeString(1, value:id)
            }
            if hasName {
              output.writeString(2, value:name)
            }
            if hasDomain {
              output.writeString(3, value:domain)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasId {
              size += WireFormat.computeStringSize(1, value:id)
            }
            if hasName {
              size += WireFormat.computeStringSize(2, value:name)
            }
            if hasDomain {
              size += WireFormat.computeStringSize(3, value:domain)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.Containers.Organization {
            return OrganizationService.Containers.Organization.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.Containers.Organization {
            return OrganizationService.Containers.Organization.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.Containers.Organization {
            return OrganizationService.Containers.Organization.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.Containers.Organization {
            return OrganizationService.Containers.Organization.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.Containers.Organization {
            return OrganizationService.Containers.Organization.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.Containers.Organization {
            return OrganizationService.Containers.Organization.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.Containers.OrganizationBuilder {
            return OrganizationService.Containers.Organization.classBuilder() as OrganizationService.Containers.OrganizationBuilder
          }
          public func builder() -> OrganizationService.Containers.OrganizationBuilder {
            return classBuilder() as OrganizationService.Containers.OrganizationBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.Containers.OrganizationBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.Containers.Organization.builder()
          }
          public func toBuilder() -> OrganizationService.Containers.OrganizationBuilder {
            return OrganizationService.Containers.Organization.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.Containers.Organization) -> OrganizationService.Containers.OrganizationBuilder {
            return OrganizationService.Containers.Organization.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasId {
              output += "\(indent) id: \(id) \n"
            }
            if hasName {
              output += "\(indent) name: \(name) \n"
            }
            if hasDomain {
              output += "\(indent) domain: \(domain) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasId {
                     hashCode = (hashCode &* 31) &+ id.hashValue
                  }
                  if hasName {
                     hashCode = (hashCode &* 31) &+ name.hashValue
                  }
                  if hasDomain {
                     hashCode = (hashCode &* 31) &+ domain.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.Containers.Organization"
          }
          override public func className() -> String {
              return "OrganizationService.Containers.Organization"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.Containers.Organization.self
          }


          //Meta information declaration end

        }

        final public class OrganizationBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.Containers.Organization

          required override public init () {
             builderResult = OrganizationService.Containers.Organization()
             super.init()
          }
          public var hasId:Bool {
               get {
                    return builderResult.hasId
               }
          }
          public var id:String {
               get {
                    return builderResult.id
               }
               set (value) {
                   builderResult.hasId = true
                   builderResult.id = value
               }
          }
          public func clearId() -> OrganizationService.Containers.OrganizationBuilder{
               builderResult.hasId = false
               builderResult.id = ""
               return self
          }
          public var hasName:Bool {
               get {
                    return builderResult.hasName
               }
          }
          public var name:String {
               get {
                    return builderResult.name
               }
               set (value) {
                   builderResult.hasName = true
                   builderResult.name = value
               }
          }
          public func clearName() -> OrganizationService.Containers.OrganizationBuilder{
               builderResult.hasName = false
               builderResult.name = ""
               return self
          }
          public var hasDomain:Bool {
               get {
                    return builderResult.hasDomain
               }
          }
          public var domain:String {
               get {
                    return builderResult.domain
               }
               set (value) {
                   builderResult.hasDomain = true
                   builderResult.domain = value
               }
          }
          public func clearDomain() -> OrganizationService.Containers.OrganizationBuilder{
               builderResult.hasDomain = false
               builderResult.domain = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.Containers.OrganizationBuilder {
            builderResult = OrganizationService.Containers.Organization()
            return self
          }
          public override func clone() -> OrganizationService.Containers.OrganizationBuilder {
            return OrganizationService.Containers.Organization.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.Containers.Organization {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.Containers.Organization {
            var returnMe:OrganizationService.Containers.Organization = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.Containers.Organization) -> OrganizationService.Containers.OrganizationBuilder {
            if (other == OrganizationService.Containers.Organization()) {
             return self
            }
            if other.hasId {
                 id = other.id
            }
            if other.hasName {
                 name = other.name
            }
            if other.hasDomain {
                 domain = other.domain
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.Containers.OrganizationBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.Containers.OrganizationBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                id = input.readString()

              case 18 :
                name = input.readString()

              case 26 :
                domain = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Team : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "id": return id
                 case "name": return name
                 case "owner_id": return owner_id
                 case "organization_id": return organization_id
                 case "department": return department
                 default: return nil
                 }
          }

          public private(set) var hasId:Bool = false
          public private(set) var id:String = ""

          public private(set) var hasName:Bool = false
          public private(set) var name:String = ""

          public private(set) var hasOwnerId:Bool = false
          public private(set) var owner_id:String = ""

          public private(set) var hasOrganizationId:Bool = false
          public private(set) var organization_id:String = ""

          public private(set) var hasDepartment:Bool = false
          public private(set) var department:String = ""

          public private(set) var path:Array<String> = Array<String>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasId {
              output.writeString(1, value:id)
            }
            if hasName {
              output.writeString(2, value:name)
            }
            if hasOwnerId {
              output.writeString(3, value:owner_id)
            }
            if hasOrganizationId {
              output.writeString(4, value:organization_id)
            }
            if !path.isEmpty {
              for oneValuepath in path {
                output.writeString(5, value:oneValuepath)
              }
            }
            if hasDepartment {
              output.writeString(6, value:department)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasId {
              size += WireFormat.computeStringSize(1, value:id)
            }
            if hasName {
              size += WireFormat.computeStringSize(2, value:name)
            }
            if hasOwnerId {
              size += WireFormat.computeStringSize(3, value:owner_id)
            }
            if hasOrganizationId {
              size += WireFormat.computeStringSize(4, value:organization_id)
            }
            var dataSizePath:Int32 = 0
            for oneValuepath in path {
                dataSizePath += WireFormat.computeStringSizeNoTag(oneValuepath)
            }
            size += dataSizePath
            size += 1 * Int32(path.count)
            if hasDepartment {
              size += WireFormat.computeStringSize(6, value:department)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.Containers.Team {
            return OrganizationService.Containers.Team.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.Containers.Team {
            return OrganizationService.Containers.Team.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.Containers.Team {
            return OrganizationService.Containers.Team.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.Containers.Team {
            return OrganizationService.Containers.Team.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.Containers.Team {
            return OrganizationService.Containers.Team.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.Containers.Team {
            return OrganizationService.Containers.Team.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.Containers.TeamBuilder {
            return OrganizationService.Containers.Team.classBuilder() as OrganizationService.Containers.TeamBuilder
          }
          public func builder() -> OrganizationService.Containers.TeamBuilder {
            return classBuilder() as OrganizationService.Containers.TeamBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.Containers.TeamBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.Containers.Team.builder()
          }
          public func toBuilder() -> OrganizationService.Containers.TeamBuilder {
            return OrganizationService.Containers.Team.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.Containers.Team) -> OrganizationService.Containers.TeamBuilder {
            return OrganizationService.Containers.Team.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasId {
              output += "\(indent) id: \(id) \n"
            }
            if hasName {
              output += "\(indent) name: \(name) \n"
            }
            if hasOwnerId {
              output += "\(indent) owner_id: \(owner_id) \n"
            }
            if hasOrganizationId {
              output += "\(indent) organization_id: \(organization_id) \n"
            }
            var pathElementIndex:Int = 0
            for oneValuepath in path  {
                output += "\(indent) path[\(pathElementIndex)]: \(oneValuepath)\n"
                pathElementIndex++
            }
            if hasDepartment {
              output += "\(indent) department: \(department) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasId {
                     hashCode = (hashCode &* 31) &+ id.hashValue
                  }
                  if hasName {
                     hashCode = (hashCode &* 31) &+ name.hashValue
                  }
                  if hasOwnerId {
                     hashCode = (hashCode &* 31) &+ owner_id.hashValue
                  }
                  if hasOrganizationId {
                     hashCode = (hashCode &* 31) &+ organization_id.hashValue
                  }
                  for oneValuepath in path {
                      hashCode = (hashCode &* 31) &+ oneValuepath.hashValue
                  }
                  if hasDepartment {
                     hashCode = (hashCode &* 31) &+ department.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.Containers.Team"
          }
          override public func className() -> String {
              return "OrganizationService.Containers.Team"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.Containers.Team.self
          }


          //Meta information declaration end

        }

        final public class TeamBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.Containers.Team

          required override public init () {
             builderResult = OrganizationService.Containers.Team()
             super.init()
          }
          public var hasId:Bool {
               get {
                    return builderResult.hasId
               }
          }
          public var id:String {
               get {
                    return builderResult.id
               }
               set (value) {
                   builderResult.hasId = true
                   builderResult.id = value
               }
          }
          public func clearId() -> OrganizationService.Containers.TeamBuilder{
               builderResult.hasId = false
               builderResult.id = ""
               return self
          }
          public var hasName:Bool {
               get {
                    return builderResult.hasName
               }
          }
          public var name:String {
               get {
                    return builderResult.name
               }
               set (value) {
                   builderResult.hasName = true
                   builderResult.name = value
               }
          }
          public func clearName() -> OrganizationService.Containers.TeamBuilder{
               builderResult.hasName = false
               builderResult.name = ""
               return self
          }
          public var hasOwnerId:Bool {
               get {
                    return builderResult.hasOwnerId
               }
          }
          public var owner_id:String {
               get {
                    return builderResult.owner_id
               }
               set (value) {
                   builderResult.hasOwnerId = true
                   builderResult.owner_id = value
               }
          }
          public func clearOwnerId() -> OrganizationService.Containers.TeamBuilder{
               builderResult.hasOwnerId = false
               builderResult.owner_id = ""
               return self
          }
          public var hasOrganizationId:Bool {
               get {
                    return builderResult.hasOrganizationId
               }
          }
          public var organization_id:String {
               get {
                    return builderResult.organization_id
               }
               set (value) {
                   builderResult.hasOrganizationId = true
                   builderResult.organization_id = value
               }
          }
          public func clearOrganizationId() -> OrganizationService.Containers.TeamBuilder{
               builderResult.hasOrganizationId = false
               builderResult.organization_id = ""
               return self
          }
          public var path:Array<String> {
               get {
                   return builderResult.path
               }
               set (array) {
                   builderResult.path = array
               }
          }
          public func clearPath() -> OrganizationService.Containers.TeamBuilder {
             builderResult.path.removeAll(keepCapacity: false)
             return self
          }
          public var hasDepartment:Bool {
               get {
                    return builderResult.hasDepartment
               }
          }
          public var department:String {
               get {
                    return builderResult.department
               }
               set (value) {
                   builderResult.hasDepartment = true
                   builderResult.department = value
               }
          }
          public func clearDepartment() -> OrganizationService.Containers.TeamBuilder{
               builderResult.hasDepartment = false
               builderResult.department = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.Containers.TeamBuilder {
            builderResult = OrganizationService.Containers.Team()
            return self
          }
          public override func clone() -> OrganizationService.Containers.TeamBuilder {
            return OrganizationService.Containers.Team.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.Containers.Team {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.Containers.Team {
            var returnMe:OrganizationService.Containers.Team = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.Containers.Team) -> OrganizationService.Containers.TeamBuilder {
            if (other == OrganizationService.Containers.Team()) {
             return self
            }
            if other.hasId {
                 id = other.id
            }
            if other.hasName {
                 name = other.name
            }
            if other.hasOwnerId {
                 owner_id = other.owner_id
            }
            if other.hasOrganizationId {
                 organization_id = other.organization_id
            }
            if !other.path.isEmpty {
                builderResult.path += other.path
            }
            if other.hasDepartment {
                 department = other.department
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.Containers.TeamBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.Containers.TeamBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                id = input.readString()

              case 18 :
                name = input.readString()

              case 26 :
                owner_id = input.readString()

              case 34 :
                organization_id = input.readString()

              case 42 :
                path += [input.readString()]

              case 50 :
                department = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Address : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "id": return id
                 case "organization_id": return organization_id
                 case "name": return name
                 case "address_1": return address_1
                 case "address_2": return address_2
                 case "city": return city
                 case "region": return region
                 case "postal_code": return postal_code
                 case "country_code": return country_code
                 default: return nil
                 }
          }

          public private(set) var hasId:Bool = false
          public private(set) var id:String = ""

          public private(set) var hasOrganizationId:Bool = false
          public private(set) var organization_id:String = ""

          public private(set) var hasName:Bool = false
          public private(set) var name:String = ""

          public private(set) var hasAddress1:Bool = false
          public private(set) var address_1:String = ""

          public private(set) var hasAddress2:Bool = false
          public private(set) var address_2:String = ""

          public private(set) var hasCity:Bool = false
          public private(set) var city:String = ""

          public private(set) var hasRegion:Bool = false
          public private(set) var region:String = ""

          public private(set) var hasPostalCode:Bool = false
          public private(set) var postal_code:String = ""

          public private(set) var hasCountryCode:Bool = false
          public private(set) var country_code:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasId {
              output.writeString(1, value:id)
            }
            if hasOrganizationId {
              output.writeString(2, value:organization_id)
            }
            if hasName {
              output.writeString(3, value:name)
            }
            if hasAddress1 {
              output.writeString(4, value:address_1)
            }
            if hasAddress2 {
              output.writeString(5, value:address_2)
            }
            if hasCity {
              output.writeString(6, value:city)
            }
            if hasRegion {
              output.writeString(7, value:region)
            }
            if hasPostalCode {
              output.writeString(8, value:postal_code)
            }
            if hasCountryCode {
              output.writeString(9, value:country_code)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasId {
              size += WireFormat.computeStringSize(1, value:id)
            }
            if hasOrganizationId {
              size += WireFormat.computeStringSize(2, value:organization_id)
            }
            if hasName {
              size += WireFormat.computeStringSize(3, value:name)
            }
            if hasAddress1 {
              size += WireFormat.computeStringSize(4, value:address_1)
            }
            if hasAddress2 {
              size += WireFormat.computeStringSize(5, value:address_2)
            }
            if hasCity {
              size += WireFormat.computeStringSize(6, value:city)
            }
            if hasRegion {
              size += WireFormat.computeStringSize(7, value:region)
            }
            if hasPostalCode {
              size += WireFormat.computeStringSize(8, value:postal_code)
            }
            if hasCountryCode {
              size += WireFormat.computeStringSize(9, value:country_code)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.Containers.Address {
            return OrganizationService.Containers.Address.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.Containers.Address {
            return OrganizationService.Containers.Address.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.Containers.Address {
            return OrganizationService.Containers.Address.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.Containers.Address {
            return OrganizationService.Containers.Address.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.Containers.Address {
            return OrganizationService.Containers.Address.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.Containers.Address {
            return OrganizationService.Containers.Address.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.Containers.AddressBuilder {
            return OrganizationService.Containers.Address.classBuilder() as OrganizationService.Containers.AddressBuilder
          }
          public func builder() -> OrganizationService.Containers.AddressBuilder {
            return classBuilder() as OrganizationService.Containers.AddressBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.Containers.AddressBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.Containers.Address.builder()
          }
          public func toBuilder() -> OrganizationService.Containers.AddressBuilder {
            return OrganizationService.Containers.Address.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.Containers.Address) -> OrganizationService.Containers.AddressBuilder {
            return OrganizationService.Containers.Address.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasId {
              output += "\(indent) id: \(id) \n"
            }
            if hasOrganizationId {
              output += "\(indent) organization_id: \(organization_id) \n"
            }
            if hasName {
              output += "\(indent) name: \(name) \n"
            }
            if hasAddress1 {
              output += "\(indent) address_1: \(address_1) \n"
            }
            if hasAddress2 {
              output += "\(indent) address_2: \(address_2) \n"
            }
            if hasCity {
              output += "\(indent) city: \(city) \n"
            }
            if hasRegion {
              output += "\(indent) region: \(region) \n"
            }
            if hasPostalCode {
              output += "\(indent) postal_code: \(postal_code) \n"
            }
            if hasCountryCode {
              output += "\(indent) country_code: \(country_code) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasId {
                     hashCode = (hashCode &* 31) &+ id.hashValue
                  }
                  if hasOrganizationId {
                     hashCode = (hashCode &* 31) &+ organization_id.hashValue
                  }
                  if hasName {
                     hashCode = (hashCode &* 31) &+ name.hashValue
                  }
                  if hasAddress1 {
                     hashCode = (hashCode &* 31) &+ address_1.hashValue
                  }
                  if hasAddress2 {
                     hashCode = (hashCode &* 31) &+ address_2.hashValue
                  }
                  if hasCity {
                     hashCode = (hashCode &* 31) &+ city.hashValue
                  }
                  if hasRegion {
                     hashCode = (hashCode &* 31) &+ region.hashValue
                  }
                  if hasPostalCode {
                     hashCode = (hashCode &* 31) &+ postal_code.hashValue
                  }
                  if hasCountryCode {
                     hashCode = (hashCode &* 31) &+ country_code.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.Containers.Address"
          }
          override public func className() -> String {
              return "OrganizationService.Containers.Address"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.Containers.Address.self
          }


          //Meta information declaration end

        }

        final public class AddressBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.Containers.Address

          required override public init () {
             builderResult = OrganizationService.Containers.Address()
             super.init()
          }
          public var hasId:Bool {
               get {
                    return builderResult.hasId
               }
          }
          public var id:String {
               get {
                    return builderResult.id
               }
               set (value) {
                   builderResult.hasId = true
                   builderResult.id = value
               }
          }
          public func clearId() -> OrganizationService.Containers.AddressBuilder{
               builderResult.hasId = false
               builderResult.id = ""
               return self
          }
          public var hasOrganizationId:Bool {
               get {
                    return builderResult.hasOrganizationId
               }
          }
          public var organization_id:String {
               get {
                    return builderResult.organization_id
               }
               set (value) {
                   builderResult.hasOrganizationId = true
                   builderResult.organization_id = value
               }
          }
          public func clearOrganizationId() -> OrganizationService.Containers.AddressBuilder{
               builderResult.hasOrganizationId = false
               builderResult.organization_id = ""
               return self
          }
          public var hasName:Bool {
               get {
                    return builderResult.hasName
               }
          }
          public var name:String {
               get {
                    return builderResult.name
               }
               set (value) {
                   builderResult.hasName = true
                   builderResult.name = value
               }
          }
          public func clearName() -> OrganizationService.Containers.AddressBuilder{
               builderResult.hasName = false
               builderResult.name = ""
               return self
          }
          public var hasAddress1:Bool {
               get {
                    return builderResult.hasAddress1
               }
          }
          public var address_1:String {
               get {
                    return builderResult.address_1
               }
               set (value) {
                   builderResult.hasAddress1 = true
                   builderResult.address_1 = value
               }
          }
          public func clearAddress1() -> OrganizationService.Containers.AddressBuilder{
               builderResult.hasAddress1 = false
               builderResult.address_1 = ""
               return self
          }
          public var hasAddress2:Bool {
               get {
                    return builderResult.hasAddress2
               }
          }
          public var address_2:String {
               get {
                    return builderResult.address_2
               }
               set (value) {
                   builderResult.hasAddress2 = true
                   builderResult.address_2 = value
               }
          }
          public func clearAddress2() -> OrganizationService.Containers.AddressBuilder{
               builderResult.hasAddress2 = false
               builderResult.address_2 = ""
               return self
          }
          public var hasCity:Bool {
               get {
                    return builderResult.hasCity
               }
          }
          public var city:String {
               get {
                    return builderResult.city
               }
               set (value) {
                   builderResult.hasCity = true
                   builderResult.city = value
               }
          }
          public func clearCity() -> OrganizationService.Containers.AddressBuilder{
               builderResult.hasCity = false
               builderResult.city = ""
               return self
          }
          public var hasRegion:Bool {
               get {
                    return builderResult.hasRegion
               }
          }
          public var region:String {
               get {
                    return builderResult.region
               }
               set (value) {
                   builderResult.hasRegion = true
                   builderResult.region = value
               }
          }
          public func clearRegion() -> OrganizationService.Containers.AddressBuilder{
               builderResult.hasRegion = false
               builderResult.region = ""
               return self
          }
          public var hasPostalCode:Bool {
               get {
                    return builderResult.hasPostalCode
               }
          }
          public var postal_code:String {
               get {
                    return builderResult.postal_code
               }
               set (value) {
                   builderResult.hasPostalCode = true
                   builderResult.postal_code = value
               }
          }
          public func clearPostalCode() -> OrganizationService.Containers.AddressBuilder{
               builderResult.hasPostalCode = false
               builderResult.postal_code = ""
               return self
          }
          public var hasCountryCode:Bool {
               get {
                    return builderResult.hasCountryCode
               }
          }
          public var country_code:String {
               get {
                    return builderResult.country_code
               }
               set (value) {
                   builderResult.hasCountryCode = true
                   builderResult.country_code = value
               }
          }
          public func clearCountryCode() -> OrganizationService.Containers.AddressBuilder{
               builderResult.hasCountryCode = false
               builderResult.country_code = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.Containers.AddressBuilder {
            builderResult = OrganizationService.Containers.Address()
            return self
          }
          public override func clone() -> OrganizationService.Containers.AddressBuilder {
            return OrganizationService.Containers.Address.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.Containers.Address {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.Containers.Address {
            var returnMe:OrganizationService.Containers.Address = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.Containers.Address) -> OrganizationService.Containers.AddressBuilder {
            if (other == OrganizationService.Containers.Address()) {
             return self
            }
            if other.hasId {
                 id = other.id
            }
            if other.hasOrganizationId {
                 organization_id = other.organization_id
            }
            if other.hasName {
                 name = other.name
            }
            if other.hasAddress1 {
                 address_1 = other.address_1
            }
            if other.hasAddress2 {
                 address_2 = other.address_2
            }
            if other.hasCity {
                 city = other.city
            }
            if other.hasRegion {
                 region = other.region
            }
            if other.hasPostalCode {
                 postal_code = other.postal_code
            }
            if other.hasCountryCode {
                 country_code = other.country_code
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.Containers.AddressBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.Containers.AddressBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                id = input.readString()

              case 18 :
                organization_id = input.readString()

              case 26 :
                name = input.readString()

              case 34 :
                address_1 = input.readString()

              case 42 :
                address_2 = input.readString()

              case 50 :
                city = input.readString()

              case 58 :
                region = input.readString()

              case 66 :
                postal_code = input.readString()

              case 74 :
                country_code = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> OrganizationService.Containers {
        return OrganizationService.Containers.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.Containers {
        return OrganizationService.Containers.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.Containers {
        return OrganizationService.Containers.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.Containers {
        return OrganizationService.Containers.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.Containers {
        return OrganizationService.Containers.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.Containers {
        return OrganizationService.Containers.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> OrganizationService.ContainersBuilder {
        return OrganizationService.Containers.classBuilder() as OrganizationService.ContainersBuilder
      }
      public func builder() -> OrganizationService.ContainersBuilder {
        return classBuilder() as OrganizationService.ContainersBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return OrganizationService.ContainersBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return OrganizationService.Containers.builder()
      }
      public func toBuilder() -> OrganizationService.ContainersBuilder {
        return OrganizationService.Containers.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:OrganizationService.Containers) -> OrganizationService.ContainersBuilder {
        return OrganizationService.Containers.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "OrganizationService.Containers"
      }
      override public func className() -> String {
          return "OrganizationService.Containers"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return OrganizationService.Containers.self
      }


      //Meta information declaration end

    }

    final public class ContainersBuilder : GeneratedMessageBuilder {
      private var builderResult:OrganizationService.Containers

      required override public init () {
         builderResult = OrganizationService.Containers()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> OrganizationService.ContainersBuilder {
        builderResult = OrganizationService.Containers()
        return self
      }
      public override func clone() -> OrganizationService.ContainersBuilder {
        return OrganizationService.Containers.builderWithPrototype(builderResult)
      }
      public override func build() -> OrganizationService.Containers {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> OrganizationService.Containers {
        var returnMe:OrganizationService.Containers = builderResult
        return returnMe
      }
      public func mergeFrom(other:OrganizationService.Containers) -> OrganizationService.ContainersBuilder {
        if (other == OrganizationService.Containers()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.ContainersBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.ContainersBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class CreateOrganization : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "organization": return organization
                 default: return nil
                 }
          }

          public private(set) var hasOrganization:Bool = false
          public private(set) var organization:OrganizationService.Containers.Organization = OrganizationService.Containers.Organization()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasOrganization {
              output.writeMessage(1, value:organization)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasOrganization {
              size += WireFormat.computeMessageSize(1, value:organization)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.CreateOrganization.Request {
            return OrganizationService.CreateOrganization.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateOrganization.Request {
            return OrganizationService.CreateOrganization.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.CreateOrganization.Request {
            return OrganizationService.CreateOrganization.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.CreateOrganization.Request {
            return OrganizationService.CreateOrganization.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.CreateOrganization.Request {
            return OrganizationService.CreateOrganization.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateOrganization.Request {
            return OrganizationService.CreateOrganization.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.CreateOrganization.RequestBuilder {
            return OrganizationService.CreateOrganization.Request.classBuilder() as OrganizationService.CreateOrganization.RequestBuilder
          }
          public func builder() -> OrganizationService.CreateOrganization.RequestBuilder {
            return classBuilder() as OrganizationService.CreateOrganization.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.CreateOrganization.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.CreateOrganization.Request.builder()
          }
          public func toBuilder() -> OrganizationService.CreateOrganization.RequestBuilder {
            return OrganizationService.CreateOrganization.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.CreateOrganization.Request) -> OrganizationService.CreateOrganization.RequestBuilder {
            return OrganizationService.CreateOrganization.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasOrganization {
              output += "\(indent) organization {\n"
              organization.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasOrganization {
                    hashCode = (hashCode &* 31) &+ organization.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.CreateOrganization.Request"
          }
          override public func className() -> String {
              return "OrganizationService.CreateOrganization.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.CreateOrganization.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.CreateOrganization.Request

          required override public init () {
             builderResult = OrganizationService.CreateOrganization.Request()
             super.init()
          }
          public var hasOrganization:Bool {
               get {
                   return builderResult.hasOrganization
               }
          }
          public var organization:OrganizationService.Containers.Organization {
               get {
                   return builderResult.organization
               }
               set (value) {
                   builderResult.hasOrganization = true
                   builderResult.organization = value
               }
          }
          public func setOrganizationBuilder(builderForValue:OrganizationService.Containers.OrganizationBuilder) -> OrganizationService.CreateOrganization.RequestBuilder {
            organization = builderForValue.build()
            return self
          }
          public func mergeOrganization(value:OrganizationService.Containers.Organization) -> OrganizationService.CreateOrganization.RequestBuilder {
            if (builderResult.hasOrganization) {
              builderResult.organization = OrganizationService.Containers.Organization.builderWithPrototype(builderResult.organization).mergeFrom(value).buildPartial()
            } else {
              builderResult.organization = value
            }
            builderResult.hasOrganization = true
            return self
          }
          public func clearOrganization() -> OrganizationService.CreateOrganization.RequestBuilder {
            builderResult.hasOrganization = false
            builderResult.organization = OrganizationService.Containers.Organization()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.CreateOrganization.RequestBuilder {
            builderResult = OrganizationService.CreateOrganization.Request()
            return self
          }
          public override func clone() -> OrganizationService.CreateOrganization.RequestBuilder {
            return OrganizationService.CreateOrganization.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.CreateOrganization.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.CreateOrganization.Request {
            var returnMe:OrganizationService.CreateOrganization.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.CreateOrganization.Request) -> OrganizationService.CreateOrganization.RequestBuilder {
            if (other == OrganizationService.CreateOrganization.Request()) {
             return self
            }
            if (other.hasOrganization) {
                mergeOrganization(other.organization)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.CreateOrganization.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateOrganization.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:OrganizationService.Containers.OrganizationBuilder = OrganizationService.Containers.Organization.builder()
                if hasOrganization {
                  subBuilder.mergeFrom(organization)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                organization = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "organization": return organization
                 default: return nil
                 }
          }

          public private(set) var hasOrganization:Bool = false
          public private(set) var organization:OrganizationService.Containers.Organization = OrganizationService.Containers.Organization()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasOrganization {
              output.writeMessage(1, value:organization)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasOrganization {
              size += WireFormat.computeMessageSize(1, value:organization)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.CreateOrganization.Response {
            return OrganizationService.CreateOrganization.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateOrganization.Response {
            return OrganizationService.CreateOrganization.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.CreateOrganization.Response {
            return OrganizationService.CreateOrganization.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.CreateOrganization.Response {
            return OrganizationService.CreateOrganization.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.CreateOrganization.Response {
            return OrganizationService.CreateOrganization.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateOrganization.Response {
            return OrganizationService.CreateOrganization.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.CreateOrganization.ResponseBuilder {
            return OrganizationService.CreateOrganization.Response.classBuilder() as OrganizationService.CreateOrganization.ResponseBuilder
          }
          public func builder() -> OrganizationService.CreateOrganization.ResponseBuilder {
            return classBuilder() as OrganizationService.CreateOrganization.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.CreateOrganization.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.CreateOrganization.Response.builder()
          }
          public func toBuilder() -> OrganizationService.CreateOrganization.ResponseBuilder {
            return OrganizationService.CreateOrganization.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.CreateOrganization.Response) -> OrganizationService.CreateOrganization.ResponseBuilder {
            return OrganizationService.CreateOrganization.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasOrganization {
              output += "\(indent) organization {\n"
              organization.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasOrganization {
                    hashCode = (hashCode &* 31) &+ organization.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.CreateOrganization.Response"
          }
          override public func className() -> String {
              return "OrganizationService.CreateOrganization.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.CreateOrganization.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.CreateOrganization.Response

          required override public init () {
             builderResult = OrganizationService.CreateOrganization.Response()
             super.init()
          }
          public var hasOrganization:Bool {
               get {
                   return builderResult.hasOrganization
               }
          }
          public var organization:OrganizationService.Containers.Organization {
               get {
                   return builderResult.organization
               }
               set (value) {
                   builderResult.hasOrganization = true
                   builderResult.organization = value
               }
          }
          public func setOrganizationBuilder(builderForValue:OrganizationService.Containers.OrganizationBuilder) -> OrganizationService.CreateOrganization.ResponseBuilder {
            organization = builderForValue.build()
            return self
          }
          public func mergeOrganization(value:OrganizationService.Containers.Organization) -> OrganizationService.CreateOrganization.ResponseBuilder {
            if (builderResult.hasOrganization) {
              builderResult.organization = OrganizationService.Containers.Organization.builderWithPrototype(builderResult.organization).mergeFrom(value).buildPartial()
            } else {
              builderResult.organization = value
            }
            builderResult.hasOrganization = true
            return self
          }
          public func clearOrganization() -> OrganizationService.CreateOrganization.ResponseBuilder {
            builderResult.hasOrganization = false
            builderResult.organization = OrganizationService.Containers.Organization()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.CreateOrganization.ResponseBuilder {
            builderResult = OrganizationService.CreateOrganization.Response()
            return self
          }
          public override func clone() -> OrganizationService.CreateOrganization.ResponseBuilder {
            return OrganizationService.CreateOrganization.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.CreateOrganization.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.CreateOrganization.Response {
            var returnMe:OrganizationService.CreateOrganization.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.CreateOrganization.Response) -> OrganizationService.CreateOrganization.ResponseBuilder {
            if (other == OrganizationService.CreateOrganization.Response()) {
             return self
            }
            if (other.hasOrganization) {
                mergeOrganization(other.organization)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.CreateOrganization.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateOrganization.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:OrganizationService.Containers.OrganizationBuilder = OrganizationService.Containers.Organization.builder()
                if hasOrganization {
                  subBuilder.mergeFrom(organization)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                organization = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> OrganizationService.CreateOrganization {
        return OrganizationService.CreateOrganization.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateOrganization {
        return OrganizationService.CreateOrganization.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.CreateOrganization {
        return OrganizationService.CreateOrganization.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.CreateOrganization {
        return OrganizationService.CreateOrganization.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.CreateOrganization {
        return OrganizationService.CreateOrganization.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateOrganization {
        return OrganizationService.CreateOrganization.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> OrganizationService.CreateOrganizationBuilder {
        return OrganizationService.CreateOrganization.classBuilder() as OrganizationService.CreateOrganizationBuilder
      }
      public func builder() -> OrganizationService.CreateOrganizationBuilder {
        return classBuilder() as OrganizationService.CreateOrganizationBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return OrganizationService.CreateOrganizationBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return OrganizationService.CreateOrganization.builder()
      }
      public func toBuilder() -> OrganizationService.CreateOrganizationBuilder {
        return OrganizationService.CreateOrganization.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:OrganizationService.CreateOrganization) -> OrganizationService.CreateOrganizationBuilder {
        return OrganizationService.CreateOrganization.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "OrganizationService.CreateOrganization"
      }
      override public func className() -> String {
          return "OrganizationService.CreateOrganization"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return OrganizationService.CreateOrganization.self
      }


      //Meta information declaration end

    }

    final public class CreateOrganizationBuilder : GeneratedMessageBuilder {
      private var builderResult:OrganizationService.CreateOrganization

      required override public init () {
         builderResult = OrganizationService.CreateOrganization()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> OrganizationService.CreateOrganizationBuilder {
        builderResult = OrganizationService.CreateOrganization()
        return self
      }
      public override func clone() -> OrganizationService.CreateOrganizationBuilder {
        return OrganizationService.CreateOrganization.builderWithPrototype(builderResult)
      }
      public override func build() -> OrganizationService.CreateOrganization {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> OrganizationService.CreateOrganization {
        var returnMe:OrganizationService.CreateOrganization = builderResult
        return returnMe
      }
      public func mergeFrom(other:OrganizationService.CreateOrganization) -> OrganizationService.CreateOrganizationBuilder {
        if (other == OrganizationService.CreateOrganization()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.CreateOrganizationBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateOrganizationBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetOrganization : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {


          //OneOf declaration start

          public enum LookupKey {
            case LookupKeyOneOfNotSet

            public func checkOneOfIsSet() -> Bool {
                 switch self {
                 case .LookupKeyOneOfNotSet:
                      return false
                 default:
                      return true
                 }
            }
            case OrganizationId(String)

            public static func getOrganizationId(value:LookupKey) ->String? {
                 switch value {
                 case .OrganizationId(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
            case OrganizationDomain(String)

            public static func getOrganizationDomain(value:LookupKey) ->String? {
                 switch value {
                 case .OrganizationDomain(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
          }



          //OneOf declaration end

          private var storageLookupKey:OrganizationService.GetOrganization.Request.LookupKey =  OrganizationService.GetOrganization.Request.LookupKey.LookupKeyOneOfNotSet
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "organization_id": return organization_id
                 case "organization_domain": return organization_domain
                 default: return nil
                 }
          }

          public private(set) var hasOrganizationId:Bool {
                get {
                     if OrganizationService.GetOrganization.Request.LookupKey.getOrganizationId(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var organization_id:String!{
               get {
                    return OrganizationService.GetOrganization.Request.LookupKey.getOrganizationId(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = OrganizationService.GetOrganization.Request.LookupKey.OrganizationId(newvalue)
               }
          }
          public private(set) var hasOrganizationDomain:Bool {
                get {
                     if OrganizationService.GetOrganization.Request.LookupKey.getOrganizationDomain(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var organization_domain:String!{
               get {
                    return OrganizationService.GetOrganization.Request.LookupKey.getOrganizationDomain(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = OrganizationService.GetOrganization.Request.LookupKey.OrganizationDomain(newvalue)
               }
          }
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasOrganizationId {
              output.writeString(1, value:organization_id)
            }
            if hasOrganizationDomain {
              output.writeString(2, value:organization_domain)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasOrganizationId {
              size += WireFormat.computeStringSize(1, value:organization_id)
            }
            if hasOrganizationDomain {
              size += WireFormat.computeStringSize(2, value:organization_domain)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.GetOrganization.Request {
            return OrganizationService.GetOrganization.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.GetOrganization.Request {
            return OrganizationService.GetOrganization.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.GetOrganization.Request {
            return OrganizationService.GetOrganization.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.GetOrganization.Request {
            return OrganizationService.GetOrganization.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.GetOrganization.Request {
            return OrganizationService.GetOrganization.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetOrganization.Request {
            return OrganizationService.GetOrganization.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.GetOrganization.RequestBuilder {
            return OrganizationService.GetOrganization.Request.classBuilder() as OrganizationService.GetOrganization.RequestBuilder
          }
          public func builder() -> OrganizationService.GetOrganization.RequestBuilder {
            return classBuilder() as OrganizationService.GetOrganization.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.GetOrganization.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.GetOrganization.Request.builder()
          }
          public func toBuilder() -> OrganizationService.GetOrganization.RequestBuilder {
            return OrganizationService.GetOrganization.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.GetOrganization.Request) -> OrganizationService.GetOrganization.RequestBuilder {
            return OrganizationService.GetOrganization.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasOrganizationId {
              output += "\(indent) organization_id: \(organization_id) \n"
            }
            if hasOrganizationDomain {
              output += "\(indent) organization_domain: \(organization_domain) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasOrganizationId {
                     hashCode = (hashCode &* 31) &+ organization_id.hashValue
                  }
                  if hasOrganizationDomain {
                     hashCode = (hashCode &* 31) &+ organization_domain.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.GetOrganization.Request"
          }
          override public func className() -> String {
              return "OrganizationService.GetOrganization.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.GetOrganization.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.GetOrganization.Request

          required override public init () {
             builderResult = OrganizationService.GetOrganization.Request()
             super.init()
          }
          public var hasOrganizationId:Bool {
               get {
                    return builderResult.hasOrganizationId
               }
          }
          public var organization_id:String {
               get {
                    return builderResult.organization_id
               }
               set (value) {
                   builderResult.hasOrganizationId = true
                   builderResult.organization_id = value
               }
          }
          public func clearOrganizationId() -> OrganizationService.GetOrganization.RequestBuilder{
               builderResult.hasOrganizationId = false
               builderResult.organization_id = ""
               return self
          }
          public var hasOrganizationDomain:Bool {
               get {
                    return builderResult.hasOrganizationDomain
               }
          }
          public var organization_domain:String {
               get {
                    return builderResult.organization_domain
               }
               set (value) {
                   builderResult.hasOrganizationDomain = true
                   builderResult.organization_domain = value
               }
          }
          public func clearOrganizationDomain() -> OrganizationService.GetOrganization.RequestBuilder{
               builderResult.hasOrganizationDomain = false
               builderResult.organization_domain = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.GetOrganization.RequestBuilder {
            builderResult = OrganizationService.GetOrganization.Request()
            return self
          }
          public override func clone() -> OrganizationService.GetOrganization.RequestBuilder {
            return OrganizationService.GetOrganization.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.GetOrganization.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.GetOrganization.Request {
            var returnMe:OrganizationService.GetOrganization.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.GetOrganization.Request) -> OrganizationService.GetOrganization.RequestBuilder {
            if (other == OrganizationService.GetOrganization.Request()) {
             return self
            }
            if other.hasOrganizationId {
                 organization_id = other.organization_id
            }
            if other.hasOrganizationDomain {
                 organization_domain = other.organization_domain
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.GetOrganization.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetOrganization.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                organization_id = input.readString()

              case 18 :
                organization_domain = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "organization": return organization
                 default: return nil
                 }
          }

          public private(set) var hasOrganization:Bool = false
          public private(set) var organization:OrganizationService.Containers.Organization = OrganizationService.Containers.Organization()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasOrganization {
              output.writeMessage(1, value:organization)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasOrganization {
              size += WireFormat.computeMessageSize(1, value:organization)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.GetOrganization.Response {
            return OrganizationService.GetOrganization.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.GetOrganization.Response {
            return OrganizationService.GetOrganization.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.GetOrganization.Response {
            return OrganizationService.GetOrganization.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.GetOrganization.Response {
            return OrganizationService.GetOrganization.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.GetOrganization.Response {
            return OrganizationService.GetOrganization.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetOrganization.Response {
            return OrganizationService.GetOrganization.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.GetOrganization.ResponseBuilder {
            return OrganizationService.GetOrganization.Response.classBuilder() as OrganizationService.GetOrganization.ResponseBuilder
          }
          public func builder() -> OrganizationService.GetOrganization.ResponseBuilder {
            return classBuilder() as OrganizationService.GetOrganization.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.GetOrganization.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.GetOrganization.Response.builder()
          }
          public func toBuilder() -> OrganizationService.GetOrganization.ResponseBuilder {
            return OrganizationService.GetOrganization.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.GetOrganization.Response) -> OrganizationService.GetOrganization.ResponseBuilder {
            return OrganizationService.GetOrganization.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasOrganization {
              output += "\(indent) organization {\n"
              organization.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasOrganization {
                    hashCode = (hashCode &* 31) &+ organization.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.GetOrganization.Response"
          }
          override public func className() -> String {
              return "OrganizationService.GetOrganization.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.GetOrganization.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.GetOrganization.Response

          required override public init () {
             builderResult = OrganizationService.GetOrganization.Response()
             super.init()
          }
          public var hasOrganization:Bool {
               get {
                   return builderResult.hasOrganization
               }
          }
          public var organization:OrganizationService.Containers.Organization {
               get {
                   return builderResult.organization
               }
               set (value) {
                   builderResult.hasOrganization = true
                   builderResult.organization = value
               }
          }
          public func setOrganizationBuilder(builderForValue:OrganizationService.Containers.OrganizationBuilder) -> OrganizationService.GetOrganization.ResponseBuilder {
            organization = builderForValue.build()
            return self
          }
          public func mergeOrganization(value:OrganizationService.Containers.Organization) -> OrganizationService.GetOrganization.ResponseBuilder {
            if (builderResult.hasOrganization) {
              builderResult.organization = OrganizationService.Containers.Organization.builderWithPrototype(builderResult.organization).mergeFrom(value).buildPartial()
            } else {
              builderResult.organization = value
            }
            builderResult.hasOrganization = true
            return self
          }
          public func clearOrganization() -> OrganizationService.GetOrganization.ResponseBuilder {
            builderResult.hasOrganization = false
            builderResult.organization = OrganizationService.Containers.Organization()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.GetOrganization.ResponseBuilder {
            builderResult = OrganizationService.GetOrganization.Response()
            return self
          }
          public override func clone() -> OrganizationService.GetOrganization.ResponseBuilder {
            return OrganizationService.GetOrganization.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.GetOrganization.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.GetOrganization.Response {
            var returnMe:OrganizationService.GetOrganization.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.GetOrganization.Response) -> OrganizationService.GetOrganization.ResponseBuilder {
            if (other == OrganizationService.GetOrganization.Response()) {
             return self
            }
            if (other.hasOrganization) {
                mergeOrganization(other.organization)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.GetOrganization.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetOrganization.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:OrganizationService.Containers.OrganizationBuilder = OrganizationService.Containers.Organization.builder()
                if hasOrganization {
                  subBuilder.mergeFrom(organization)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                organization = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> OrganizationService.GetOrganization {
        return OrganizationService.GetOrganization.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.GetOrganization {
        return OrganizationService.GetOrganization.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.GetOrganization {
        return OrganizationService.GetOrganization.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.GetOrganization {
        return OrganizationService.GetOrganization.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.GetOrganization {
        return OrganizationService.GetOrganization.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetOrganization {
        return OrganizationService.GetOrganization.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> OrganizationService.GetOrganizationBuilder {
        return OrganizationService.GetOrganization.classBuilder() as OrganizationService.GetOrganizationBuilder
      }
      public func builder() -> OrganizationService.GetOrganizationBuilder {
        return classBuilder() as OrganizationService.GetOrganizationBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return OrganizationService.GetOrganizationBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return OrganizationService.GetOrganization.builder()
      }
      public func toBuilder() -> OrganizationService.GetOrganizationBuilder {
        return OrganizationService.GetOrganization.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:OrganizationService.GetOrganization) -> OrganizationService.GetOrganizationBuilder {
        return OrganizationService.GetOrganization.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "OrganizationService.GetOrganization"
      }
      override public func className() -> String {
          return "OrganizationService.GetOrganization"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return OrganizationService.GetOrganization.self
      }


      //Meta information declaration end

    }

    final public class GetOrganizationBuilder : GeneratedMessageBuilder {
      private var builderResult:OrganizationService.GetOrganization

      required override public init () {
         builderResult = OrganizationService.GetOrganization()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> OrganizationService.GetOrganizationBuilder {
        builderResult = OrganizationService.GetOrganization()
        return self
      }
      public override func clone() -> OrganizationService.GetOrganizationBuilder {
        return OrganizationService.GetOrganization.builderWithPrototype(builderResult)
      }
      public override func build() -> OrganizationService.GetOrganization {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> OrganizationService.GetOrganization {
        var returnMe:OrganizationService.GetOrganization = builderResult
        return returnMe
      }
      public func mergeFrom(other:OrganizationService.GetOrganization) -> OrganizationService.GetOrganizationBuilder {
        if (other == OrganizationService.GetOrganization()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.GetOrganizationBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetOrganizationBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class CreateTeam : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "team": return team
                 case "child_of": return child_of
                 default: return nil
                 }
          }

          public private(set) var hasTeam:Bool = false
          public private(set) var team:OrganizationService.Containers.Team = OrganizationService.Containers.Team()
          public private(set) var hasChildOf:Bool = false
          public private(set) var child_of:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasTeam {
              output.writeMessage(1, value:team)
            }
            if hasChildOf {
              output.writeString(2, value:child_of)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasTeam {
              size += WireFormat.computeMessageSize(1, value:team)
            }
            if hasChildOf {
              size += WireFormat.computeStringSize(2, value:child_of)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.CreateTeam.Request {
            return OrganizationService.CreateTeam.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateTeam.Request {
            return OrganizationService.CreateTeam.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.CreateTeam.Request {
            return OrganizationService.CreateTeam.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.CreateTeam.Request {
            return OrganizationService.CreateTeam.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.CreateTeam.Request {
            return OrganizationService.CreateTeam.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateTeam.Request {
            return OrganizationService.CreateTeam.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.CreateTeam.RequestBuilder {
            return OrganizationService.CreateTeam.Request.classBuilder() as OrganizationService.CreateTeam.RequestBuilder
          }
          public func builder() -> OrganizationService.CreateTeam.RequestBuilder {
            return classBuilder() as OrganizationService.CreateTeam.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.CreateTeam.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.CreateTeam.Request.builder()
          }
          public func toBuilder() -> OrganizationService.CreateTeam.RequestBuilder {
            return OrganizationService.CreateTeam.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.CreateTeam.Request) -> OrganizationService.CreateTeam.RequestBuilder {
            return OrganizationService.CreateTeam.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasTeam {
              output += "\(indent) team {\n"
              team.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            if hasChildOf {
              output += "\(indent) child_of: \(child_of) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasTeam {
                    hashCode = (hashCode &* 31) &+ team.hashValue
                  }
                  if hasChildOf {
                     hashCode = (hashCode &* 31) &+ child_of.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.CreateTeam.Request"
          }
          override public func className() -> String {
              return "OrganizationService.CreateTeam.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.CreateTeam.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.CreateTeam.Request

          required override public init () {
             builderResult = OrganizationService.CreateTeam.Request()
             super.init()
          }
          public var hasTeam:Bool {
               get {
                   return builderResult.hasTeam
               }
          }
          public var team:OrganizationService.Containers.Team {
               get {
                   return builderResult.team
               }
               set (value) {
                   builderResult.hasTeam = true
                   builderResult.team = value
               }
          }
          public func setTeamBuilder(builderForValue:OrganizationService.Containers.TeamBuilder) -> OrganizationService.CreateTeam.RequestBuilder {
            team = builderForValue.build()
            return self
          }
          public func mergeTeam(value:OrganizationService.Containers.Team) -> OrganizationService.CreateTeam.RequestBuilder {
            if (builderResult.hasTeam) {
              builderResult.team = OrganizationService.Containers.Team.builderWithPrototype(builderResult.team).mergeFrom(value).buildPartial()
            } else {
              builderResult.team = value
            }
            builderResult.hasTeam = true
            return self
          }
          public func clearTeam() -> OrganizationService.CreateTeam.RequestBuilder {
            builderResult.hasTeam = false
            builderResult.team = OrganizationService.Containers.Team()
            return self
          }
          public var hasChildOf:Bool {
               get {
                    return builderResult.hasChildOf
               }
          }
          public var child_of:String {
               get {
                    return builderResult.child_of
               }
               set (value) {
                   builderResult.hasChildOf = true
                   builderResult.child_of = value
               }
          }
          public func clearChildOf() -> OrganizationService.CreateTeam.RequestBuilder{
               builderResult.hasChildOf = false
               builderResult.child_of = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.CreateTeam.RequestBuilder {
            builderResult = OrganizationService.CreateTeam.Request()
            return self
          }
          public override func clone() -> OrganizationService.CreateTeam.RequestBuilder {
            return OrganizationService.CreateTeam.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.CreateTeam.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.CreateTeam.Request {
            var returnMe:OrganizationService.CreateTeam.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.CreateTeam.Request) -> OrganizationService.CreateTeam.RequestBuilder {
            if (other == OrganizationService.CreateTeam.Request()) {
             return self
            }
            if (other.hasTeam) {
                mergeTeam(other.team)
            }
            if other.hasChildOf {
                 child_of = other.child_of
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.CreateTeam.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateTeam.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:OrganizationService.Containers.TeamBuilder = OrganizationService.Containers.Team.builder()
                if hasTeam {
                  subBuilder.mergeFrom(team)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                team = subBuilder.buildPartial()

              case 18 :
                child_of = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "team": return team
                 default: return nil
                 }
          }

          public private(set) var hasTeam:Bool = false
          public private(set) var team:OrganizationService.Containers.Team = OrganizationService.Containers.Team()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasTeam {
              output.writeMessage(1, value:team)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasTeam {
              size += WireFormat.computeMessageSize(1, value:team)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.CreateTeam.Response {
            return OrganizationService.CreateTeam.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateTeam.Response {
            return OrganizationService.CreateTeam.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.CreateTeam.Response {
            return OrganizationService.CreateTeam.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.CreateTeam.Response {
            return OrganizationService.CreateTeam.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.CreateTeam.Response {
            return OrganizationService.CreateTeam.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateTeam.Response {
            return OrganizationService.CreateTeam.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.CreateTeam.ResponseBuilder {
            return OrganizationService.CreateTeam.Response.classBuilder() as OrganizationService.CreateTeam.ResponseBuilder
          }
          public func builder() -> OrganizationService.CreateTeam.ResponseBuilder {
            return classBuilder() as OrganizationService.CreateTeam.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.CreateTeam.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.CreateTeam.Response.builder()
          }
          public func toBuilder() -> OrganizationService.CreateTeam.ResponseBuilder {
            return OrganizationService.CreateTeam.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.CreateTeam.Response) -> OrganizationService.CreateTeam.ResponseBuilder {
            return OrganizationService.CreateTeam.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasTeam {
              output += "\(indent) team {\n"
              team.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasTeam {
                    hashCode = (hashCode &* 31) &+ team.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.CreateTeam.Response"
          }
          override public func className() -> String {
              return "OrganizationService.CreateTeam.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.CreateTeam.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.CreateTeam.Response

          required override public init () {
             builderResult = OrganizationService.CreateTeam.Response()
             super.init()
          }
          public var hasTeam:Bool {
               get {
                   return builderResult.hasTeam
               }
          }
          public var team:OrganizationService.Containers.Team {
               get {
                   return builderResult.team
               }
               set (value) {
                   builderResult.hasTeam = true
                   builderResult.team = value
               }
          }
          public func setTeamBuilder(builderForValue:OrganizationService.Containers.TeamBuilder) -> OrganizationService.CreateTeam.ResponseBuilder {
            team = builderForValue.build()
            return self
          }
          public func mergeTeam(value:OrganizationService.Containers.Team) -> OrganizationService.CreateTeam.ResponseBuilder {
            if (builderResult.hasTeam) {
              builderResult.team = OrganizationService.Containers.Team.builderWithPrototype(builderResult.team).mergeFrom(value).buildPartial()
            } else {
              builderResult.team = value
            }
            builderResult.hasTeam = true
            return self
          }
          public func clearTeam() -> OrganizationService.CreateTeam.ResponseBuilder {
            builderResult.hasTeam = false
            builderResult.team = OrganizationService.Containers.Team()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.CreateTeam.ResponseBuilder {
            builderResult = OrganizationService.CreateTeam.Response()
            return self
          }
          public override func clone() -> OrganizationService.CreateTeam.ResponseBuilder {
            return OrganizationService.CreateTeam.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.CreateTeam.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.CreateTeam.Response {
            var returnMe:OrganizationService.CreateTeam.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.CreateTeam.Response) -> OrganizationService.CreateTeam.ResponseBuilder {
            if (other == OrganizationService.CreateTeam.Response()) {
             return self
            }
            if (other.hasTeam) {
                mergeTeam(other.team)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.CreateTeam.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateTeam.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:OrganizationService.Containers.TeamBuilder = OrganizationService.Containers.Team.builder()
                if hasTeam {
                  subBuilder.mergeFrom(team)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                team = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> OrganizationService.CreateTeam {
        return OrganizationService.CreateTeam.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateTeam {
        return OrganizationService.CreateTeam.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.CreateTeam {
        return OrganizationService.CreateTeam.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.CreateTeam {
        return OrganizationService.CreateTeam.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.CreateTeam {
        return OrganizationService.CreateTeam.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateTeam {
        return OrganizationService.CreateTeam.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> OrganizationService.CreateTeamBuilder {
        return OrganizationService.CreateTeam.classBuilder() as OrganizationService.CreateTeamBuilder
      }
      public func builder() -> OrganizationService.CreateTeamBuilder {
        return classBuilder() as OrganizationService.CreateTeamBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return OrganizationService.CreateTeamBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return OrganizationService.CreateTeam.builder()
      }
      public func toBuilder() -> OrganizationService.CreateTeamBuilder {
        return OrganizationService.CreateTeam.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:OrganizationService.CreateTeam) -> OrganizationService.CreateTeamBuilder {
        return OrganizationService.CreateTeam.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "OrganizationService.CreateTeam"
      }
      override public func className() -> String {
          return "OrganizationService.CreateTeam"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return OrganizationService.CreateTeam.self
      }


      //Meta information declaration end

    }

    final public class CreateTeamBuilder : GeneratedMessageBuilder {
      private var builderResult:OrganizationService.CreateTeam

      required override public init () {
         builderResult = OrganizationService.CreateTeam()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> OrganizationService.CreateTeamBuilder {
        builderResult = OrganizationService.CreateTeam()
        return self
      }
      public override func clone() -> OrganizationService.CreateTeamBuilder {
        return OrganizationService.CreateTeam.builderWithPrototype(builderResult)
      }
      public override func build() -> OrganizationService.CreateTeam {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> OrganizationService.CreateTeam {
        var returnMe:OrganizationService.CreateTeam = builderResult
        return returnMe
      }
      public func mergeFrom(other:OrganizationService.CreateTeam) -> OrganizationService.CreateTeamBuilder {
        if (other == OrganizationService.CreateTeam()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.CreateTeamBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateTeamBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetTeam : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "team_id": return team_id
                 default: return nil
                 }
          }

          public private(set) var hasTeamId:Bool = false
          public private(set) var team_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasTeamId {
              output.writeString(1, value:team_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasTeamId {
              size += WireFormat.computeStringSize(1, value:team_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.GetTeam.Request {
            return OrganizationService.GetTeam.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeam.Request {
            return OrganizationService.GetTeam.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.GetTeam.Request {
            return OrganizationService.GetTeam.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.GetTeam.Request {
            return OrganizationService.GetTeam.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.GetTeam.Request {
            return OrganizationService.GetTeam.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeam.Request {
            return OrganizationService.GetTeam.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.GetTeam.RequestBuilder {
            return OrganizationService.GetTeam.Request.classBuilder() as OrganizationService.GetTeam.RequestBuilder
          }
          public func builder() -> OrganizationService.GetTeam.RequestBuilder {
            return classBuilder() as OrganizationService.GetTeam.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.GetTeam.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.GetTeam.Request.builder()
          }
          public func toBuilder() -> OrganizationService.GetTeam.RequestBuilder {
            return OrganizationService.GetTeam.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.GetTeam.Request) -> OrganizationService.GetTeam.RequestBuilder {
            return OrganizationService.GetTeam.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasTeamId {
              output += "\(indent) team_id: \(team_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasTeamId {
                     hashCode = (hashCode &* 31) &+ team_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.GetTeam.Request"
          }
          override public func className() -> String {
              return "OrganizationService.GetTeam.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.GetTeam.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.GetTeam.Request

          required override public init () {
             builderResult = OrganizationService.GetTeam.Request()
             super.init()
          }
          public var hasTeamId:Bool {
               get {
                    return builderResult.hasTeamId
               }
          }
          public var team_id:String {
               get {
                    return builderResult.team_id
               }
               set (value) {
                   builderResult.hasTeamId = true
                   builderResult.team_id = value
               }
          }
          public func clearTeamId() -> OrganizationService.GetTeam.RequestBuilder{
               builderResult.hasTeamId = false
               builderResult.team_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.GetTeam.RequestBuilder {
            builderResult = OrganizationService.GetTeam.Request()
            return self
          }
          public override func clone() -> OrganizationService.GetTeam.RequestBuilder {
            return OrganizationService.GetTeam.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.GetTeam.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.GetTeam.Request {
            var returnMe:OrganizationService.GetTeam.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.GetTeam.Request) -> OrganizationService.GetTeam.RequestBuilder {
            if (other == OrganizationService.GetTeam.Request()) {
             return self
            }
            if other.hasTeamId {
                 team_id = other.team_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.GetTeam.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeam.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                team_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "team": return team
                 default: return nil
                 }
          }

          public private(set) var hasTeam:Bool = false
          public private(set) var team:OrganizationService.Containers.Team = OrganizationService.Containers.Team()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasTeam {
              output.writeMessage(1, value:team)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasTeam {
              size += WireFormat.computeMessageSize(1, value:team)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.GetTeam.Response {
            return OrganizationService.GetTeam.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeam.Response {
            return OrganizationService.GetTeam.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.GetTeam.Response {
            return OrganizationService.GetTeam.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.GetTeam.Response {
            return OrganizationService.GetTeam.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.GetTeam.Response {
            return OrganizationService.GetTeam.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeam.Response {
            return OrganizationService.GetTeam.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.GetTeam.ResponseBuilder {
            return OrganizationService.GetTeam.Response.classBuilder() as OrganizationService.GetTeam.ResponseBuilder
          }
          public func builder() -> OrganizationService.GetTeam.ResponseBuilder {
            return classBuilder() as OrganizationService.GetTeam.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.GetTeam.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.GetTeam.Response.builder()
          }
          public func toBuilder() -> OrganizationService.GetTeam.ResponseBuilder {
            return OrganizationService.GetTeam.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.GetTeam.Response) -> OrganizationService.GetTeam.ResponseBuilder {
            return OrganizationService.GetTeam.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasTeam {
              output += "\(indent) team {\n"
              team.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasTeam {
                    hashCode = (hashCode &* 31) &+ team.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.GetTeam.Response"
          }
          override public func className() -> String {
              return "OrganizationService.GetTeam.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.GetTeam.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.GetTeam.Response

          required override public init () {
             builderResult = OrganizationService.GetTeam.Response()
             super.init()
          }
          public var hasTeam:Bool {
               get {
                   return builderResult.hasTeam
               }
          }
          public var team:OrganizationService.Containers.Team {
               get {
                   return builderResult.team
               }
               set (value) {
                   builderResult.hasTeam = true
                   builderResult.team = value
               }
          }
          public func setTeamBuilder(builderForValue:OrganizationService.Containers.TeamBuilder) -> OrganizationService.GetTeam.ResponseBuilder {
            team = builderForValue.build()
            return self
          }
          public func mergeTeam(value:OrganizationService.Containers.Team) -> OrganizationService.GetTeam.ResponseBuilder {
            if (builderResult.hasTeam) {
              builderResult.team = OrganizationService.Containers.Team.builderWithPrototype(builderResult.team).mergeFrom(value).buildPartial()
            } else {
              builderResult.team = value
            }
            builderResult.hasTeam = true
            return self
          }
          public func clearTeam() -> OrganizationService.GetTeam.ResponseBuilder {
            builderResult.hasTeam = false
            builderResult.team = OrganizationService.Containers.Team()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.GetTeam.ResponseBuilder {
            builderResult = OrganizationService.GetTeam.Response()
            return self
          }
          public override func clone() -> OrganizationService.GetTeam.ResponseBuilder {
            return OrganizationService.GetTeam.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.GetTeam.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.GetTeam.Response {
            var returnMe:OrganizationService.GetTeam.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.GetTeam.Response) -> OrganizationService.GetTeam.ResponseBuilder {
            if (other == OrganizationService.GetTeam.Response()) {
             return self
            }
            if (other.hasTeam) {
                mergeTeam(other.team)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.GetTeam.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeam.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:OrganizationService.Containers.TeamBuilder = OrganizationService.Containers.Team.builder()
                if hasTeam {
                  subBuilder.mergeFrom(team)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                team = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> OrganizationService.GetTeam {
        return OrganizationService.GetTeam.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeam {
        return OrganizationService.GetTeam.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.GetTeam {
        return OrganizationService.GetTeam.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.GetTeam {
        return OrganizationService.GetTeam.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.GetTeam {
        return OrganizationService.GetTeam.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeam {
        return OrganizationService.GetTeam.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> OrganizationService.GetTeamBuilder {
        return OrganizationService.GetTeam.classBuilder() as OrganizationService.GetTeamBuilder
      }
      public func builder() -> OrganizationService.GetTeamBuilder {
        return classBuilder() as OrganizationService.GetTeamBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return OrganizationService.GetTeamBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return OrganizationService.GetTeam.builder()
      }
      public func toBuilder() -> OrganizationService.GetTeamBuilder {
        return OrganizationService.GetTeam.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:OrganizationService.GetTeam) -> OrganizationService.GetTeamBuilder {
        return OrganizationService.GetTeam.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "OrganizationService.GetTeam"
      }
      override public func className() -> String {
          return "OrganizationService.GetTeam"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return OrganizationService.GetTeam.self
      }


      //Meta information declaration end

    }

    final public class GetTeamBuilder : GeneratedMessageBuilder {
      private var builderResult:OrganizationService.GetTeam

      required override public init () {
         builderResult = OrganizationService.GetTeam()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> OrganizationService.GetTeamBuilder {
        builderResult = OrganizationService.GetTeam()
        return self
      }
      public override func clone() -> OrganizationService.GetTeamBuilder {
        return OrganizationService.GetTeam.builderWithPrototype(builderResult)
      }
      public override func build() -> OrganizationService.GetTeam {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> OrganizationService.GetTeam {
        var returnMe:OrganizationService.GetTeam = builderResult
        return returnMe
      }
      public func mergeFrom(other:OrganizationService.GetTeam) -> OrganizationService.GetTeamBuilder {
        if (other == OrganizationService.GetTeam()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.GetTeamBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeamBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetTeams : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "organization_id": return organization_id
                 default: return nil
                 }
          }

          public private(set) var hasOrganizationId:Bool = false
          public private(set) var organization_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasOrganizationId {
              output.writeString(1, value:organization_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasOrganizationId {
              size += WireFormat.computeStringSize(1, value:organization_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.GetTeams.Request {
            return OrganizationService.GetTeams.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeams.Request {
            return OrganizationService.GetTeams.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.GetTeams.Request {
            return OrganizationService.GetTeams.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.GetTeams.Request {
            return OrganizationService.GetTeams.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.GetTeams.Request {
            return OrganizationService.GetTeams.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeams.Request {
            return OrganizationService.GetTeams.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.GetTeams.RequestBuilder {
            return OrganizationService.GetTeams.Request.classBuilder() as OrganizationService.GetTeams.RequestBuilder
          }
          public func builder() -> OrganizationService.GetTeams.RequestBuilder {
            return classBuilder() as OrganizationService.GetTeams.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.GetTeams.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.GetTeams.Request.builder()
          }
          public func toBuilder() -> OrganizationService.GetTeams.RequestBuilder {
            return OrganizationService.GetTeams.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.GetTeams.Request) -> OrganizationService.GetTeams.RequestBuilder {
            return OrganizationService.GetTeams.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasOrganizationId {
              output += "\(indent) organization_id: \(organization_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasOrganizationId {
                     hashCode = (hashCode &* 31) &+ organization_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.GetTeams.Request"
          }
          override public func className() -> String {
              return "OrganizationService.GetTeams.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.GetTeams.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.GetTeams.Request

          required override public init () {
             builderResult = OrganizationService.GetTeams.Request()
             super.init()
          }
          public var hasOrganizationId:Bool {
               get {
                    return builderResult.hasOrganizationId
               }
          }
          public var organization_id:String {
               get {
                    return builderResult.organization_id
               }
               set (value) {
                   builderResult.hasOrganizationId = true
                   builderResult.organization_id = value
               }
          }
          public func clearOrganizationId() -> OrganizationService.GetTeams.RequestBuilder{
               builderResult.hasOrganizationId = false
               builderResult.organization_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.GetTeams.RequestBuilder {
            builderResult = OrganizationService.GetTeams.Request()
            return self
          }
          public override func clone() -> OrganizationService.GetTeams.RequestBuilder {
            return OrganizationService.GetTeams.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.GetTeams.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.GetTeams.Request {
            var returnMe:OrganizationService.GetTeams.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.GetTeams.Request) -> OrganizationService.GetTeams.RequestBuilder {
            if (other == OrganizationService.GetTeams.Request()) {
             return self
            }
            if other.hasOrganizationId {
                 organization_id = other.organization_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.GetTeams.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeams.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                organization_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var teams:Array<OrganizationService.Containers.Team>  = Array<OrganizationService.Containers.Team>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementteams in teams {
                output.writeMessage(1, value:oneElementteams)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementteams in teams {
                size += WireFormat.computeMessageSize(1, value:oneElementteams)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.GetTeams.Response {
            return OrganizationService.GetTeams.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeams.Response {
            return OrganizationService.GetTeams.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.GetTeams.Response {
            return OrganizationService.GetTeams.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.GetTeams.Response {
            return OrganizationService.GetTeams.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.GetTeams.Response {
            return OrganizationService.GetTeams.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeams.Response {
            return OrganizationService.GetTeams.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.GetTeams.ResponseBuilder {
            return OrganizationService.GetTeams.Response.classBuilder() as OrganizationService.GetTeams.ResponseBuilder
          }
          public func builder() -> OrganizationService.GetTeams.ResponseBuilder {
            return classBuilder() as OrganizationService.GetTeams.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.GetTeams.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.GetTeams.Response.builder()
          }
          public func toBuilder() -> OrganizationService.GetTeams.ResponseBuilder {
            return OrganizationService.GetTeams.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.GetTeams.Response) -> OrganizationService.GetTeams.ResponseBuilder {
            return OrganizationService.GetTeams.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var teamsElementIndex:Int = 0
            for oneElementteams in teams {
                output += "\(indent) teams[\(teamsElementIndex)] {\n"
                oneElementteams.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                teamsElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementteams in teams {
                      hashCode = (hashCode &* 31) &+ oneElementteams.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.GetTeams.Response"
          }
          override public func className() -> String {
              return "OrganizationService.GetTeams.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.GetTeams.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.GetTeams.Response

          required override public init () {
             builderResult = OrganizationService.GetTeams.Response()
             super.init()
          }
          public var teams:Array<OrganizationService.Containers.Team> {
               get {
                   return builderResult.teams
               }
               set (value) {
                   builderResult.teams = value
               }
          }
          public func clearTeams() -> OrganizationService.GetTeams.ResponseBuilder {
            builderResult.teams.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.GetTeams.ResponseBuilder {
            builderResult = OrganizationService.GetTeams.Response()
            return self
          }
          public override func clone() -> OrganizationService.GetTeams.ResponseBuilder {
            return OrganizationService.GetTeams.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.GetTeams.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.GetTeams.Response {
            var returnMe:OrganizationService.GetTeams.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.GetTeams.Response) -> OrganizationService.GetTeams.ResponseBuilder {
            if (other == OrganizationService.GetTeams.Response()) {
             return self
            }
            if !other.teams.isEmpty  {
               builderResult.teams += other.teams
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.GetTeams.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeams.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = OrganizationService.Containers.Team.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                teams += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> OrganizationService.GetTeams {
        return OrganizationService.GetTeams.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeams {
        return OrganizationService.GetTeams.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.GetTeams {
        return OrganizationService.GetTeams.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.GetTeams {
        return OrganizationService.GetTeams.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.GetTeams {
        return OrganizationService.GetTeams.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeams {
        return OrganizationService.GetTeams.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> OrganizationService.GetTeamsBuilder {
        return OrganizationService.GetTeams.classBuilder() as OrganizationService.GetTeamsBuilder
      }
      public func builder() -> OrganizationService.GetTeamsBuilder {
        return classBuilder() as OrganizationService.GetTeamsBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return OrganizationService.GetTeamsBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return OrganizationService.GetTeams.builder()
      }
      public func toBuilder() -> OrganizationService.GetTeamsBuilder {
        return OrganizationService.GetTeams.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:OrganizationService.GetTeams) -> OrganizationService.GetTeamsBuilder {
        return OrganizationService.GetTeams.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "OrganizationService.GetTeams"
      }
      override public func className() -> String {
          return "OrganizationService.GetTeams"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return OrganizationService.GetTeams.self
      }


      //Meta information declaration end

    }

    final public class GetTeamsBuilder : GeneratedMessageBuilder {
      private var builderResult:OrganizationService.GetTeams

      required override public init () {
         builderResult = OrganizationService.GetTeams()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> OrganizationService.GetTeamsBuilder {
        builderResult = OrganizationService.GetTeams()
        return self
      }
      public override func clone() -> OrganizationService.GetTeamsBuilder {
        return OrganizationService.GetTeams.builderWithPrototype(builderResult)
      }
      public override func build() -> OrganizationService.GetTeams {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> OrganizationService.GetTeams {
        var returnMe:OrganizationService.GetTeams = builderResult
        return returnMe
      }
      public func mergeFrom(other:OrganizationService.GetTeams) -> OrganizationService.GetTeamsBuilder {
        if (other == OrganizationService.GetTeams()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.GetTeamsBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeamsBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class CreateAddress : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "address": return address
                 default: return nil
                 }
          }

          public private(set) var hasAddress:Bool = false
          public private(set) var address:OrganizationService.Containers.Address = OrganizationService.Containers.Address()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasAddress {
              output.writeMessage(1, value:address)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasAddress {
              size += WireFormat.computeMessageSize(1, value:address)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.CreateAddress.Request {
            return OrganizationService.CreateAddress.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateAddress.Request {
            return OrganizationService.CreateAddress.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.CreateAddress.Request {
            return OrganizationService.CreateAddress.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.CreateAddress.Request {
            return OrganizationService.CreateAddress.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.CreateAddress.Request {
            return OrganizationService.CreateAddress.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateAddress.Request {
            return OrganizationService.CreateAddress.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.CreateAddress.RequestBuilder {
            return OrganizationService.CreateAddress.Request.classBuilder() as OrganizationService.CreateAddress.RequestBuilder
          }
          public func builder() -> OrganizationService.CreateAddress.RequestBuilder {
            return classBuilder() as OrganizationService.CreateAddress.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.CreateAddress.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.CreateAddress.Request.builder()
          }
          public func toBuilder() -> OrganizationService.CreateAddress.RequestBuilder {
            return OrganizationService.CreateAddress.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.CreateAddress.Request) -> OrganizationService.CreateAddress.RequestBuilder {
            return OrganizationService.CreateAddress.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasAddress {
              output += "\(indent) address {\n"
              address.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasAddress {
                    hashCode = (hashCode &* 31) &+ address.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.CreateAddress.Request"
          }
          override public func className() -> String {
              return "OrganizationService.CreateAddress.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.CreateAddress.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.CreateAddress.Request

          required override public init () {
             builderResult = OrganizationService.CreateAddress.Request()
             super.init()
          }
          public var hasAddress:Bool {
               get {
                   return builderResult.hasAddress
               }
          }
          public var address:OrganizationService.Containers.Address {
               get {
                   return builderResult.address
               }
               set (value) {
                   builderResult.hasAddress = true
                   builderResult.address = value
               }
          }
          public func setAddressBuilder(builderForValue:OrganizationService.Containers.AddressBuilder) -> OrganizationService.CreateAddress.RequestBuilder {
            address = builderForValue.build()
            return self
          }
          public func mergeAddress(value:OrganizationService.Containers.Address) -> OrganizationService.CreateAddress.RequestBuilder {
            if (builderResult.hasAddress) {
              builderResult.address = OrganizationService.Containers.Address.builderWithPrototype(builderResult.address).mergeFrom(value).buildPartial()
            } else {
              builderResult.address = value
            }
            builderResult.hasAddress = true
            return self
          }
          public func clearAddress() -> OrganizationService.CreateAddress.RequestBuilder {
            builderResult.hasAddress = false
            builderResult.address = OrganizationService.Containers.Address()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.CreateAddress.RequestBuilder {
            builderResult = OrganizationService.CreateAddress.Request()
            return self
          }
          public override func clone() -> OrganizationService.CreateAddress.RequestBuilder {
            return OrganizationService.CreateAddress.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.CreateAddress.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.CreateAddress.Request {
            var returnMe:OrganizationService.CreateAddress.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.CreateAddress.Request) -> OrganizationService.CreateAddress.RequestBuilder {
            if (other == OrganizationService.CreateAddress.Request()) {
             return self
            }
            if (other.hasAddress) {
                mergeAddress(other.address)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.CreateAddress.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateAddress.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:OrganizationService.Containers.AddressBuilder = OrganizationService.Containers.Address.builder()
                if hasAddress {
                  subBuilder.mergeFrom(address)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                address = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "address": return address
                 default: return nil
                 }
          }

          public private(set) var hasAddress:Bool = false
          public private(set) var address:OrganizationService.Containers.Address = OrganizationService.Containers.Address()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasAddress {
              output.writeMessage(1, value:address)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasAddress {
              size += WireFormat.computeMessageSize(1, value:address)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.CreateAddress.Response {
            return OrganizationService.CreateAddress.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateAddress.Response {
            return OrganizationService.CreateAddress.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.CreateAddress.Response {
            return OrganizationService.CreateAddress.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.CreateAddress.Response {
            return OrganizationService.CreateAddress.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.CreateAddress.Response {
            return OrganizationService.CreateAddress.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateAddress.Response {
            return OrganizationService.CreateAddress.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.CreateAddress.ResponseBuilder {
            return OrganizationService.CreateAddress.Response.classBuilder() as OrganizationService.CreateAddress.ResponseBuilder
          }
          public func builder() -> OrganizationService.CreateAddress.ResponseBuilder {
            return classBuilder() as OrganizationService.CreateAddress.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.CreateAddress.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.CreateAddress.Response.builder()
          }
          public func toBuilder() -> OrganizationService.CreateAddress.ResponseBuilder {
            return OrganizationService.CreateAddress.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.CreateAddress.Response) -> OrganizationService.CreateAddress.ResponseBuilder {
            return OrganizationService.CreateAddress.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasAddress {
              output += "\(indent) address {\n"
              address.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasAddress {
                    hashCode = (hashCode &* 31) &+ address.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.CreateAddress.Response"
          }
          override public func className() -> String {
              return "OrganizationService.CreateAddress.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.CreateAddress.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.CreateAddress.Response

          required override public init () {
             builderResult = OrganizationService.CreateAddress.Response()
             super.init()
          }
          public var hasAddress:Bool {
               get {
                   return builderResult.hasAddress
               }
          }
          public var address:OrganizationService.Containers.Address {
               get {
                   return builderResult.address
               }
               set (value) {
                   builderResult.hasAddress = true
                   builderResult.address = value
               }
          }
          public func setAddressBuilder(builderForValue:OrganizationService.Containers.AddressBuilder) -> OrganizationService.CreateAddress.ResponseBuilder {
            address = builderForValue.build()
            return self
          }
          public func mergeAddress(value:OrganizationService.Containers.Address) -> OrganizationService.CreateAddress.ResponseBuilder {
            if (builderResult.hasAddress) {
              builderResult.address = OrganizationService.Containers.Address.builderWithPrototype(builderResult.address).mergeFrom(value).buildPartial()
            } else {
              builderResult.address = value
            }
            builderResult.hasAddress = true
            return self
          }
          public func clearAddress() -> OrganizationService.CreateAddress.ResponseBuilder {
            builderResult.hasAddress = false
            builderResult.address = OrganizationService.Containers.Address()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.CreateAddress.ResponseBuilder {
            builderResult = OrganizationService.CreateAddress.Response()
            return self
          }
          public override func clone() -> OrganizationService.CreateAddress.ResponseBuilder {
            return OrganizationService.CreateAddress.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.CreateAddress.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.CreateAddress.Response {
            var returnMe:OrganizationService.CreateAddress.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.CreateAddress.Response) -> OrganizationService.CreateAddress.ResponseBuilder {
            if (other == OrganizationService.CreateAddress.Response()) {
             return self
            }
            if (other.hasAddress) {
                mergeAddress(other.address)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.CreateAddress.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateAddress.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:OrganizationService.Containers.AddressBuilder = OrganizationService.Containers.Address.builder()
                if hasAddress {
                  subBuilder.mergeFrom(address)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                address = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> OrganizationService.CreateAddress {
        return OrganizationService.CreateAddress.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateAddress {
        return OrganizationService.CreateAddress.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.CreateAddress {
        return OrganizationService.CreateAddress.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.CreateAddress {
        return OrganizationService.CreateAddress.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.CreateAddress {
        return OrganizationService.CreateAddress.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateAddress {
        return OrganizationService.CreateAddress.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> OrganizationService.CreateAddressBuilder {
        return OrganizationService.CreateAddress.classBuilder() as OrganizationService.CreateAddressBuilder
      }
      public func builder() -> OrganizationService.CreateAddressBuilder {
        return classBuilder() as OrganizationService.CreateAddressBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return OrganizationService.CreateAddressBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return OrganizationService.CreateAddress.builder()
      }
      public func toBuilder() -> OrganizationService.CreateAddressBuilder {
        return OrganizationService.CreateAddress.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:OrganizationService.CreateAddress) -> OrganizationService.CreateAddressBuilder {
        return OrganizationService.CreateAddress.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "OrganizationService.CreateAddress"
      }
      override public func className() -> String {
          return "OrganizationService.CreateAddress"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return OrganizationService.CreateAddress.self
      }


      //Meta information declaration end

    }

    final public class CreateAddressBuilder : GeneratedMessageBuilder {
      private var builderResult:OrganizationService.CreateAddress

      required override public init () {
         builderResult = OrganizationService.CreateAddress()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> OrganizationService.CreateAddressBuilder {
        builderResult = OrganizationService.CreateAddress()
        return self
      }
      public override func clone() -> OrganizationService.CreateAddressBuilder {
        return OrganizationService.CreateAddress.builderWithPrototype(builderResult)
      }
      public override func build() -> OrganizationService.CreateAddress {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> OrganizationService.CreateAddress {
        var returnMe:OrganizationService.CreateAddress = builderResult
        return returnMe
      }
      public func mergeFrom(other:OrganizationService.CreateAddress) -> OrganizationService.CreateAddressBuilder {
        if (other == OrganizationService.CreateAddress()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.CreateAddressBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateAddressBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class DeleteAddress : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "address_id": return address_id
                 default: return nil
                 }
          }

          public private(set) var hasAddressId:Bool = false
          public private(set) var address_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasAddressId {
              output.writeString(1, value:address_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasAddressId {
              size += WireFormat.computeStringSize(1, value:address_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.DeleteAddress.Request {
            return OrganizationService.DeleteAddress.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.DeleteAddress.Request {
            return OrganizationService.DeleteAddress.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.DeleteAddress.Request {
            return OrganizationService.DeleteAddress.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.DeleteAddress.Request {
            return OrganizationService.DeleteAddress.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.DeleteAddress.Request {
            return OrganizationService.DeleteAddress.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.DeleteAddress.Request {
            return OrganizationService.DeleteAddress.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.DeleteAddress.RequestBuilder {
            return OrganizationService.DeleteAddress.Request.classBuilder() as OrganizationService.DeleteAddress.RequestBuilder
          }
          public func builder() -> OrganizationService.DeleteAddress.RequestBuilder {
            return classBuilder() as OrganizationService.DeleteAddress.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.DeleteAddress.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.DeleteAddress.Request.builder()
          }
          public func toBuilder() -> OrganizationService.DeleteAddress.RequestBuilder {
            return OrganizationService.DeleteAddress.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.DeleteAddress.Request) -> OrganizationService.DeleteAddress.RequestBuilder {
            return OrganizationService.DeleteAddress.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasAddressId {
              output += "\(indent) address_id: \(address_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasAddressId {
                     hashCode = (hashCode &* 31) &+ address_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.DeleteAddress.Request"
          }
          override public func className() -> String {
              return "OrganizationService.DeleteAddress.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.DeleteAddress.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.DeleteAddress.Request

          required override public init () {
             builderResult = OrganizationService.DeleteAddress.Request()
             super.init()
          }
          public var hasAddressId:Bool {
               get {
                    return builderResult.hasAddressId
               }
          }
          public var address_id:String {
               get {
                    return builderResult.address_id
               }
               set (value) {
                   builderResult.hasAddressId = true
                   builderResult.address_id = value
               }
          }
          public func clearAddressId() -> OrganizationService.DeleteAddress.RequestBuilder{
               builderResult.hasAddressId = false
               builderResult.address_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.DeleteAddress.RequestBuilder {
            builderResult = OrganizationService.DeleteAddress.Request()
            return self
          }
          public override func clone() -> OrganizationService.DeleteAddress.RequestBuilder {
            return OrganizationService.DeleteAddress.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.DeleteAddress.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.DeleteAddress.Request {
            var returnMe:OrganizationService.DeleteAddress.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.DeleteAddress.Request) -> OrganizationService.DeleteAddress.RequestBuilder {
            if (other == OrganizationService.DeleteAddress.Request()) {
             return self
            }
            if other.hasAddressId {
                 address_id = other.address_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.DeleteAddress.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.DeleteAddress.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                address_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 default: return nil
                 }
          }

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.DeleteAddress.Response {
            return OrganizationService.DeleteAddress.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.DeleteAddress.Response {
            return OrganizationService.DeleteAddress.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.DeleteAddress.Response {
            return OrganizationService.DeleteAddress.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.DeleteAddress.Response {
            return OrganizationService.DeleteAddress.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.DeleteAddress.Response {
            return OrganizationService.DeleteAddress.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.DeleteAddress.Response {
            return OrganizationService.DeleteAddress.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.DeleteAddress.ResponseBuilder {
            return OrganizationService.DeleteAddress.Response.classBuilder() as OrganizationService.DeleteAddress.ResponseBuilder
          }
          public func builder() -> OrganizationService.DeleteAddress.ResponseBuilder {
            return classBuilder() as OrganizationService.DeleteAddress.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.DeleteAddress.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.DeleteAddress.Response.builder()
          }
          public func toBuilder() -> OrganizationService.DeleteAddress.ResponseBuilder {
            return OrganizationService.DeleteAddress.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.DeleteAddress.Response) -> OrganizationService.DeleteAddress.ResponseBuilder {
            return OrganizationService.DeleteAddress.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.DeleteAddress.Response"
          }
          override public func className() -> String {
              return "OrganizationService.DeleteAddress.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.DeleteAddress.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.DeleteAddress.Response

          required override public init () {
             builderResult = OrganizationService.DeleteAddress.Response()
             super.init()
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.DeleteAddress.ResponseBuilder {
            builderResult = OrganizationService.DeleteAddress.Response()
            return self
          }
          public override func clone() -> OrganizationService.DeleteAddress.ResponseBuilder {
            return OrganizationService.DeleteAddress.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.DeleteAddress.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.DeleteAddress.Response {
            var returnMe:OrganizationService.DeleteAddress.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.DeleteAddress.Response) -> OrganizationService.DeleteAddress.ResponseBuilder {
            if (other == OrganizationService.DeleteAddress.Response()) {
             return self
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.DeleteAddress.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.DeleteAddress.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> OrganizationService.DeleteAddress {
        return OrganizationService.DeleteAddress.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.DeleteAddress {
        return OrganizationService.DeleteAddress.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.DeleteAddress {
        return OrganizationService.DeleteAddress.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.DeleteAddress {
        return OrganizationService.DeleteAddress.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.DeleteAddress {
        return OrganizationService.DeleteAddress.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.DeleteAddress {
        return OrganizationService.DeleteAddress.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> OrganizationService.DeleteAddressBuilder {
        return OrganizationService.DeleteAddress.classBuilder() as OrganizationService.DeleteAddressBuilder
      }
      public func builder() -> OrganizationService.DeleteAddressBuilder {
        return classBuilder() as OrganizationService.DeleteAddressBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return OrganizationService.DeleteAddressBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return OrganizationService.DeleteAddress.builder()
      }
      public func toBuilder() -> OrganizationService.DeleteAddressBuilder {
        return OrganizationService.DeleteAddress.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:OrganizationService.DeleteAddress) -> OrganizationService.DeleteAddressBuilder {
        return OrganizationService.DeleteAddress.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "OrganizationService.DeleteAddress"
      }
      override public func className() -> String {
          return "OrganizationService.DeleteAddress"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return OrganizationService.DeleteAddress.self
      }


      //Meta information declaration end

    }

    final public class DeleteAddressBuilder : GeneratedMessageBuilder {
      private var builderResult:OrganizationService.DeleteAddress

      required override public init () {
         builderResult = OrganizationService.DeleteAddress()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> OrganizationService.DeleteAddressBuilder {
        builderResult = OrganizationService.DeleteAddress()
        return self
      }
      public override func clone() -> OrganizationService.DeleteAddressBuilder {
        return OrganizationService.DeleteAddress.builderWithPrototype(builderResult)
      }
      public override func build() -> OrganizationService.DeleteAddress {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> OrganizationService.DeleteAddress {
        var returnMe:OrganizationService.DeleteAddress = builderResult
        return returnMe
      }
      public func mergeFrom(other:OrganizationService.DeleteAddress) -> OrganizationService.DeleteAddressBuilder {
        if (other == OrganizationService.DeleteAddress()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.DeleteAddressBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.DeleteAddressBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetAddress : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "address_id": return address_id
                 default: return nil
                 }
          }

          public private(set) var hasAddressId:Bool = false
          public private(set) var address_id:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasAddressId {
              output.writeString(1, value:address_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasAddressId {
              size += WireFormat.computeStringSize(1, value:address_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.GetAddress.Request {
            return OrganizationService.GetAddress.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddress.Request {
            return OrganizationService.GetAddress.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.GetAddress.Request {
            return OrganizationService.GetAddress.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.GetAddress.Request {
            return OrganizationService.GetAddress.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.GetAddress.Request {
            return OrganizationService.GetAddress.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddress.Request {
            return OrganizationService.GetAddress.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.GetAddress.RequestBuilder {
            return OrganizationService.GetAddress.Request.classBuilder() as OrganizationService.GetAddress.RequestBuilder
          }
          public func builder() -> OrganizationService.GetAddress.RequestBuilder {
            return classBuilder() as OrganizationService.GetAddress.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.GetAddress.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.GetAddress.Request.builder()
          }
          public func toBuilder() -> OrganizationService.GetAddress.RequestBuilder {
            return OrganizationService.GetAddress.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.GetAddress.Request) -> OrganizationService.GetAddress.RequestBuilder {
            return OrganizationService.GetAddress.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasAddressId {
              output += "\(indent) address_id: \(address_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasAddressId {
                     hashCode = (hashCode &* 31) &+ address_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.GetAddress.Request"
          }
          override public func className() -> String {
              return "OrganizationService.GetAddress.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.GetAddress.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.GetAddress.Request

          required override public init () {
             builderResult = OrganizationService.GetAddress.Request()
             super.init()
          }
          public var hasAddressId:Bool {
               get {
                    return builderResult.hasAddressId
               }
          }
          public var address_id:String {
               get {
                    return builderResult.address_id
               }
               set (value) {
                   builderResult.hasAddressId = true
                   builderResult.address_id = value
               }
          }
          public func clearAddressId() -> OrganizationService.GetAddress.RequestBuilder{
               builderResult.hasAddressId = false
               builderResult.address_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.GetAddress.RequestBuilder {
            builderResult = OrganizationService.GetAddress.Request()
            return self
          }
          public override func clone() -> OrganizationService.GetAddress.RequestBuilder {
            return OrganizationService.GetAddress.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.GetAddress.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.GetAddress.Request {
            var returnMe:OrganizationService.GetAddress.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.GetAddress.Request) -> OrganizationService.GetAddress.RequestBuilder {
            if (other == OrganizationService.GetAddress.Request()) {
             return self
            }
            if other.hasAddressId {
                 address_id = other.address_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.GetAddress.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddress.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                address_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "address": return address
                 default: return nil
                 }
          }

          public private(set) var hasAddress:Bool = false
          public private(set) var address:OrganizationService.Containers.Address = OrganizationService.Containers.Address()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasAddress {
              output.writeMessage(1, value:address)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasAddress {
              size += WireFormat.computeMessageSize(1, value:address)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.GetAddress.Response {
            return OrganizationService.GetAddress.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddress.Response {
            return OrganizationService.GetAddress.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.GetAddress.Response {
            return OrganizationService.GetAddress.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.GetAddress.Response {
            return OrganizationService.GetAddress.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.GetAddress.Response {
            return OrganizationService.GetAddress.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddress.Response {
            return OrganizationService.GetAddress.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.GetAddress.ResponseBuilder {
            return OrganizationService.GetAddress.Response.classBuilder() as OrganizationService.GetAddress.ResponseBuilder
          }
          public func builder() -> OrganizationService.GetAddress.ResponseBuilder {
            return classBuilder() as OrganizationService.GetAddress.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.GetAddress.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.GetAddress.Response.builder()
          }
          public func toBuilder() -> OrganizationService.GetAddress.ResponseBuilder {
            return OrganizationService.GetAddress.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.GetAddress.Response) -> OrganizationService.GetAddress.ResponseBuilder {
            return OrganizationService.GetAddress.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasAddress {
              output += "\(indent) address {\n"
              address.writeDescriptionTo(&output, indent:"\(indent)  ")
              output += "\(indent) }\n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasAddress {
                    hashCode = (hashCode &* 31) &+ address.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.GetAddress.Response"
          }
          override public func className() -> String {
              return "OrganizationService.GetAddress.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.GetAddress.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.GetAddress.Response

          required override public init () {
             builderResult = OrganizationService.GetAddress.Response()
             super.init()
          }
          public var hasAddress:Bool {
               get {
                   return builderResult.hasAddress
               }
          }
          public var address:OrganizationService.Containers.Address {
               get {
                   return builderResult.address
               }
               set (value) {
                   builderResult.hasAddress = true
                   builderResult.address = value
               }
          }
          public func setAddressBuilder(builderForValue:OrganizationService.Containers.AddressBuilder) -> OrganizationService.GetAddress.ResponseBuilder {
            address = builderForValue.build()
            return self
          }
          public func mergeAddress(value:OrganizationService.Containers.Address) -> OrganizationService.GetAddress.ResponseBuilder {
            if (builderResult.hasAddress) {
              builderResult.address = OrganizationService.Containers.Address.builderWithPrototype(builderResult.address).mergeFrom(value).buildPartial()
            } else {
              builderResult.address = value
            }
            builderResult.hasAddress = true
            return self
          }
          public func clearAddress() -> OrganizationService.GetAddress.ResponseBuilder {
            builderResult.hasAddress = false
            builderResult.address = OrganizationService.Containers.Address()
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.GetAddress.ResponseBuilder {
            builderResult = OrganizationService.GetAddress.Response()
            return self
          }
          public override func clone() -> OrganizationService.GetAddress.ResponseBuilder {
            return OrganizationService.GetAddress.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.GetAddress.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.GetAddress.Response {
            var returnMe:OrganizationService.GetAddress.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.GetAddress.Response) -> OrganizationService.GetAddress.ResponseBuilder {
            if (other == OrganizationService.GetAddress.Response()) {
             return self
            }
            if (other.hasAddress) {
                mergeAddress(other.address)
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.GetAddress.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddress.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder:OrganizationService.Containers.AddressBuilder = OrganizationService.Containers.Address.builder()
                if hasAddress {
                  subBuilder.mergeFrom(address)
                }
                input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                address = subBuilder.buildPartial()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> OrganizationService.GetAddress {
        return OrganizationService.GetAddress.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddress {
        return OrganizationService.GetAddress.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.GetAddress {
        return OrganizationService.GetAddress.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.GetAddress {
        return OrganizationService.GetAddress.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.GetAddress {
        return OrganizationService.GetAddress.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddress {
        return OrganizationService.GetAddress.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> OrganizationService.GetAddressBuilder {
        return OrganizationService.GetAddress.classBuilder() as OrganizationService.GetAddressBuilder
      }
      public func builder() -> OrganizationService.GetAddressBuilder {
        return classBuilder() as OrganizationService.GetAddressBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return OrganizationService.GetAddressBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return OrganizationService.GetAddress.builder()
      }
      public func toBuilder() -> OrganizationService.GetAddressBuilder {
        return OrganizationService.GetAddress.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:OrganizationService.GetAddress) -> OrganizationService.GetAddressBuilder {
        return OrganizationService.GetAddress.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "OrganizationService.GetAddress"
      }
      override public func className() -> String {
          return "OrganizationService.GetAddress"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return OrganizationService.GetAddress.self
      }


      //Meta information declaration end

    }

    final public class GetAddressBuilder : GeneratedMessageBuilder {
      private var builderResult:OrganizationService.GetAddress

      required override public init () {
         builderResult = OrganizationService.GetAddress()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> OrganizationService.GetAddressBuilder {
        builderResult = OrganizationService.GetAddress()
        return self
      }
      public override func clone() -> OrganizationService.GetAddressBuilder {
        return OrganizationService.GetAddress.builderWithPrototype(builderResult)
      }
      public override func build() -> OrganizationService.GetAddress {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> OrganizationService.GetAddress {
        var returnMe:OrganizationService.GetAddress = builderResult
        return returnMe
      }
      public func mergeFrom(other:OrganizationService.GetAddress) -> OrganizationService.GetAddressBuilder {
        if (other == OrganizationService.GetAddress()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.GetAddressBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddressBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



  //Nested type declaration start

    final public class GetAddresses : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {


          //OneOf declaration start

          public enum LookupKey {
            case LookupKeyOneOfNotSet

            public func checkOneOfIsSet() -> Bool {
                 switch self {
                 case .LookupKeyOneOfNotSet:
                      return false
                 default:
                      return true
                 }
            }
            case OrganizationId(String)

            public static func getOrganizationId(value:LookupKey) ->String? {
                 switch value {
                 case .OrganizationId(let enumValue):
                      return enumValue
                 default:
                      return nil
                 }
            }
          }



          //OneOf declaration end

          private var storageLookupKey:OrganizationService.GetAddresses.Request.LookupKey =  OrganizationService.GetAddresses.Request.LookupKey.LookupKeyOneOfNotSet
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "organization_id": return organization_id
                 default: return nil
                 }
          }

          public private(set) var hasOrganizationId:Bool {
                get {
                     if OrganizationService.GetAddresses.Request.LookupKey.getOrganizationId(storageLookupKey) == nil {
                         return false
                     }
                     return true
                }
                set(newValue) {
                }
          }
          public private(set) var organization_id:String!{
               get {
                    return OrganizationService.GetAddresses.Request.LookupKey.getOrganizationId(storageLookupKey)
               }
               set (newvalue) {
                    storageLookupKey = OrganizationService.GetAddresses.Request.LookupKey.OrganizationId(newvalue)
               }
          }
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasOrganizationId {
              output.writeString(1, value:organization_id)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasOrganizationId {
              size += WireFormat.computeStringSize(1, value:organization_id)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.GetAddresses.Request {
            return OrganizationService.GetAddresses.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddresses.Request {
            return OrganizationService.GetAddresses.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.GetAddresses.Request {
            return OrganizationService.GetAddresses.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.GetAddresses.Request {
            return OrganizationService.GetAddresses.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.GetAddresses.Request {
            return OrganizationService.GetAddresses.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddresses.Request {
            return OrganizationService.GetAddresses.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.GetAddresses.RequestBuilder {
            return OrganizationService.GetAddresses.Request.classBuilder() as OrganizationService.GetAddresses.RequestBuilder
          }
          public func builder() -> OrganizationService.GetAddresses.RequestBuilder {
            return classBuilder() as OrganizationService.GetAddresses.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.GetAddresses.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.GetAddresses.Request.builder()
          }
          public func toBuilder() -> OrganizationService.GetAddresses.RequestBuilder {
            return OrganizationService.GetAddresses.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.GetAddresses.Request) -> OrganizationService.GetAddresses.RequestBuilder {
            return OrganizationService.GetAddresses.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasOrganizationId {
              output += "\(indent) organization_id: \(organization_id) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasOrganizationId {
                     hashCode = (hashCode &* 31) &+ organization_id.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.GetAddresses.Request"
          }
          override public func className() -> String {
              return "OrganizationService.GetAddresses.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.GetAddresses.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.GetAddresses.Request

          required override public init () {
             builderResult = OrganizationService.GetAddresses.Request()
             super.init()
          }
          public var hasOrganizationId:Bool {
               get {
                    return builderResult.hasOrganizationId
               }
          }
          public var organization_id:String {
               get {
                    return builderResult.organization_id
               }
               set (value) {
                   builderResult.hasOrganizationId = true
                   builderResult.organization_id = value
               }
          }
          public func clearOrganizationId() -> OrganizationService.GetAddresses.RequestBuilder{
               builderResult.hasOrganizationId = false
               builderResult.organization_id = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.GetAddresses.RequestBuilder {
            builderResult = OrganizationService.GetAddresses.Request()
            return self
          }
          public override func clone() -> OrganizationService.GetAddresses.RequestBuilder {
            return OrganizationService.GetAddresses.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.GetAddresses.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.GetAddresses.Request {
            var returnMe:OrganizationService.GetAddresses.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.GetAddresses.Request) -> OrganizationService.GetAddresses.RequestBuilder {
            if (other == OrganizationService.GetAddresses.Request()) {
             return self
            }
            if other.hasOrganizationId {
                 organization_id = other.organization_id
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.GetAddresses.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddresses.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                organization_id = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var addresses:Array<OrganizationService.Containers.Address>  = Array<OrganizationService.Containers.Address>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementaddresses in addresses {
                output.writeMessage(1, value:oneElementaddresses)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementaddresses in addresses {
                size += WireFormat.computeMessageSize(1, value:oneElementaddresses)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> OrganizationService.GetAddresses.Response {
            return OrganizationService.GetAddresses.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddresses.Response {
            return OrganizationService.GetAddresses.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.GetAddresses.Response {
            return OrganizationService.GetAddresses.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.GetAddresses.Response {
            return OrganizationService.GetAddresses.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.GetAddresses.Response {
            return OrganizationService.GetAddresses.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddresses.Response {
            return OrganizationService.GetAddresses.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> OrganizationService.GetAddresses.ResponseBuilder {
            return OrganizationService.GetAddresses.Response.classBuilder() as OrganizationService.GetAddresses.ResponseBuilder
          }
          public func builder() -> OrganizationService.GetAddresses.ResponseBuilder {
            return classBuilder() as OrganizationService.GetAddresses.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return OrganizationService.GetAddresses.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return OrganizationService.GetAddresses.Response.builder()
          }
          public func toBuilder() -> OrganizationService.GetAddresses.ResponseBuilder {
            return OrganizationService.GetAddresses.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:OrganizationService.GetAddresses.Response) -> OrganizationService.GetAddresses.ResponseBuilder {
            return OrganizationService.GetAddresses.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var addressesElementIndex:Int = 0
            for oneElementaddresses in addresses {
                output += "\(indent) addresses[\(addressesElementIndex)] {\n"
                oneElementaddresses.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                addressesElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementaddresses in addresses {
                      hashCode = (hashCode &* 31) &+ oneElementaddresses.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "OrganizationService.GetAddresses.Response"
          }
          override public func className() -> String {
              return "OrganizationService.GetAddresses.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return OrganizationService.GetAddresses.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:OrganizationService.GetAddresses.Response

          required override public init () {
             builderResult = OrganizationService.GetAddresses.Response()
             super.init()
          }
          public var addresses:Array<OrganizationService.Containers.Address> {
               get {
                   return builderResult.addresses
               }
               set (value) {
                   builderResult.addresses = value
               }
          }
          public func clearAddresses() -> OrganizationService.GetAddresses.ResponseBuilder {
            builderResult.addresses.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> OrganizationService.GetAddresses.ResponseBuilder {
            builderResult = OrganizationService.GetAddresses.Response()
            return self
          }
          public override func clone() -> OrganizationService.GetAddresses.ResponseBuilder {
            return OrganizationService.GetAddresses.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> OrganizationService.GetAddresses.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> OrganizationService.GetAddresses.Response {
            var returnMe:OrganizationService.GetAddresses.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:OrganizationService.GetAddresses.Response) -> OrganizationService.GetAddresses.ResponseBuilder {
            if (other == OrganizationService.GetAddresses.Response()) {
             return self
            }
            if !other.addresses.isEmpty  {
               builderResult.addresses += other.addresses
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.GetAddresses.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddresses.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = OrganizationService.Containers.Address.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                addresses += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> OrganizationService.GetAddresses {
        return OrganizationService.GetAddresses.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddresses {
        return OrganizationService.GetAddresses.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> OrganizationService.GetAddresses {
        return OrganizationService.GetAddresses.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService.GetAddresses {
        return OrganizationService.GetAddresses.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService.GetAddresses {
        return OrganizationService.GetAddresses.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddresses {
        return OrganizationService.GetAddresses.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> OrganizationService.GetAddressesBuilder {
        return OrganizationService.GetAddresses.classBuilder() as OrganizationService.GetAddressesBuilder
      }
      public func builder() -> OrganizationService.GetAddressesBuilder {
        return classBuilder() as OrganizationService.GetAddressesBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return OrganizationService.GetAddressesBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return OrganizationService.GetAddresses.builder()
      }
      public func toBuilder() -> OrganizationService.GetAddressesBuilder {
        return OrganizationService.GetAddresses.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:OrganizationService.GetAddresses) -> OrganizationService.GetAddressesBuilder {
        return OrganizationService.GetAddresses.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "OrganizationService.GetAddresses"
      }
      override public func className() -> String {
          return "OrganizationService.GetAddresses"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return OrganizationService.GetAddresses.self
      }


      //Meta information declaration end

    }

    final public class GetAddressesBuilder : GeneratedMessageBuilder {
      private var builderResult:OrganizationService.GetAddresses

      required override public init () {
         builderResult = OrganizationService.GetAddresses()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> OrganizationService.GetAddressesBuilder {
        builderResult = OrganizationService.GetAddresses()
        return self
      }
      public override func clone() -> OrganizationService.GetAddressesBuilder {
        return OrganizationService.GetAddresses.builderWithPrototype(builderResult)
      }
      public override func build() -> OrganizationService.GetAddresses {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> OrganizationService.GetAddresses {
        var returnMe:OrganizationService.GetAddresses = builderResult
        return returnMe
      }
      public func mergeFrom(other:OrganizationService.GetAddresses) -> OrganizationService.GetAddressesBuilder {
        if (other == OrganizationService.GetAddresses()) {
         return self
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationService.GetAddressesBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddressesBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end

  public subscript(key: String) -> AnyObject? {
         switch key {
         default: return nil
         }
  }

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  public class func parseFromData(data:[Byte]) -> OrganizationService {
    return OrganizationService.builder().mergeFromData(data).build()
  }
  public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> OrganizationService {
    return OrganizationService.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> OrganizationService {
    return OrganizationService.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->OrganizationService {
    return OrganizationService.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> OrganizationService {
    return OrganizationService.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationService {
    return OrganizationService.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> OrganizationServiceBuilder {
    return OrganizationService.classBuilder() as OrganizationServiceBuilder
  }
  public func builder() -> OrganizationServiceBuilder {
    return classBuilder() as OrganizationServiceBuilder
  }
  public override class func classBuilder() -> MessageBuilder {
    return OrganizationServiceBuilder()
  }
  public override func classBuilder() -> MessageBuilder {
    return OrganizationService.builder()
  }
  public func toBuilder() -> OrganizationServiceBuilder {
    return OrganizationService.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:OrganizationService) -> OrganizationServiceBuilder {
    return OrganizationService.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "OrganizationService"
  }
  override public func className() -> String {
      return "OrganizationService"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return OrganizationService.self
  }


  //Meta information declaration end

}

final public class OrganizationServiceBuilder : GeneratedMessageBuilder {
  private var builderResult:OrganizationService

  required override public init () {
     builderResult = OrganizationService()
     super.init()
  }
  override public var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  public override func clear() -> OrganizationServiceBuilder {
    builderResult = OrganizationService()
    return self
  }
  public override func clone() -> OrganizationServiceBuilder {
    return OrganizationService.builderWithPrototype(builderResult)
  }
  public override func build() -> OrganizationService {
       checkInitialized()
       return buildPartial()
  }
  public func buildPartial() -> OrganizationService {
    var returnMe:OrganizationService = builderResult
    return returnMe
  }
  public func mergeFrom(other:OrganizationService) -> OrganizationServiceBuilder {
    if (other == OrganizationService()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream) ->OrganizationServiceBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> OrganizationServiceBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


public extension OrganizationService.Containers.Organization {
    class func parseFromNSData(data:NSData) -> OrganizationService.Containers.Organization {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.Containers.Organization.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.Containers.Organization {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.Containers.Organization.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.Containers.Team {
    class func parseFromNSData(data:NSData) -> OrganizationService.Containers.Team {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.Containers.Team.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.Containers.Team {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.Containers.Team.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.Containers.Address {
    class func parseFromNSData(data:NSData) -> OrganizationService.Containers.Address {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.Containers.Address.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.Containers.Address {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.Containers.Address.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.Containers {
    class func parseFromNSData(data:NSData) -> OrganizationService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.Containers.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.Containers {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.Containers.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.CreateOrganization.Request {
    class func parseFromNSData(data:NSData) -> OrganizationService.CreateOrganization.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateOrganization.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateOrganization.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateOrganization.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.CreateOrganization.Response {
    class func parseFromNSData(data:NSData) -> OrganizationService.CreateOrganization.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateOrganization.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateOrganization.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateOrganization.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.CreateOrganization {
    class func parseFromNSData(data:NSData) -> OrganizationService.CreateOrganization {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateOrganization.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateOrganization {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateOrganization.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.GetOrganization.Request {
    class func parseFromNSData(data:NSData) -> OrganizationService.GetOrganization.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetOrganization.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetOrganization.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetOrganization.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.GetOrganization.Response {
    class func parseFromNSData(data:NSData) -> OrganizationService.GetOrganization.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetOrganization.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetOrganization.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetOrganization.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.GetOrganization {
    class func parseFromNSData(data:NSData) -> OrganizationService.GetOrganization {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetOrganization.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetOrganization {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetOrganization.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.CreateTeam.Request {
    class func parseFromNSData(data:NSData) -> OrganizationService.CreateTeam.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateTeam.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateTeam.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateTeam.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.CreateTeam.Response {
    class func parseFromNSData(data:NSData) -> OrganizationService.CreateTeam.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateTeam.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateTeam.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateTeam.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.CreateTeam {
    class func parseFromNSData(data:NSData) -> OrganizationService.CreateTeam {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateTeam.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateTeam {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateTeam.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.GetTeam.Request {
    class func parseFromNSData(data:NSData) -> OrganizationService.GetTeam.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetTeam.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeam.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetTeam.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.GetTeam.Response {
    class func parseFromNSData(data:NSData) -> OrganizationService.GetTeam.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetTeam.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeam.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetTeam.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.GetTeam {
    class func parseFromNSData(data:NSData) -> OrganizationService.GetTeam {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetTeam.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeam {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetTeam.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.GetTeams.Request {
    class func parseFromNSData(data:NSData) -> OrganizationService.GetTeams.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetTeams.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeams.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetTeams.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.GetTeams.Response {
    class func parseFromNSData(data:NSData) -> OrganizationService.GetTeams.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetTeams.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeams.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetTeams.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.GetTeams {
    class func parseFromNSData(data:NSData) -> OrganizationService.GetTeams {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetTeams.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetTeams {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetTeams.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.CreateAddress.Request {
    class func parseFromNSData(data:NSData) -> OrganizationService.CreateAddress.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateAddress.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateAddress.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateAddress.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.CreateAddress.Response {
    class func parseFromNSData(data:NSData) -> OrganizationService.CreateAddress.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateAddress.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateAddress.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateAddress.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.CreateAddress {
    class func parseFromNSData(data:NSData) -> OrganizationService.CreateAddress {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateAddress.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.CreateAddress {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.CreateAddress.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.DeleteAddress.Request {
    class func parseFromNSData(data:NSData) -> OrganizationService.DeleteAddress.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.DeleteAddress.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.DeleteAddress.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.DeleteAddress.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.DeleteAddress.Response {
    class func parseFromNSData(data:NSData) -> OrganizationService.DeleteAddress.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.DeleteAddress.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.DeleteAddress.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.DeleteAddress.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.DeleteAddress {
    class func parseFromNSData(data:NSData) -> OrganizationService.DeleteAddress {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.DeleteAddress.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.DeleteAddress {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.DeleteAddress.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.GetAddress.Request {
    class func parseFromNSData(data:NSData) -> OrganizationService.GetAddress.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetAddress.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddress.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetAddress.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.GetAddress.Response {
    class func parseFromNSData(data:NSData) -> OrganizationService.GetAddress.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetAddress.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddress.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetAddress.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.GetAddress {
    class func parseFromNSData(data:NSData) -> OrganizationService.GetAddress {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetAddress.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddress {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetAddress.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.GetAddresses.Request {
    class func parseFromNSData(data:NSData) -> OrganizationService.GetAddresses.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetAddresses.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddresses.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetAddresses.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.GetAddresses.Response {
    class func parseFromNSData(data:NSData) -> OrganizationService.GetAddresses.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetAddresses.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddresses.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetAddresses.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService.GetAddresses {
    class func parseFromNSData(data:NSData) -> OrganizationService.GetAddresses {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetAddresses.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService.GetAddresses {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.GetAddresses.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension OrganizationService {
    class func parseFromNSData(data:NSData) -> OrganizationService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> OrganizationService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return OrganizationService.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
