// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file integration.proto

import Foundation

public extension Services.Organization{ public struct Containers { public struct Integration { }}}

public func == (lhs: Services.Organization.Containers.Integration.IntegrationV1, rhs: Services.Organization.Containers.Integration.IntegrationV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.hasIntegrationType == rhs.hasIntegrationType) && (!lhs.hasIntegrationType || lhs.integrationType == rhs.integrationType)
  fieldCheck = fieldCheck && (lhs.hasGoogleGroups == rhs.hasGoogleGroups) && (!lhs.hasGoogleGroups || lhs.googleGroups == rhs.googleGroups)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Organization.Containers.Integration.GoogleGroupDetailsV1, rhs: Services.Organization.Containers.Integration.GoogleGroupDetailsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasAdminEmail == rhs.hasAdminEmail) && (!lhs.hasAdminEmail || lhs.adminEmail == rhs.adminEmail)
  fieldCheck = fieldCheck && (lhs.scopes == rhs.scopes)
  fieldCheck = fieldCheck && (lhs.hasReadOnly == rhs.hasReadOnly) && (!lhs.hasReadOnly || lhs.readOnly == rhs.readOnly)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Organization.Containers.Integration {
  public struct IntegrationRoot {
    public static var sharedInstance : IntegrationRoot {
     struct Static {
         static let instance : IntegrationRoot = IntegrationRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Common.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  public enum IntegrationTypeV1:Int32 {
    case GoogleGroups = 0

  }

  //Enum type declaration end 

  final public class IntegrationV1 : GeneratedMessage, GeneratedMessageProtocol {


    //OneOf declaration start

    public enum Details {
      case DetailsOneOfNotSet

      public func checkOneOfIsSet() -> Bool {
           switch self {
           case .DetailsOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case GoogleGroups(Services.Organization.Containers.Integration.GoogleGroupDetailsV1)

      public static func getGoogleGroups(value:Details) -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1? {
           switch value {
           case .GoogleGroups(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageDetails:IntegrationV1.Details =  IntegrationV1.Details.DetailsOneOfNotSet
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    public private(set) var integrationType:Services.Organization.Containers.Integration.IntegrationTypeV1 = Services.Organization.Containers.Integration.IntegrationTypeV1.GoogleGroups
    public private(set) var hasIntegrationType:Bool = false
    public private(set) var hasGoogleGroups:Bool {
          get {
               if IntegrationV1.Details.getGoogleGroups(storageDetails) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var googleGroups:Services.Organization.Containers.Integration.GoogleGroupDetailsV1!{
         get {
              return IntegrationV1.Details.getGoogleGroups(storageDetails)
         }
         set (newvalue) {
              storageDetails = IntegrationV1.Details.GoogleGroups(newvalue)
         }
    }
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasId {
        try output.writeString(2, value:id)
      }
      if hasOrganizationId {
        try output.writeString(3, value:organizationId)
      }
      if hasIntegrationType {
        try output.writeEnum(4, value:integrationType.rawValue)
      }
      if hasGoogleGroups {
        try output.writeMessage(5, value:googleGroups)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(3)
      }
      if (hasIntegrationType) {
        serialize_size += integrationType.rawValue.computeEnumSize(4)
      }
      if hasGoogleGroups {
          if let varSizegoogleGroups = googleGroups?.computeMessageSize(5) {
              serialize_size += varSizegoogleGroups
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Containers.Integration.IntegrationV1> {
      var mergedArray = Array<Services.Organization.Containers.Integration.IntegrationV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.Integration.IntegrationV1? {
      return try Services.Organization.Containers.Integration.IntegrationV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Containers.Integration.IntegrationV1 {
      return try Services.Organization.Containers.Integration.IntegrationV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.Integration.IntegrationRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.IntegrationV1 {
      return try Services.Organization.Containers.Integration.IntegrationV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.Integration.IntegrationV1 {
      return try Services.Organization.Containers.Integration.IntegrationV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.IntegrationV1 {
      return try Services.Organization.Containers.Integration.IntegrationV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.Integration.IntegrationV1 {
      return try Services.Organization.Containers.Integration.IntegrationV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.IntegrationV1 {
      return try Services.Organization.Containers.Integration.IntegrationV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
      return Services.Organization.Containers.Integration.IntegrationV1.classBuilder() as! Services.Organization.Containers.Integration.IntegrationV1.Builder
    }
    public func getBuilder() -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
      return classBuilder() as! Services.Organization.Containers.Integration.IntegrationV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Integration.IntegrationV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Integration.IntegrationV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
      return try Services.Organization.Containers.Integration.IntegrationV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.Integration.IntegrationV1) throws -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
      return try Services.Organization.Containers.Integration.IntegrationV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      if (hasIntegrationType) {
        output += "\(indent) integrationType: \(integrationType.rawValue)\n"
      }
      if hasGoogleGroups {
        output += "\(indent) googleGroups {\n"
        try googleGroups?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            if hasIntegrationType {
               hashCode = (hashCode &* 31) &+ Int(integrationType.rawValue)
            }
            if hasGoogleGroups {
                if let hashValuegoogleGroups = googleGroups?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuegoogleGroups
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.Integration.IntegrationV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.Integration.IntegrationV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.Integration.IntegrationV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Containers.Integration.IntegrationV1 = Services.Organization.Containers.Integration.IntegrationV1()
      public func getMessage() -> Services.Organization.Containers.Integration.IntegrationV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Organization.Containers.Integration.IntegrationV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.Organization.Containers.Integration.IntegrationV1.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasOrganizationId:Bool {
           get {
                return builderResult.hasOrganizationId
           }
      }
      public var organizationId:String {
           get {
                return builderResult.organizationId
           }
           set (value) {
               builderResult.hasOrganizationId = true
               builderResult.organizationId = value
           }
      }
      public func setOrganizationId(value:String) -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        self.organizationId = value
        return self
      }
      public func clearOrganizationId() -> Services.Organization.Containers.Integration.IntegrationV1.Builder{
           builderResult.hasOrganizationId = false
           builderResult.organizationId = ""
           return self
      }
        public var hasIntegrationType:Bool{
            get {
                return builderResult.hasIntegrationType
            }
        }
        public var integrationType:Services.Organization.Containers.Integration.IntegrationTypeV1 {
            get {
                return builderResult.integrationType
            }
            set (value) {
                builderResult.hasIntegrationType = true
                builderResult.integrationType = value
            }
        }
        public func setIntegrationType(value:Services.Organization.Containers.Integration.IntegrationTypeV1) -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
          self.integrationType = value
          return self
        }
        public func clearIntegrationType() -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
           builderResult.hasIntegrationType = false
           builderResult.integrationType = .GoogleGroups
           return self
        }
      public var hasGoogleGroups:Bool {
           get {
               return builderResult.hasGoogleGroups
           }
      }
      public var googleGroups:Services.Organization.Containers.Integration.GoogleGroupDetailsV1! {
           get {
               if googleGroupsBuilder_ != nil {
                  builderResult.googleGroups = googleGroupsBuilder_.getMessage()
               }
               return builderResult.googleGroups
           }
           set (value) {
               builderResult.hasGoogleGroups = true
               builderResult.googleGroups = value
           }
      }
      private var googleGroupsBuilder_:Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder! {
           didSet {
              builderResult.hasGoogleGroups = true
           }
      }
      public func getGoogleGroupsBuilder() -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder {
        if googleGroupsBuilder_ == nil {
           googleGroupsBuilder_ = Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder()
           builderResult.googleGroups = googleGroupsBuilder_.getMessage()
           if googleGroups != nil {
              try! googleGroupsBuilder_.mergeFrom(googleGroups)
           }
        }
        return googleGroupsBuilder_
      }
      public func setGoogleGroups(value:Services.Organization.Containers.Integration.GoogleGroupDetailsV1!) -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        self.googleGroups = value
        return self
      }
      public func mergeGoogleGroups(value:Services.Organization.Containers.Integration.GoogleGroupDetailsV1) throws -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        if builderResult.hasGoogleGroups {
          builderResult.googleGroups = try Services.Organization.Containers.Integration.GoogleGroupDetailsV1.builderWithPrototype(builderResult.googleGroups).mergeFrom(value).buildPartial()
        } else {
          builderResult.googleGroups = value
        }
        builderResult.hasGoogleGroups = true
        return self
      }
      public func clearGoogleGroups() -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        googleGroupsBuilder_ = nil
        builderResult.hasGoogleGroups = false
        builderResult.googleGroups = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        builderResult = Services.Organization.Containers.Integration.IntegrationV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        return try Services.Organization.Containers.Integration.IntegrationV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Containers.Integration.IntegrationV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Containers.Integration.IntegrationV1 {
        let returnMe:Services.Organization.Containers.Integration.IntegrationV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Containers.Integration.IntegrationV1) throws -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        if other == Services.Organization.Containers.Integration.IntegrationV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasId {
             id = other.id
        }
        if other.hasOrganizationId {
             organizationId = other.organizationId
        }
        if other.hasIntegrationType {
             integrationType = other.integrationType
        }
        if (other.hasGoogleGroups) {
            try mergeGoogleGroups(other.googleGroups)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            id = try input.readString()

          case 26 :
            organizationId = try input.readString()

          case 32 :
            let valueIntintegrationType = try input.readEnum()
            if let enumsintegrationType = Services.Organization.Containers.Integration.IntegrationTypeV1(rawValue:valueIntintegrationType){
                 integrationType = enumsintegrationType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntintegrationType))
            }

          case 42 :
            let subBuilder:Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder = Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder()
            if hasGoogleGroups {
              try subBuilder.mergeFrom(googleGroups)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            googleGroups = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class GoogleGroupDetailsV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasAdminEmail:Bool = false
    public private(set) var adminEmail:String = ""

    public private(set) var scopes:Array<String> = Array<String>()
    public private(set) var hasReadOnly:Bool = false
    public private(set) var readOnly:Bool = false

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasAdminEmail {
        try output.writeString(2, value:adminEmail)
      }
      if !scopes.isEmpty {
        for oneValuescopes in scopes {
          try output.writeString(3, value:oneValuescopes)
        }
      }
      if hasReadOnly {
        try output.writeBool(4, value:readOnly)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasAdminEmail {
        serialize_size += adminEmail.computeStringSize(2)
      }
      var dataSizeScopes:Int32 = 0
      for oneValuescopes in scopes {
          dataSizeScopes += oneValuescopes.computeStringSizeNoTag()
      }
      serialize_size += dataSizeScopes
      serialize_size += 1 * Int32(scopes.count)
      if hasReadOnly {
        serialize_size += readOnly.computeBoolSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Containers.Integration.GoogleGroupDetailsV1> {
      var mergedArray = Array<Services.Organization.Containers.Integration.GoogleGroupDetailsV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1? {
      return try Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1 {
      return try Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.Integration.IntegrationRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1 {
      return try Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1 {
      return try Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1 {
      return try Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1 {
      return try Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1 {
      return try Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder {
      return Services.Organization.Containers.Integration.GoogleGroupDetailsV1.classBuilder() as! Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder
    }
    public func getBuilder() -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder {
      return classBuilder() as! Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder {
      return try Services.Organization.Containers.Integration.GoogleGroupDetailsV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.Integration.GoogleGroupDetailsV1) throws -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder {
      return try Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasAdminEmail {
        output += "\(indent) adminEmail: \(adminEmail) \n"
      }
      var scopesElementIndex:Int = 0
      for oneValuescopes in scopes  {
          output += "\(indent) scopes[\(scopesElementIndex)]: \(oneValuescopes)\n"
          scopesElementIndex++
      }
      if hasReadOnly {
        output += "\(indent) readOnly: \(readOnly) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasAdminEmail {
               hashCode = (hashCode &* 31) &+ adminEmail.hashValue
            }
            for oneValuescopes in scopes {
                hashCode = (hashCode &* 31) &+ oneValuescopes.hashValue
            }
            if hasReadOnly {
               hashCode = (hashCode &* 31) &+ readOnly.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.Integration.GoogleGroupDetailsV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.Integration.GoogleGroupDetailsV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.Integration.GoogleGroupDetailsV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Containers.Integration.GoogleGroupDetailsV1 = Services.Organization.Containers.Integration.GoogleGroupDetailsV1()
      public func getMessage() -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasAdminEmail:Bool {
           get {
                return builderResult.hasAdminEmail
           }
      }
      public var adminEmail:String {
           get {
                return builderResult.adminEmail
           }
           set (value) {
               builderResult.hasAdminEmail = true
               builderResult.adminEmail = value
           }
      }
      public func setAdminEmail(value:String) -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder {
        self.adminEmail = value
        return self
      }
      public func clearAdminEmail() -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder{
           builderResult.hasAdminEmail = false
           builderResult.adminEmail = ""
           return self
      }
      public var scopes:Array<String> {
           get {
               return builderResult.scopes
           }
           set (array) {
               builderResult.scopes = array
           }
      }
      public func setScopes(value:Array<String>) -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder {
        self.scopes = value
        return self
      }
      public func clearScopes() -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder {
         builderResult.scopes.removeAll(keepCapacity: false)
         return self
      }
      public var hasReadOnly:Bool {
           get {
                return builderResult.hasReadOnly
           }
      }
      public var readOnly:Bool {
           get {
                return builderResult.readOnly
           }
           set (value) {
               builderResult.hasReadOnly = true
               builderResult.readOnly = value
           }
      }
      public func setReadOnly(value:Bool) -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder {
        self.readOnly = value
        return self
      }
      public func clearReadOnly() -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder{
           builderResult.hasReadOnly = false
           builderResult.readOnly = false
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder {
        builderResult = Services.Organization.Containers.Integration.GoogleGroupDetailsV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder {
        return try Services.Organization.Containers.Integration.GoogleGroupDetailsV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1 {
        let returnMe:Services.Organization.Containers.Integration.GoogleGroupDetailsV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Containers.Integration.GoogleGroupDetailsV1) throws -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder {
        if other == Services.Organization.Containers.Integration.GoogleGroupDetailsV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasAdminEmail {
             adminEmail = other.adminEmail
        }
        if !other.scopes.isEmpty {
            builderResult.scopes += other.scopes
        }
        if other.hasReadOnly {
             readOnly = other.readOnly
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.GoogleGroupDetailsV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            adminEmail = try input.readString()

          case 26 :
            scopes += [try input.readString()]

          case 32 :
            readOnly = try input.readBool()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
