// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file integration.proto

import Foundation

public extension Services.Organization{ public struct Containers { public struct Integration { }}}

public func == (lhs: Services.Organization.Containers.Integration.IntegrationV1, rhs: Services.Organization.Containers.Integration.IntegrationV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.hasIntegrationType == rhs.hasIntegrationType) && (!lhs.hasIntegrationType || lhs.integrationType == rhs.integrationType)
  fieldCheck = fieldCheck && (lhs.hasSlackSlashCommand == rhs.hasSlackSlashCommand) && (!lhs.hasSlackSlashCommand || lhs.slackSlashCommand == rhs.slackSlashCommand)
  fieldCheck = fieldCheck && (lhs.hasSlackWebApi == rhs.hasSlackWebApi) && (!lhs.hasSlackWebApi || lhs.slackWebApi == rhs.slackWebApi)
  fieldCheck = fieldCheck && (lhs.hasProviderUid == rhs.hasProviderUid) && (!lhs.hasProviderUid || lhs.providerUid == rhs.providerUid)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1, rhs: Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Organization.Containers.Integration.SlackWebApiDetailsV1, rhs: Services.Organization.Containers.Integration.SlackWebApiDetailsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasToken == rhs.hasToken) && (!lhs.hasToken || lhs.token == rhs.token)
  fieldCheck = fieldCheck && (lhs.hasByProfileId == rhs.hasByProfileId) && (!lhs.hasByProfileId || lhs.byProfileId == rhs.byProfileId)
  fieldCheck = fieldCheck && (lhs.scopes == rhs.scopes)
  fieldCheck = fieldCheck && (lhs.hasTeamId == rhs.hasTeamId) && (!lhs.hasTeamId || lhs.teamId == rhs.teamId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Organization.Containers.Integration {
  public struct IntegrationRoot {
    public static var sharedInstance : IntegrationRoot {
     struct Static {
         static let instance : IntegrationRoot = IntegrationRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Common.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  public enum IntegrationTypeV1:Int32 {
    case SlackSlashCommand = 0
    case SlackWebApi = 1

  }

  //Enum type declaration end 

  final public class IntegrationV1 : GeneratedMessage, GeneratedMessageProtocol {


    //OneOf declaration start

    public enum Details {
      case DetailsOneOfNotSet

      public func checkOneOfIsSet() -> Bool {
           switch self {
           case .DetailsOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case SlackSlashCommand(Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1)

      public static func getSlackSlashCommand(value:Details) -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1? {
           switch value {
           case .SlackSlashCommand(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case SlackWebApi(Services.Organization.Containers.Integration.SlackWebApiDetailsV1)

      public static func getSlackWebApi(value:Details) -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1? {
           switch value {
           case .SlackWebApi(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageDetails:IntegrationV1.Details =  IntegrationV1.Details.DetailsOneOfNotSet
    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    public private(set) var integrationType:Services.Organization.Containers.Integration.IntegrationTypeV1 = Services.Organization.Containers.Integration.IntegrationTypeV1.SlackSlashCommand
    public private(set) var hasIntegrationType:Bool = false
    public private(set) var hasSlackSlashCommand:Bool {
          get {
               if IntegrationV1.Details.getSlackSlashCommand(storageDetails) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var slackSlashCommand:Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1!{
         get {
              return IntegrationV1.Details.getSlackSlashCommand(storageDetails)
         }
         set (newvalue) {
              storageDetails = IntegrationV1.Details.SlackSlashCommand(newvalue)
         }
    }
    public private(set) var hasSlackWebApi:Bool {
          get {
               if IntegrationV1.Details.getSlackWebApi(storageDetails) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var slackWebApi:Services.Organization.Containers.Integration.SlackWebApiDetailsV1!{
         get {
              return IntegrationV1.Details.getSlackWebApi(storageDetails)
         }
         set (newvalue) {
              storageDetails = IntegrationV1.Details.SlackWebApi(newvalue)
         }
    }
    public private(set) var hasProviderUid:Bool = false
    public private(set) var providerUid:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeString(1, value:id)
      }
      if hasOrganizationId {
        try output.writeString(2, value:organizationId)
      }
      if hasIntegrationType {
        try output.writeEnum(3, value:integrationType.rawValue)
      }
      if hasSlackSlashCommand {
        try output.writeMessage(4, value:slackSlashCommand)
      }
      if hasSlackWebApi {
        try output.writeMessage(5, value:slackWebApi)
      }
      if hasProviderUid {
        try output.writeString(6, value:providerUid)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeStringSize(1)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(2)
      }
      if (hasIntegrationType) {
        serialize_size += integrationType.rawValue.computeEnumSize(3)
      }
      if hasSlackSlashCommand {
          if let varSizeslackSlashCommand = slackSlashCommand?.computeMessageSize(4) {
              serialize_size += varSizeslackSlashCommand
          }
      }
      if hasSlackWebApi {
          if let varSizeslackWebApi = slackWebApi?.computeMessageSize(5) {
              serialize_size += varSizeslackWebApi
          }
      }
      if hasProviderUid {
        serialize_size += providerUid.computeStringSize(6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Containers.Integration.IntegrationV1> {
      var mergedArray = Array<Services.Organization.Containers.Integration.IntegrationV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.Integration.IntegrationV1? {
      return try Services.Organization.Containers.Integration.IntegrationV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Containers.Integration.IntegrationV1 {
      return try Services.Organization.Containers.Integration.IntegrationV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.Integration.IntegrationRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.IntegrationV1 {
      return try Services.Organization.Containers.Integration.IntegrationV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.Integration.IntegrationV1 {
      return try Services.Organization.Containers.Integration.IntegrationV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.IntegrationV1 {
      return try Services.Organization.Containers.Integration.IntegrationV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.Integration.IntegrationV1 {
      return try Services.Organization.Containers.Integration.IntegrationV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.IntegrationV1 {
      return try Services.Organization.Containers.Integration.IntegrationV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
      return Services.Organization.Containers.Integration.IntegrationV1.classBuilder() as! Services.Organization.Containers.Integration.IntegrationV1.Builder
    }
    public func getBuilder() -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
      return classBuilder() as! Services.Organization.Containers.Integration.IntegrationV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Integration.IntegrationV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Integration.IntegrationV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
      return try Services.Organization.Containers.Integration.IntegrationV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.Integration.IntegrationV1) throws -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
      return try Services.Organization.Containers.Integration.IntegrationV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      if (hasIntegrationType) {
        output += "\(indent) integrationType: \(integrationType.rawValue)\n"
      }
      if hasSlackSlashCommand {
        output += "\(indent) slackSlashCommand {\n"
        try slackSlashCommand?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasSlackWebApi {
        output += "\(indent) slackWebApi {\n"
        try slackWebApi?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasProviderUid {
        output += "\(indent) providerUid: \(providerUid) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            if hasIntegrationType {
               hashCode = (hashCode &* 31) &+ Int(integrationType.rawValue)
            }
            if hasSlackSlashCommand {
                if let hashValueslackSlashCommand = slackSlashCommand?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueslackSlashCommand
                }
            }
            if hasSlackWebApi {
                if let hashValueslackWebApi = slackWebApi?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueslackWebApi
                }
            }
            if hasProviderUid {
               hashCode = (hashCode &* 31) &+ providerUid.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.Integration.IntegrationV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.Integration.IntegrationV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.Integration.IntegrationV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Containers.Integration.IntegrationV1 = Services.Organization.Containers.Integration.IntegrationV1()
      public func getMessage() -> Services.Organization.Containers.Integration.IntegrationV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.Organization.Containers.Integration.IntegrationV1.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasOrganizationId:Bool {
           get {
                return builderResult.hasOrganizationId
           }
      }
      public var organizationId:String {
           get {
                return builderResult.organizationId
           }
           set (value) {
               builderResult.hasOrganizationId = true
               builderResult.organizationId = value
           }
      }
      public func setOrganizationId(value:String) -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        self.organizationId = value
        return self
      }
      public func clearOrganizationId() -> Services.Organization.Containers.Integration.IntegrationV1.Builder{
           builderResult.hasOrganizationId = false
           builderResult.organizationId = ""
           return self
      }
        public var hasIntegrationType:Bool{
            get {
                return builderResult.hasIntegrationType
            }
        }
        public var integrationType:Services.Organization.Containers.Integration.IntegrationTypeV1 {
            get {
                return builderResult.integrationType
            }
            set (value) {
                builderResult.hasIntegrationType = true
                builderResult.integrationType = value
            }
        }
        public func setIntegrationType(value:Services.Organization.Containers.Integration.IntegrationTypeV1) -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
          self.integrationType = value
          return self
        }
        public func clearIntegrationType() -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
           builderResult.hasIntegrationType = false
           builderResult.integrationType = .SlackSlashCommand
           return self
        }
      public var hasSlackSlashCommand:Bool {
           get {
               return builderResult.hasSlackSlashCommand
           }
      }
      public var slackSlashCommand:Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1! {
           get {
               if slackSlashCommandBuilder_ != nil {
                  builderResult.slackSlashCommand = slackSlashCommandBuilder_.getMessage()
               }
               return builderResult.slackSlashCommand
           }
           set (value) {
               builderResult.hasSlackSlashCommand = true
               builderResult.slackSlashCommand = value
           }
      }
      private var slackSlashCommandBuilder_:Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder! {
           didSet {
              builderResult.hasSlackSlashCommand = true
           }
      }
      public func getSlackSlashCommandBuilder() -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder {
        if slackSlashCommandBuilder_ == nil {
           slackSlashCommandBuilder_ = Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder()
           builderResult.slackSlashCommand = slackSlashCommandBuilder_.getMessage()
           if slackSlashCommand != nil {
              try! slackSlashCommandBuilder_.mergeFrom(slackSlashCommand)
           }
        }
        return slackSlashCommandBuilder_
      }
      public func setSlackSlashCommand(value:Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1!) -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        self.slackSlashCommand = value
        return self
      }
      public func mergeSlackSlashCommand(value:Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1) throws -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        if builderResult.hasSlackSlashCommand {
          builderResult.slackSlashCommand = try Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.builderWithPrototype(builderResult.slackSlashCommand).mergeFrom(value).buildPartial()
        } else {
          builderResult.slackSlashCommand = value
        }
        builderResult.hasSlackSlashCommand = true
        return self
      }
      public func clearSlackSlashCommand() -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        slackSlashCommandBuilder_ = nil
        builderResult.hasSlackSlashCommand = false
        builderResult.slackSlashCommand = nil
        return self
      }
      public var hasSlackWebApi:Bool {
           get {
               return builderResult.hasSlackWebApi
           }
      }
      public var slackWebApi:Services.Organization.Containers.Integration.SlackWebApiDetailsV1! {
           get {
               if slackWebApiBuilder_ != nil {
                  builderResult.slackWebApi = slackWebApiBuilder_.getMessage()
               }
               return builderResult.slackWebApi
           }
           set (value) {
               builderResult.hasSlackWebApi = true
               builderResult.slackWebApi = value
           }
      }
      private var slackWebApiBuilder_:Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder! {
           didSet {
              builderResult.hasSlackWebApi = true
           }
      }
      public func getSlackWebApiBuilder() -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder {
        if slackWebApiBuilder_ == nil {
           slackWebApiBuilder_ = Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder()
           builderResult.slackWebApi = slackWebApiBuilder_.getMessage()
           if slackWebApi != nil {
              try! slackWebApiBuilder_.mergeFrom(slackWebApi)
           }
        }
        return slackWebApiBuilder_
      }
      public func setSlackWebApi(value:Services.Organization.Containers.Integration.SlackWebApiDetailsV1!) -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        self.slackWebApi = value
        return self
      }
      public func mergeSlackWebApi(value:Services.Organization.Containers.Integration.SlackWebApiDetailsV1) throws -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        if builderResult.hasSlackWebApi {
          builderResult.slackWebApi = try Services.Organization.Containers.Integration.SlackWebApiDetailsV1.builderWithPrototype(builderResult.slackWebApi).mergeFrom(value).buildPartial()
        } else {
          builderResult.slackWebApi = value
        }
        builderResult.hasSlackWebApi = true
        return self
      }
      public func clearSlackWebApi() -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        slackWebApiBuilder_ = nil
        builderResult.hasSlackWebApi = false
        builderResult.slackWebApi = nil
        return self
      }
      public var hasProviderUid:Bool {
           get {
                return builderResult.hasProviderUid
           }
      }
      public var providerUid:String {
           get {
                return builderResult.providerUid
           }
           set (value) {
               builderResult.hasProviderUid = true
               builderResult.providerUid = value
           }
      }
      public func setProviderUid(value:String) -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        self.providerUid = value
        return self
      }
      public func clearProviderUid() -> Services.Organization.Containers.Integration.IntegrationV1.Builder{
           builderResult.hasProviderUid = false
           builderResult.providerUid = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        builderResult = Services.Organization.Containers.Integration.IntegrationV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        return try Services.Organization.Containers.Integration.IntegrationV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Containers.Integration.IntegrationV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Containers.Integration.IntegrationV1 {
        let returnMe:Services.Organization.Containers.Integration.IntegrationV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Containers.Integration.IntegrationV1) throws -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        if other == Services.Organization.Containers.Integration.IntegrationV1() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasOrganizationId {
             organizationId = other.organizationId
        }
        if other.hasIntegrationType {
             integrationType = other.integrationType
        }
        if (other.hasSlackSlashCommand) {
            try mergeSlackSlashCommand(other.slackSlashCommand)
        }
        if (other.hasSlackWebApi) {
            try mergeSlackWebApi(other.slackWebApi)
        }
        if other.hasProviderUid {
             providerUid = other.providerUid
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.IntegrationV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            id = try input.readString()

          case 18 :
            organizationId = try input.readString()

          case 24 :
            let valueIntintegrationType = try input.readEnum()
            if let enumsintegrationType = Services.Organization.Containers.Integration.IntegrationTypeV1(rawValue:valueIntintegrationType){
                 integrationType = enumsintegrationType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntintegrationType))
            }

          case 34 :
            let subBuilder:Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder = Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder()
            if hasSlackSlashCommand {
              try subBuilder.mergeFrom(slackSlashCommand)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            slackSlashCommand = subBuilder.buildPartial()

          case 42 :
            let subBuilder:Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder = Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder()
            if hasSlackWebApi {
              try subBuilder.mergeFrom(slackWebApi)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            slackWebApi = subBuilder.buildPartial()

          case 50 :
            providerUid = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class SlackSlashCommandDetailsV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasToken:Bool = false
    public private(set) var token:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasToken {
        try output.writeString(1, value:token)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasToken {
        serialize_size += token.computeStringSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1> {
      var mergedArray = Array<Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1? {
      return try Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1 {
      return try Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.Integration.IntegrationRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1 {
      return try Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1 {
      return try Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1 {
      return try Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1 {
      return try Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1 {
      return try Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder {
      return Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.classBuilder() as! Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder
    }
    public func getBuilder() -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder {
      return classBuilder() as! Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder {
      return try Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1) throws -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder {
      return try Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasToken {
        output += "\(indent) token: \(token) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasToken {
               hashCode = (hashCode &* 31) &+ token.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1 = Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1()
      public func getMessage() -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasToken:Bool {
           get {
                return builderResult.hasToken
           }
      }
      public var token:String {
           get {
                return builderResult.token
           }
           set (value) {
               builderResult.hasToken = true
               builderResult.token = value
           }
      }
      public func setToken(value:String) -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder {
        self.token = value
        return self
      }
      public func clearToken() -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder{
           builderResult.hasToken = false
           builderResult.token = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder {
        builderResult = Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder {
        return try Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1 {
        let returnMe:Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1) throws -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder {
        if other == Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1() {
         return self
        }
        if other.hasToken {
             token = other.token
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.SlackSlashCommandDetailsV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            token = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class SlackWebApiDetailsV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasToken:Bool = false
    public private(set) var token:String = ""

    public private(set) var hasByProfileId:Bool = false
    public private(set) var byProfileId:String = ""

    public private(set) var scopes:Array<String> = Array<String>()
    public private(set) var hasTeamId:Bool = false
    public private(set) var teamId:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasToken {
        try output.writeString(1, value:token)
      }
      if hasByProfileId {
        try output.writeString(2, value:byProfileId)
      }
      if !scopes.isEmpty {
        for oneValuescopes in scopes {
          try output.writeString(3, value:oneValuescopes)
        }
      }
      if hasTeamId {
        try output.writeString(4, value:teamId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasToken {
        serialize_size += token.computeStringSize(1)
      }
      if hasByProfileId {
        serialize_size += byProfileId.computeStringSize(2)
      }
      var dataSizeScopes:Int32 = 0
      for oneValuescopes in scopes {
          dataSizeScopes += oneValuescopes.computeStringSizeNoTag()
      }
      serialize_size += dataSizeScopes
      serialize_size += 1 * Int32(scopes.count)
      if hasTeamId {
        serialize_size += teamId.computeStringSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Containers.Integration.SlackWebApiDetailsV1> {
      var mergedArray = Array<Services.Organization.Containers.Integration.SlackWebApiDetailsV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1? {
      return try Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1 {
      return try Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.Integration.IntegrationRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1 {
      return try Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1 {
      return try Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1 {
      return try Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1 {
      return try Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1 {
      return try Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder {
      return Services.Organization.Containers.Integration.SlackWebApiDetailsV1.classBuilder() as! Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder
    }
    public func getBuilder() -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder {
      return classBuilder() as! Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder {
      return try Services.Organization.Containers.Integration.SlackWebApiDetailsV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.Integration.SlackWebApiDetailsV1) throws -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder {
      return try Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasToken {
        output += "\(indent) token: \(token) \n"
      }
      if hasByProfileId {
        output += "\(indent) byProfileId: \(byProfileId) \n"
      }
      var scopesElementIndex:Int = 0
      for oneValuescopes in scopes  {
          output += "\(indent) scopes[\(scopesElementIndex)]: \(oneValuescopes)\n"
          scopesElementIndex++
      }
      if hasTeamId {
        output += "\(indent) teamId: \(teamId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasToken {
               hashCode = (hashCode &* 31) &+ token.hashValue
            }
            if hasByProfileId {
               hashCode = (hashCode &* 31) &+ byProfileId.hashValue
            }
            for oneValuescopes in scopes {
                hashCode = (hashCode &* 31) &+ oneValuescopes.hashValue
            }
            if hasTeamId {
               hashCode = (hashCode &* 31) &+ teamId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.Integration.SlackWebApiDetailsV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.Integration.SlackWebApiDetailsV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.Integration.SlackWebApiDetailsV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Containers.Integration.SlackWebApiDetailsV1 = Services.Organization.Containers.Integration.SlackWebApiDetailsV1()
      public func getMessage() -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasToken:Bool {
           get {
                return builderResult.hasToken
           }
      }
      public var token:String {
           get {
                return builderResult.token
           }
           set (value) {
               builderResult.hasToken = true
               builderResult.token = value
           }
      }
      public func setToken(value:String) -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder {
        self.token = value
        return self
      }
      public func clearToken() -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder{
           builderResult.hasToken = false
           builderResult.token = ""
           return self
      }
      public var hasByProfileId:Bool {
           get {
                return builderResult.hasByProfileId
           }
      }
      public var byProfileId:String {
           get {
                return builderResult.byProfileId
           }
           set (value) {
               builderResult.hasByProfileId = true
               builderResult.byProfileId = value
           }
      }
      public func setByProfileId(value:String) -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder {
        self.byProfileId = value
        return self
      }
      public func clearByProfileId() -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder{
           builderResult.hasByProfileId = false
           builderResult.byProfileId = ""
           return self
      }
      public var scopes:Array<String> {
           get {
               return builderResult.scopes
           }
           set (array) {
               builderResult.scopes = array
           }
      }
      public func setScopes(value:Array<String>) -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder {
        self.scopes = value
        return self
      }
      public func clearScopes() -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder {
         builderResult.scopes.removeAll(keepCapacity: false)
         return self
      }
      public var hasTeamId:Bool {
           get {
                return builderResult.hasTeamId
           }
      }
      public var teamId:String {
           get {
                return builderResult.teamId
           }
           set (value) {
               builderResult.hasTeamId = true
               builderResult.teamId = value
           }
      }
      public func setTeamId(value:String) -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder {
        self.teamId = value
        return self
      }
      public func clearTeamId() -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder{
           builderResult.hasTeamId = false
           builderResult.teamId = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder {
        builderResult = Services.Organization.Containers.Integration.SlackWebApiDetailsV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder {
        return try Services.Organization.Containers.Integration.SlackWebApiDetailsV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1 {
        let returnMe:Services.Organization.Containers.Integration.SlackWebApiDetailsV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Containers.Integration.SlackWebApiDetailsV1) throws -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder {
        if other == Services.Organization.Containers.Integration.SlackWebApiDetailsV1() {
         return self
        }
        if other.hasToken {
             token = other.token
        }
        if other.hasByProfileId {
             byProfileId = other.byProfileId
        }
        if !other.scopes.isEmpty {
            builderResult.scopes += other.scopes
        }
        if other.hasTeamId {
             teamId = other.teamId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Containers.Integration.SlackWebApiDetailsV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            token = try input.readString()

          case 18 :
            byProfileId = try input.readString()

          case 26 :
            scopes += [try input.readString()]

          case 34 :
            teamId = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
