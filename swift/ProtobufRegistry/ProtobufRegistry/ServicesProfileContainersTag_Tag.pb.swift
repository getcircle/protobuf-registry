// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.Profile.Containers{ public struct Tag { }}

public func == (lhs: Services.Profile.Containers.Tag.TagV1, rhs: Services.Profile.Containers.Tag.TagV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasTypes == rhs.hasTypes) && (!lhs.hasTypes || lhs.types == rhs.types)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.Profile.Containers.Tag {
  public struct TagRoot {
    public static var sharedInstance : TagRoot {
     struct Static {
         static let instance : TagRoot = TagRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  public enum TagTypeV1:Int32 {
    case Skill = 0
    case Interest = 1
    case Language = 2
    case Project = 3

  }

  //Enum type declaration end 

  final public class TagV1 : GeneratedMessage, GeneratedMessageProtocol {
    public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "name": return name
           case "types": return self.types
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var types:Services.Profile.Containers.Tag.TagTypeV1 = Services.Profile.Containers.Tag.TagTypeV1.Skill
    public private(set) var hasTypes:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasName {
        output.writeString(3, value:name)
      }
      if hasTypes {
        output.writeEnum(4, value:types.rawValue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if (hasTypes) {
        serialize_size += types.rawValue.computeEnumSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Profile.Containers.Tag.TagV1 {
      return Services.Profile.Containers.Tag.TagV1.builder().mergeFromData(data, extensionRegistry:Services.Profile.Containers.Tag.TagRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.Tag.TagV1 {
      return Services.Profile.Containers.Tag.TagV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Profile.Containers.Tag.TagV1 {
      return Services.Profile.Containers.Tag.TagV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Profile.Containers.Tag.TagV1 {
      return Services.Profile.Containers.Tag.TagV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Profile.Containers.Tag.TagV1 {
      return Services.Profile.Containers.Tag.TagV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.Tag.TagV1 {
      return Services.Profile.Containers.Tag.TagV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Profile.Containers.Tag.TagV1Builder {
      return Services.Profile.Containers.Tag.TagV1.classBuilder() as! Services.Profile.Containers.Tag.TagV1Builder
    }
    public func builder() -> Services.Profile.Containers.Tag.TagV1Builder {
      return classBuilder() as! Services.Profile.Containers.Tag.TagV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.Tag.TagV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.Tag.TagV1.builder()
    }
    public func toBuilder() -> Services.Profile.Containers.Tag.TagV1Builder {
      return Services.Profile.Containers.Tag.TagV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Profile.Containers.Tag.TagV1) -> Services.Profile.Containers.Tag.TagV1Builder {
      return Services.Profile.Containers.Tag.TagV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if (hasTypes) {
        output += "\(indent) types: \(types.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasTypes {
               hashCode = (hashCode &* 31) &+ Int(types.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Profile.Containers.Tag.TagV1"
    }
    override public func className() -> String {
        return "Services.Profile.Containers.Tag.TagV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Containers.Tag.TagV1.self
    }
    //Meta information declaration end

  }

  final public class TagV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Profile.Containers.Tag.TagV1

    required override public init () {
       builderResult = Services.Profile.Containers.Tag.TagV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Profile.Containers.Tag.TagV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Profile.Containers.Tag.TagV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Profile.Containers.Tag.TagV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Profile.Containers.Tag.TagV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String)-> Services.Profile.Containers.Tag.TagV1Builder {
      self.name = value
      return self
    }
    public func clearName() -> Services.Profile.Containers.Tag.TagV1Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
      public var hasTypes:Bool{
          get {
              return builderResult.hasTypes
          }
      }
      public var types:Services.Profile.Containers.Tag.TagTypeV1 {
          get {
              return builderResult.types
          }
          set (value) {
              builderResult.hasTypes = true
              builderResult.types = value
          }
      }
      public func setTypes(value:Services.Profile.Containers.Tag.TagTypeV1)-> Services.Profile.Containers.Tag.TagV1Builder {
        self.types = value
        return self
      }
      public func clearTypes() -> Services.Profile.Containers.Tag.TagV1Builder {
         builderResult.hasTypes = false
         builderResult.types = .Skill
         return self
      }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Profile.Containers.Tag.TagV1Builder {
      builderResult = Services.Profile.Containers.Tag.TagV1()
      return self
    }
    public override func clone() -> Services.Profile.Containers.Tag.TagV1Builder {
      return Services.Profile.Containers.Tag.TagV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Profile.Containers.Tag.TagV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Profile.Containers.Tag.TagV1 {
      var returnMe:Services.Profile.Containers.Tag.TagV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Profile.Containers.Tag.TagV1) -> Services.Profile.Containers.Tag.TagV1Builder {
      if (other == Services.Profile.Containers.Tag.TagV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasName {
           name = other.name
      }
      if other.hasTypes {
           types = other.types
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Profile.Containers.Tag.TagV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.Tag.TagV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          name = input.readString()

        case 32 :
          let valueInttypes = input.readEnum()
          if let enumstypes = Services.Profile.Containers.Tag.TagTypeV1(rawValue:valueInttypes){
               types = enumstypes
          } else {
               unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueInttypes))
          }

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
