// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.Profile.Actions{ public struct GetExtendedProfile { }}

public func == (lhs: Services.Profile.Actions.GetExtendedProfile.RequestV1, rhs: Services.Profile.Actions.GetExtendedProfile.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasProfileId == rhs.hasProfileId) && (!lhs.hasProfileId || lhs.profileId == rhs.profileId)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Profile.Actions.GetExtendedProfile.ResponseV1, rhs: Services.Profile.Actions.GetExtendedProfile.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasProfile == rhs.hasProfile) && (!lhs.hasProfile || lhs.profile == rhs.profile)
  fieldCheck = fieldCheck && (lhs.hasAddress == rhs.hasAddress) && (!lhs.hasAddress || lhs.address == rhs.address)
  fieldCheck = fieldCheck && (lhs.hasManager == rhs.hasManager) && (!lhs.hasManager || lhs.manager == rhs.manager)
  fieldCheck = fieldCheck && (lhs.hasTeam == rhs.hasTeam) && (!lhs.hasTeam || lhs.team == rhs.team)
  fieldCheck = fieldCheck && (lhs.hasNotes == rhs.hasNotes) && (!lhs.hasNotes || lhs.notes == rhs.notes)
  fieldCheck = fieldCheck && (lhs.hasTags == rhs.hasTags) && (!lhs.hasTags || lhs.tags == rhs.tags)
  fieldCheck = fieldCheck && (lhs.hasIdentities == rhs.hasIdentities) && (!lhs.hasIdentities || lhs.identities == rhs.identities)
  fieldCheck = fieldCheck && (lhs.hasDirectReports == rhs.hasDirectReports) && (!lhs.hasDirectReports || lhs.directReports == rhs.directReports)
  fieldCheck = fieldCheck && (lhs.hasResume == rhs.hasResume) && (!lhs.hasResume || lhs.resume == rhs.resume)
  fieldCheck = fieldCheck && (lhs.hasLocation == rhs.hasLocation) && (!lhs.hasLocation || lhs.location == rhs.location)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.Profile.Actions.GetExtendedProfile {
  public struct GetExtendedProfileRoot {
    public static var sharedInstance : GetExtendedProfileRoot {
     struct Static {
         static let instance : GetExtendedProfileRoot = GetExtendedProfileRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Note.Containers.Note.NoteRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Organization.Containers.Address.AddressRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Organization.Containers.Location.LocationRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Organization.Containers.Team.TeamRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Profile.Containers.Profile.ProfileRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Profile.Containers.Tag.TagRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Resume.Containers.Resume.ResumeRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.User.Containers.Identity.IdentityRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "profileId": return profileId
           case "userId": return userId
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasProfileId:Bool = false
    public private(set) var profileId:String = ""

    public private(set) var hasUserId:Bool = false
    public private(set) var userId:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasProfileId {
        output.writeString(2, value:profileId)
      }
      if hasUserId {
        output.writeString(3, value:userId)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasProfileId {
        serialize_size += profileId.computeStringSize(2)
      }
      if hasUserId {
        serialize_size += userId.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Profile.Actions.GetExtendedProfile.RequestV1 {
      return Services.Profile.Actions.GetExtendedProfile.RequestV1.builder().mergeFromData(data, extensionRegistry:Services.Profile.Actions.GetExtendedProfile.GetExtendedProfileRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Profile.Actions.GetExtendedProfile.RequestV1 {
      return Services.Profile.Actions.GetExtendedProfile.RequestV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Profile.Actions.GetExtendedProfile.RequestV1 {
      return Services.Profile.Actions.GetExtendedProfile.RequestV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Profile.Actions.GetExtendedProfile.RequestV1 {
      return Services.Profile.Actions.GetExtendedProfile.RequestV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Profile.Actions.GetExtendedProfile.RequestV1 {
      return Services.Profile.Actions.GetExtendedProfile.RequestV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Actions.GetExtendedProfile.RequestV1 {
      return Services.Profile.Actions.GetExtendedProfile.RequestV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Profile.Actions.GetExtendedProfile.RequestV1Builder {
      return Services.Profile.Actions.GetExtendedProfile.RequestV1.classBuilder() as! Services.Profile.Actions.GetExtendedProfile.RequestV1Builder
    }
    public func builder() -> Services.Profile.Actions.GetExtendedProfile.RequestV1Builder {
      return classBuilder() as! Services.Profile.Actions.GetExtendedProfile.RequestV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Actions.GetExtendedProfile.RequestV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Profile.Actions.GetExtendedProfile.RequestV1.builder()
    }
    public func toBuilder() -> Services.Profile.Actions.GetExtendedProfile.RequestV1Builder {
      return Services.Profile.Actions.GetExtendedProfile.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Profile.Actions.GetExtendedProfile.RequestV1) -> Services.Profile.Actions.GetExtendedProfile.RequestV1Builder {
      return Services.Profile.Actions.GetExtendedProfile.RequestV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasProfileId {
        output += "\(indent) profileId: \(profileId) \n"
      }
      if hasUserId {
        output += "\(indent) userId: \(userId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasProfileId {
               hashCode = (hashCode &* 31) &+ profileId.hashValue
            }
            if hasUserId {
               hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Profile.Actions.GetExtendedProfile.RequestV1"
    }
    override public func className() -> String {
        return "Services.Profile.Actions.GetExtendedProfile.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Actions.GetExtendedProfile.RequestV1.self
    }
    //Meta information declaration end

  }

  final public class RequestV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Profile.Actions.GetExtendedProfile.RequestV1

    required override public init () {
       builderResult = Services.Profile.Actions.GetExtendedProfile.RequestV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Profile.Actions.GetExtendedProfile.RequestV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Profile.Actions.GetExtendedProfile.RequestV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasProfileId:Bool {
         get {
              return builderResult.hasProfileId
         }
    }
    public var profileId:String {
         get {
              return builderResult.profileId
         }
         set (value) {
             builderResult.hasProfileId = true
             builderResult.profileId = value
         }
    }
    public func setProfileId(value:String)-> Services.Profile.Actions.GetExtendedProfile.RequestV1Builder {
      self.profileId = value
      return self
    }
    public func clearProfileId() -> Services.Profile.Actions.GetExtendedProfile.RequestV1Builder{
         builderResult.hasProfileId = false
         builderResult.profileId = ""
         return self
    }
    public var hasUserId:Bool {
         get {
              return builderResult.hasUserId
         }
    }
    public var userId:String {
         get {
              return builderResult.userId
         }
         set (value) {
             builderResult.hasUserId = true
             builderResult.userId = value
         }
    }
    public func setUserId(value:String)-> Services.Profile.Actions.GetExtendedProfile.RequestV1Builder {
      self.userId = value
      return self
    }
    public func clearUserId() -> Services.Profile.Actions.GetExtendedProfile.RequestV1Builder{
         builderResult.hasUserId = false
         builderResult.userId = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Profile.Actions.GetExtendedProfile.RequestV1Builder {
      builderResult = Services.Profile.Actions.GetExtendedProfile.RequestV1()
      return self
    }
    public override func clone() -> Services.Profile.Actions.GetExtendedProfile.RequestV1Builder {
      return Services.Profile.Actions.GetExtendedProfile.RequestV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Profile.Actions.GetExtendedProfile.RequestV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Profile.Actions.GetExtendedProfile.RequestV1 {
      var returnMe:Services.Profile.Actions.GetExtendedProfile.RequestV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Profile.Actions.GetExtendedProfile.RequestV1) -> Services.Profile.Actions.GetExtendedProfile.RequestV1Builder {
      if (other == Services.Profile.Actions.GetExtendedProfile.RequestV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasProfileId {
           profileId = other.profileId
      }
      if other.hasUserId {
           userId = other.userId
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Profile.Actions.GetExtendedProfile.RequestV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Actions.GetExtendedProfile.RequestV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          profileId = input.readString()

        case 26 :
          userId = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "profile": return profile
           case "address": return address
           case "manager": return manager
           case "team": return team
           case "notes": return notes
           case "tags": return tags
           case "identities": return identities
           case "directReports": return directReports
           case "resume": return resume
           case "location": return location
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasProfile:Bool = false
    public private(set) var profile:Services.Profile.Containers.Profile.ProfileV1!
    public private(set) var hasAddress:Bool = false
    public private(set) var address:Services.Organization.Containers.Address.AddressV1!
    public private(set) var hasManager:Bool = false
    public private(set) var manager:Services.Profile.Containers.Profile.ProfileV1!
    public private(set) var hasTeam:Bool = false
    public private(set) var team:Services.Organization.Containers.Team.TeamV1!
    public private(set) var hasNotes:Bool = false
    public private(set) var notes:Services.Note.Containers.Note.NoteV1!
    public private(set) var hasTags:Bool = false
    public private(set) var tags:Services.Profile.Containers.Tag.TagV1!
    public private(set) var hasIdentities:Bool = false
    public private(set) var identities:Services.User.Containers.Identity.IdentityV1!
    public private(set) var hasDirectReports:Bool = false
    public private(set) var directReports:Services.Profile.Containers.Profile.ProfileV1!
    public private(set) var hasResume:Bool = false
    public private(set) var resume:Services.Resume.Containers.Resume.ResumeV1!
    public private(set) var hasLocation:Bool = false
    public private(set) var location:Services.Organization.Containers.Location.LocationV1!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasProfile {
        output.writeMessage(2, value:profile)
      }
      if hasAddress {
        output.writeMessage(3, value:address)
      }
      if hasManager {
        output.writeMessage(4, value:manager)
      }
      if hasTeam {
        output.writeMessage(5, value:team)
      }
      if hasNotes {
        output.writeMessage(6, value:notes)
      }
      if hasTags {
        output.writeMessage(7, value:tags)
      }
      if hasIdentities {
        output.writeMessage(8, value:identities)
      }
      if hasDirectReports {
        output.writeMessage(9, value:directReports)
      }
      if hasResume {
        output.writeMessage(10, value:resume)
      }
      if hasLocation {
        output.writeMessage(11, value:location)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasProfile {
          if let varSizeprofile = profile?.computeMessageSize(2) {
              serialize_size += varSizeprofile
          }
      }
      if hasAddress {
          if let varSizeaddress = address?.computeMessageSize(3) {
              serialize_size += varSizeaddress
          }
      }
      if hasManager {
          if let varSizemanager = manager?.computeMessageSize(4) {
              serialize_size += varSizemanager
          }
      }
      if hasTeam {
          if let varSizeteam = team?.computeMessageSize(5) {
              serialize_size += varSizeteam
          }
      }
      if hasNotes {
          if let varSizenotes = notes?.computeMessageSize(6) {
              serialize_size += varSizenotes
          }
      }
      if hasTags {
          if let varSizetags = tags?.computeMessageSize(7) {
              serialize_size += varSizetags
          }
      }
      if hasIdentities {
          if let varSizeidentities = identities?.computeMessageSize(8) {
              serialize_size += varSizeidentities
          }
      }
      if hasDirectReports {
          if let varSizedirectReports = directReports?.computeMessageSize(9) {
              serialize_size += varSizedirectReports
          }
      }
      if hasResume {
          if let varSizeresume = resume?.computeMessageSize(10) {
              serialize_size += varSizeresume
          }
      }
      if hasLocation {
          if let varSizelocation = location?.computeMessageSize(11) {
              serialize_size += varSizelocation
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1 {
      return Services.Profile.Actions.GetExtendedProfile.ResponseV1.builder().mergeFromData(data, extensionRegistry:Services.Profile.Actions.GetExtendedProfile.GetExtendedProfileRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1 {
      return Services.Profile.Actions.GetExtendedProfile.ResponseV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1 {
      return Services.Profile.Actions.GetExtendedProfile.ResponseV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Profile.Actions.GetExtendedProfile.ResponseV1 {
      return Services.Profile.Actions.GetExtendedProfile.ResponseV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1 {
      return Services.Profile.Actions.GetExtendedProfile.ResponseV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1 {
      return Services.Profile.Actions.GetExtendedProfile.ResponseV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      return Services.Profile.Actions.GetExtendedProfile.ResponseV1.classBuilder() as! Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder
    }
    public func builder() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      return classBuilder() as! Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Profile.Actions.GetExtendedProfile.ResponseV1.builder()
    }
    public func toBuilder() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      return Services.Profile.Actions.GetExtendedProfile.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Profile.Actions.GetExtendedProfile.ResponseV1) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      return Services.Profile.Actions.GetExtendedProfile.ResponseV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasProfile {
        output += "\(indent) profile {\n"
        profile?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasAddress {
        output += "\(indent) address {\n"
        address?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasManager {
        output += "\(indent) manager {\n"
        manager?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasTeam {
        output += "\(indent) team {\n"
        team?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasNotes {
        output += "\(indent) notes {\n"
        notes?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasTags {
        output += "\(indent) tags {\n"
        tags?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasIdentities {
        output += "\(indent) identities {\n"
        identities?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasDirectReports {
        output += "\(indent) directReports {\n"
        directReports?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasResume {
        output += "\(indent) resume {\n"
        resume?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasLocation {
        output += "\(indent) location {\n"
        location?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasProfile {
                if let hashValueprofile = profile?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueprofile
                }
            }
            if hasAddress {
                if let hashValueaddress = address?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueaddress
                }
            }
            if hasManager {
                if let hashValuemanager = manager?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuemanager
                }
            }
            if hasTeam {
                if let hashValueteam = team?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueteam
                }
            }
            if hasNotes {
                if let hashValuenotes = notes?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuenotes
                }
            }
            if hasTags {
                if let hashValuetags = tags?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuetags
                }
            }
            if hasIdentities {
                if let hashValueidentities = identities?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueidentities
                }
            }
            if hasDirectReports {
                if let hashValuedirectReports = directReports?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuedirectReports
                }
            }
            if hasResume {
                if let hashValueresume = resume?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueresume
                }
            }
            if hasLocation {
                if let hashValuelocation = location?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuelocation
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Profile.Actions.GetExtendedProfile.ResponseV1"
    }
    override public func className() -> String {
        return "Services.Profile.Actions.GetExtendedProfile.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Actions.GetExtendedProfile.ResponseV1.self
    }
    //Meta information declaration end

  }

  final public class ResponseV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Profile.Actions.GetExtendedProfile.ResponseV1

    required override public init () {
       builderResult = Services.Profile.Actions.GetExtendedProfile.ResponseV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasProfile:Bool {
         get {
             return builderResult.hasProfile
         }
    }
    public var profile:Services.Profile.Containers.Profile.ProfileV1! {
         get {
             return builderResult.profile
         }
         set (value) {
             builderResult.hasProfile = true
             builderResult.profile = value
         }
    }
    public func setProfile(value:Services.Profile.Containers.Profile.ProfileV1!)-> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      self.profile = value
      return self
    }
    public func mergeProfile(value:Services.Profile.Containers.Profile.ProfileV1) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      if (builderResult.hasProfile) {
        builderResult.profile = Services.Profile.Containers.Profile.ProfileV1.builderWithPrototype(builderResult.profile).mergeFrom(value).buildPartial()
      } else {
        builderResult.profile = value
      }
      builderResult.hasProfile = true
      return self
    }
    public func clearProfile() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      builderResult.hasProfile = false
      builderResult.profile = nil
      return self
    }
    public var hasAddress:Bool {
         get {
             return builderResult.hasAddress
         }
    }
    public var address:Services.Organization.Containers.Address.AddressV1! {
         get {
             return builderResult.address
         }
         set (value) {
             builderResult.hasAddress = true
             builderResult.address = value
         }
    }
    public func setAddress(value:Services.Organization.Containers.Address.AddressV1!)-> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      self.address = value
      return self
    }
    public func mergeAddress(value:Services.Organization.Containers.Address.AddressV1) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      if (builderResult.hasAddress) {
        builderResult.address = Services.Organization.Containers.Address.AddressV1.builderWithPrototype(builderResult.address).mergeFrom(value).buildPartial()
      } else {
        builderResult.address = value
      }
      builderResult.hasAddress = true
      return self
    }
    public func clearAddress() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      builderResult.hasAddress = false
      builderResult.address = nil
      return self
    }
    public var hasManager:Bool {
         get {
             return builderResult.hasManager
         }
    }
    public var manager:Services.Profile.Containers.Profile.ProfileV1! {
         get {
             return builderResult.manager
         }
         set (value) {
             builderResult.hasManager = true
             builderResult.manager = value
         }
    }
    public func setManager(value:Services.Profile.Containers.Profile.ProfileV1!)-> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      self.manager = value
      return self
    }
    public func mergeManager(value:Services.Profile.Containers.Profile.ProfileV1) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      if (builderResult.hasManager) {
        builderResult.manager = Services.Profile.Containers.Profile.ProfileV1.builderWithPrototype(builderResult.manager).mergeFrom(value).buildPartial()
      } else {
        builderResult.manager = value
      }
      builderResult.hasManager = true
      return self
    }
    public func clearManager() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      builderResult.hasManager = false
      builderResult.manager = nil
      return self
    }
    public var hasTeam:Bool {
         get {
             return builderResult.hasTeam
         }
    }
    public var team:Services.Organization.Containers.Team.TeamV1! {
         get {
             return builderResult.team
         }
         set (value) {
             builderResult.hasTeam = true
             builderResult.team = value
         }
    }
    public func setTeam(value:Services.Organization.Containers.Team.TeamV1!)-> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      self.team = value
      return self
    }
    public func mergeTeam(value:Services.Organization.Containers.Team.TeamV1) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      if (builderResult.hasTeam) {
        builderResult.team = Services.Organization.Containers.Team.TeamV1.builderWithPrototype(builderResult.team).mergeFrom(value).buildPartial()
      } else {
        builderResult.team = value
      }
      builderResult.hasTeam = true
      return self
    }
    public func clearTeam() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      builderResult.hasTeam = false
      builderResult.team = nil
      return self
    }
    public var hasNotes:Bool {
         get {
             return builderResult.hasNotes
         }
    }
    public var notes:Services.Note.Containers.Note.NoteV1! {
         get {
             return builderResult.notes
         }
         set (value) {
             builderResult.hasNotes = true
             builderResult.notes = value
         }
    }
    public func setNotes(value:Services.Note.Containers.Note.NoteV1!)-> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      self.notes = value
      return self
    }
    public func mergeNotes(value:Services.Note.Containers.Note.NoteV1) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      if (builderResult.hasNotes) {
        builderResult.notes = Services.Note.Containers.Note.NoteV1.builderWithPrototype(builderResult.notes).mergeFrom(value).buildPartial()
      } else {
        builderResult.notes = value
      }
      builderResult.hasNotes = true
      return self
    }
    public func clearNotes() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      builderResult.hasNotes = false
      builderResult.notes = nil
      return self
    }
    public var hasTags:Bool {
         get {
             return builderResult.hasTags
         }
    }
    public var tags:Services.Profile.Containers.Tag.TagV1! {
         get {
             return builderResult.tags
         }
         set (value) {
             builderResult.hasTags = true
             builderResult.tags = value
         }
    }
    public func setTags(value:Services.Profile.Containers.Tag.TagV1!)-> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      self.tags = value
      return self
    }
    public func mergeTags(value:Services.Profile.Containers.Tag.TagV1) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      if (builderResult.hasTags) {
        builderResult.tags = Services.Profile.Containers.Tag.TagV1.builderWithPrototype(builderResult.tags).mergeFrom(value).buildPartial()
      } else {
        builderResult.tags = value
      }
      builderResult.hasTags = true
      return self
    }
    public func clearTags() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      builderResult.hasTags = false
      builderResult.tags = nil
      return self
    }
    public var hasIdentities:Bool {
         get {
             return builderResult.hasIdentities
         }
    }
    public var identities:Services.User.Containers.Identity.IdentityV1! {
         get {
             return builderResult.identities
         }
         set (value) {
             builderResult.hasIdentities = true
             builderResult.identities = value
         }
    }
    public func setIdentities(value:Services.User.Containers.Identity.IdentityV1!)-> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      self.identities = value
      return self
    }
    public func mergeIdentities(value:Services.User.Containers.Identity.IdentityV1) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      if (builderResult.hasIdentities) {
        builderResult.identities = Services.User.Containers.Identity.IdentityV1.builderWithPrototype(builderResult.identities).mergeFrom(value).buildPartial()
      } else {
        builderResult.identities = value
      }
      builderResult.hasIdentities = true
      return self
    }
    public func clearIdentities() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      builderResult.hasIdentities = false
      builderResult.identities = nil
      return self
    }
    public var hasDirectReports:Bool {
         get {
             return builderResult.hasDirectReports
         }
    }
    public var directReports:Services.Profile.Containers.Profile.ProfileV1! {
         get {
             return builderResult.directReports
         }
         set (value) {
             builderResult.hasDirectReports = true
             builderResult.directReports = value
         }
    }
    public func setDirectReports(value:Services.Profile.Containers.Profile.ProfileV1!)-> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      self.directReports = value
      return self
    }
    public func mergeDirectReports(value:Services.Profile.Containers.Profile.ProfileV1) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      if (builderResult.hasDirectReports) {
        builderResult.directReports = Services.Profile.Containers.Profile.ProfileV1.builderWithPrototype(builderResult.directReports).mergeFrom(value).buildPartial()
      } else {
        builderResult.directReports = value
      }
      builderResult.hasDirectReports = true
      return self
    }
    public func clearDirectReports() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      builderResult.hasDirectReports = false
      builderResult.directReports = nil
      return self
    }
    public var hasResume:Bool {
         get {
             return builderResult.hasResume
         }
    }
    public var resume:Services.Resume.Containers.Resume.ResumeV1! {
         get {
             return builderResult.resume
         }
         set (value) {
             builderResult.hasResume = true
             builderResult.resume = value
         }
    }
    public func setResume(value:Services.Resume.Containers.Resume.ResumeV1!)-> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      self.resume = value
      return self
    }
    public func mergeResume(value:Services.Resume.Containers.Resume.ResumeV1) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      if (builderResult.hasResume) {
        builderResult.resume = Services.Resume.Containers.Resume.ResumeV1.builderWithPrototype(builderResult.resume).mergeFrom(value).buildPartial()
      } else {
        builderResult.resume = value
      }
      builderResult.hasResume = true
      return self
    }
    public func clearResume() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      builderResult.hasResume = false
      builderResult.resume = nil
      return self
    }
    public var hasLocation:Bool {
         get {
             return builderResult.hasLocation
         }
    }
    public var location:Services.Organization.Containers.Location.LocationV1! {
         get {
             return builderResult.location
         }
         set (value) {
             builderResult.hasLocation = true
             builderResult.location = value
         }
    }
    public func setLocation(value:Services.Organization.Containers.Location.LocationV1!)-> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      self.location = value
      return self
    }
    public func mergeLocation(value:Services.Organization.Containers.Location.LocationV1) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      if (builderResult.hasLocation) {
        builderResult.location = Services.Organization.Containers.Location.LocationV1.builderWithPrototype(builderResult.location).mergeFrom(value).buildPartial()
      } else {
        builderResult.location = value
      }
      builderResult.hasLocation = true
      return self
    }
    public func clearLocation() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      builderResult.hasLocation = false
      builderResult.location = nil
      return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      builderResult = Services.Profile.Actions.GetExtendedProfile.ResponseV1()
      return self
    }
    public override func clone() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      return Services.Profile.Actions.GetExtendedProfile.ResponseV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Profile.Actions.GetExtendedProfile.ResponseV1 {
      var returnMe:Services.Profile.Actions.GetExtendedProfile.ResponseV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Profile.Actions.GetExtendedProfile.ResponseV1) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      if (other == Services.Profile.Actions.GetExtendedProfile.ResponseV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if (other.hasProfile) {
          mergeProfile(other.profile)
      }
      if (other.hasAddress) {
          mergeAddress(other.address)
      }
      if (other.hasManager) {
          mergeManager(other.manager)
      }
      if (other.hasTeam) {
          mergeTeam(other.team)
      }
      if (other.hasNotes) {
          mergeNotes(other.notes)
      }
      if (other.hasTags) {
          mergeTags(other.tags)
      }
      if (other.hasIdentities) {
          mergeIdentities(other.identities)
      }
      if (other.hasDirectReports) {
          mergeDirectReports(other.directReports)
      }
      if (other.hasResume) {
          mergeResume(other.resume)
      }
      if (other.hasLocation) {
          mergeLocation(other.location)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Actions.GetExtendedProfile.ResponseV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          var subBuilder:Services.Profile.Containers.Profile.ProfileV1Builder = Services.Profile.Containers.Profile.ProfileV1.builder()
          if hasProfile {
            subBuilder.mergeFrom(profile)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          profile = subBuilder.buildPartial()

        case 26 :
          var subBuilder:Services.Organization.Containers.Address.AddressV1Builder = Services.Organization.Containers.Address.AddressV1.builder()
          if hasAddress {
            subBuilder.mergeFrom(address)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          address = subBuilder.buildPartial()

        case 34 :
          var subBuilder:Services.Profile.Containers.Profile.ProfileV1Builder = Services.Profile.Containers.Profile.ProfileV1.builder()
          if hasManager {
            subBuilder.mergeFrom(manager)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          manager = subBuilder.buildPartial()

        case 42 :
          var subBuilder:Services.Organization.Containers.Team.TeamV1Builder = Services.Organization.Containers.Team.TeamV1.builder()
          if hasTeam {
            subBuilder.mergeFrom(team)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          team = subBuilder.buildPartial()

        case 50 :
          var subBuilder:Services.Note.Containers.Note.NoteV1Builder = Services.Note.Containers.Note.NoteV1.builder()
          if hasNotes {
            subBuilder.mergeFrom(notes)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          notes = subBuilder.buildPartial()

        case 58 :
          var subBuilder:Services.Profile.Containers.Tag.TagV1Builder = Services.Profile.Containers.Tag.TagV1.builder()
          if hasTags {
            subBuilder.mergeFrom(tags)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          tags = subBuilder.buildPartial()

        case 66 :
          var subBuilder:Services.User.Containers.Identity.IdentityV1Builder = Services.User.Containers.Identity.IdentityV1.builder()
          if hasIdentities {
            subBuilder.mergeFrom(identities)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          identities = subBuilder.buildPartial()

        case 74 :
          var subBuilder:Services.Profile.Containers.Profile.ProfileV1Builder = Services.Profile.Containers.Profile.ProfileV1.builder()
          if hasDirectReports {
            subBuilder.mergeFrom(directReports)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          directReports = subBuilder.buildPartial()

        case 82 :
          var subBuilder:Services.Resume.Containers.Resume.ResumeV1Builder = Services.Resume.Containers.Resume.ResumeV1.builder()
          if hasResume {
            subBuilder.mergeFrom(resume)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          resume = subBuilder.buildPartial()

        case 90 :
          var subBuilder:Services.Organization.Containers.Location.LocationV1Builder = Services.Organization.Containers.Location.LocationV1.builder()
          if hasLocation {
            subBuilder.mergeFrom(location)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          location = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
