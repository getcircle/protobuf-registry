// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file containers.proto

import Foundation

public extension Services.Profile{ public struct Containers { }}

public func == (lhs: Services.Profile.Containers.ContactMethodV1, rhs: Services.Profile.Containers.ContactMethodV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasLabel == rhs.hasLabel) && (!lhs.hasLabel || lhs.label == rhs.label)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  fieldCheck = fieldCheck && (lhs.hasContactMethodType == rhs.hasContactMethodType) && (!lhs.hasContactMethodType || lhs.contactMethodType == rhs.contactMethodType)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Profile.Containers.ProfileV1, rhs: Services.Profile.Containers.ProfileV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
  fieldCheck = fieldCheck && (lhs.hasFirstName == rhs.hasFirstName) && (!lhs.hasFirstName || lhs.firstName == rhs.firstName)
  fieldCheck = fieldCheck && (lhs.hasLastName == rhs.hasLastName) && (!lhs.hasLastName || lhs.lastName == rhs.lastName)
  fieldCheck = fieldCheck && (lhs.hasImageUrl == rhs.hasImageUrl) && (!lhs.hasImageUrl || lhs.imageUrl == rhs.imageUrl)
  fieldCheck = fieldCheck && (lhs.hasFullName == rhs.hasFullName) && (!lhs.hasFullName || lhs.fullName == rhs.fullName)
  fieldCheck = fieldCheck && (lhs.hasBirthDate == rhs.hasBirthDate) && (!lhs.hasBirthDate || lhs.birthDate == rhs.birthDate)
  fieldCheck = fieldCheck && (lhs.hasHireDate == rhs.hasHireDate) && (!lhs.hasHireDate || lhs.hireDate == rhs.hireDate)
  fieldCheck = fieldCheck && (lhs.hasVerified == rhs.hasVerified) && (!lhs.hasVerified || lhs.verified == rhs.verified)
  fieldCheck = fieldCheck && (lhs.items == rhs.items)
  fieldCheck = fieldCheck && (lhs.hasNickname == rhs.hasNickname) && (!lhs.hasNickname || lhs.nickname == rhs.nickname)
  fieldCheck = fieldCheck && (lhs.contactMethods == rhs.contactMethods)
  fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
  fieldCheck = fieldCheck && (lhs.hasIsAdmin == rhs.hasIsAdmin) && (!lhs.hasIsAdmin || lhs.isAdmin == rhs.isAdmin)
  fieldCheck = fieldCheck && (lhs.hasSmallImageUrl == rhs.hasSmallImageUrl) && (!lhs.hasSmallImageUrl || lhs.smallImageUrl == rhs.smallImageUrl)
  fieldCheck = fieldCheck && (lhs.hasDisplayTitle == rhs.hasDisplayTitle) && (!lhs.hasDisplayTitle || lhs.displayTitle == rhs.displayTitle)
  fieldCheck = fieldCheck && (lhs.hasAuthenticationIdentifier == rhs.hasAuthenticationIdentifier) && (!lhs.hasAuthenticationIdentifier || lhs.authenticationIdentifier == rhs.authenticationIdentifier)
  fieldCheck = fieldCheck && (lhs.hasInflations == rhs.hasInflations) && (!lhs.hasInflations || lhs.inflations == rhs.inflations)
  fieldCheck = fieldCheck && (lhs.hasFields == rhs.hasFields) && (!lhs.hasFields || lhs.fields == rhs.fields)
  fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Profile.Containers.ProfileItemV1, rhs: Services.Profile.Containers.ProfileItemV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Profile.Containers.AttributeV1, rhs: Services.Profile.Containers.AttributeV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Profile.Containers.StatV1, rhs: Services.Profile.Containers.StatV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasCount == rhs.hasCount) && (!lhs.hasCount || lhs.count == rhs.count)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Profile.Containers {
  public struct ContainersRoot {
    public static var sharedInstance : ContainersRoot {
     struct Static {
         static let instance : ContainersRoot = ContainersRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Common.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class ContactMethodV1 : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum ContactMethodTypeV1:Int32 {
        case CellPhone = 0
        case Phone = 1
        case Email = 2
        case Slack = 3
        case Twitter = 4
        case Hipchat = 5
        case Facebook = 6
        case Skype = 7

      }

      //Enum type declaration end 

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasLabel:Bool = false
    public private(set) var label:String = ""

    public private(set) var hasValue:Bool = false
    public private(set) var value:String = ""

    public private(set) var contactMethodType:Services.Profile.Containers.ContactMethodV1.ContactMethodTypeV1 = Services.Profile.Containers.ContactMethodV1.ContactMethodTypeV1.CellPhone
    public private(set) var hasContactMethodType:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeString(1, value:id)
      }
      if hasLabel {
        try output.writeString(2, value:label)
      }
      if hasValue {
        try output.writeString(3, value:value)
      }
      if hasContactMethodType {
        try output.writeEnum(4, value:contactMethodType.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeStringSize(1)
      }
      if hasLabel {
        serialize_size += label.computeStringSize(2)
      }
      if hasValue {
        serialize_size += value.computeStringSize(3)
      }
      if (hasContactMethodType) {
        serialize_size += contactMethodType.rawValue.computeEnumSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Profile.Containers.ContactMethodV1> {
      var mergedArray = Array<Services.Profile.Containers.ContactMethodV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Profile.Containers.ContactMethodV1? {
      return try Services.Profile.Containers.ContactMethodV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Profile.Containers.ContactMethodV1 {
      return try Services.Profile.Containers.ContactMethodV1.Builder().mergeFromData(data, extensionRegistry:Services.Profile.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.ContactMethodV1 {
      return try Services.Profile.Containers.ContactMethodV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Profile.Containers.ContactMethodV1 {
      return try Services.Profile.Containers.ContactMethodV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.ContactMethodV1 {
      return try Services.Profile.Containers.ContactMethodV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Profile.Containers.ContactMethodV1 {
      return try Services.Profile.Containers.ContactMethodV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.ContactMethodV1 {
      return try Services.Profile.Containers.ContactMethodV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Profile.Containers.ContactMethodV1.Builder {
      return Services.Profile.Containers.ContactMethodV1.classBuilder() as! Services.Profile.Containers.ContactMethodV1.Builder
    }
    public func getBuilder() -> Services.Profile.Containers.ContactMethodV1.Builder {
      return classBuilder() as! Services.Profile.Containers.ContactMethodV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.ContactMethodV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.ContactMethodV1.Builder()
    }
    public func toBuilder() throws -> Services.Profile.Containers.ContactMethodV1.Builder {
      return try Services.Profile.Containers.ContactMethodV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Profile.Containers.ContactMethodV1) throws -> Services.Profile.Containers.ContactMethodV1.Builder {
      return try Services.Profile.Containers.ContactMethodV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasLabel {
        output += "\(indent) label: \(label) \n"
      }
      if hasValue {
        output += "\(indent) value: \(value) \n"
      }
      if (hasContactMethodType) {
        output += "\(indent) contactMethodType: \(contactMethodType.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasLabel {
               hashCode = (hashCode &* 31) &+ label.hashValue
            }
            if hasValue {
               hashCode = (hashCode &* 31) &+ value.hashValue
            }
            if hasContactMethodType {
               hashCode = (hashCode &* 31) &+ Int(contactMethodType.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Profile.Containers.ContactMethodV1"
    }
    override public func className() -> String {
        return "Services.Profile.Containers.ContactMethodV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Containers.ContactMethodV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Profile.Containers.ContactMethodV1 = Services.Profile.Containers.ContactMethodV1()
      public func getMessage() -> Services.Profile.Containers.ContactMethodV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Services.Profile.Containers.ContactMethodV1.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.Profile.Containers.ContactMethodV1.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasLabel:Bool {
           get {
                return builderResult.hasLabel
           }
      }
      public var label:String {
           get {
                return builderResult.label
           }
           set (value) {
               builderResult.hasLabel = true
               builderResult.label = value
           }
      }
      public func setLabel(value:String) -> Services.Profile.Containers.ContactMethodV1.Builder {
        self.label = value
        return self
      }
      public func clearLabel() -> Services.Profile.Containers.ContactMethodV1.Builder{
           builderResult.hasLabel = false
           builderResult.label = ""
           return self
      }
      public var hasValue:Bool {
           get {
                return builderResult.hasValue
           }
      }
      public var value:String {
           get {
                return builderResult.value
           }
           set (value) {
               builderResult.hasValue = true
               builderResult.value = value
           }
      }
      public func setValue(value:String) -> Services.Profile.Containers.ContactMethodV1.Builder {
        self.value = value
        return self
      }
      public func clearValue() -> Services.Profile.Containers.ContactMethodV1.Builder{
           builderResult.hasValue = false
           builderResult.value = ""
           return self
      }
        public var hasContactMethodType:Bool{
            get {
                return builderResult.hasContactMethodType
            }
        }
        public var contactMethodType:Services.Profile.Containers.ContactMethodV1.ContactMethodTypeV1 {
            get {
                return builderResult.contactMethodType
            }
            set (value) {
                builderResult.hasContactMethodType = true
                builderResult.contactMethodType = value
            }
        }
        public func setContactMethodType(value:Services.Profile.Containers.ContactMethodV1.ContactMethodTypeV1) -> Services.Profile.Containers.ContactMethodV1.Builder {
          self.contactMethodType = value
          return self
        }
        public func clearContactMethodType() -> Services.Profile.Containers.ContactMethodV1.Builder {
           builderResult.hasContactMethodType = false
           builderResult.contactMethodType = .CellPhone
           return self
        }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Profile.Containers.ContactMethodV1.Builder {
        builderResult = Services.Profile.Containers.ContactMethodV1()
        return self
      }
      public override func clone() throws -> Services.Profile.Containers.ContactMethodV1.Builder {
        return try Services.Profile.Containers.ContactMethodV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Profile.Containers.ContactMethodV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Profile.Containers.ContactMethodV1 {
        let returnMe:Services.Profile.Containers.ContactMethodV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Profile.Containers.ContactMethodV1) throws -> Services.Profile.Containers.ContactMethodV1.Builder {
        if other == Services.Profile.Containers.ContactMethodV1() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasLabel {
             label = other.label
        }
        if other.hasValue {
             value = other.value
        }
        if other.hasContactMethodType {
             contactMethodType = other.contactMethodType
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Profile.Containers.ContactMethodV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.ContactMethodV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            id = try input.readString()

          case 18 :
            label = try input.readString()

          case 26 :
            value = try input.readString()

          case 32 :
            let valueIntcontactMethodType = try input.readEnum()
            if let enumscontactMethodType = Services.Profile.Containers.ContactMethodV1.ContactMethodTypeV1(rawValue:valueIntcontactMethodType){
                 contactMethodType = enumscontactMethodType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntcontactMethodType))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ProfileV1 : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum StatusV1:Int32 {
        case Active = 0
        case Inactive = 1

      }

      //Enum type declaration end 

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    public private(set) var hasUserId:Bool = false
    public private(set) var userId:String = ""

    public private(set) var hasTitle:Bool = false
    public private(set) var title:String = ""

    public private(set) var hasFirstName:Bool = false
    public private(set) var firstName:String = ""

    public private(set) var hasLastName:Bool = false
    public private(set) var lastName:String = ""

    public private(set) var hasImageUrl:Bool = false
    public private(set) var imageUrl:String = ""

    public private(set) var hasFullName:Bool = false
    public private(set) var fullName:String = ""

    public private(set) var hasBirthDate:Bool = false
    public private(set) var birthDate:String = ""

    public private(set) var hasHireDate:Bool = false
    public private(set) var hireDate:String = ""

    public private(set) var hasVerified:Bool = false
    public private(set) var verified:Bool = false

    public private(set) var items:Array<Services.Profile.Containers.ProfileItemV1>  = Array<Services.Profile.Containers.ProfileItemV1>()
    public private(set) var hasNickname:Bool = false
    public private(set) var nickname:String = ""

    public private(set) var contactMethods:Array<Services.Profile.Containers.ContactMethodV1>  = Array<Services.Profile.Containers.ContactMethodV1>()
    public private(set) var hasEmail:Bool = false
    public private(set) var email:String = ""

    public private(set) var hasIsAdmin:Bool = false
    public private(set) var isAdmin:Bool = false

    public private(set) var hasSmallImageUrl:Bool = false
    public private(set) var smallImageUrl:String = ""

    public private(set) var hasDisplayTitle:Bool = false
    public private(set) var displayTitle:String = ""

    public private(set) var hasAuthenticationIdentifier:Bool = false
    public private(set) var authenticationIdentifier:String = ""

    public private(set) var hasInflations:Bool = false
    public private(set) var inflations:Services.Common.Containers.InflationsV1!
    public private(set) var hasFields:Bool = false
    public private(set) var fields:Services.Common.Containers.FieldsV1!
    public private(set) var status:Services.Profile.Containers.ProfileV1.StatusV1 = Services.Profile.Containers.ProfileV1.StatusV1.Active
    public private(set) var hasStatus:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeString(1, value:id)
      }
      if hasOrganizationId {
        try output.writeString(2, value:organizationId)
      }
      if hasUserId {
        try output.writeString(3, value:userId)
      }
      if hasTitle {
        try output.writeString(4, value:title)
      }
      if hasFirstName {
        try output.writeString(5, value:firstName)
      }
      if hasLastName {
        try output.writeString(6, value:lastName)
      }
      if hasImageUrl {
        try output.writeString(7, value:imageUrl)
      }
      if hasFullName {
        try output.writeString(8, value:fullName)
      }
      if hasBirthDate {
        try output.writeString(9, value:birthDate)
      }
      if hasHireDate {
        try output.writeString(10, value:hireDate)
      }
      if hasVerified {
        try output.writeBool(11, value:verified)
      }
      for oneElementitems in items {
          try output.writeMessage(12, value:oneElementitems)
      }
      if hasNickname {
        try output.writeString(13, value:nickname)
      }
      for oneElementcontactMethods in contactMethods {
          try output.writeMessage(14, value:oneElementcontactMethods)
      }
      if hasEmail {
        try output.writeString(15, value:email)
      }
      if hasIsAdmin {
        try output.writeBool(16, value:isAdmin)
      }
      if hasSmallImageUrl {
        try output.writeString(17, value:smallImageUrl)
      }
      if hasDisplayTitle {
        try output.writeString(18, value:displayTitle)
      }
      if hasAuthenticationIdentifier {
        try output.writeString(19, value:authenticationIdentifier)
      }
      if hasInflations {
        try output.writeMessage(20, value:inflations)
      }
      if hasFields {
        try output.writeMessage(21, value:fields)
      }
      if hasStatus {
        try output.writeEnum(22, value:status.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeStringSize(1)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(2)
      }
      if hasUserId {
        serialize_size += userId.computeStringSize(3)
      }
      if hasTitle {
        serialize_size += title.computeStringSize(4)
      }
      if hasFirstName {
        serialize_size += firstName.computeStringSize(5)
      }
      if hasLastName {
        serialize_size += lastName.computeStringSize(6)
      }
      if hasImageUrl {
        serialize_size += imageUrl.computeStringSize(7)
      }
      if hasFullName {
        serialize_size += fullName.computeStringSize(8)
      }
      if hasBirthDate {
        serialize_size += birthDate.computeStringSize(9)
      }
      if hasHireDate {
        serialize_size += hireDate.computeStringSize(10)
      }
      if hasVerified {
        serialize_size += verified.computeBoolSize(11)
      }
      for oneElementitems in items {
          serialize_size += oneElementitems.computeMessageSize(12)
      }
      if hasNickname {
        serialize_size += nickname.computeStringSize(13)
      }
      for oneElementcontactMethods in contactMethods {
          serialize_size += oneElementcontactMethods.computeMessageSize(14)
      }
      if hasEmail {
        serialize_size += email.computeStringSize(15)
      }
      if hasIsAdmin {
        serialize_size += isAdmin.computeBoolSize(16)
      }
      if hasSmallImageUrl {
        serialize_size += smallImageUrl.computeStringSize(17)
      }
      if hasDisplayTitle {
        serialize_size += displayTitle.computeStringSize(18)
      }
      if hasAuthenticationIdentifier {
        serialize_size += authenticationIdentifier.computeStringSize(19)
      }
      if hasInflations {
          if let varSizeinflations = inflations?.computeMessageSize(20) {
              serialize_size += varSizeinflations
          }
      }
      if hasFields {
          if let varSizefields = fields?.computeMessageSize(21) {
              serialize_size += varSizefields
          }
      }
      if (hasStatus) {
        serialize_size += status.rawValue.computeEnumSize(22)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Profile.Containers.ProfileV1> {
      var mergedArray = Array<Services.Profile.Containers.ProfileV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Profile.Containers.ProfileV1? {
      return try Services.Profile.Containers.ProfileV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Profile.Containers.ProfileV1 {
      return try Services.Profile.Containers.ProfileV1.Builder().mergeFromData(data, extensionRegistry:Services.Profile.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.ProfileV1 {
      return try Services.Profile.Containers.ProfileV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Profile.Containers.ProfileV1 {
      return try Services.Profile.Containers.ProfileV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.ProfileV1 {
      return try Services.Profile.Containers.ProfileV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Profile.Containers.ProfileV1 {
      return try Services.Profile.Containers.ProfileV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.ProfileV1 {
      return try Services.Profile.Containers.ProfileV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Profile.Containers.ProfileV1.Builder {
      return Services.Profile.Containers.ProfileV1.classBuilder() as! Services.Profile.Containers.ProfileV1.Builder
    }
    public func getBuilder() -> Services.Profile.Containers.ProfileV1.Builder {
      return classBuilder() as! Services.Profile.Containers.ProfileV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.ProfileV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.ProfileV1.Builder()
    }
    public func toBuilder() throws -> Services.Profile.Containers.ProfileV1.Builder {
      return try Services.Profile.Containers.ProfileV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Profile.Containers.ProfileV1) throws -> Services.Profile.Containers.ProfileV1.Builder {
      return try Services.Profile.Containers.ProfileV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      if hasUserId {
        output += "\(indent) userId: \(userId) \n"
      }
      if hasTitle {
        output += "\(indent) title: \(title) \n"
      }
      if hasFirstName {
        output += "\(indent) firstName: \(firstName) \n"
      }
      if hasLastName {
        output += "\(indent) lastName: \(lastName) \n"
      }
      if hasImageUrl {
        output += "\(indent) imageUrl: \(imageUrl) \n"
      }
      if hasFullName {
        output += "\(indent) fullName: \(fullName) \n"
      }
      if hasBirthDate {
        output += "\(indent) birthDate: \(birthDate) \n"
      }
      if hasHireDate {
        output += "\(indent) hireDate: \(hireDate) \n"
      }
      if hasVerified {
        output += "\(indent) verified: \(verified) \n"
      }
      var itemsElementIndex:Int = 0
      for oneElementitems in items {
          output += "\(indent) items[\(itemsElementIndex)] {\n"
          try oneElementitems.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          itemsElementIndex++
      }
      if hasNickname {
        output += "\(indent) nickname: \(nickname) \n"
      }
      var contactMethodsElementIndex:Int = 0
      for oneElementcontactMethods in contactMethods {
          output += "\(indent) contactMethods[\(contactMethodsElementIndex)] {\n"
          try oneElementcontactMethods.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          contactMethodsElementIndex++
      }
      if hasEmail {
        output += "\(indent) email: \(email) \n"
      }
      if hasIsAdmin {
        output += "\(indent) isAdmin: \(isAdmin) \n"
      }
      if hasSmallImageUrl {
        output += "\(indent) smallImageUrl: \(smallImageUrl) \n"
      }
      if hasDisplayTitle {
        output += "\(indent) displayTitle: \(displayTitle) \n"
      }
      if hasAuthenticationIdentifier {
        output += "\(indent) authenticationIdentifier: \(authenticationIdentifier) \n"
      }
      if hasInflations {
        output += "\(indent) inflations {\n"
        try inflations?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasFields {
        output += "\(indent) fields {\n"
        try fields?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if (hasStatus) {
        output += "\(indent) status: \(status.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            if hasUserId {
               hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            if hasTitle {
               hashCode = (hashCode &* 31) &+ title.hashValue
            }
            if hasFirstName {
               hashCode = (hashCode &* 31) &+ firstName.hashValue
            }
            if hasLastName {
               hashCode = (hashCode &* 31) &+ lastName.hashValue
            }
            if hasImageUrl {
               hashCode = (hashCode &* 31) &+ imageUrl.hashValue
            }
            if hasFullName {
               hashCode = (hashCode &* 31) &+ fullName.hashValue
            }
            if hasBirthDate {
               hashCode = (hashCode &* 31) &+ birthDate.hashValue
            }
            if hasHireDate {
               hashCode = (hashCode &* 31) &+ hireDate.hashValue
            }
            if hasVerified {
               hashCode = (hashCode &* 31) &+ verified.hashValue
            }
            for oneElementitems in items {
                hashCode = (hashCode &* 31) &+ oneElementitems.hashValue
            }
            if hasNickname {
               hashCode = (hashCode &* 31) &+ nickname.hashValue
            }
            for oneElementcontactMethods in contactMethods {
                hashCode = (hashCode &* 31) &+ oneElementcontactMethods.hashValue
            }
            if hasEmail {
               hashCode = (hashCode &* 31) &+ email.hashValue
            }
            if hasIsAdmin {
               hashCode = (hashCode &* 31) &+ isAdmin.hashValue
            }
            if hasSmallImageUrl {
               hashCode = (hashCode &* 31) &+ smallImageUrl.hashValue
            }
            if hasDisplayTitle {
               hashCode = (hashCode &* 31) &+ displayTitle.hashValue
            }
            if hasAuthenticationIdentifier {
               hashCode = (hashCode &* 31) &+ authenticationIdentifier.hashValue
            }
            if hasInflations {
                if let hashValueinflations = inflations?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueinflations
                }
            }
            if hasFields {
                if let hashValuefields = fields?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefields
                }
            }
            if hasStatus {
               hashCode = (hashCode &* 31) &+ Int(status.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Profile.Containers.ProfileV1"
    }
    override public func className() -> String {
        return "Services.Profile.Containers.ProfileV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Containers.ProfileV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Profile.Containers.ProfileV1 = Services.Profile.Containers.ProfileV1()
      public func getMessage() -> Services.Profile.Containers.ProfileV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Services.Profile.Containers.ProfileV1.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.Profile.Containers.ProfileV1.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasOrganizationId:Bool {
           get {
                return builderResult.hasOrganizationId
           }
      }
      public var organizationId:String {
           get {
                return builderResult.organizationId
           }
           set (value) {
               builderResult.hasOrganizationId = true
               builderResult.organizationId = value
           }
      }
      public func setOrganizationId(value:String) -> Services.Profile.Containers.ProfileV1.Builder {
        self.organizationId = value
        return self
      }
      public func clearOrganizationId() -> Services.Profile.Containers.ProfileV1.Builder{
           builderResult.hasOrganizationId = false
           builderResult.organizationId = ""
           return self
      }
      public var hasUserId:Bool {
           get {
                return builderResult.hasUserId
           }
      }
      public var userId:String {
           get {
                return builderResult.userId
           }
           set (value) {
               builderResult.hasUserId = true
               builderResult.userId = value
           }
      }
      public func setUserId(value:String) -> Services.Profile.Containers.ProfileV1.Builder {
        self.userId = value
        return self
      }
      public func clearUserId() -> Services.Profile.Containers.ProfileV1.Builder{
           builderResult.hasUserId = false
           builderResult.userId = ""
           return self
      }
      public var hasTitle:Bool {
           get {
                return builderResult.hasTitle
           }
      }
      public var title:String {
           get {
                return builderResult.title
           }
           set (value) {
               builderResult.hasTitle = true
               builderResult.title = value
           }
      }
      public func setTitle(value:String) -> Services.Profile.Containers.ProfileV1.Builder {
        self.title = value
        return self
      }
      public func clearTitle() -> Services.Profile.Containers.ProfileV1.Builder{
           builderResult.hasTitle = false
           builderResult.title = ""
           return self
      }
      public var hasFirstName:Bool {
           get {
                return builderResult.hasFirstName
           }
      }
      public var firstName:String {
           get {
                return builderResult.firstName
           }
           set (value) {
               builderResult.hasFirstName = true
               builderResult.firstName = value
           }
      }
      public func setFirstName(value:String) -> Services.Profile.Containers.ProfileV1.Builder {
        self.firstName = value
        return self
      }
      public func clearFirstName() -> Services.Profile.Containers.ProfileV1.Builder{
           builderResult.hasFirstName = false
           builderResult.firstName = ""
           return self
      }
      public var hasLastName:Bool {
           get {
                return builderResult.hasLastName
           }
      }
      public var lastName:String {
           get {
                return builderResult.lastName
           }
           set (value) {
               builderResult.hasLastName = true
               builderResult.lastName = value
           }
      }
      public func setLastName(value:String) -> Services.Profile.Containers.ProfileV1.Builder {
        self.lastName = value
        return self
      }
      public func clearLastName() -> Services.Profile.Containers.ProfileV1.Builder{
           builderResult.hasLastName = false
           builderResult.lastName = ""
           return self
      }
      public var hasImageUrl:Bool {
           get {
                return builderResult.hasImageUrl
           }
      }
      public var imageUrl:String {
           get {
                return builderResult.imageUrl
           }
           set (value) {
               builderResult.hasImageUrl = true
               builderResult.imageUrl = value
           }
      }
      public func setImageUrl(value:String) -> Services.Profile.Containers.ProfileV1.Builder {
        self.imageUrl = value
        return self
      }
      public func clearImageUrl() -> Services.Profile.Containers.ProfileV1.Builder{
           builderResult.hasImageUrl = false
           builderResult.imageUrl = ""
           return self
      }
      public var hasFullName:Bool {
           get {
                return builderResult.hasFullName
           }
      }
      public var fullName:String {
           get {
                return builderResult.fullName
           }
           set (value) {
               builderResult.hasFullName = true
               builderResult.fullName = value
           }
      }
      public func setFullName(value:String) -> Services.Profile.Containers.ProfileV1.Builder {
        self.fullName = value
        return self
      }
      public func clearFullName() -> Services.Profile.Containers.ProfileV1.Builder{
           builderResult.hasFullName = false
           builderResult.fullName = ""
           return self
      }
      public var hasBirthDate:Bool {
           get {
                return builderResult.hasBirthDate
           }
      }
      public var birthDate:String {
           get {
                return builderResult.birthDate
           }
           set (value) {
               builderResult.hasBirthDate = true
               builderResult.birthDate = value
           }
      }
      public func setBirthDate(value:String) -> Services.Profile.Containers.ProfileV1.Builder {
        self.birthDate = value
        return self
      }
      public func clearBirthDate() -> Services.Profile.Containers.ProfileV1.Builder{
           builderResult.hasBirthDate = false
           builderResult.birthDate = ""
           return self
      }
      public var hasHireDate:Bool {
           get {
                return builderResult.hasHireDate
           }
      }
      public var hireDate:String {
           get {
                return builderResult.hireDate
           }
           set (value) {
               builderResult.hasHireDate = true
               builderResult.hireDate = value
           }
      }
      public func setHireDate(value:String) -> Services.Profile.Containers.ProfileV1.Builder {
        self.hireDate = value
        return self
      }
      public func clearHireDate() -> Services.Profile.Containers.ProfileV1.Builder{
           builderResult.hasHireDate = false
           builderResult.hireDate = ""
           return self
      }
      public var hasVerified:Bool {
           get {
                return builderResult.hasVerified
           }
      }
      public var verified:Bool {
           get {
                return builderResult.verified
           }
           set (value) {
               builderResult.hasVerified = true
               builderResult.verified = value
           }
      }
      public func setVerified(value:Bool) -> Services.Profile.Containers.ProfileV1.Builder {
        self.verified = value
        return self
      }
      public func clearVerified() -> Services.Profile.Containers.ProfileV1.Builder{
           builderResult.hasVerified = false
           builderResult.verified = false
           return self
      }
      public var items:Array<Services.Profile.Containers.ProfileItemV1> {
           get {
               return builderResult.items
           }
           set (value) {
               builderResult.items = value
           }
      }
      public func setItems(value:Array<Services.Profile.Containers.ProfileItemV1>) -> Services.Profile.Containers.ProfileV1.Builder {
        self.items = value
        return self
      }
      public func clearItems() -> Services.Profile.Containers.ProfileV1.Builder {
        builderResult.items.removeAll(keepCapacity: false)
        return self
      }
      public var hasNickname:Bool {
           get {
                return builderResult.hasNickname
           }
      }
      public var nickname:String {
           get {
                return builderResult.nickname
           }
           set (value) {
               builderResult.hasNickname = true
               builderResult.nickname = value
           }
      }
      public func setNickname(value:String) -> Services.Profile.Containers.ProfileV1.Builder {
        self.nickname = value
        return self
      }
      public func clearNickname() -> Services.Profile.Containers.ProfileV1.Builder{
           builderResult.hasNickname = false
           builderResult.nickname = ""
           return self
      }
      public var contactMethods:Array<Services.Profile.Containers.ContactMethodV1> {
           get {
               return builderResult.contactMethods
           }
           set (value) {
               builderResult.contactMethods = value
           }
      }
      public func setContactMethods(value:Array<Services.Profile.Containers.ContactMethodV1>) -> Services.Profile.Containers.ProfileV1.Builder {
        self.contactMethods = value
        return self
      }
      public func clearContactMethods() -> Services.Profile.Containers.ProfileV1.Builder {
        builderResult.contactMethods.removeAll(keepCapacity: false)
        return self
      }
      public var hasEmail:Bool {
           get {
                return builderResult.hasEmail
           }
      }
      public var email:String {
           get {
                return builderResult.email
           }
           set (value) {
               builderResult.hasEmail = true
               builderResult.email = value
           }
      }
      public func setEmail(value:String) -> Services.Profile.Containers.ProfileV1.Builder {
        self.email = value
        return self
      }
      public func clearEmail() -> Services.Profile.Containers.ProfileV1.Builder{
           builderResult.hasEmail = false
           builderResult.email = ""
           return self
      }
      public var hasIsAdmin:Bool {
           get {
                return builderResult.hasIsAdmin
           }
      }
      public var isAdmin:Bool {
           get {
                return builderResult.isAdmin
           }
           set (value) {
               builderResult.hasIsAdmin = true
               builderResult.isAdmin = value
           }
      }
      public func setIsAdmin(value:Bool) -> Services.Profile.Containers.ProfileV1.Builder {
        self.isAdmin = value
        return self
      }
      public func clearIsAdmin() -> Services.Profile.Containers.ProfileV1.Builder{
           builderResult.hasIsAdmin = false
           builderResult.isAdmin = false
           return self
      }
      public var hasSmallImageUrl:Bool {
           get {
                return builderResult.hasSmallImageUrl
           }
      }
      public var smallImageUrl:String {
           get {
                return builderResult.smallImageUrl
           }
           set (value) {
               builderResult.hasSmallImageUrl = true
               builderResult.smallImageUrl = value
           }
      }
      public func setSmallImageUrl(value:String) -> Services.Profile.Containers.ProfileV1.Builder {
        self.smallImageUrl = value
        return self
      }
      public func clearSmallImageUrl() -> Services.Profile.Containers.ProfileV1.Builder{
           builderResult.hasSmallImageUrl = false
           builderResult.smallImageUrl = ""
           return self
      }
      public var hasDisplayTitle:Bool {
           get {
                return builderResult.hasDisplayTitle
           }
      }
      public var displayTitle:String {
           get {
                return builderResult.displayTitle
           }
           set (value) {
               builderResult.hasDisplayTitle = true
               builderResult.displayTitle = value
           }
      }
      public func setDisplayTitle(value:String) -> Services.Profile.Containers.ProfileV1.Builder {
        self.displayTitle = value
        return self
      }
      public func clearDisplayTitle() -> Services.Profile.Containers.ProfileV1.Builder{
           builderResult.hasDisplayTitle = false
           builderResult.displayTitle = ""
           return self
      }
      public var hasAuthenticationIdentifier:Bool {
           get {
                return builderResult.hasAuthenticationIdentifier
           }
      }
      public var authenticationIdentifier:String {
           get {
                return builderResult.authenticationIdentifier
           }
           set (value) {
               builderResult.hasAuthenticationIdentifier = true
               builderResult.authenticationIdentifier = value
           }
      }
      public func setAuthenticationIdentifier(value:String) -> Services.Profile.Containers.ProfileV1.Builder {
        self.authenticationIdentifier = value
        return self
      }
      public func clearAuthenticationIdentifier() -> Services.Profile.Containers.ProfileV1.Builder{
           builderResult.hasAuthenticationIdentifier = false
           builderResult.authenticationIdentifier = ""
           return self
      }
      public var hasInflations:Bool {
           get {
               return builderResult.hasInflations
           }
      }
      public var inflations:Services.Common.Containers.InflationsV1! {
           get {
               if inflationsBuilder_ != nil {
                  builderResult.inflations = inflationsBuilder_.getMessage()
               }
               return builderResult.inflations
           }
           set (value) {
               builderResult.hasInflations = true
               builderResult.inflations = value
           }
      }
      private var inflationsBuilder_:Services.Common.Containers.InflationsV1.Builder! {
           didSet {
              builderResult.hasInflations = true
           }
      }
      public func getInflationsBuilder() -> Services.Common.Containers.InflationsV1.Builder {
        if inflationsBuilder_ == nil {
           inflationsBuilder_ = Services.Common.Containers.InflationsV1.Builder()
           builderResult.inflations = inflationsBuilder_.getMessage()
           if inflations != nil {
              try! inflationsBuilder_.mergeFrom(inflations)
           }
        }
        return inflationsBuilder_
      }
      public func setInflations(value:Services.Common.Containers.InflationsV1!) -> Services.Profile.Containers.ProfileV1.Builder {
        self.inflations = value
        return self
      }
      public func mergeInflations(value:Services.Common.Containers.InflationsV1) throws -> Services.Profile.Containers.ProfileV1.Builder {
        if builderResult.hasInflations {
          builderResult.inflations = try Services.Common.Containers.InflationsV1.builderWithPrototype(builderResult.inflations).mergeFrom(value).buildPartial()
        } else {
          builderResult.inflations = value
        }
        builderResult.hasInflations = true
        return self
      }
      public func clearInflations() -> Services.Profile.Containers.ProfileV1.Builder {
        inflationsBuilder_ = nil
        builderResult.hasInflations = false
        builderResult.inflations = nil
        return self
      }
      public var hasFields:Bool {
           get {
               return builderResult.hasFields
           }
      }
      public var fields:Services.Common.Containers.FieldsV1! {
           get {
               if fieldsBuilder_ != nil {
                  builderResult.fields = fieldsBuilder_.getMessage()
               }
               return builderResult.fields
           }
           set (value) {
               builderResult.hasFields = true
               builderResult.fields = value
           }
      }
      private var fieldsBuilder_:Services.Common.Containers.FieldsV1.Builder! {
           didSet {
              builderResult.hasFields = true
           }
      }
      public func getFieldsBuilder() -> Services.Common.Containers.FieldsV1.Builder {
        if fieldsBuilder_ == nil {
           fieldsBuilder_ = Services.Common.Containers.FieldsV1.Builder()
           builderResult.fields = fieldsBuilder_.getMessage()
           if fields != nil {
              try! fieldsBuilder_.mergeFrom(fields)
           }
        }
        return fieldsBuilder_
      }
      public func setFields(value:Services.Common.Containers.FieldsV1!) -> Services.Profile.Containers.ProfileV1.Builder {
        self.fields = value
        return self
      }
      public func mergeFields(value:Services.Common.Containers.FieldsV1) throws -> Services.Profile.Containers.ProfileV1.Builder {
        if builderResult.hasFields {
          builderResult.fields = try Services.Common.Containers.FieldsV1.builderWithPrototype(builderResult.fields).mergeFrom(value).buildPartial()
        } else {
          builderResult.fields = value
        }
        builderResult.hasFields = true
        return self
      }
      public func clearFields() -> Services.Profile.Containers.ProfileV1.Builder {
        fieldsBuilder_ = nil
        builderResult.hasFields = false
        builderResult.fields = nil
        return self
      }
        public var hasStatus:Bool{
            get {
                return builderResult.hasStatus
            }
        }
        public var status:Services.Profile.Containers.ProfileV1.StatusV1 {
            get {
                return builderResult.status
            }
            set (value) {
                builderResult.hasStatus = true
                builderResult.status = value
            }
        }
        public func setStatus(value:Services.Profile.Containers.ProfileV1.StatusV1) -> Services.Profile.Containers.ProfileV1.Builder {
          self.status = value
          return self
        }
        public func clearStatus() -> Services.Profile.Containers.ProfileV1.Builder {
           builderResult.hasStatus = false
           builderResult.status = .Active
           return self
        }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Profile.Containers.ProfileV1.Builder {
        builderResult = Services.Profile.Containers.ProfileV1()
        return self
      }
      public override func clone() throws -> Services.Profile.Containers.ProfileV1.Builder {
        return try Services.Profile.Containers.ProfileV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Profile.Containers.ProfileV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Profile.Containers.ProfileV1 {
        let returnMe:Services.Profile.Containers.ProfileV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Profile.Containers.ProfileV1) throws -> Services.Profile.Containers.ProfileV1.Builder {
        if other == Services.Profile.Containers.ProfileV1() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasOrganizationId {
             organizationId = other.organizationId
        }
        if other.hasUserId {
             userId = other.userId
        }
        if other.hasTitle {
             title = other.title
        }
        if other.hasFirstName {
             firstName = other.firstName
        }
        if other.hasLastName {
             lastName = other.lastName
        }
        if other.hasImageUrl {
             imageUrl = other.imageUrl
        }
        if other.hasFullName {
             fullName = other.fullName
        }
        if other.hasBirthDate {
             birthDate = other.birthDate
        }
        if other.hasHireDate {
             hireDate = other.hireDate
        }
        if other.hasVerified {
             verified = other.verified
        }
        if !other.items.isEmpty  {
           builderResult.items += other.items
        }
        if other.hasNickname {
             nickname = other.nickname
        }
        if !other.contactMethods.isEmpty  {
           builderResult.contactMethods += other.contactMethods
        }
        if other.hasEmail {
             email = other.email
        }
        if other.hasIsAdmin {
             isAdmin = other.isAdmin
        }
        if other.hasSmallImageUrl {
             smallImageUrl = other.smallImageUrl
        }
        if other.hasDisplayTitle {
             displayTitle = other.displayTitle
        }
        if other.hasAuthenticationIdentifier {
             authenticationIdentifier = other.authenticationIdentifier
        }
        if (other.hasInflations) {
            try mergeInflations(other.inflations)
        }
        if (other.hasFields) {
            try mergeFields(other.fields)
        }
        if other.hasStatus {
             status = other.status
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Profile.Containers.ProfileV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.ProfileV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            id = try input.readString()

          case 18 :
            organizationId = try input.readString()

          case 26 :
            userId = try input.readString()

          case 34 :
            title = try input.readString()

          case 42 :
            firstName = try input.readString()

          case 50 :
            lastName = try input.readString()

          case 58 :
            imageUrl = try input.readString()

          case 66 :
            fullName = try input.readString()

          case 74 :
            birthDate = try input.readString()

          case 82 :
            hireDate = try input.readString()

          case 88 :
            verified = try input.readBool()

          case 98 :
            let subBuilder = Services.Profile.Containers.ProfileItemV1.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            items += [subBuilder.buildPartial()]

          case 106 :
            nickname = try input.readString()

          case 114 :
            let subBuilder = Services.Profile.Containers.ContactMethodV1.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            contactMethods += [subBuilder.buildPartial()]

          case 122 :
            email = try input.readString()

          case 128 :
            isAdmin = try input.readBool()

          case 138 :
            smallImageUrl = try input.readString()

          case 146 :
            displayTitle = try input.readString()

          case 154 :
            authenticationIdentifier = try input.readString()

          case 162 :
            let subBuilder:Services.Common.Containers.InflationsV1.Builder = Services.Common.Containers.InflationsV1.Builder()
            if hasInflations {
              try subBuilder.mergeFrom(inflations)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            inflations = subBuilder.buildPartial()

          case 170 :
            let subBuilder:Services.Common.Containers.FieldsV1.Builder = Services.Common.Containers.FieldsV1.Builder()
            if hasFields {
              try subBuilder.mergeFrom(fields)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            fields = subBuilder.buildPartial()

          case 176 :
            let valueIntstatus = try input.readEnum()
            if let enumsstatus = Services.Profile.Containers.ProfileV1.StatusV1(rawValue:valueIntstatus){
                 status = enumsstatus
            } else {
                 try unknownFieldsBuilder.mergeVarintField(22, value:Int64(valueIntstatus))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ProfileItemV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasKey:Bool = false
    public private(set) var key:String = ""

    public private(set) var hasValue:Bool = false
    public private(set) var value:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasKey {
        try output.writeString(1, value:key)
      }
      if hasValue {
        try output.writeString(2, value:value)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasKey {
        serialize_size += key.computeStringSize(1)
      }
      if hasValue {
        serialize_size += value.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Profile.Containers.ProfileItemV1> {
      var mergedArray = Array<Services.Profile.Containers.ProfileItemV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Profile.Containers.ProfileItemV1? {
      return try Services.Profile.Containers.ProfileItemV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Profile.Containers.ProfileItemV1 {
      return try Services.Profile.Containers.ProfileItemV1.Builder().mergeFromData(data, extensionRegistry:Services.Profile.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.ProfileItemV1 {
      return try Services.Profile.Containers.ProfileItemV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Profile.Containers.ProfileItemV1 {
      return try Services.Profile.Containers.ProfileItemV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.ProfileItemV1 {
      return try Services.Profile.Containers.ProfileItemV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Profile.Containers.ProfileItemV1 {
      return try Services.Profile.Containers.ProfileItemV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.ProfileItemV1 {
      return try Services.Profile.Containers.ProfileItemV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Profile.Containers.ProfileItemV1.Builder {
      return Services.Profile.Containers.ProfileItemV1.classBuilder() as! Services.Profile.Containers.ProfileItemV1.Builder
    }
    public func getBuilder() -> Services.Profile.Containers.ProfileItemV1.Builder {
      return classBuilder() as! Services.Profile.Containers.ProfileItemV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.ProfileItemV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.ProfileItemV1.Builder()
    }
    public func toBuilder() throws -> Services.Profile.Containers.ProfileItemV1.Builder {
      return try Services.Profile.Containers.ProfileItemV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Profile.Containers.ProfileItemV1) throws -> Services.Profile.Containers.ProfileItemV1.Builder {
      return try Services.Profile.Containers.ProfileItemV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasKey {
        output += "\(indent) key: \(key) \n"
      }
      if hasValue {
        output += "\(indent) value: \(value) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasKey {
               hashCode = (hashCode &* 31) &+ key.hashValue
            }
            if hasValue {
               hashCode = (hashCode &* 31) &+ value.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Profile.Containers.ProfileItemV1"
    }
    override public func className() -> String {
        return "Services.Profile.Containers.ProfileItemV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Containers.ProfileItemV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Profile.Containers.ProfileItemV1 = Services.Profile.Containers.ProfileItemV1()
      public func getMessage() -> Services.Profile.Containers.ProfileItemV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasKey:Bool {
           get {
                return builderResult.hasKey
           }
      }
      public var key:String {
           get {
                return builderResult.key
           }
           set (value) {
               builderResult.hasKey = true
               builderResult.key = value
           }
      }
      public func setKey(value:String) -> Services.Profile.Containers.ProfileItemV1.Builder {
        self.key = value
        return self
      }
      public func clearKey() -> Services.Profile.Containers.ProfileItemV1.Builder{
           builderResult.hasKey = false
           builderResult.key = ""
           return self
      }
      public var hasValue:Bool {
           get {
                return builderResult.hasValue
           }
      }
      public var value:String {
           get {
                return builderResult.value
           }
           set (value) {
               builderResult.hasValue = true
               builderResult.value = value
           }
      }
      public func setValue(value:String) -> Services.Profile.Containers.ProfileItemV1.Builder {
        self.value = value
        return self
      }
      public func clearValue() -> Services.Profile.Containers.ProfileItemV1.Builder{
           builderResult.hasValue = false
           builderResult.value = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Profile.Containers.ProfileItemV1.Builder {
        builderResult = Services.Profile.Containers.ProfileItemV1()
        return self
      }
      public override func clone() throws -> Services.Profile.Containers.ProfileItemV1.Builder {
        return try Services.Profile.Containers.ProfileItemV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Profile.Containers.ProfileItemV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Profile.Containers.ProfileItemV1 {
        let returnMe:Services.Profile.Containers.ProfileItemV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Profile.Containers.ProfileItemV1) throws -> Services.Profile.Containers.ProfileItemV1.Builder {
        if other == Services.Profile.Containers.ProfileItemV1() {
         return self
        }
        if other.hasKey {
             key = other.key
        }
        if other.hasValue {
             value = other.value
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Profile.Containers.ProfileItemV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.ProfileItemV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            key = try input.readString()

          case 18 :
            value = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class AttributeV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasValue:Bool = false
    public private(set) var value:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasName {
        try output.writeString(1, value:name)
      }
      if hasValue {
        try output.writeString(2, value:value)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasName {
        serialize_size += name.computeStringSize(1)
      }
      if hasValue {
        serialize_size += value.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Profile.Containers.AttributeV1> {
      var mergedArray = Array<Services.Profile.Containers.AttributeV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Profile.Containers.AttributeV1? {
      return try Services.Profile.Containers.AttributeV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Profile.Containers.AttributeV1 {
      return try Services.Profile.Containers.AttributeV1.Builder().mergeFromData(data, extensionRegistry:Services.Profile.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.AttributeV1 {
      return try Services.Profile.Containers.AttributeV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Profile.Containers.AttributeV1 {
      return try Services.Profile.Containers.AttributeV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.AttributeV1 {
      return try Services.Profile.Containers.AttributeV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Profile.Containers.AttributeV1 {
      return try Services.Profile.Containers.AttributeV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.AttributeV1 {
      return try Services.Profile.Containers.AttributeV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Profile.Containers.AttributeV1.Builder {
      return Services.Profile.Containers.AttributeV1.classBuilder() as! Services.Profile.Containers.AttributeV1.Builder
    }
    public func getBuilder() -> Services.Profile.Containers.AttributeV1.Builder {
      return classBuilder() as! Services.Profile.Containers.AttributeV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.AttributeV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.AttributeV1.Builder()
    }
    public func toBuilder() throws -> Services.Profile.Containers.AttributeV1.Builder {
      return try Services.Profile.Containers.AttributeV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Profile.Containers.AttributeV1) throws -> Services.Profile.Containers.AttributeV1.Builder {
      return try Services.Profile.Containers.AttributeV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasValue {
        output += "\(indent) value: \(value) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasValue {
               hashCode = (hashCode &* 31) &+ value.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Profile.Containers.AttributeV1"
    }
    override public func className() -> String {
        return "Services.Profile.Containers.AttributeV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Containers.AttributeV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Profile.Containers.AttributeV1 = Services.Profile.Containers.AttributeV1()
      public func getMessage() -> Services.Profile.Containers.AttributeV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(value:String) -> Services.Profile.Containers.AttributeV1.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Services.Profile.Containers.AttributeV1.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasValue:Bool {
           get {
                return builderResult.hasValue
           }
      }
      public var value:String {
           get {
                return builderResult.value
           }
           set (value) {
               builderResult.hasValue = true
               builderResult.value = value
           }
      }
      public func setValue(value:String) -> Services.Profile.Containers.AttributeV1.Builder {
        self.value = value
        return self
      }
      public func clearValue() -> Services.Profile.Containers.AttributeV1.Builder{
           builderResult.hasValue = false
           builderResult.value = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Profile.Containers.AttributeV1.Builder {
        builderResult = Services.Profile.Containers.AttributeV1()
        return self
      }
      public override func clone() throws -> Services.Profile.Containers.AttributeV1.Builder {
        return try Services.Profile.Containers.AttributeV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Profile.Containers.AttributeV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Profile.Containers.AttributeV1 {
        let returnMe:Services.Profile.Containers.AttributeV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Profile.Containers.AttributeV1) throws -> Services.Profile.Containers.AttributeV1.Builder {
        if other == Services.Profile.Containers.AttributeV1() {
         return self
        }
        if other.hasName {
             name = other.name
        }
        if other.hasValue {
             value = other.value
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Profile.Containers.AttributeV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.AttributeV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            name = try input.readString()

          case 18 :
            value = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class StatV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasCount:Bool = false
    public private(set) var count:UInt32 = UInt32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeString(1, value:id)
      }
      if hasCount {
        try output.writeUInt32(2, value:count)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeStringSize(1)
      }
      if hasCount {
        serialize_size += count.computeUInt32Size(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Profile.Containers.StatV1> {
      var mergedArray = Array<Services.Profile.Containers.StatV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Profile.Containers.StatV1? {
      return try Services.Profile.Containers.StatV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Profile.Containers.StatV1 {
      return try Services.Profile.Containers.StatV1.Builder().mergeFromData(data, extensionRegistry:Services.Profile.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.StatV1 {
      return try Services.Profile.Containers.StatV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Profile.Containers.StatV1 {
      return try Services.Profile.Containers.StatV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.StatV1 {
      return try Services.Profile.Containers.StatV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Profile.Containers.StatV1 {
      return try Services.Profile.Containers.StatV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.StatV1 {
      return try Services.Profile.Containers.StatV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Profile.Containers.StatV1.Builder {
      return Services.Profile.Containers.StatV1.classBuilder() as! Services.Profile.Containers.StatV1.Builder
    }
    public func getBuilder() -> Services.Profile.Containers.StatV1.Builder {
      return classBuilder() as! Services.Profile.Containers.StatV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.StatV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.StatV1.Builder()
    }
    public func toBuilder() throws -> Services.Profile.Containers.StatV1.Builder {
      return try Services.Profile.Containers.StatV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Profile.Containers.StatV1) throws -> Services.Profile.Containers.StatV1.Builder {
      return try Services.Profile.Containers.StatV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasCount {
        output += "\(indent) count: \(count) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasCount {
               hashCode = (hashCode &* 31) &+ count.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Profile.Containers.StatV1"
    }
    override public func className() -> String {
        return "Services.Profile.Containers.StatV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Containers.StatV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Profile.Containers.StatV1 = Services.Profile.Containers.StatV1()
      public func getMessage() -> Services.Profile.Containers.StatV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Services.Profile.Containers.StatV1.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.Profile.Containers.StatV1.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasCount:Bool {
           get {
                return builderResult.hasCount
           }
      }
      public var count:UInt32 {
           get {
                return builderResult.count
           }
           set (value) {
               builderResult.hasCount = true
               builderResult.count = value
           }
      }
      public func setCount(value:UInt32) -> Services.Profile.Containers.StatV1.Builder {
        self.count = value
        return self
      }
      public func clearCount() -> Services.Profile.Containers.StatV1.Builder{
           builderResult.hasCount = false
           builderResult.count = UInt32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Profile.Containers.StatV1.Builder {
        builderResult = Services.Profile.Containers.StatV1()
        return self
      }
      public override func clone() throws -> Services.Profile.Containers.StatV1.Builder {
        return try Services.Profile.Containers.StatV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Profile.Containers.StatV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Profile.Containers.StatV1 {
        let returnMe:Services.Profile.Containers.StatV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Profile.Containers.StatV1) throws -> Services.Profile.Containers.StatV1.Builder {
        if other == Services.Profile.Containers.StatV1() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasCount {
             count = other.count
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Profile.Containers.StatV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Containers.StatV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            id = try input.readString()

          case 16 :
            count = try input.readUInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
