// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.History{ public struct Containers { }}

public func == (lhs: Services.History.Containers.ActionV1, rhs: Services.History.Containers.ActionV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasColumnName == rhs.hasColumnName) && (!lhs.hasColumnName || lhs.columnName == rhs.columnName)
  fieldCheck = fieldCheck && (lhs.hasDataType == rhs.hasDataType) && (!lhs.hasDataType || lhs.dataType == rhs.dataType)
  fieldCheck = fieldCheck && (lhs.hasOldValue == rhs.hasOldValue) && (!lhs.hasOldValue || lhs.oldValue == rhs.oldValue)
  fieldCheck = fieldCheck && (lhs.hasNewValue == rhs.hasNewValue) && (!lhs.hasNewValue || lhs.newValue == rhs.newValue)
  fieldCheck = fieldCheck && (lhs.hasActionType == rhs.hasActionType) && (!lhs.hasActionType || lhs.actionType == rhs.actionType)
  fieldCheck = fieldCheck && (lhs.hasMethodType == rhs.hasMethodType) && (!lhs.hasMethodType || lhs.methodType == rhs.methodType)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.hasCorrelationId == rhs.hasCorrelationId) && (!lhs.hasCorrelationId || lhs.correlationId == rhs.correlationId)
  fieldCheck = fieldCheck && (lhs.hasByProfileId == rhs.hasByProfileId) && (!lhs.hasByProfileId || lhs.byProfileId == rhs.byProfileId)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.History.Containers {
  public struct ContainersRoot {
    public static var sharedInstance : ContainersRoot {
     struct Static {
         static let instance : ContainersRoot = ContainersRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  public enum ActionTypeV1:Int32 {
    case UpdateDescription = 0

  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum MethodTypeV1:Int32 {
    case Update = 0
    case Delete = 1

  }

  //Enum type declaration end 

  final public class ActionV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "columnName": return columnName
           case "dataType": return dataType
           case "oldValue": return oldValue
           case "newValue": return newValue
           case "actionType": return self.actionType
           case "methodType": return self.methodType
           case "organizationId": return organizationId
           case "correlationId": return correlationId
           case "byProfileId": return byProfileId
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasColumnName:Bool = false
    public private(set) var columnName:String = ""

    public private(set) var hasDataType:Bool = false
    public private(set) var dataType:String = ""

    public private(set) var hasOldValue:Bool = false
    public private(set) var oldValue:String = ""

    public private(set) var hasNewValue:Bool = false
    public private(set) var newValue:String = ""

    public private(set) var actionType:Services.History.Containers.ActionTypeV1 = Services.History.Containers.ActionTypeV1.UpdateDescription
    public private(set) var hasActionType:Bool = false
    public private(set) var methodType:Services.History.Containers.MethodTypeV1 = Services.History.Containers.MethodTypeV1.Update
    public private(set) var hasMethodType:Bool = false
    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    public private(set) var hasCorrelationId:Bool = false
    public private(set) var correlationId:String = ""

    public private(set) var hasByProfileId:Bool = false
    public private(set) var byProfileId:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasColumnName {
        output.writeString(3, value:columnName)
      }
      if hasDataType {
        output.writeString(4, value:dataType)
      }
      if hasOldValue {
        output.writeString(5, value:oldValue)
      }
      if hasNewValue {
        output.writeString(6, value:newValue)
      }
      if hasActionType {
        output.writeEnum(7, value:actionType.rawValue)
      }
      if hasMethodType {
        output.writeEnum(8, value:methodType.rawValue)
      }
      if hasOrganizationId {
        output.writeString(9, value:organizationId)
      }
      if hasCorrelationId {
        output.writeString(10, value:correlationId)
      }
      if hasByProfileId {
        output.writeString(11, value:byProfileId)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasColumnName {
        serialize_size += columnName.computeStringSize(3)
      }
      if hasDataType {
        serialize_size += dataType.computeStringSize(4)
      }
      if hasOldValue {
        serialize_size += oldValue.computeStringSize(5)
      }
      if hasNewValue {
        serialize_size += newValue.computeStringSize(6)
      }
      if (hasActionType) {
        serialize_size += actionType.rawValue.computeEnumSize(7)
      }
      if (hasMethodType) {
        serialize_size += methodType.rawValue.computeEnumSize(8)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(9)
      }
      if hasCorrelationId {
        serialize_size += correlationId.computeStringSize(10)
      }
      if hasByProfileId {
        serialize_size += byProfileId.computeStringSize(11)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.History.Containers.ActionV1 {
      return Services.History.Containers.ActionV1.builder().mergeFromData(data, extensionRegistry:Services.History.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.History.Containers.ActionV1 {
      return Services.History.Containers.ActionV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.History.Containers.ActionV1 {
      return Services.History.Containers.ActionV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.History.Containers.ActionV1 {
      return Services.History.Containers.ActionV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.History.Containers.ActionV1 {
      return Services.History.Containers.ActionV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.History.Containers.ActionV1 {
      return Services.History.Containers.ActionV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.History.Containers.ActionV1Builder {
      return Services.History.Containers.ActionV1.classBuilder() as! Services.History.Containers.ActionV1Builder
    }
    public func builder() -> Services.History.Containers.ActionV1Builder {
      return classBuilder() as! Services.History.Containers.ActionV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.History.Containers.ActionV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.History.Containers.ActionV1.builder()
    }
    public func toBuilder() -> Services.History.Containers.ActionV1Builder {
      return Services.History.Containers.ActionV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.History.Containers.ActionV1) -> Services.History.Containers.ActionV1Builder {
      return Services.History.Containers.ActionV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasColumnName {
        output += "\(indent) columnName: \(columnName) \n"
      }
      if hasDataType {
        output += "\(indent) dataType: \(dataType) \n"
      }
      if hasOldValue {
        output += "\(indent) oldValue: \(oldValue) \n"
      }
      if hasNewValue {
        output += "\(indent) newValue: \(newValue) \n"
      }
      if (hasActionType) {
        output += "\(indent) actionType: \(actionType.rawValue)\n"
      }
      if (hasMethodType) {
        output += "\(indent) methodType: \(methodType.rawValue)\n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      if hasCorrelationId {
        output += "\(indent) correlationId: \(correlationId) \n"
      }
      if hasByProfileId {
        output += "\(indent) byProfileId: \(byProfileId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasColumnName {
               hashCode = (hashCode &* 31) &+ columnName.hashValue
            }
            if hasDataType {
               hashCode = (hashCode &* 31) &+ dataType.hashValue
            }
            if hasOldValue {
               hashCode = (hashCode &* 31) &+ oldValue.hashValue
            }
            if hasNewValue {
               hashCode = (hashCode &* 31) &+ newValue.hashValue
            }
            if hasActionType {
               hashCode = (hashCode &* 31) &+ Int(actionType.rawValue)
            }
            if hasMethodType {
               hashCode = (hashCode &* 31) &+ Int(methodType.rawValue)
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            if hasCorrelationId {
               hashCode = (hashCode &* 31) &+ correlationId.hashValue
            }
            if hasByProfileId {
               hashCode = (hashCode &* 31) &+ byProfileId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.History.Containers.ActionV1"
    }
    override public func className() -> String {
        return "Services.History.Containers.ActionV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.History.Containers.ActionV1.self
    }
    //Meta information declaration end

  }

  final public class ActionV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.History.Containers.ActionV1

    required override public init () {
       builderResult = Services.History.Containers.ActionV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.History.Containers.ActionV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.History.Containers.ActionV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.History.Containers.ActionV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.History.Containers.ActionV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasColumnName:Bool {
         get {
              return builderResult.hasColumnName
         }
    }
    public var columnName:String {
         get {
              return builderResult.columnName
         }
         set (value) {
             builderResult.hasColumnName = true
             builderResult.columnName = value
         }
    }
    public func setColumnName(value:String)-> Services.History.Containers.ActionV1Builder {
      self.columnName = value
      return self
    }
    public func clearColumnName() -> Services.History.Containers.ActionV1Builder{
         builderResult.hasColumnName = false
         builderResult.columnName = ""
         return self
    }
    public var hasDataType:Bool {
         get {
              return builderResult.hasDataType
         }
    }
    public var dataType:String {
         get {
              return builderResult.dataType
         }
         set (value) {
             builderResult.hasDataType = true
             builderResult.dataType = value
         }
    }
    public func setDataType(value:String)-> Services.History.Containers.ActionV1Builder {
      self.dataType = value
      return self
    }
    public func clearDataType() -> Services.History.Containers.ActionV1Builder{
         builderResult.hasDataType = false
         builderResult.dataType = ""
         return self
    }
    public var hasOldValue:Bool {
         get {
              return builderResult.hasOldValue
         }
    }
    public var oldValue:String {
         get {
              return builderResult.oldValue
         }
         set (value) {
             builderResult.hasOldValue = true
             builderResult.oldValue = value
         }
    }
    public func setOldValue(value:String)-> Services.History.Containers.ActionV1Builder {
      self.oldValue = value
      return self
    }
    public func clearOldValue() -> Services.History.Containers.ActionV1Builder{
         builderResult.hasOldValue = false
         builderResult.oldValue = ""
         return self
    }
    public var hasNewValue:Bool {
         get {
              return builderResult.hasNewValue
         }
    }
    public var newValue:String {
         get {
              return builderResult.newValue
         }
         set (value) {
             builderResult.hasNewValue = true
             builderResult.newValue = value
         }
    }
    public func setNewValue(value:String)-> Services.History.Containers.ActionV1Builder {
      self.newValue = value
      return self
    }
    public func clearNewValue() -> Services.History.Containers.ActionV1Builder{
         builderResult.hasNewValue = false
         builderResult.newValue = ""
         return self
    }
      public var hasActionType:Bool{
          get {
              return builderResult.hasActionType
          }
      }
      public var actionType:Services.History.Containers.ActionTypeV1 {
          get {
              return builderResult.actionType
          }
          set (value) {
              builderResult.hasActionType = true
              builderResult.actionType = value
          }
      }
      public func setActionType(value:Services.History.Containers.ActionTypeV1)-> Services.History.Containers.ActionV1Builder {
        self.actionType = value
        return self
      }
      public func clearActionType() -> Services.History.Containers.ActionV1Builder {
         builderResult.hasActionType = false
         builderResult.actionType = .UpdateDescription
         return self
      }
      public var hasMethodType:Bool{
          get {
              return builderResult.hasMethodType
          }
      }
      public var methodType:Services.History.Containers.MethodTypeV1 {
          get {
              return builderResult.methodType
          }
          set (value) {
              builderResult.hasMethodType = true
              builderResult.methodType = value
          }
      }
      public func setMethodType(value:Services.History.Containers.MethodTypeV1)-> Services.History.Containers.ActionV1Builder {
        self.methodType = value
        return self
      }
      public func clearMethodType() -> Services.History.Containers.ActionV1Builder {
         builderResult.hasMethodType = false
         builderResult.methodType = .Update
         return self
      }
    public var hasOrganizationId:Bool {
         get {
              return builderResult.hasOrganizationId
         }
    }
    public var organizationId:String {
         get {
              return builderResult.organizationId
         }
         set (value) {
             builderResult.hasOrganizationId = true
             builderResult.organizationId = value
         }
    }
    public func setOrganizationId(value:String)-> Services.History.Containers.ActionV1Builder {
      self.organizationId = value
      return self
    }
    public func clearOrganizationId() -> Services.History.Containers.ActionV1Builder{
         builderResult.hasOrganizationId = false
         builderResult.organizationId = ""
         return self
    }
    public var hasCorrelationId:Bool {
         get {
              return builderResult.hasCorrelationId
         }
    }
    public var correlationId:String {
         get {
              return builderResult.correlationId
         }
         set (value) {
             builderResult.hasCorrelationId = true
             builderResult.correlationId = value
         }
    }
    public func setCorrelationId(value:String)-> Services.History.Containers.ActionV1Builder {
      self.correlationId = value
      return self
    }
    public func clearCorrelationId() -> Services.History.Containers.ActionV1Builder{
         builderResult.hasCorrelationId = false
         builderResult.correlationId = ""
         return self
    }
    public var hasByProfileId:Bool {
         get {
              return builderResult.hasByProfileId
         }
    }
    public var byProfileId:String {
         get {
              return builderResult.byProfileId
         }
         set (value) {
             builderResult.hasByProfileId = true
             builderResult.byProfileId = value
         }
    }
    public func setByProfileId(value:String)-> Services.History.Containers.ActionV1Builder {
      self.byProfileId = value
      return self
    }
    public func clearByProfileId() -> Services.History.Containers.ActionV1Builder{
         builderResult.hasByProfileId = false
         builderResult.byProfileId = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.History.Containers.ActionV1Builder {
      builderResult = Services.History.Containers.ActionV1()
      return self
    }
    public override func clone() -> Services.History.Containers.ActionV1Builder {
      return Services.History.Containers.ActionV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.History.Containers.ActionV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.History.Containers.ActionV1 {
      var returnMe:Services.History.Containers.ActionV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.History.Containers.ActionV1) -> Services.History.Containers.ActionV1Builder {
      if (other == Services.History.Containers.ActionV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasColumnName {
           columnName = other.columnName
      }
      if other.hasDataType {
           dataType = other.dataType
      }
      if other.hasOldValue {
           oldValue = other.oldValue
      }
      if other.hasNewValue {
           newValue = other.newValue
      }
      if other.hasActionType {
           actionType = other.actionType
      }
      if other.hasMethodType {
           methodType = other.methodType
      }
      if other.hasOrganizationId {
           organizationId = other.organizationId
      }
      if other.hasCorrelationId {
           correlationId = other.correlationId
      }
      if other.hasByProfileId {
           byProfileId = other.byProfileId
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.History.Containers.ActionV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.History.Containers.ActionV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          columnName = input.readString()

        case 34 :
          dataType = input.readString()

        case 42 :
          oldValue = input.readString()

        case 50 :
          newValue = input.readString()

        case 56 :
          let valueIntactionType = input.readEnum()
          if let enumsactionType = Services.History.Containers.ActionTypeV1(rawValue:valueIntactionType){
               actionType = enumsactionType
          } else {
               unknownFieldsBuilder.mergeVarintField(7, value:Int64(valueIntactionType))
          }

        case 64 :
          let valueIntmethodType = input.readEnum()
          if let enumsmethodType = Services.History.Containers.MethodTypeV1(rawValue:valueIntmethodType){
               methodType = enumsmethodType
          } else {
               unknownFieldsBuilder.mergeVarintField(8, value:Int64(valueIntmethodType))
          }

        case 74 :
          organizationId = input.readString()

        case 82 :
          correlationId = input.readString()

        case 90 :
          byProfileId = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
