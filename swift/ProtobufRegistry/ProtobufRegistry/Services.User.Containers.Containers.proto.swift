// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file containers.proto

import Foundation

public extension Services.User.Containers{}

public func == (lhs: Services.User.Containers.DeviceV1, rhs: Services.User.Containers.DeviceV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasNotificationToken == rhs.hasNotificationToken) && (!lhs.hasNotificationToken || lhs.notificationToken == rhs.notificationToken)
  fieldCheck = fieldCheck && (lhs.hasPlatform == rhs.hasPlatform) && (!lhs.hasPlatform || lhs.platform == rhs.platform)
  fieldCheck = fieldCheck && (lhs.hasOsVersion == rhs.hasOsVersion) && (!lhs.hasOsVersion || lhs.osVersion == rhs.osVersion)
  fieldCheck = fieldCheck && (lhs.hasAppVersion == rhs.hasAppVersion) && (!lhs.hasAppVersion || lhs.appVersion == rhs.appVersion)
  fieldCheck = fieldCheck && (lhs.hasDeviceUuid == rhs.hasDeviceUuid) && (!lhs.hasDeviceUuid || lhs.deviceUuid == rhs.deviceUuid)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  fieldCheck = fieldCheck && (lhs.hasLanguagePreference == rhs.hasLanguagePreference) && (!lhs.hasLanguagePreference || lhs.languagePreference == rhs.languagePreference)
  fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.User.Containers.IdentityV1, rhs: Services.User.Containers.IdentityV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
  fieldCheck = fieldCheck && (lhs.hasFullName == rhs.hasFullName) && (!lhs.hasFullName || lhs.fullName == rhs.fullName)
  fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
  fieldCheck = fieldCheck && (lhs.hasAccessToken == rhs.hasAccessToken) && (!lhs.hasAccessToken || lhs.accessToken == rhs.accessToken)
  fieldCheck = fieldCheck && (lhs.hasExpiresAt == rhs.hasExpiresAt) && (!lhs.hasExpiresAt || lhs.expiresAt == rhs.expiresAt)
  fieldCheck = fieldCheck && (lhs.hasProviderUid == rhs.hasProviderUid) && (!lhs.hasProviderUid || lhs.providerUid == rhs.providerUid)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  fieldCheck = fieldCheck && (lhs.hasRefreshToken == rhs.hasRefreshToken) && (!lhs.hasRefreshToken || lhs.refreshToken == rhs.refreshToken)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.User.Containers.OAuth2DetailsV1, rhs: Services.User.Containers.OAuth2DetailsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasCode == rhs.hasCode) && (!lhs.hasCode || lhs.code == rhs.code)
  fieldCheck = fieldCheck && (lhs.hasState == rhs.hasState) && (!lhs.hasState || lhs.state == rhs.state)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.User.Containers.UserV1, rhs: Services.User.Containers.UserV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasPrimaryEmail == rhs.hasPrimaryEmail) && (!lhs.hasPrimaryEmail || lhs.primaryEmail == rhs.primaryEmail)
  fieldCheck = fieldCheck && (lhs.hasIsAdmin == rhs.hasIsAdmin) && (!lhs.hasIsAdmin || lhs.isAdmin == rhs.isAdmin)
  fieldCheck = fieldCheck && (lhs.hasIsActive == rhs.hasIsActive) && (!lhs.hasIsActive || lhs.isActive == rhs.isActive)
  fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.User.Containers.SAMLDetailsV1, rhs: Services.User.Containers.SAMLDetailsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasSamlResponse == rhs.hasSamlResponse) && (!lhs.hasSamlResponse || lhs.samlResponse == rhs.samlResponse)
  fieldCheck = fieldCheck && (lhs.hasRelayState == rhs.hasRelayState) && (!lhs.hasRelayState || lhs.relayState == rhs.relayState)
  fieldCheck = fieldCheck && (lhs.hasDomain == rhs.hasDomain) && (!lhs.hasDomain || lhs.domain == rhs.domain)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.User.Containers.SAMLCredentialsV1, rhs: Services.User.Containers.SAMLCredentialsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasState == rhs.hasState) && (!lhs.hasState || lhs.state == rhs.state)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.User.Containers.GoogleCredentialsV1, rhs: Services.User.Containers.GoogleCredentialsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasCode == rhs.hasCode) && (!lhs.hasCode || lhs.code == rhs.code)
  fieldCheck = fieldCheck && (lhs.hasIdToken == rhs.hasIdToken) && (!lhs.hasIdToken || lhs.idToken == rhs.idToken)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.User.Containers {
  public struct ContainersRoot {
    public static var sharedInstance : ContainersRoot {
     struct Static {
         static let instance : ContainersRoot = ContainersRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class DeviceV1 : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum ProviderV1:Int32 {
        case Apple = 0
        case Google = 1

      }

      //Enum type declaration end 

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasNotificationToken:Bool = false
    public private(set) var notificationToken:String = ""

    public private(set) var hasPlatform:Bool = false
    public private(set) var platform:String = ""

    public private(set) var hasOsVersion:Bool = false
    public private(set) var osVersion:String = ""

    public private(set) var hasAppVersion:Bool = false
    public private(set) var appVersion:String = ""

    public private(set) var hasDeviceUuid:Bool = false
    public private(set) var deviceUuid:String = ""

    public private(set) var hasUserId:Bool = false
    public private(set) var userId:String = ""

    public private(set) var hasLanguagePreference:Bool = false
    public private(set) var languagePreference:String = ""

    public private(set) var provider:Services.User.Containers.DeviceV1.ProviderV1 = Services.User.Containers.DeviceV1.ProviderV1.Apple
    public private(set) var hasProvider:Bool = false
    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeString(1, value:id)
      }
      if hasNotificationToken {
        try output.writeString(2, value:notificationToken)
      }
      if hasPlatform {
        try output.writeString(3, value:platform)
      }
      if hasOsVersion {
        try output.writeString(4, value:osVersion)
      }
      if hasAppVersion {
        try output.writeString(5, value:appVersion)
      }
      if hasDeviceUuid {
        try output.writeString(6, value:deviceUuid)
      }
      if hasUserId {
        try output.writeString(7, value:userId)
      }
      if hasLanguagePreference {
        try output.writeString(8, value:languagePreference)
      }
      if hasProvider {
        try output.writeEnum(9, value:provider.rawValue)
      }
      if hasOrganizationId {
        try output.writeString(10, value:organizationId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeStringSize(1)
      }
      if hasNotificationToken {
        serialize_size += notificationToken.computeStringSize(2)
      }
      if hasPlatform {
        serialize_size += platform.computeStringSize(3)
      }
      if hasOsVersion {
        serialize_size += osVersion.computeStringSize(4)
      }
      if hasAppVersion {
        serialize_size += appVersion.computeStringSize(5)
      }
      if hasDeviceUuid {
        serialize_size += deviceUuid.computeStringSize(6)
      }
      if hasUserId {
        serialize_size += userId.computeStringSize(7)
      }
      if hasLanguagePreference {
        serialize_size += languagePreference.computeStringSize(8)
      }
      if (hasProvider) {
        serialize_size += provider.rawValue.computeEnumSize(9)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(10)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.User.Containers.DeviceV1> {
      var mergedArray = Array<Services.User.Containers.DeviceV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.User.Containers.DeviceV1? {
      return try Services.User.Containers.DeviceV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.User.Containers.DeviceV1 {
      return try Services.User.Containers.DeviceV1.Builder().mergeFromData(data, extensionRegistry:Services.User.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.DeviceV1 {
      return try Services.User.Containers.DeviceV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.User.Containers.DeviceV1 {
      return try Services.User.Containers.DeviceV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.DeviceV1 {
      return try Services.User.Containers.DeviceV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Containers.DeviceV1 {
      return try Services.User.Containers.DeviceV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.DeviceV1 {
      return try Services.User.Containers.DeviceV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.User.Containers.DeviceV1.Builder {
      return Services.User.Containers.DeviceV1.classBuilder() as! Services.User.Containers.DeviceV1.Builder
    }
    public func getBuilder() -> Services.User.Containers.DeviceV1.Builder {
      return classBuilder() as! Services.User.Containers.DeviceV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Containers.DeviceV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Containers.DeviceV1.Builder()
    }
    public func toBuilder() throws -> Services.User.Containers.DeviceV1.Builder {
      return try Services.User.Containers.DeviceV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Containers.DeviceV1) throws -> Services.User.Containers.DeviceV1.Builder {
      return try Services.User.Containers.DeviceV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasNotificationToken {
        output += "\(indent) notificationToken: \(notificationToken) \n"
      }
      if hasPlatform {
        output += "\(indent) platform: \(platform) \n"
      }
      if hasOsVersion {
        output += "\(indent) osVersion: \(osVersion) \n"
      }
      if hasAppVersion {
        output += "\(indent) appVersion: \(appVersion) \n"
      }
      if hasDeviceUuid {
        output += "\(indent) deviceUuid: \(deviceUuid) \n"
      }
      if hasUserId {
        output += "\(indent) userId: \(userId) \n"
      }
      if hasLanguagePreference {
        output += "\(indent) languagePreference: \(languagePreference) \n"
      }
      if (hasProvider) {
        output += "\(indent) provider: \(provider.rawValue)\n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasNotificationToken {
               hashCode = (hashCode &* 31) &+ notificationToken.hashValue
            }
            if hasPlatform {
               hashCode = (hashCode &* 31) &+ platform.hashValue
            }
            if hasOsVersion {
               hashCode = (hashCode &* 31) &+ osVersion.hashValue
            }
            if hasAppVersion {
               hashCode = (hashCode &* 31) &+ appVersion.hashValue
            }
            if hasDeviceUuid {
               hashCode = (hashCode &* 31) &+ deviceUuid.hashValue
            }
            if hasUserId {
               hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            if hasLanguagePreference {
               hashCode = (hashCode &* 31) &+ languagePreference.hashValue
            }
            if hasProvider {
               hashCode = (hashCode &* 31) &+ Int(provider.rawValue)
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Containers.DeviceV1"
    }
    override public func className() -> String {
        return "Services.User.Containers.DeviceV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Containers.DeviceV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.User.Containers.DeviceV1 = Services.User.Containers.DeviceV1()
      public func getMessage() -> Services.User.Containers.DeviceV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Services.User.Containers.DeviceV1.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.User.Containers.DeviceV1.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasNotificationToken:Bool {
           get {
                return builderResult.hasNotificationToken
           }
      }
      public var notificationToken:String {
           get {
                return builderResult.notificationToken
           }
           set (value) {
               builderResult.hasNotificationToken = true
               builderResult.notificationToken = value
           }
      }
      public func setNotificationToken(value:String) -> Services.User.Containers.DeviceV1.Builder {
        self.notificationToken = value
        return self
      }
      public func clearNotificationToken() -> Services.User.Containers.DeviceV1.Builder{
           builderResult.hasNotificationToken = false
           builderResult.notificationToken = ""
           return self
      }
      public var hasPlatform:Bool {
           get {
                return builderResult.hasPlatform
           }
      }
      public var platform:String {
           get {
                return builderResult.platform
           }
           set (value) {
               builderResult.hasPlatform = true
               builderResult.platform = value
           }
      }
      public func setPlatform(value:String) -> Services.User.Containers.DeviceV1.Builder {
        self.platform = value
        return self
      }
      public func clearPlatform() -> Services.User.Containers.DeviceV1.Builder{
           builderResult.hasPlatform = false
           builderResult.platform = ""
           return self
      }
      public var hasOsVersion:Bool {
           get {
                return builderResult.hasOsVersion
           }
      }
      public var osVersion:String {
           get {
                return builderResult.osVersion
           }
           set (value) {
               builderResult.hasOsVersion = true
               builderResult.osVersion = value
           }
      }
      public func setOsVersion(value:String) -> Services.User.Containers.DeviceV1.Builder {
        self.osVersion = value
        return self
      }
      public func clearOsVersion() -> Services.User.Containers.DeviceV1.Builder{
           builderResult.hasOsVersion = false
           builderResult.osVersion = ""
           return self
      }
      public var hasAppVersion:Bool {
           get {
                return builderResult.hasAppVersion
           }
      }
      public var appVersion:String {
           get {
                return builderResult.appVersion
           }
           set (value) {
               builderResult.hasAppVersion = true
               builderResult.appVersion = value
           }
      }
      public func setAppVersion(value:String) -> Services.User.Containers.DeviceV1.Builder {
        self.appVersion = value
        return self
      }
      public func clearAppVersion() -> Services.User.Containers.DeviceV1.Builder{
           builderResult.hasAppVersion = false
           builderResult.appVersion = ""
           return self
      }
      public var hasDeviceUuid:Bool {
           get {
                return builderResult.hasDeviceUuid
           }
      }
      public var deviceUuid:String {
           get {
                return builderResult.deviceUuid
           }
           set (value) {
               builderResult.hasDeviceUuid = true
               builderResult.deviceUuid = value
           }
      }
      public func setDeviceUuid(value:String) -> Services.User.Containers.DeviceV1.Builder {
        self.deviceUuid = value
        return self
      }
      public func clearDeviceUuid() -> Services.User.Containers.DeviceV1.Builder{
           builderResult.hasDeviceUuid = false
           builderResult.deviceUuid = ""
           return self
      }
      public var hasUserId:Bool {
           get {
                return builderResult.hasUserId
           }
      }
      public var userId:String {
           get {
                return builderResult.userId
           }
           set (value) {
               builderResult.hasUserId = true
               builderResult.userId = value
           }
      }
      public func setUserId(value:String) -> Services.User.Containers.DeviceV1.Builder {
        self.userId = value
        return self
      }
      public func clearUserId() -> Services.User.Containers.DeviceV1.Builder{
           builderResult.hasUserId = false
           builderResult.userId = ""
           return self
      }
      public var hasLanguagePreference:Bool {
           get {
                return builderResult.hasLanguagePreference
           }
      }
      public var languagePreference:String {
           get {
                return builderResult.languagePreference
           }
           set (value) {
               builderResult.hasLanguagePreference = true
               builderResult.languagePreference = value
           }
      }
      public func setLanguagePreference(value:String) -> Services.User.Containers.DeviceV1.Builder {
        self.languagePreference = value
        return self
      }
      public func clearLanguagePreference() -> Services.User.Containers.DeviceV1.Builder{
           builderResult.hasLanguagePreference = false
           builderResult.languagePreference = ""
           return self
      }
        public var hasProvider:Bool{
            get {
                return builderResult.hasProvider
            }
        }
        public var provider:Services.User.Containers.DeviceV1.ProviderV1 {
            get {
                return builderResult.provider
            }
            set (value) {
                builderResult.hasProvider = true
                builderResult.provider = value
            }
        }
        public func setProvider(value:Services.User.Containers.DeviceV1.ProviderV1) -> Services.User.Containers.DeviceV1.Builder {
          self.provider = value
          return self
        }
        public func clearProvider() -> Services.User.Containers.DeviceV1.Builder {
           builderResult.hasProvider = false
           builderResult.provider = .Apple
           return self
        }
      public var hasOrganizationId:Bool {
           get {
                return builderResult.hasOrganizationId
           }
      }
      public var organizationId:String {
           get {
                return builderResult.organizationId
           }
           set (value) {
               builderResult.hasOrganizationId = true
               builderResult.organizationId = value
           }
      }
      public func setOrganizationId(value:String) -> Services.User.Containers.DeviceV1.Builder {
        self.organizationId = value
        return self
      }
      public func clearOrganizationId() -> Services.User.Containers.DeviceV1.Builder{
           builderResult.hasOrganizationId = false
           builderResult.organizationId = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.User.Containers.DeviceV1.Builder {
        builderResult = Services.User.Containers.DeviceV1()
        return self
      }
      public override func clone() throws -> Services.User.Containers.DeviceV1.Builder {
        return try Services.User.Containers.DeviceV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.User.Containers.DeviceV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.User.Containers.DeviceV1 {
        let returnMe:Services.User.Containers.DeviceV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.User.Containers.DeviceV1) throws -> Services.User.Containers.DeviceV1.Builder {
        if other == Services.User.Containers.DeviceV1() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasNotificationToken {
             notificationToken = other.notificationToken
        }
        if other.hasPlatform {
             platform = other.platform
        }
        if other.hasOsVersion {
             osVersion = other.osVersion
        }
        if other.hasAppVersion {
             appVersion = other.appVersion
        }
        if other.hasDeviceUuid {
             deviceUuid = other.deviceUuid
        }
        if other.hasUserId {
             userId = other.userId
        }
        if other.hasLanguagePreference {
             languagePreference = other.languagePreference
        }
        if other.hasProvider {
             provider = other.provider
        }
        if other.hasOrganizationId {
             organizationId = other.organizationId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Containers.DeviceV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.DeviceV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            id = try input.readString()

          case 18 :
            notificationToken = try input.readString()

          case 26 :
            platform = try input.readString()

          case 34 :
            osVersion = try input.readString()

          case 42 :
            appVersion = try input.readString()

          case 50 :
            deviceUuid = try input.readString()

          case 58 :
            userId = try input.readString()

          case 66 :
            languagePreference = try input.readString()

          case 72 :
            let valueIntprovider = try input.readEnum()
            if let enumsprovider = Services.User.Containers.DeviceV1.ProviderV1(rawValue:valueIntprovider){
                 provider = enumsprovider
            } else {
                 try unknownFieldsBuilder.mergeVarintField(9, value:Int64(valueIntprovider))
            }

          case 82 :
            organizationId = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class IdentityV1 : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum ProviderV1:Int32 {
        case Internal = 0
        case Linkedin = 1
        case Google = 2
        case Okta = 3

      }

      //Enum type declaration end 

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var provider:Services.User.Containers.IdentityV1.ProviderV1 = Services.User.Containers.IdentityV1.ProviderV1.Internal
    public private(set) var hasProvider:Bool = false
    public private(set) var hasFullName:Bool = false
    public private(set) var fullName:String = ""

    public private(set) var hasEmail:Bool = false
    public private(set) var email:String = ""

    public private(set) var hasAccessToken:Bool = false
    public private(set) var accessToken:String = ""

    public private(set) var hasExpiresAt:Bool = false
    public private(set) var expiresAt:String = ""

    public private(set) var hasProviderUid:Bool = false
    public private(set) var providerUid:String = ""

    public private(set) var hasUserId:Bool = false
    public private(set) var userId:String = ""

    public private(set) var hasRefreshToken:Bool = false
    public private(set) var refreshToken:String = ""

    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeString(1, value:id)
      }
      if hasProvider {
        try output.writeEnum(2, value:provider.rawValue)
      }
      if hasFullName {
        try output.writeString(3, value:fullName)
      }
      if hasEmail {
        try output.writeString(4, value:email)
      }
      if hasAccessToken {
        try output.writeString(5, value:accessToken)
      }
      if hasExpiresAt {
        try output.writeString(6, value:expiresAt)
      }
      if hasProviderUid {
        try output.writeString(7, value:providerUid)
      }
      if hasUserId {
        try output.writeString(8, value:userId)
      }
      if hasRefreshToken {
        try output.writeString(9, value:refreshToken)
      }
      if hasOrganizationId {
        try output.writeString(10, value:organizationId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeStringSize(1)
      }
      if (hasProvider) {
        serialize_size += provider.rawValue.computeEnumSize(2)
      }
      if hasFullName {
        serialize_size += fullName.computeStringSize(3)
      }
      if hasEmail {
        serialize_size += email.computeStringSize(4)
      }
      if hasAccessToken {
        serialize_size += accessToken.computeStringSize(5)
      }
      if hasExpiresAt {
        serialize_size += expiresAt.computeStringSize(6)
      }
      if hasProviderUid {
        serialize_size += providerUid.computeStringSize(7)
      }
      if hasUserId {
        serialize_size += userId.computeStringSize(8)
      }
      if hasRefreshToken {
        serialize_size += refreshToken.computeStringSize(9)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(10)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.User.Containers.IdentityV1> {
      var mergedArray = Array<Services.User.Containers.IdentityV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.User.Containers.IdentityV1? {
      return try Services.User.Containers.IdentityV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.User.Containers.IdentityV1 {
      return try Services.User.Containers.IdentityV1.Builder().mergeFromData(data, extensionRegistry:Services.User.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.IdentityV1 {
      return try Services.User.Containers.IdentityV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.User.Containers.IdentityV1 {
      return try Services.User.Containers.IdentityV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.IdentityV1 {
      return try Services.User.Containers.IdentityV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Containers.IdentityV1 {
      return try Services.User.Containers.IdentityV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.IdentityV1 {
      return try Services.User.Containers.IdentityV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.User.Containers.IdentityV1.Builder {
      return Services.User.Containers.IdentityV1.classBuilder() as! Services.User.Containers.IdentityV1.Builder
    }
    public func getBuilder() -> Services.User.Containers.IdentityV1.Builder {
      return classBuilder() as! Services.User.Containers.IdentityV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Containers.IdentityV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Containers.IdentityV1.Builder()
    }
    public func toBuilder() throws -> Services.User.Containers.IdentityV1.Builder {
      return try Services.User.Containers.IdentityV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Containers.IdentityV1) throws -> Services.User.Containers.IdentityV1.Builder {
      return try Services.User.Containers.IdentityV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if (hasProvider) {
        output += "\(indent) provider: \(provider.rawValue)\n"
      }
      if hasFullName {
        output += "\(indent) fullName: \(fullName) \n"
      }
      if hasEmail {
        output += "\(indent) email: \(email) \n"
      }
      if hasAccessToken {
        output += "\(indent) accessToken: \(accessToken) \n"
      }
      if hasExpiresAt {
        output += "\(indent) expiresAt: \(expiresAt) \n"
      }
      if hasProviderUid {
        output += "\(indent) providerUid: \(providerUid) \n"
      }
      if hasUserId {
        output += "\(indent) userId: \(userId) \n"
      }
      if hasRefreshToken {
        output += "\(indent) refreshToken: \(refreshToken) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasProvider {
               hashCode = (hashCode &* 31) &+ Int(provider.rawValue)
            }
            if hasFullName {
               hashCode = (hashCode &* 31) &+ fullName.hashValue
            }
            if hasEmail {
               hashCode = (hashCode &* 31) &+ email.hashValue
            }
            if hasAccessToken {
               hashCode = (hashCode &* 31) &+ accessToken.hashValue
            }
            if hasExpiresAt {
               hashCode = (hashCode &* 31) &+ expiresAt.hashValue
            }
            if hasProviderUid {
               hashCode = (hashCode &* 31) &+ providerUid.hashValue
            }
            if hasUserId {
               hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            if hasRefreshToken {
               hashCode = (hashCode &* 31) &+ refreshToken.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Containers.IdentityV1"
    }
    override public func className() -> String {
        return "Services.User.Containers.IdentityV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Containers.IdentityV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.User.Containers.IdentityV1 = Services.User.Containers.IdentityV1()
      public func getMessage() -> Services.User.Containers.IdentityV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Services.User.Containers.IdentityV1.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.User.Containers.IdentityV1.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
        public var hasProvider:Bool{
            get {
                return builderResult.hasProvider
            }
        }
        public var provider:Services.User.Containers.IdentityV1.ProviderV1 {
            get {
                return builderResult.provider
            }
            set (value) {
                builderResult.hasProvider = true
                builderResult.provider = value
            }
        }
        public func setProvider(value:Services.User.Containers.IdentityV1.ProviderV1) -> Services.User.Containers.IdentityV1.Builder {
          self.provider = value
          return self
        }
        public func clearProvider() -> Services.User.Containers.IdentityV1.Builder {
           builderResult.hasProvider = false
           builderResult.provider = .Internal
           return self
        }
      public var hasFullName:Bool {
           get {
                return builderResult.hasFullName
           }
      }
      public var fullName:String {
           get {
                return builderResult.fullName
           }
           set (value) {
               builderResult.hasFullName = true
               builderResult.fullName = value
           }
      }
      public func setFullName(value:String) -> Services.User.Containers.IdentityV1.Builder {
        self.fullName = value
        return self
      }
      public func clearFullName() -> Services.User.Containers.IdentityV1.Builder{
           builderResult.hasFullName = false
           builderResult.fullName = ""
           return self
      }
      public var hasEmail:Bool {
           get {
                return builderResult.hasEmail
           }
      }
      public var email:String {
           get {
                return builderResult.email
           }
           set (value) {
               builderResult.hasEmail = true
               builderResult.email = value
           }
      }
      public func setEmail(value:String) -> Services.User.Containers.IdentityV1.Builder {
        self.email = value
        return self
      }
      public func clearEmail() -> Services.User.Containers.IdentityV1.Builder{
           builderResult.hasEmail = false
           builderResult.email = ""
           return self
      }
      public var hasAccessToken:Bool {
           get {
                return builderResult.hasAccessToken
           }
      }
      public var accessToken:String {
           get {
                return builderResult.accessToken
           }
           set (value) {
               builderResult.hasAccessToken = true
               builderResult.accessToken = value
           }
      }
      public func setAccessToken(value:String) -> Services.User.Containers.IdentityV1.Builder {
        self.accessToken = value
        return self
      }
      public func clearAccessToken() -> Services.User.Containers.IdentityV1.Builder{
           builderResult.hasAccessToken = false
           builderResult.accessToken = ""
           return self
      }
      public var hasExpiresAt:Bool {
           get {
                return builderResult.hasExpiresAt
           }
      }
      public var expiresAt:String {
           get {
                return builderResult.expiresAt
           }
           set (value) {
               builderResult.hasExpiresAt = true
               builderResult.expiresAt = value
           }
      }
      public func setExpiresAt(value:String) -> Services.User.Containers.IdentityV1.Builder {
        self.expiresAt = value
        return self
      }
      public func clearExpiresAt() -> Services.User.Containers.IdentityV1.Builder{
           builderResult.hasExpiresAt = false
           builderResult.expiresAt = ""
           return self
      }
      public var hasProviderUid:Bool {
           get {
                return builderResult.hasProviderUid
           }
      }
      public var providerUid:String {
           get {
                return builderResult.providerUid
           }
           set (value) {
               builderResult.hasProviderUid = true
               builderResult.providerUid = value
           }
      }
      public func setProviderUid(value:String) -> Services.User.Containers.IdentityV1.Builder {
        self.providerUid = value
        return self
      }
      public func clearProviderUid() -> Services.User.Containers.IdentityV1.Builder{
           builderResult.hasProviderUid = false
           builderResult.providerUid = ""
           return self
      }
      public var hasUserId:Bool {
           get {
                return builderResult.hasUserId
           }
      }
      public var userId:String {
           get {
                return builderResult.userId
           }
           set (value) {
               builderResult.hasUserId = true
               builderResult.userId = value
           }
      }
      public func setUserId(value:String) -> Services.User.Containers.IdentityV1.Builder {
        self.userId = value
        return self
      }
      public func clearUserId() -> Services.User.Containers.IdentityV1.Builder{
           builderResult.hasUserId = false
           builderResult.userId = ""
           return self
      }
      public var hasRefreshToken:Bool {
           get {
                return builderResult.hasRefreshToken
           }
      }
      public var refreshToken:String {
           get {
                return builderResult.refreshToken
           }
           set (value) {
               builderResult.hasRefreshToken = true
               builderResult.refreshToken = value
           }
      }
      public func setRefreshToken(value:String) -> Services.User.Containers.IdentityV1.Builder {
        self.refreshToken = value
        return self
      }
      public func clearRefreshToken() -> Services.User.Containers.IdentityV1.Builder{
           builderResult.hasRefreshToken = false
           builderResult.refreshToken = ""
           return self
      }
      public var hasOrganizationId:Bool {
           get {
                return builderResult.hasOrganizationId
           }
      }
      public var organizationId:String {
           get {
                return builderResult.organizationId
           }
           set (value) {
               builderResult.hasOrganizationId = true
               builderResult.organizationId = value
           }
      }
      public func setOrganizationId(value:String) -> Services.User.Containers.IdentityV1.Builder {
        self.organizationId = value
        return self
      }
      public func clearOrganizationId() -> Services.User.Containers.IdentityV1.Builder{
           builderResult.hasOrganizationId = false
           builderResult.organizationId = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.User.Containers.IdentityV1.Builder {
        builderResult = Services.User.Containers.IdentityV1()
        return self
      }
      public override func clone() throws -> Services.User.Containers.IdentityV1.Builder {
        return try Services.User.Containers.IdentityV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.User.Containers.IdentityV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.User.Containers.IdentityV1 {
        let returnMe:Services.User.Containers.IdentityV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.User.Containers.IdentityV1) throws -> Services.User.Containers.IdentityV1.Builder {
        if other == Services.User.Containers.IdentityV1() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasProvider {
             provider = other.provider
        }
        if other.hasFullName {
             fullName = other.fullName
        }
        if other.hasEmail {
             email = other.email
        }
        if other.hasAccessToken {
             accessToken = other.accessToken
        }
        if other.hasExpiresAt {
             expiresAt = other.expiresAt
        }
        if other.hasProviderUid {
             providerUid = other.providerUid
        }
        if other.hasUserId {
             userId = other.userId
        }
        if other.hasRefreshToken {
             refreshToken = other.refreshToken
        }
        if other.hasOrganizationId {
             organizationId = other.organizationId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Containers.IdentityV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.IdentityV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            id = try input.readString()

          case 16 :
            let valueIntprovider = try input.readEnum()
            if let enumsprovider = Services.User.Containers.IdentityV1.ProviderV1(rawValue:valueIntprovider){
                 provider = enumsprovider
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntprovider))
            }

          case 26 :
            fullName = try input.readString()

          case 34 :
            email = try input.readString()

          case 42 :
            accessToken = try input.readString()

          case 50 :
            expiresAt = try input.readString()

          case 58 :
            providerUid = try input.readString()

          case 66 :
            userId = try input.readString()

          case 74 :
            refreshToken = try input.readString()

          case 82 :
            organizationId = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class OAuth2DetailsV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasCode:Bool = false
    public private(set) var code:String = ""

    public private(set) var hasState:Bool = false
    public private(set) var state:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasCode {
        try output.writeString(1, value:code)
      }
      if hasState {
        try output.writeString(2, value:state)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasCode {
        serialize_size += code.computeStringSize(1)
      }
      if hasState {
        serialize_size += state.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.User.Containers.OAuth2DetailsV1> {
      var mergedArray = Array<Services.User.Containers.OAuth2DetailsV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.User.Containers.OAuth2DetailsV1? {
      return try Services.User.Containers.OAuth2DetailsV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.User.Containers.OAuth2DetailsV1 {
      return try Services.User.Containers.OAuth2DetailsV1.Builder().mergeFromData(data, extensionRegistry:Services.User.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.OAuth2DetailsV1 {
      return try Services.User.Containers.OAuth2DetailsV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.User.Containers.OAuth2DetailsV1 {
      return try Services.User.Containers.OAuth2DetailsV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.OAuth2DetailsV1 {
      return try Services.User.Containers.OAuth2DetailsV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Containers.OAuth2DetailsV1 {
      return try Services.User.Containers.OAuth2DetailsV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.OAuth2DetailsV1 {
      return try Services.User.Containers.OAuth2DetailsV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.User.Containers.OAuth2DetailsV1.Builder {
      return Services.User.Containers.OAuth2DetailsV1.classBuilder() as! Services.User.Containers.OAuth2DetailsV1.Builder
    }
    public func getBuilder() -> Services.User.Containers.OAuth2DetailsV1.Builder {
      return classBuilder() as! Services.User.Containers.OAuth2DetailsV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Containers.OAuth2DetailsV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Containers.OAuth2DetailsV1.Builder()
    }
    public func toBuilder() throws -> Services.User.Containers.OAuth2DetailsV1.Builder {
      return try Services.User.Containers.OAuth2DetailsV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Containers.OAuth2DetailsV1) throws -> Services.User.Containers.OAuth2DetailsV1.Builder {
      return try Services.User.Containers.OAuth2DetailsV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasCode {
        output += "\(indent) code: \(code) \n"
      }
      if hasState {
        output += "\(indent) state: \(state) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasCode {
               hashCode = (hashCode &* 31) &+ code.hashValue
            }
            if hasState {
               hashCode = (hashCode &* 31) &+ state.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Containers.OAuth2DetailsV1"
    }
    override public func className() -> String {
        return "Services.User.Containers.OAuth2DetailsV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Containers.OAuth2DetailsV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.User.Containers.OAuth2DetailsV1 = Services.User.Containers.OAuth2DetailsV1()
      public func getMessage() -> Services.User.Containers.OAuth2DetailsV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasCode:Bool {
           get {
                return builderResult.hasCode
           }
      }
      public var code:String {
           get {
                return builderResult.code
           }
           set (value) {
               builderResult.hasCode = true
               builderResult.code = value
           }
      }
      public func setCode(value:String) -> Services.User.Containers.OAuth2DetailsV1.Builder {
        self.code = value
        return self
      }
      public func clearCode() -> Services.User.Containers.OAuth2DetailsV1.Builder{
           builderResult.hasCode = false
           builderResult.code = ""
           return self
      }
      public var hasState:Bool {
           get {
                return builderResult.hasState
           }
      }
      public var state:String {
           get {
                return builderResult.state
           }
           set (value) {
               builderResult.hasState = true
               builderResult.state = value
           }
      }
      public func setState(value:String) -> Services.User.Containers.OAuth2DetailsV1.Builder {
        self.state = value
        return self
      }
      public func clearState() -> Services.User.Containers.OAuth2DetailsV1.Builder{
           builderResult.hasState = false
           builderResult.state = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.User.Containers.OAuth2DetailsV1.Builder {
        builderResult = Services.User.Containers.OAuth2DetailsV1()
        return self
      }
      public override func clone() throws -> Services.User.Containers.OAuth2DetailsV1.Builder {
        return try Services.User.Containers.OAuth2DetailsV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.User.Containers.OAuth2DetailsV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.User.Containers.OAuth2DetailsV1 {
        let returnMe:Services.User.Containers.OAuth2DetailsV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.User.Containers.OAuth2DetailsV1) throws -> Services.User.Containers.OAuth2DetailsV1.Builder {
        if other == Services.User.Containers.OAuth2DetailsV1() {
         return self
        }
        if other.hasCode {
             code = other.code
        }
        if other.hasState {
             state = other.state
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Containers.OAuth2DetailsV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.OAuth2DetailsV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            code = try input.readString()

          case 18 :
            state = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class UserV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasPrimaryEmail:Bool = false
    public private(set) var primaryEmail:String = ""

    public private(set) var hasIsAdmin:Bool = false
    public private(set) var isAdmin:Bool = false

    public private(set) var hasIsActive:Bool = false
    public private(set) var isActive:Bool = false

    public private(set) var hasPassword:Bool = false
    public private(set) var password:String = ""

    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeString(1, value:id)
      }
      if hasPrimaryEmail {
        try output.writeString(2, value:primaryEmail)
      }
      if hasIsAdmin {
        try output.writeBool(3, value:isAdmin)
      }
      if hasIsActive {
        try output.writeBool(4, value:isActive)
      }
      if hasPassword {
        try output.writeString(5, value:password)
      }
      if hasOrganizationId {
        try output.writeString(6, value:organizationId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeStringSize(1)
      }
      if hasPrimaryEmail {
        serialize_size += primaryEmail.computeStringSize(2)
      }
      if hasIsAdmin {
        serialize_size += isAdmin.computeBoolSize(3)
      }
      if hasIsActive {
        serialize_size += isActive.computeBoolSize(4)
      }
      if hasPassword {
        serialize_size += password.computeStringSize(5)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(6)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.User.Containers.UserV1> {
      var mergedArray = Array<Services.User.Containers.UserV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.User.Containers.UserV1? {
      return try Services.User.Containers.UserV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.User.Containers.UserV1 {
      return try Services.User.Containers.UserV1.Builder().mergeFromData(data, extensionRegistry:Services.User.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.UserV1 {
      return try Services.User.Containers.UserV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.User.Containers.UserV1 {
      return try Services.User.Containers.UserV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.UserV1 {
      return try Services.User.Containers.UserV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Containers.UserV1 {
      return try Services.User.Containers.UserV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.UserV1 {
      return try Services.User.Containers.UserV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.User.Containers.UserV1.Builder {
      return Services.User.Containers.UserV1.classBuilder() as! Services.User.Containers.UserV1.Builder
    }
    public func getBuilder() -> Services.User.Containers.UserV1.Builder {
      return classBuilder() as! Services.User.Containers.UserV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Containers.UserV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Containers.UserV1.Builder()
    }
    public func toBuilder() throws -> Services.User.Containers.UserV1.Builder {
      return try Services.User.Containers.UserV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Containers.UserV1) throws -> Services.User.Containers.UserV1.Builder {
      return try Services.User.Containers.UserV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasPrimaryEmail {
        output += "\(indent) primaryEmail: \(primaryEmail) \n"
      }
      if hasIsAdmin {
        output += "\(indent) isAdmin: \(isAdmin) \n"
      }
      if hasIsActive {
        output += "\(indent) isActive: \(isActive) \n"
      }
      if hasPassword {
        output += "\(indent) password: \(password) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasPrimaryEmail {
               hashCode = (hashCode &* 31) &+ primaryEmail.hashValue
            }
            if hasIsAdmin {
               hashCode = (hashCode &* 31) &+ isAdmin.hashValue
            }
            if hasIsActive {
               hashCode = (hashCode &* 31) &+ isActive.hashValue
            }
            if hasPassword {
               hashCode = (hashCode &* 31) &+ password.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Containers.UserV1"
    }
    override public func className() -> String {
        return "Services.User.Containers.UserV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Containers.UserV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.User.Containers.UserV1 = Services.User.Containers.UserV1()
      public func getMessage() -> Services.User.Containers.UserV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Services.User.Containers.UserV1.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.User.Containers.UserV1.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasPrimaryEmail:Bool {
           get {
                return builderResult.hasPrimaryEmail
           }
      }
      public var primaryEmail:String {
           get {
                return builderResult.primaryEmail
           }
           set (value) {
               builderResult.hasPrimaryEmail = true
               builderResult.primaryEmail = value
           }
      }
      public func setPrimaryEmail(value:String) -> Services.User.Containers.UserV1.Builder {
        self.primaryEmail = value
        return self
      }
      public func clearPrimaryEmail() -> Services.User.Containers.UserV1.Builder{
           builderResult.hasPrimaryEmail = false
           builderResult.primaryEmail = ""
           return self
      }
      public var hasIsAdmin:Bool {
           get {
                return builderResult.hasIsAdmin
           }
      }
      public var isAdmin:Bool {
           get {
                return builderResult.isAdmin
           }
           set (value) {
               builderResult.hasIsAdmin = true
               builderResult.isAdmin = value
           }
      }
      public func setIsAdmin(value:Bool) -> Services.User.Containers.UserV1.Builder {
        self.isAdmin = value
        return self
      }
      public func clearIsAdmin() -> Services.User.Containers.UserV1.Builder{
           builderResult.hasIsAdmin = false
           builderResult.isAdmin = false
           return self
      }
      public var hasIsActive:Bool {
           get {
                return builderResult.hasIsActive
           }
      }
      public var isActive:Bool {
           get {
                return builderResult.isActive
           }
           set (value) {
               builderResult.hasIsActive = true
               builderResult.isActive = value
           }
      }
      public func setIsActive(value:Bool) -> Services.User.Containers.UserV1.Builder {
        self.isActive = value
        return self
      }
      public func clearIsActive() -> Services.User.Containers.UserV1.Builder{
           builderResult.hasIsActive = false
           builderResult.isActive = false
           return self
      }
      public var hasPassword:Bool {
           get {
                return builderResult.hasPassword
           }
      }
      public var password:String {
           get {
                return builderResult.password
           }
           set (value) {
               builderResult.hasPassword = true
               builderResult.password = value
           }
      }
      public func setPassword(value:String) -> Services.User.Containers.UserV1.Builder {
        self.password = value
        return self
      }
      public func clearPassword() -> Services.User.Containers.UserV1.Builder{
           builderResult.hasPassword = false
           builderResult.password = ""
           return self
      }
      public var hasOrganizationId:Bool {
           get {
                return builderResult.hasOrganizationId
           }
      }
      public var organizationId:String {
           get {
                return builderResult.organizationId
           }
           set (value) {
               builderResult.hasOrganizationId = true
               builderResult.organizationId = value
           }
      }
      public func setOrganizationId(value:String) -> Services.User.Containers.UserV1.Builder {
        self.organizationId = value
        return self
      }
      public func clearOrganizationId() -> Services.User.Containers.UserV1.Builder{
           builderResult.hasOrganizationId = false
           builderResult.organizationId = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.User.Containers.UserV1.Builder {
        builderResult = Services.User.Containers.UserV1()
        return self
      }
      public override func clone() throws -> Services.User.Containers.UserV1.Builder {
        return try Services.User.Containers.UserV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.User.Containers.UserV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.User.Containers.UserV1 {
        let returnMe:Services.User.Containers.UserV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.User.Containers.UserV1) throws -> Services.User.Containers.UserV1.Builder {
        if other == Services.User.Containers.UserV1() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasPrimaryEmail {
             primaryEmail = other.primaryEmail
        }
        if other.hasIsAdmin {
             isAdmin = other.isAdmin
        }
        if other.hasIsActive {
             isActive = other.isActive
        }
        if other.hasPassword {
             password = other.password
        }
        if other.hasOrganizationId {
             organizationId = other.organizationId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Containers.UserV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.UserV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            id = try input.readString()

          case 18 :
            primaryEmail = try input.readString()

          case 24 :
            isAdmin = try input.readBool()

          case 32 :
            isActive = try input.readBool()

          case 42 :
            password = try input.readString()

          case 50 :
            organizationId = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class SAMLDetailsV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasSamlResponse:Bool = false
    public private(set) var samlResponse:String = ""

    public private(set) var hasRelayState:Bool = false
    public private(set) var relayState:String = ""

    public private(set) var hasDomain:Bool = false
    public private(set) var domain:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasSamlResponse {
        try output.writeString(1, value:samlResponse)
      }
      if hasRelayState {
        try output.writeString(2, value:relayState)
      }
      if hasDomain {
        try output.writeString(3, value:domain)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasSamlResponse {
        serialize_size += samlResponse.computeStringSize(1)
      }
      if hasRelayState {
        serialize_size += relayState.computeStringSize(2)
      }
      if hasDomain {
        serialize_size += domain.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.User.Containers.SAMLDetailsV1> {
      var mergedArray = Array<Services.User.Containers.SAMLDetailsV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.User.Containers.SAMLDetailsV1? {
      return try Services.User.Containers.SAMLDetailsV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.User.Containers.SAMLDetailsV1 {
      return try Services.User.Containers.SAMLDetailsV1.Builder().mergeFromData(data, extensionRegistry:Services.User.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.SAMLDetailsV1 {
      return try Services.User.Containers.SAMLDetailsV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.User.Containers.SAMLDetailsV1 {
      return try Services.User.Containers.SAMLDetailsV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.SAMLDetailsV1 {
      return try Services.User.Containers.SAMLDetailsV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Containers.SAMLDetailsV1 {
      return try Services.User.Containers.SAMLDetailsV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.SAMLDetailsV1 {
      return try Services.User.Containers.SAMLDetailsV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.User.Containers.SAMLDetailsV1.Builder {
      return Services.User.Containers.SAMLDetailsV1.classBuilder() as! Services.User.Containers.SAMLDetailsV1.Builder
    }
    public func getBuilder() -> Services.User.Containers.SAMLDetailsV1.Builder {
      return classBuilder() as! Services.User.Containers.SAMLDetailsV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Containers.SAMLDetailsV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Containers.SAMLDetailsV1.Builder()
    }
    public func toBuilder() throws -> Services.User.Containers.SAMLDetailsV1.Builder {
      return try Services.User.Containers.SAMLDetailsV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Containers.SAMLDetailsV1) throws -> Services.User.Containers.SAMLDetailsV1.Builder {
      return try Services.User.Containers.SAMLDetailsV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasSamlResponse {
        output += "\(indent) samlResponse: \(samlResponse) \n"
      }
      if hasRelayState {
        output += "\(indent) relayState: \(relayState) \n"
      }
      if hasDomain {
        output += "\(indent) domain: \(domain) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasSamlResponse {
               hashCode = (hashCode &* 31) &+ samlResponse.hashValue
            }
            if hasRelayState {
               hashCode = (hashCode &* 31) &+ relayState.hashValue
            }
            if hasDomain {
               hashCode = (hashCode &* 31) &+ domain.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Containers.SAMLDetailsV1"
    }
    override public func className() -> String {
        return "Services.User.Containers.SAMLDetailsV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Containers.SAMLDetailsV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.User.Containers.SAMLDetailsV1 = Services.User.Containers.SAMLDetailsV1()
      public func getMessage() -> Services.User.Containers.SAMLDetailsV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasSamlResponse:Bool {
           get {
                return builderResult.hasSamlResponse
           }
      }
      public var samlResponse:String {
           get {
                return builderResult.samlResponse
           }
           set (value) {
               builderResult.hasSamlResponse = true
               builderResult.samlResponse = value
           }
      }
      public func setSamlResponse(value:String) -> Services.User.Containers.SAMLDetailsV1.Builder {
        self.samlResponse = value
        return self
      }
      public func clearSamlResponse() -> Services.User.Containers.SAMLDetailsV1.Builder{
           builderResult.hasSamlResponse = false
           builderResult.samlResponse = ""
           return self
      }
      public var hasRelayState:Bool {
           get {
                return builderResult.hasRelayState
           }
      }
      public var relayState:String {
           get {
                return builderResult.relayState
           }
           set (value) {
               builderResult.hasRelayState = true
               builderResult.relayState = value
           }
      }
      public func setRelayState(value:String) -> Services.User.Containers.SAMLDetailsV1.Builder {
        self.relayState = value
        return self
      }
      public func clearRelayState() -> Services.User.Containers.SAMLDetailsV1.Builder{
           builderResult.hasRelayState = false
           builderResult.relayState = ""
           return self
      }
      public var hasDomain:Bool {
           get {
                return builderResult.hasDomain
           }
      }
      public var domain:String {
           get {
                return builderResult.domain
           }
           set (value) {
               builderResult.hasDomain = true
               builderResult.domain = value
           }
      }
      public func setDomain(value:String) -> Services.User.Containers.SAMLDetailsV1.Builder {
        self.domain = value
        return self
      }
      public func clearDomain() -> Services.User.Containers.SAMLDetailsV1.Builder{
           builderResult.hasDomain = false
           builderResult.domain = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.User.Containers.SAMLDetailsV1.Builder {
        builderResult = Services.User.Containers.SAMLDetailsV1()
        return self
      }
      public override func clone() throws -> Services.User.Containers.SAMLDetailsV1.Builder {
        return try Services.User.Containers.SAMLDetailsV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.User.Containers.SAMLDetailsV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.User.Containers.SAMLDetailsV1 {
        let returnMe:Services.User.Containers.SAMLDetailsV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.User.Containers.SAMLDetailsV1) throws -> Services.User.Containers.SAMLDetailsV1.Builder {
        if other == Services.User.Containers.SAMLDetailsV1() {
         return self
        }
        if other.hasSamlResponse {
             samlResponse = other.samlResponse
        }
        if other.hasRelayState {
             relayState = other.relayState
        }
        if other.hasDomain {
             domain = other.domain
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Containers.SAMLDetailsV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.SAMLDetailsV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            samlResponse = try input.readString()

          case 18 :
            relayState = try input.readString()

          case 26 :
            domain = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class SAMLCredentialsV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasState:Bool = false
    public private(set) var state:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasState {
        try output.writeString(1, value:state)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasState {
        serialize_size += state.computeStringSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.User.Containers.SAMLCredentialsV1> {
      var mergedArray = Array<Services.User.Containers.SAMLCredentialsV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.User.Containers.SAMLCredentialsV1? {
      return try Services.User.Containers.SAMLCredentialsV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.User.Containers.SAMLCredentialsV1 {
      return try Services.User.Containers.SAMLCredentialsV1.Builder().mergeFromData(data, extensionRegistry:Services.User.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.SAMLCredentialsV1 {
      return try Services.User.Containers.SAMLCredentialsV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.User.Containers.SAMLCredentialsV1 {
      return try Services.User.Containers.SAMLCredentialsV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.SAMLCredentialsV1 {
      return try Services.User.Containers.SAMLCredentialsV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Containers.SAMLCredentialsV1 {
      return try Services.User.Containers.SAMLCredentialsV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.SAMLCredentialsV1 {
      return try Services.User.Containers.SAMLCredentialsV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.User.Containers.SAMLCredentialsV1.Builder {
      return Services.User.Containers.SAMLCredentialsV1.classBuilder() as! Services.User.Containers.SAMLCredentialsV1.Builder
    }
    public func getBuilder() -> Services.User.Containers.SAMLCredentialsV1.Builder {
      return classBuilder() as! Services.User.Containers.SAMLCredentialsV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Containers.SAMLCredentialsV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Containers.SAMLCredentialsV1.Builder()
    }
    public func toBuilder() throws -> Services.User.Containers.SAMLCredentialsV1.Builder {
      return try Services.User.Containers.SAMLCredentialsV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Containers.SAMLCredentialsV1) throws -> Services.User.Containers.SAMLCredentialsV1.Builder {
      return try Services.User.Containers.SAMLCredentialsV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasState {
        output += "\(indent) state: \(state) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasState {
               hashCode = (hashCode &* 31) &+ state.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Containers.SAMLCredentialsV1"
    }
    override public func className() -> String {
        return "Services.User.Containers.SAMLCredentialsV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Containers.SAMLCredentialsV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.User.Containers.SAMLCredentialsV1 = Services.User.Containers.SAMLCredentialsV1()
      public func getMessage() -> Services.User.Containers.SAMLCredentialsV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasState:Bool {
           get {
                return builderResult.hasState
           }
      }
      public var state:String {
           get {
                return builderResult.state
           }
           set (value) {
               builderResult.hasState = true
               builderResult.state = value
           }
      }
      public func setState(value:String) -> Services.User.Containers.SAMLCredentialsV1.Builder {
        self.state = value
        return self
      }
      public func clearState() -> Services.User.Containers.SAMLCredentialsV1.Builder{
           builderResult.hasState = false
           builderResult.state = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.User.Containers.SAMLCredentialsV1.Builder {
        builderResult = Services.User.Containers.SAMLCredentialsV1()
        return self
      }
      public override func clone() throws -> Services.User.Containers.SAMLCredentialsV1.Builder {
        return try Services.User.Containers.SAMLCredentialsV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.User.Containers.SAMLCredentialsV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.User.Containers.SAMLCredentialsV1 {
        let returnMe:Services.User.Containers.SAMLCredentialsV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.User.Containers.SAMLCredentialsV1) throws -> Services.User.Containers.SAMLCredentialsV1.Builder {
        if other == Services.User.Containers.SAMLCredentialsV1() {
         return self
        }
        if other.hasState {
             state = other.state
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Containers.SAMLCredentialsV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.SAMLCredentialsV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            state = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class GoogleCredentialsV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasCode:Bool = false
    public private(set) var code:String = ""

    public private(set) var hasIdToken:Bool = false
    public private(set) var idToken:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasCode {
        try output.writeString(1, value:code)
      }
      if hasIdToken {
        try output.writeString(2, value:idToken)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasCode {
        serialize_size += code.computeStringSize(1)
      }
      if hasIdToken {
        serialize_size += idToken.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.User.Containers.GoogleCredentialsV1> {
      var mergedArray = Array<Services.User.Containers.GoogleCredentialsV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.User.Containers.GoogleCredentialsV1? {
      return try Services.User.Containers.GoogleCredentialsV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.User.Containers.GoogleCredentialsV1 {
      return try Services.User.Containers.GoogleCredentialsV1.Builder().mergeFromData(data, extensionRegistry:Services.User.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.GoogleCredentialsV1 {
      return try Services.User.Containers.GoogleCredentialsV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.User.Containers.GoogleCredentialsV1 {
      return try Services.User.Containers.GoogleCredentialsV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.GoogleCredentialsV1 {
      return try Services.User.Containers.GoogleCredentialsV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Containers.GoogleCredentialsV1 {
      return try Services.User.Containers.GoogleCredentialsV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.GoogleCredentialsV1 {
      return try Services.User.Containers.GoogleCredentialsV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.User.Containers.GoogleCredentialsV1.Builder {
      return Services.User.Containers.GoogleCredentialsV1.classBuilder() as! Services.User.Containers.GoogleCredentialsV1.Builder
    }
    public func getBuilder() -> Services.User.Containers.GoogleCredentialsV1.Builder {
      return classBuilder() as! Services.User.Containers.GoogleCredentialsV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Containers.GoogleCredentialsV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Containers.GoogleCredentialsV1.Builder()
    }
    public func toBuilder() throws -> Services.User.Containers.GoogleCredentialsV1.Builder {
      return try Services.User.Containers.GoogleCredentialsV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Containers.GoogleCredentialsV1) throws -> Services.User.Containers.GoogleCredentialsV1.Builder {
      return try Services.User.Containers.GoogleCredentialsV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasCode {
        output += "\(indent) code: \(code) \n"
      }
      if hasIdToken {
        output += "\(indent) idToken: \(idToken) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasCode {
               hashCode = (hashCode &* 31) &+ code.hashValue
            }
            if hasIdToken {
               hashCode = (hashCode &* 31) &+ idToken.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Containers.GoogleCredentialsV1"
    }
    override public func className() -> String {
        return "Services.User.Containers.GoogleCredentialsV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Containers.GoogleCredentialsV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.User.Containers.GoogleCredentialsV1 = Services.User.Containers.GoogleCredentialsV1()
      public func getMessage() -> Services.User.Containers.GoogleCredentialsV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasCode:Bool {
           get {
                return builderResult.hasCode
           }
      }
      public var code:String {
           get {
                return builderResult.code
           }
           set (value) {
               builderResult.hasCode = true
               builderResult.code = value
           }
      }
      public func setCode(value:String) -> Services.User.Containers.GoogleCredentialsV1.Builder {
        self.code = value
        return self
      }
      public func clearCode() -> Services.User.Containers.GoogleCredentialsV1.Builder{
           builderResult.hasCode = false
           builderResult.code = ""
           return self
      }
      public var hasIdToken:Bool {
           get {
                return builderResult.hasIdToken
           }
      }
      public var idToken:String {
           get {
                return builderResult.idToken
           }
           set (value) {
               builderResult.hasIdToken = true
               builderResult.idToken = value
           }
      }
      public func setIdToken(value:String) -> Services.User.Containers.GoogleCredentialsV1.Builder {
        self.idToken = value
        return self
      }
      public func clearIdToken() -> Services.User.Containers.GoogleCredentialsV1.Builder{
           builderResult.hasIdToken = false
           builderResult.idToken = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.User.Containers.GoogleCredentialsV1.Builder {
        builderResult = Services.User.Containers.GoogleCredentialsV1()
        return self
      }
      public override func clone() throws -> Services.User.Containers.GoogleCredentialsV1.Builder {
        return try Services.User.Containers.GoogleCredentialsV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.User.Containers.GoogleCredentialsV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.User.Containers.GoogleCredentialsV1 {
        let returnMe:Services.User.Containers.GoogleCredentialsV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.User.Containers.GoogleCredentialsV1) throws -> Services.User.Containers.GoogleCredentialsV1.Builder {
        if other == Services.User.Containers.GoogleCredentialsV1() {
         return self
        }
        if other.hasCode {
             code = other.code
        }
        if other.hasIdToken {
             idToken = other.idToken
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Containers.GoogleCredentialsV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Containers.GoogleCredentialsV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            code = try input.readString()

          case 18 :
            idToken = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
