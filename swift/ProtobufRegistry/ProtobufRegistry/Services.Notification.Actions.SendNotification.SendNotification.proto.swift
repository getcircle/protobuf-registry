// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file send_notification.proto

import Foundation

public extension Services.Notification.Actions{ public struct SendNotification { }}

public func == (lhs: Services.Notification.Actions.SendNotification.RequestV1, rhs: Services.Notification.Actions.SendNotification.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasToProfileId == rhs.hasToProfileId) && (!lhs.hasToProfileId || lhs.toProfileId == rhs.toProfileId)
  fieldCheck = fieldCheck && (lhs.hasNotification == rhs.hasNotification) && (!lhs.hasNotification || lhs.notification == rhs.notification)
  fieldCheck = fieldCheck && (lhs.toProfileIds == rhs.toProfileIds)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Notification.Actions.SendNotification.ResponseV1, rhs: Services.Notification.Actions.SendNotification.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Notification.Actions.SendNotification {
  public struct SendNotificationRoot {
    public static var sharedInstance : SendNotificationRoot {
     struct Static {
         static let instance : SendNotificationRoot = SendNotificationRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Notification.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasToProfileId:Bool = false
    public private(set) var toProfileId:String = ""

    public private(set) var hasNotification:Bool = false
    public private(set) var notification:Services.Notification.Containers.NotificationV1!
    public private(set) var toProfileIds:Array<String> = Array<String>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasToProfileId {
        try output.writeString(2, value:toProfileId)
      }
      if hasNotification {
        try output.writeMessage(3, value:notification)
      }
      if !toProfileIds.isEmpty {
        for oneValuetoProfileIds in toProfileIds {
          try output.writeString(4, value:oneValuetoProfileIds)
        }
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasToProfileId {
        serialize_size += toProfileId.computeStringSize(2)
      }
      if hasNotification {
          if let varSizenotification = notification?.computeMessageSize(3) {
              serialize_size += varSizenotification
          }
      }
      var dataSizeToProfileIds:Int32 = 0
      for oneValuetoProfileIds in toProfileIds {
          dataSizeToProfileIds += oneValuetoProfileIds.computeStringSizeNoTag()
      }
      serialize_size += dataSizeToProfileIds
      serialize_size += 1 * Int32(toProfileIds.count)
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Notification.Actions.SendNotification.RequestV1> {
      var mergedArray = Array<Services.Notification.Actions.SendNotification.RequestV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Notification.Actions.SendNotification.RequestV1? {
      return try Services.Notification.Actions.SendNotification.RequestV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Notification.Actions.SendNotification.RequestV1 {
      return try Services.Notification.Actions.SendNotification.RequestV1.Builder().mergeFromData(data, extensionRegistry:Services.Notification.Actions.SendNotification.SendNotificationRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Notification.Actions.SendNotification.RequestV1 {
      return try Services.Notification.Actions.SendNotification.RequestV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Notification.Actions.SendNotification.RequestV1 {
      return try Services.Notification.Actions.SendNotification.RequestV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Notification.Actions.SendNotification.RequestV1 {
      return try Services.Notification.Actions.SendNotification.RequestV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Notification.Actions.SendNotification.RequestV1 {
      return try Services.Notification.Actions.SendNotification.RequestV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Notification.Actions.SendNotification.RequestV1 {
      return try Services.Notification.Actions.SendNotification.RequestV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Notification.Actions.SendNotification.RequestV1.Builder {
      return Services.Notification.Actions.SendNotification.RequestV1.classBuilder() as! Services.Notification.Actions.SendNotification.RequestV1.Builder
    }
    public func getBuilder() -> Services.Notification.Actions.SendNotification.RequestV1.Builder {
      return classBuilder() as! Services.Notification.Actions.SendNotification.RequestV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Notification.Actions.SendNotification.RequestV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Notification.Actions.SendNotification.RequestV1.Builder()
    }
    public func toBuilder() throws -> Services.Notification.Actions.SendNotification.RequestV1.Builder {
      return try Services.Notification.Actions.SendNotification.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Notification.Actions.SendNotification.RequestV1) throws -> Services.Notification.Actions.SendNotification.RequestV1.Builder {
      return try Services.Notification.Actions.SendNotification.RequestV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasToProfileId {
        output += "\(indent) toProfileId: \(toProfileId) \n"
      }
      if hasNotification {
        output += "\(indent) notification {\n"
        try notification?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      var toProfileIdsElementIndex:Int = 0
      for oneValuetoProfileIds in toProfileIds  {
          output += "\(indent) toProfileIds[\(toProfileIdsElementIndex)]: \(oneValuetoProfileIds)\n"
          toProfileIdsElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasToProfileId {
               hashCode = (hashCode &* 31) &+ toProfileId.hashValue
            }
            if hasNotification {
                if let hashValuenotification = notification?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuenotification
                }
            }
            for oneValuetoProfileIds in toProfileIds {
                hashCode = (hashCode &* 31) &+ oneValuetoProfileIds.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Notification.Actions.SendNotification.RequestV1"
    }
    override public func className() -> String {
        return "Services.Notification.Actions.SendNotification.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Notification.Actions.SendNotification.RequestV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Notification.Actions.SendNotification.RequestV1 = Services.Notification.Actions.SendNotification.RequestV1()
      public func getMessage() -> Services.Notification.Actions.SendNotification.RequestV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Notification.Actions.SendNotification.RequestV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Notification.Actions.SendNotification.RequestV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasToProfileId:Bool {
           get {
                return builderResult.hasToProfileId
           }
      }
      public var toProfileId:String {
           get {
                return builderResult.toProfileId
           }
           set (value) {
               builderResult.hasToProfileId = true
               builderResult.toProfileId = value
           }
      }
      public func setToProfileId(value:String) -> Services.Notification.Actions.SendNotification.RequestV1.Builder {
        self.toProfileId = value
        return self
      }
      public func clearToProfileId() -> Services.Notification.Actions.SendNotification.RequestV1.Builder{
           builderResult.hasToProfileId = false
           builderResult.toProfileId = ""
           return self
      }
      public var hasNotification:Bool {
           get {
               return builderResult.hasNotification
           }
      }
      public var notification:Services.Notification.Containers.NotificationV1! {
           get {
               if notificationBuilder_ != nil {
                  builderResult.notification = notificationBuilder_.getMessage()
               }
               return builderResult.notification
           }
           set (value) {
               builderResult.hasNotification = true
               builderResult.notification = value
           }
      }
      private var notificationBuilder_:Services.Notification.Containers.NotificationV1.Builder! {
           didSet {
              builderResult.hasNotification = true
           }
      }
      public func getNotificationBuilder() -> Services.Notification.Containers.NotificationV1.Builder {
        if notificationBuilder_ == nil {
           notificationBuilder_ = Services.Notification.Containers.NotificationV1.Builder()
           builderResult.notification = notificationBuilder_.getMessage()
           if notification != nil {
              try! notificationBuilder_.mergeFrom(notification)
           }
        }
        return notificationBuilder_
      }
      public func setNotification(value:Services.Notification.Containers.NotificationV1!) -> Services.Notification.Actions.SendNotification.RequestV1.Builder {
        self.notification = value
        return self
      }
      public func mergeNotification(value:Services.Notification.Containers.NotificationV1) throws -> Services.Notification.Actions.SendNotification.RequestV1.Builder {
        if builderResult.hasNotification {
          builderResult.notification = try Services.Notification.Containers.NotificationV1.builderWithPrototype(builderResult.notification).mergeFrom(value).buildPartial()
        } else {
          builderResult.notification = value
        }
        builderResult.hasNotification = true
        return self
      }
      public func clearNotification() -> Services.Notification.Actions.SendNotification.RequestV1.Builder {
        notificationBuilder_ = nil
        builderResult.hasNotification = false
        builderResult.notification = nil
        return self
      }
      public var toProfileIds:Array<String> {
           get {
               return builderResult.toProfileIds
           }
           set (array) {
               builderResult.toProfileIds = array
           }
      }
      public func setToProfileIds(value:Array<String>) -> Services.Notification.Actions.SendNotification.RequestV1.Builder {
        self.toProfileIds = value
        return self
      }
      public func clearToProfileIds() -> Services.Notification.Actions.SendNotification.RequestV1.Builder {
         builderResult.toProfileIds.removeAll(keepCapacity: false)
         return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Notification.Actions.SendNotification.RequestV1.Builder {
        builderResult = Services.Notification.Actions.SendNotification.RequestV1()
        return self
      }
      public override func clone() throws -> Services.Notification.Actions.SendNotification.RequestV1.Builder {
        return try Services.Notification.Actions.SendNotification.RequestV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Notification.Actions.SendNotification.RequestV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Notification.Actions.SendNotification.RequestV1 {
        let returnMe:Services.Notification.Actions.SendNotification.RequestV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Notification.Actions.SendNotification.RequestV1) throws -> Services.Notification.Actions.SendNotification.RequestV1.Builder {
        if other == Services.Notification.Actions.SendNotification.RequestV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasToProfileId {
             toProfileId = other.toProfileId
        }
        if (other.hasNotification) {
            try mergeNotification(other.notification)
        }
        if !other.toProfileIds.isEmpty {
            builderResult.toProfileIds += other.toProfileIds
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Notification.Actions.SendNotification.RequestV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Notification.Actions.SendNotification.RequestV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            toProfileId = try input.readString()

          case 26 :
            let subBuilder:Services.Notification.Containers.NotificationV1.Builder = Services.Notification.Containers.NotificationV1.Builder()
            if hasNotification {
              try subBuilder.mergeFrom(notification)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            notification = subBuilder.buildPartial()

          case 34 :
            toProfileIds += [try input.readString()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Notification.Actions.SendNotification.ResponseV1> {
      var mergedArray = Array<Services.Notification.Actions.SendNotification.ResponseV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Notification.Actions.SendNotification.ResponseV1? {
      return try Services.Notification.Actions.SendNotification.ResponseV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Notification.Actions.SendNotification.ResponseV1 {
      return try Services.Notification.Actions.SendNotification.ResponseV1.Builder().mergeFromData(data, extensionRegistry:Services.Notification.Actions.SendNotification.SendNotificationRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Notification.Actions.SendNotification.ResponseV1 {
      return try Services.Notification.Actions.SendNotification.ResponseV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Notification.Actions.SendNotification.ResponseV1 {
      return try Services.Notification.Actions.SendNotification.ResponseV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Notification.Actions.SendNotification.ResponseV1 {
      return try Services.Notification.Actions.SendNotification.ResponseV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Notification.Actions.SendNotification.ResponseV1 {
      return try Services.Notification.Actions.SendNotification.ResponseV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Notification.Actions.SendNotification.ResponseV1 {
      return try Services.Notification.Actions.SendNotification.ResponseV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Notification.Actions.SendNotification.ResponseV1.Builder {
      return Services.Notification.Actions.SendNotification.ResponseV1.classBuilder() as! Services.Notification.Actions.SendNotification.ResponseV1.Builder
    }
    public func getBuilder() -> Services.Notification.Actions.SendNotification.ResponseV1.Builder {
      return classBuilder() as! Services.Notification.Actions.SendNotification.ResponseV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Notification.Actions.SendNotification.ResponseV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Notification.Actions.SendNotification.ResponseV1.Builder()
    }
    public func toBuilder() throws -> Services.Notification.Actions.SendNotification.ResponseV1.Builder {
      return try Services.Notification.Actions.SendNotification.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Notification.Actions.SendNotification.ResponseV1) throws -> Services.Notification.Actions.SendNotification.ResponseV1.Builder {
      return try Services.Notification.Actions.SendNotification.ResponseV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Notification.Actions.SendNotification.ResponseV1"
    }
    override public func className() -> String {
        return "Services.Notification.Actions.SendNotification.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Notification.Actions.SendNotification.ResponseV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Notification.Actions.SendNotification.ResponseV1 = Services.Notification.Actions.SendNotification.ResponseV1()
      public func getMessage() -> Services.Notification.Actions.SendNotification.ResponseV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Notification.Actions.SendNotification.ResponseV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Notification.Actions.SendNotification.ResponseV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Notification.Actions.SendNotification.ResponseV1.Builder {
        builderResult = Services.Notification.Actions.SendNotification.ResponseV1()
        return self
      }
      public override func clone() throws -> Services.Notification.Actions.SendNotification.ResponseV1.Builder {
        return try Services.Notification.Actions.SendNotification.ResponseV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Notification.Actions.SendNotification.ResponseV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Notification.Actions.SendNotification.ResponseV1 {
        let returnMe:Services.Notification.Actions.SendNotification.ResponseV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Notification.Actions.SendNotification.ResponseV1) throws -> Services.Notification.Actions.SendNotification.ResponseV1.Builder {
        if other == Services.Notification.Actions.SendNotification.ResponseV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Notification.Actions.SendNotification.ResponseV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Notification.Actions.SendNotification.ResponseV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
