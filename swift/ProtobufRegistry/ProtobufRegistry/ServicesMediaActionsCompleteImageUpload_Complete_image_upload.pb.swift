// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
import ProtocolBuffers


internal extension Services{ internal struct Media { internal struct Actions { internal struct CompleteImageUpload { }}}}

internal func == (lhs: Services.Media.Actions.CompleteImageUpload.RequestV1, rhs: Services.Media.Actions.CompleteImageUpload.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasMediaType == rhs.hasMediaType) && (!lhs.hasMediaType || lhs.mediaType == rhs.mediaType)
  fieldCheck = fieldCheck && (lhs.hasMediaKey == rhs.hasMediaKey) && (!lhs.hasMediaKey || lhs.mediaKey == rhs.mediaKey)
  fieldCheck = fieldCheck && (lhs.hasUploadKey == rhs.hasUploadKey) && (!lhs.hasUploadKey || lhs.uploadKey == rhs.uploadKey)
  fieldCheck = fieldCheck && (lhs.hasUploadId == rhs.hasUploadId) && (!lhs.hasUploadId || lhs.uploadId == rhs.uploadId)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Services.Media.Actions.CompleteImageUpload.ResponseV1, rhs: Services.Media.Actions.CompleteImageUpload.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasMediaUrl == rhs.hasMediaUrl) && (!lhs.hasMediaUrl || lhs.mediaUrl == rhs.mediaUrl)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal extension Services.Media.Actions.CompleteImageUpload {
  internal struct CompleteImageUploadRoot {
    internal static var sharedInstance : CompleteImageUploadRoot {
     struct Static {
         static let instance : CompleteImageUploadRoot = CompleteImageUploadRoot()
     }
     return Static.instance
    }
    internal var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Media.Containers.Media.MediaRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    internal func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final internal class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasVersion:Bool = false
    private(set) var version:UInt32 = UInt32(1)

    private(set) var mediaType:Services.Media.Containers.Media.MediaTypeV1 = Services.Media.Containers.Media.MediaTypeV1.Profile
    private(set) var hasMediaType:Bool = false
    private(set) var hasMediaKey:Bool = false
    private(set) var mediaKey:String = ""

    private(set) var hasUploadKey:Bool = false
    private(set) var uploadKey:String = ""

    private(set) var hasUploadId:Bool = false
    private(set) var uploadId:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasMediaType {
        output.writeEnum(2, value:mediaType.rawValue)
      }
      if hasMediaKey {
        output.writeString(3, value:mediaKey)
      }
      if hasUploadKey {
        output.writeString(4, value:uploadKey)
      }
      if hasUploadId {
        output.writeString(5, value:uploadId)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if (hasMediaType) {
        serialize_size += mediaType.rawValue.computeEnumSize(2)
      }
      if hasMediaKey {
        serialize_size += mediaKey.computeStringSize(3)
      }
      if hasUploadKey {
        serialize_size += uploadKey.computeStringSize(4)
      }
      if hasUploadId {
        serialize_size += uploadId.computeStringSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Services.Media.Actions.CompleteImageUpload.RequestV1 {
      return Services.Media.Actions.CompleteImageUpload.RequestV1.builder().mergeFromData(data, extensionRegistry:Services.Media.Actions.CompleteImageUpload.CompleteImageUploadRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Media.Actions.CompleteImageUpload.RequestV1 {
      return Services.Media.Actions.CompleteImageUpload.RequestV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Services.Media.Actions.CompleteImageUpload.RequestV1 {
      return Services.Media.Actions.CompleteImageUpload.RequestV1.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Media.Actions.CompleteImageUpload.RequestV1 {
      return Services.Media.Actions.CompleteImageUpload.RequestV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Media.Actions.CompleteImageUpload.RequestV1 {
      return Services.Media.Actions.CompleteImageUpload.RequestV1.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Media.Actions.CompleteImageUpload.RequestV1 {
      return Services.Media.Actions.CompleteImageUpload.RequestV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Services.Media.Actions.CompleteImageUpload.RequestV1Builder {
      return Services.Media.Actions.CompleteImageUpload.RequestV1.classBuilder() as! Services.Media.Actions.CompleteImageUpload.RequestV1Builder
    }
    internal func builder() -> Services.Media.Actions.CompleteImageUpload.RequestV1Builder {
      return classBuilder() as! Services.Media.Actions.CompleteImageUpload.RequestV1Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Services.Media.Actions.CompleteImageUpload.RequestV1Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Services.Media.Actions.CompleteImageUpload.RequestV1.builder()
    }
    internal func toBuilder() -> Services.Media.Actions.CompleteImageUpload.RequestV1Builder {
      return Services.Media.Actions.CompleteImageUpload.RequestV1.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Services.Media.Actions.CompleteImageUpload.RequestV1) -> Services.Media.Actions.CompleteImageUpload.RequestV1Builder {
      return Services.Media.Actions.CompleteImageUpload.RequestV1.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if (hasMediaType) {
        output += "\(indent) mediaType: \(mediaType.rawValue)\n"
      }
      if hasMediaKey {
        output += "\(indent) mediaKey: \(mediaKey) \n"
      }
      if hasUploadKey {
        output += "\(indent) uploadKey: \(uploadKey) \n"
      }
      if hasUploadId {
        output += "\(indent) uploadId: \(uploadId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasMediaType {
               hashCode = (hashCode &* 31) &+ Int(mediaType.rawValue)
            }
            if hasMediaKey {
               hashCode = (hashCode &* 31) &+ mediaKey.hashValue
            }
            if hasUploadKey {
               hashCode = (hashCode &* 31) &+ uploadKey.hashValue
            }
            if hasUploadId {
               hashCode = (hashCode &* 31) &+ uploadId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Services.Media.Actions.CompleteImageUpload.RequestV1"
    }
    override internal func className() -> String {
        return "Services.Media.Actions.CompleteImageUpload.RequestV1"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Services.Media.Actions.CompleteImageUpload.RequestV1.self
    }
    //Meta information declaration end

  }

  final internal class RequestV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Media.Actions.CompleteImageUpload.RequestV1

    required override internal init () {
       builderResult = Services.Media.Actions.CompleteImageUpload.RequestV1()
       super.init()
    }
    var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    func setVersion(value:UInt32)-> Services.Media.Actions.CompleteImageUpload.RequestV1Builder {
      self.version = value
      return self
    }
    internal func clearVersion() -> Services.Media.Actions.CompleteImageUpload.RequestV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
      var hasMediaType:Bool{
          get {
              return builderResult.hasMediaType
          }
      }
      var mediaType:Services.Media.Containers.Media.MediaTypeV1 {
          get {
              return builderResult.mediaType
          }
          set (value) {
              builderResult.hasMediaType = true
              builderResult.mediaType = value
          }
      }
      internal func setMediaType(value:Services.Media.Containers.Media.MediaTypeV1)-> Services.Media.Actions.CompleteImageUpload.RequestV1Builder {
        self.mediaType = value
        return self
      }
      internal func clearMediaType() -> Services.Media.Actions.CompleteImageUpload.RequestV1Builder {
         builderResult.hasMediaType = false
         builderResult.mediaType = .Profile
         return self
      }
    var hasMediaKey:Bool {
         get {
              return builderResult.hasMediaKey
         }
    }
    var mediaKey:String {
         get {
              return builderResult.mediaKey
         }
         set (value) {
             builderResult.hasMediaKey = true
             builderResult.mediaKey = value
         }
    }
    func setMediaKey(value:String)-> Services.Media.Actions.CompleteImageUpload.RequestV1Builder {
      self.mediaKey = value
      return self
    }
    internal func clearMediaKey() -> Services.Media.Actions.CompleteImageUpload.RequestV1Builder{
         builderResult.hasMediaKey = false
         builderResult.mediaKey = ""
         return self
    }
    var hasUploadKey:Bool {
         get {
              return builderResult.hasUploadKey
         }
    }
    var uploadKey:String {
         get {
              return builderResult.uploadKey
         }
         set (value) {
             builderResult.hasUploadKey = true
             builderResult.uploadKey = value
         }
    }
    func setUploadKey(value:String)-> Services.Media.Actions.CompleteImageUpload.RequestV1Builder {
      self.uploadKey = value
      return self
    }
    internal func clearUploadKey() -> Services.Media.Actions.CompleteImageUpload.RequestV1Builder{
         builderResult.hasUploadKey = false
         builderResult.uploadKey = ""
         return self
    }
    var hasUploadId:Bool {
         get {
              return builderResult.hasUploadId
         }
    }
    var uploadId:String {
         get {
              return builderResult.uploadId
         }
         set (value) {
             builderResult.hasUploadId = true
             builderResult.uploadId = value
         }
    }
    func setUploadId(value:String)-> Services.Media.Actions.CompleteImageUpload.RequestV1Builder {
      self.uploadId = value
      return self
    }
    internal func clearUploadId() -> Services.Media.Actions.CompleteImageUpload.RequestV1Builder{
         builderResult.hasUploadId = false
         builderResult.uploadId = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Services.Media.Actions.CompleteImageUpload.RequestV1Builder {
      builderResult = Services.Media.Actions.CompleteImageUpload.RequestV1()
      return self
    }
    internal override func clone() -> Services.Media.Actions.CompleteImageUpload.RequestV1Builder {
      return Services.Media.Actions.CompleteImageUpload.RequestV1.builderWithPrototype(builderResult)
    }
    internal override func build() -> Services.Media.Actions.CompleteImageUpload.RequestV1 {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Services.Media.Actions.CompleteImageUpload.RequestV1 {
      var returnMe:Services.Media.Actions.CompleteImageUpload.RequestV1 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Services.Media.Actions.CompleteImageUpload.RequestV1) -> Services.Media.Actions.CompleteImageUpload.RequestV1Builder {
      if (other == Services.Media.Actions.CompleteImageUpload.RequestV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasMediaType {
           mediaType = other.mediaType
      }
      if other.hasMediaKey {
           mediaKey = other.mediaKey
      }
      if other.hasUploadKey {
           uploadKey = other.uploadKey
      }
      if other.hasUploadId {
           uploadId = other.uploadId
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Media.Actions.CompleteImageUpload.RequestV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Media.Actions.CompleteImageUpload.RequestV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 16 :
          let valueIntmediaType = input.readEnum()
          if let enumsmediaType = Services.Media.Containers.Media.MediaTypeV1(rawValue:valueIntmediaType){
               mediaType = enumsmediaType
          } else {
               unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntmediaType))
          }

        case 26 :
          mediaKey = input.readString()

        case 34 :
          uploadKey = input.readString()

        case 42 :
          uploadId = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasVersion:Bool = false
    private(set) var version:UInt32 = UInt32(1)

    private(set) var hasMediaUrl:Bool = false
    private(set) var mediaUrl:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasMediaUrl {
        output.writeString(2, value:mediaUrl)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasMediaUrl {
        serialize_size += mediaUrl.computeStringSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Services.Media.Actions.CompleteImageUpload.ResponseV1 {
      return Services.Media.Actions.CompleteImageUpload.ResponseV1.builder().mergeFromData(data, extensionRegistry:Services.Media.Actions.CompleteImageUpload.CompleteImageUploadRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Media.Actions.CompleteImageUpload.ResponseV1 {
      return Services.Media.Actions.CompleteImageUpload.ResponseV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Services.Media.Actions.CompleteImageUpload.ResponseV1 {
      return Services.Media.Actions.CompleteImageUpload.ResponseV1.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Media.Actions.CompleteImageUpload.ResponseV1 {
      return Services.Media.Actions.CompleteImageUpload.ResponseV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Media.Actions.CompleteImageUpload.ResponseV1 {
      return Services.Media.Actions.CompleteImageUpload.ResponseV1.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Media.Actions.CompleteImageUpload.ResponseV1 {
      return Services.Media.Actions.CompleteImageUpload.ResponseV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Services.Media.Actions.CompleteImageUpload.ResponseV1Builder {
      return Services.Media.Actions.CompleteImageUpload.ResponseV1.classBuilder() as! Services.Media.Actions.CompleteImageUpload.ResponseV1Builder
    }
    internal func builder() -> Services.Media.Actions.CompleteImageUpload.ResponseV1Builder {
      return classBuilder() as! Services.Media.Actions.CompleteImageUpload.ResponseV1Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Services.Media.Actions.CompleteImageUpload.ResponseV1Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Services.Media.Actions.CompleteImageUpload.ResponseV1.builder()
    }
    internal func toBuilder() -> Services.Media.Actions.CompleteImageUpload.ResponseV1Builder {
      return Services.Media.Actions.CompleteImageUpload.ResponseV1.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Services.Media.Actions.CompleteImageUpload.ResponseV1) -> Services.Media.Actions.CompleteImageUpload.ResponseV1Builder {
      return Services.Media.Actions.CompleteImageUpload.ResponseV1.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasMediaUrl {
        output += "\(indent) mediaUrl: \(mediaUrl) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasMediaUrl {
               hashCode = (hashCode &* 31) &+ mediaUrl.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Services.Media.Actions.CompleteImageUpload.ResponseV1"
    }
    override internal func className() -> String {
        return "Services.Media.Actions.CompleteImageUpload.ResponseV1"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Services.Media.Actions.CompleteImageUpload.ResponseV1.self
    }
    //Meta information declaration end

  }

  final internal class ResponseV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Media.Actions.CompleteImageUpload.ResponseV1

    required override internal init () {
       builderResult = Services.Media.Actions.CompleteImageUpload.ResponseV1()
       super.init()
    }
    var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    func setVersion(value:UInt32)-> Services.Media.Actions.CompleteImageUpload.ResponseV1Builder {
      self.version = value
      return self
    }
    internal func clearVersion() -> Services.Media.Actions.CompleteImageUpload.ResponseV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    var hasMediaUrl:Bool {
         get {
              return builderResult.hasMediaUrl
         }
    }
    var mediaUrl:String {
         get {
              return builderResult.mediaUrl
         }
         set (value) {
             builderResult.hasMediaUrl = true
             builderResult.mediaUrl = value
         }
    }
    func setMediaUrl(value:String)-> Services.Media.Actions.CompleteImageUpload.ResponseV1Builder {
      self.mediaUrl = value
      return self
    }
    internal func clearMediaUrl() -> Services.Media.Actions.CompleteImageUpload.ResponseV1Builder{
         builderResult.hasMediaUrl = false
         builderResult.mediaUrl = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Services.Media.Actions.CompleteImageUpload.ResponseV1Builder {
      builderResult = Services.Media.Actions.CompleteImageUpload.ResponseV1()
      return self
    }
    internal override func clone() -> Services.Media.Actions.CompleteImageUpload.ResponseV1Builder {
      return Services.Media.Actions.CompleteImageUpload.ResponseV1.builderWithPrototype(builderResult)
    }
    internal override func build() -> Services.Media.Actions.CompleteImageUpload.ResponseV1 {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Services.Media.Actions.CompleteImageUpload.ResponseV1 {
      var returnMe:Services.Media.Actions.CompleteImageUpload.ResponseV1 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Services.Media.Actions.CompleteImageUpload.ResponseV1) -> Services.Media.Actions.CompleteImageUpload.ResponseV1Builder {
      if (other == Services.Media.Actions.CompleteImageUpload.ResponseV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasMediaUrl {
           mediaUrl = other.mediaUrl
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Media.Actions.CompleteImageUpload.ResponseV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Media.Actions.CompleteImageUpload.ResponseV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          mediaUrl = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
