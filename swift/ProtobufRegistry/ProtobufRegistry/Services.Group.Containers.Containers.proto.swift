// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file containers.proto

import Foundation

public extension Services.Group.Containers{}

public func == (lhs: Services.Group.Containers.GroupV1, rhs: Services.Group.Containers.GroupV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasDisplayName == rhs.hasDisplayName) && (!lhs.hasDisplayName || lhs.displayName == rhs.displayName)
  fieldCheck = fieldCheck && (lhs.hasGroupDescription == rhs.hasGroupDescription) && (!lhs.hasGroupDescription || lhs.groupDescription == rhs.groupDescription)
  fieldCheck = fieldCheck && (lhs.aliases == rhs.aliases)
  fieldCheck = fieldCheck && (lhs.hasMembersCount == rhs.hasMembersCount) && (!lhs.hasMembersCount || lhs.membersCount == rhs.membersCount)
  fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
  fieldCheck = fieldCheck && (lhs.hasCanJoin == rhs.hasCanJoin) && (!lhs.hasCanJoin || lhs.canJoin == rhs.canJoin)
  fieldCheck = fieldCheck && (lhs.hasIsMember == rhs.hasIsMember) && (!lhs.hasIsMember || lhs.isMember == rhs.isMember)
  fieldCheck = fieldCheck && (lhs.hasCanRequest == rhs.hasCanRequest) && (!lhs.hasCanRequest || lhs.canRequest == rhs.canRequest)
  fieldCheck = fieldCheck && (lhs.hasIsManager == rhs.hasIsManager) && (!lhs.hasIsManager || lhs.isManager == rhs.isManager)
  fieldCheck = fieldCheck && (lhs.hasHasPendingRequest == rhs.hasHasPendingRequest) && (!lhs.hasHasPendingRequest || lhs.hasPendingRequest == rhs.hasPendingRequest)
  fieldCheck = fieldCheck && (lhs.hasPermissions == rhs.hasPermissions) && (!lhs.hasPermissions || lhs.permissions == rhs.permissions)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Group.Containers.GroupSettingsV1, rhs: Services.Group.Containers.GroupSettingsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasGroupId == rhs.hasGroupId) && (!lhs.hasGroupId || lhs.groupId == rhs.groupId)
  fieldCheck = fieldCheck && (lhs.hasWhoCanJoin == rhs.hasWhoCanJoin) && (!lhs.hasWhoCanJoin || lhs.whoCanJoin == rhs.whoCanJoin)
  fieldCheck = fieldCheck && (lhs.hasWhoCanViewMembership == rhs.hasWhoCanViewMembership) && (!lhs.hasWhoCanViewMembership || lhs.whoCanViewMembership == rhs.whoCanViewMembership)
  fieldCheck = fieldCheck && (lhs.hasWhoCanViewGroup == rhs.hasWhoCanViewGroup) && (!lhs.hasWhoCanViewGroup || lhs.whoCanViewGroup == rhs.whoCanViewGroup)
  fieldCheck = fieldCheck && (lhs.hasWhoCanInvite == rhs.hasWhoCanInvite) && (!lhs.hasWhoCanInvite || lhs.whoCanInvite == rhs.whoCanInvite)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Group.Containers.MemberV1, rhs: Services.Group.Containers.MemberV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasProfile == rhs.hasProfile) && (!lhs.hasProfile || lhs.profile == rhs.profile)
  fieldCheck = fieldCheck && (lhs.hasRole == rhs.hasRole) && (!lhs.hasRole || lhs.role == rhs.role)
  fieldCheck = fieldCheck && (lhs.hasGroupId == rhs.hasGroupId) && (!lhs.hasGroupId || lhs.groupId == rhs.groupId)
  fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
  fieldCheck = fieldCheck && (lhs.hasProviderUid == rhs.hasProviderUid) && (!lhs.hasProviderUid || lhs.providerUid == rhs.providerUid)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Group.Containers.MembershipRequestMetaV1, rhs: Services.Group.Containers.MembershipRequestMetaV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Group.Containers.MembershipRequestV1, rhs: Services.Group.Containers.MembershipRequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
  fieldCheck = fieldCheck && (lhs.hasRequesterProfileId == rhs.hasRequesterProfileId) && (!lhs.hasRequesterProfileId || lhs.requesterProfileId == rhs.requesterProfileId)
  fieldCheck = fieldCheck && (lhs.approverProfileIds == rhs.approverProfileIds)
  fieldCheck = fieldCheck && (lhs.hasGroupId == rhs.hasGroupId) && (!lhs.hasGroupId || lhs.groupId == rhs.groupId)
  fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
  fieldCheck = fieldCheck && (lhs.meta == rhs.meta)
  fieldCheck = fieldCheck && (lhs.hasCreated == rhs.hasCreated) && (!lhs.hasCreated || lhs.created == rhs.created)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Group.Containers {
  public struct ContainersRoot {
    public static var sharedInstance : ContainersRoot {
     struct Static {
         static let instance : ContainersRoot = ContainersRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Common.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Group.Containers.Permissions.WhoCanJoin.WhoCanJoinRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Group.Containers.Permissions.WhoCanViewMembership.WhoCanViewMembershipRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Group.Containers.Permissions.WhoCanViewGroup.WhoCanViewGroupRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Group.Containers.Permissions.WhoCanInvite.WhoCanInviteRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Profile.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }



  //Enum type declaration start 

  public enum GroupProviderV1:Int32 {
    case Google = 0

  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum RoleV1:Int32 {
    case Owner = 0
    case Manager = 1
    case Member = 2

  }

  //Enum type declaration end 



  //Enum type declaration start 

  public enum MembershipRequestStatusV1:Int32 {
    case Pending = 0
    case Approved = 1
    case Denied = 2

  }

  //Enum type declaration end 

  final public class GroupV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasEmail:Bool = false
    public private(set) var email:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasDisplayName:Bool = false
    public private(set) var displayName:String = ""

    public private(set) var hasGroupDescription:Bool = false
    public private(set) var groupDescription:String = ""

    public private(set) var aliases:Array<String> = Array<String>()
    public private(set) var hasMembersCount:Bool = false
    public private(set) var membersCount:UInt32 = UInt32(0)

    public private(set) var provider:Services.Group.Containers.GroupProviderV1 = Services.Group.Containers.GroupProviderV1.Google
    public private(set) var hasProvider:Bool = false
    public private(set) var hasCanJoin:Bool = false
    public private(set) var canJoin:Bool = false

    public private(set) var hasIsMember:Bool = false
    public private(set) var isMember:Bool = false

    public private(set) var hasCanRequest:Bool = false
    public private(set) var canRequest:Bool = false

    public private(set) var hasIsManager:Bool = false
    public private(set) var isManager:Bool = false

    public private(set) var hasHasPendingRequest:Bool = false
    public private(set) var hasPendingRequest:Bool = false

    public private(set) var hasPermissions:Bool = false
    public private(set) var permissions:Services.Common.Containers.PermissionsV1!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasId {
        try output.writeString(2, value:id)
      }
      if hasEmail {
        try output.writeString(3, value:email)
      }
      if hasName {
        try output.writeString(4, value:name)
      }
      if hasDisplayName {
        try output.writeString(5, value:displayName)
      }
      if hasGroupDescription {
        try output.writeString(6, value:groupDescription)
      }
      if !aliases.isEmpty {
        for oneValuealiases in aliases {
          try output.writeString(7, value:oneValuealiases)
        }
      }
      if hasMembersCount {
        try output.writeUInt32(8, value:membersCount)
      }
      if hasProvider {
        try output.writeEnum(9, value:provider.rawValue)
      }
      if hasCanJoin {
        try output.writeBool(10, value:canJoin)
      }
      if hasIsMember {
        try output.writeBool(11, value:isMember)
      }
      if hasCanRequest {
        try output.writeBool(12, value:canRequest)
      }
      if hasIsManager {
        try output.writeBool(13, value:isManager)
      }
      if hasHasPendingRequest {
        try output.writeBool(14, value:hasPendingRequest)
      }
      if hasPermissions {
        try output.writeMessage(15, value:permissions)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasEmail {
        serialize_size += email.computeStringSize(3)
      }
      if hasName {
        serialize_size += name.computeStringSize(4)
      }
      if hasDisplayName {
        serialize_size += displayName.computeStringSize(5)
      }
      if hasGroupDescription {
        serialize_size += groupDescription.computeStringSize(6)
      }
      var dataSizeAliases:Int32 = 0
      for oneValuealiases in aliases {
          dataSizeAliases += oneValuealiases.computeStringSizeNoTag()
      }
      serialize_size += dataSizeAliases
      serialize_size += 1 * Int32(aliases.count)
      if hasMembersCount {
        serialize_size += membersCount.computeUInt32Size(8)
      }
      if (hasProvider) {
        serialize_size += provider.rawValue.computeEnumSize(9)
      }
      if hasCanJoin {
        serialize_size += canJoin.computeBoolSize(10)
      }
      if hasIsMember {
        serialize_size += isMember.computeBoolSize(11)
      }
      if hasCanRequest {
        serialize_size += canRequest.computeBoolSize(12)
      }
      if hasIsManager {
        serialize_size += isManager.computeBoolSize(13)
      }
      if hasHasPendingRequest {
        serialize_size += hasPendingRequest.computeBoolSize(14)
      }
      if hasPermissions {
          if let varSizepermissions = permissions?.computeMessageSize(15) {
              serialize_size += varSizepermissions
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Group.Containers.GroupV1> {
      var mergedArray = Array<Services.Group.Containers.GroupV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Group.Containers.GroupV1? {
      return try Services.Group.Containers.GroupV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Group.Containers.GroupV1 {
      return try Services.Group.Containers.GroupV1.Builder().mergeFromData(data, extensionRegistry:Services.Group.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.GroupV1 {
      return try Services.Group.Containers.GroupV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Group.Containers.GroupV1 {
      return try Services.Group.Containers.GroupV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.GroupV1 {
      return try Services.Group.Containers.GroupV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Group.Containers.GroupV1 {
      return try Services.Group.Containers.GroupV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.GroupV1 {
      return try Services.Group.Containers.GroupV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Group.Containers.GroupV1.Builder {
      return Services.Group.Containers.GroupV1.classBuilder() as! Services.Group.Containers.GroupV1.Builder
    }
    public func getBuilder() -> Services.Group.Containers.GroupV1.Builder {
      return classBuilder() as! Services.Group.Containers.GroupV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Group.Containers.GroupV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Group.Containers.GroupV1.Builder()
    }
    public func toBuilder() throws -> Services.Group.Containers.GroupV1.Builder {
      return try Services.Group.Containers.GroupV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Group.Containers.GroupV1) throws -> Services.Group.Containers.GroupV1.Builder {
      return try Services.Group.Containers.GroupV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasEmail {
        output += "\(indent) email: \(email) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasDisplayName {
        output += "\(indent) displayName: \(displayName) \n"
      }
      if hasGroupDescription {
        output += "\(indent) groupDescription: \(groupDescription) \n"
      }
      var aliasesElementIndex:Int = 0
      for oneValuealiases in aliases  {
          output += "\(indent) aliases[\(aliasesElementIndex)]: \(oneValuealiases)\n"
          aliasesElementIndex++
      }
      if hasMembersCount {
        output += "\(indent) membersCount: \(membersCount) \n"
      }
      if (hasProvider) {
        output += "\(indent) provider: \(provider.rawValue)\n"
      }
      if hasCanJoin {
        output += "\(indent) canJoin: \(canJoin) \n"
      }
      if hasIsMember {
        output += "\(indent) isMember: \(isMember) \n"
      }
      if hasCanRequest {
        output += "\(indent) canRequest: \(canRequest) \n"
      }
      if hasIsManager {
        output += "\(indent) isManager: \(isManager) \n"
      }
      if hasHasPendingRequest {
        output += "\(indent) hasPendingRequest: \(hasPendingRequest) \n"
      }
      if hasPermissions {
        output += "\(indent) permissions {\n"
        try permissions?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasEmail {
               hashCode = (hashCode &* 31) &+ email.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasDisplayName {
               hashCode = (hashCode &* 31) &+ displayName.hashValue
            }
            if hasGroupDescription {
               hashCode = (hashCode &* 31) &+ groupDescription.hashValue
            }
            for oneValuealiases in aliases {
                hashCode = (hashCode &* 31) &+ oneValuealiases.hashValue
            }
            if hasMembersCount {
               hashCode = (hashCode &* 31) &+ membersCount.hashValue
            }
            if hasProvider {
               hashCode = (hashCode &* 31) &+ Int(provider.rawValue)
            }
            if hasCanJoin {
               hashCode = (hashCode &* 31) &+ canJoin.hashValue
            }
            if hasIsMember {
               hashCode = (hashCode &* 31) &+ isMember.hashValue
            }
            if hasCanRequest {
               hashCode = (hashCode &* 31) &+ canRequest.hashValue
            }
            if hasIsManager {
               hashCode = (hashCode &* 31) &+ isManager.hashValue
            }
            if hasHasPendingRequest {
               hashCode = (hashCode &* 31) &+ hasPendingRequest.hashValue
            }
            if hasPermissions {
                if let hashValuepermissions = permissions?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepermissions
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Group.Containers.GroupV1"
    }
    override public func className() -> String {
        return "Services.Group.Containers.GroupV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Group.Containers.GroupV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Group.Containers.GroupV1 = Services.Group.Containers.GroupV1()
      public func getMessage() -> Services.Group.Containers.GroupV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Group.Containers.GroupV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Group.Containers.GroupV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Services.Group.Containers.GroupV1.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.Group.Containers.GroupV1.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasEmail:Bool {
           get {
                return builderResult.hasEmail
           }
      }
      public var email:String {
           get {
                return builderResult.email
           }
           set (value) {
               builderResult.hasEmail = true
               builderResult.email = value
           }
      }
      public func setEmail(value:String) -> Services.Group.Containers.GroupV1.Builder {
        self.email = value
        return self
      }
      public func clearEmail() -> Services.Group.Containers.GroupV1.Builder{
           builderResult.hasEmail = false
           builderResult.email = ""
           return self
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(value:String) -> Services.Group.Containers.GroupV1.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Services.Group.Containers.GroupV1.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasDisplayName:Bool {
           get {
                return builderResult.hasDisplayName
           }
      }
      public var displayName:String {
           get {
                return builderResult.displayName
           }
           set (value) {
               builderResult.hasDisplayName = true
               builderResult.displayName = value
           }
      }
      public func setDisplayName(value:String) -> Services.Group.Containers.GroupV1.Builder {
        self.displayName = value
        return self
      }
      public func clearDisplayName() -> Services.Group.Containers.GroupV1.Builder{
           builderResult.hasDisplayName = false
           builderResult.displayName = ""
           return self
      }
      public var hasGroupDescription:Bool {
           get {
                return builderResult.hasGroupDescription
           }
      }
      public var groupDescription:String {
           get {
                return builderResult.groupDescription
           }
           set (value) {
               builderResult.hasGroupDescription = true
               builderResult.groupDescription = value
           }
      }
      public func setGroupDescription(value:String) -> Services.Group.Containers.GroupV1.Builder {
        self.groupDescription = value
        return self
      }
      public func clearGroupDescription() -> Services.Group.Containers.GroupV1.Builder{
           builderResult.hasGroupDescription = false
           builderResult.groupDescription = ""
           return self
      }
      public var aliases:Array<String> {
           get {
               return builderResult.aliases
           }
           set (array) {
               builderResult.aliases = array
           }
      }
      public func setAliases(value:Array<String>) -> Services.Group.Containers.GroupV1.Builder {
        self.aliases = value
        return self
      }
      public func clearAliases() -> Services.Group.Containers.GroupV1.Builder {
         builderResult.aliases.removeAll(keepCapacity: false)
         return self
      }
      public var hasMembersCount:Bool {
           get {
                return builderResult.hasMembersCount
           }
      }
      public var membersCount:UInt32 {
           get {
                return builderResult.membersCount
           }
           set (value) {
               builderResult.hasMembersCount = true
               builderResult.membersCount = value
           }
      }
      public func setMembersCount(value:UInt32) -> Services.Group.Containers.GroupV1.Builder {
        self.membersCount = value
        return self
      }
      public func clearMembersCount() -> Services.Group.Containers.GroupV1.Builder{
           builderResult.hasMembersCount = false
           builderResult.membersCount = UInt32(0)
           return self
      }
        public var hasProvider:Bool{
            get {
                return builderResult.hasProvider
            }
        }
        public var provider:Services.Group.Containers.GroupProviderV1 {
            get {
                return builderResult.provider
            }
            set (value) {
                builderResult.hasProvider = true
                builderResult.provider = value
            }
        }
        public func setProvider(value:Services.Group.Containers.GroupProviderV1) -> Services.Group.Containers.GroupV1.Builder {
          self.provider = value
          return self
        }
        public func clearProvider() -> Services.Group.Containers.GroupV1.Builder {
           builderResult.hasProvider = false
           builderResult.provider = .Google
           return self
        }
      public var hasCanJoin:Bool {
           get {
                return builderResult.hasCanJoin
           }
      }
      public var canJoin:Bool {
           get {
                return builderResult.canJoin
           }
           set (value) {
               builderResult.hasCanJoin = true
               builderResult.canJoin = value
           }
      }
      public func setCanJoin(value:Bool) -> Services.Group.Containers.GroupV1.Builder {
        self.canJoin = value
        return self
      }
      public func clearCanJoin() -> Services.Group.Containers.GroupV1.Builder{
           builderResult.hasCanJoin = false
           builderResult.canJoin = false
           return self
      }
      public var hasIsMember:Bool {
           get {
                return builderResult.hasIsMember
           }
      }
      public var isMember:Bool {
           get {
                return builderResult.isMember
           }
           set (value) {
               builderResult.hasIsMember = true
               builderResult.isMember = value
           }
      }
      public func setIsMember(value:Bool) -> Services.Group.Containers.GroupV1.Builder {
        self.isMember = value
        return self
      }
      public func clearIsMember() -> Services.Group.Containers.GroupV1.Builder{
           builderResult.hasIsMember = false
           builderResult.isMember = false
           return self
      }
      public var hasCanRequest:Bool {
           get {
                return builderResult.hasCanRequest
           }
      }
      public var canRequest:Bool {
           get {
                return builderResult.canRequest
           }
           set (value) {
               builderResult.hasCanRequest = true
               builderResult.canRequest = value
           }
      }
      public func setCanRequest(value:Bool) -> Services.Group.Containers.GroupV1.Builder {
        self.canRequest = value
        return self
      }
      public func clearCanRequest() -> Services.Group.Containers.GroupV1.Builder{
           builderResult.hasCanRequest = false
           builderResult.canRequest = false
           return self
      }
      public var hasIsManager:Bool {
           get {
                return builderResult.hasIsManager
           }
      }
      public var isManager:Bool {
           get {
                return builderResult.isManager
           }
           set (value) {
               builderResult.hasIsManager = true
               builderResult.isManager = value
           }
      }
      public func setIsManager(value:Bool) -> Services.Group.Containers.GroupV1.Builder {
        self.isManager = value
        return self
      }
      public func clearIsManager() -> Services.Group.Containers.GroupV1.Builder{
           builderResult.hasIsManager = false
           builderResult.isManager = false
           return self
      }
      public var hasHasPendingRequest:Bool {
           get {
                return builderResult.hasHasPendingRequest
           }
      }
      public var hasPendingRequest:Bool {
           get {
                return builderResult.hasPendingRequest
           }
           set (value) {
               builderResult.hasHasPendingRequest = true
               builderResult.hasPendingRequest = value
           }
      }
      public func setHasPendingRequest(value:Bool) -> Services.Group.Containers.GroupV1.Builder {
        self.hasPendingRequest = value
        return self
      }
      public func clearHasPendingRequest() -> Services.Group.Containers.GroupV1.Builder{
           builderResult.hasHasPendingRequest = false
           builderResult.hasPendingRequest = false
           return self
      }
      public var hasPermissions:Bool {
           get {
               return builderResult.hasPermissions
           }
      }
      public var permissions:Services.Common.Containers.PermissionsV1! {
           get {
               if permissionsBuilder_ != nil {
                  builderResult.permissions = permissionsBuilder_.getMessage()
               }
               return builderResult.permissions
           }
           set (value) {
               builderResult.hasPermissions = true
               builderResult.permissions = value
           }
      }
      private var permissionsBuilder_:Services.Common.Containers.PermissionsV1.Builder! {
           didSet {
              builderResult.hasPermissions = true
           }
      }
      public func getPermissionsBuilder() -> Services.Common.Containers.PermissionsV1.Builder {
        if permissionsBuilder_ == nil {
           permissionsBuilder_ = Services.Common.Containers.PermissionsV1.Builder()
           builderResult.permissions = permissionsBuilder_.getMessage()
           if permissions != nil {
              try! permissionsBuilder_.mergeFrom(permissions)
           }
        }
        return permissionsBuilder_
      }
      public func setPermissions(value:Services.Common.Containers.PermissionsV1!) -> Services.Group.Containers.GroupV1.Builder {
        self.permissions = value
        return self
      }
      public func mergePermissions(value:Services.Common.Containers.PermissionsV1) throws -> Services.Group.Containers.GroupV1.Builder {
        if builderResult.hasPermissions {
          builderResult.permissions = try Services.Common.Containers.PermissionsV1.builderWithPrototype(builderResult.permissions).mergeFrom(value).buildPartial()
        } else {
          builderResult.permissions = value
        }
        builderResult.hasPermissions = true
        return self
      }
      public func clearPermissions() -> Services.Group.Containers.GroupV1.Builder {
        permissionsBuilder_ = nil
        builderResult.hasPermissions = false
        builderResult.permissions = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Group.Containers.GroupV1.Builder {
        builderResult = Services.Group.Containers.GroupV1()
        return self
      }
      public override func clone() throws -> Services.Group.Containers.GroupV1.Builder {
        return try Services.Group.Containers.GroupV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Group.Containers.GroupV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Group.Containers.GroupV1 {
        let returnMe:Services.Group.Containers.GroupV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Group.Containers.GroupV1) throws -> Services.Group.Containers.GroupV1.Builder {
        if other == Services.Group.Containers.GroupV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasId {
             id = other.id
        }
        if other.hasEmail {
             email = other.email
        }
        if other.hasName {
             name = other.name
        }
        if other.hasDisplayName {
             displayName = other.displayName
        }
        if other.hasGroupDescription {
             groupDescription = other.groupDescription
        }
        if !other.aliases.isEmpty {
            builderResult.aliases += other.aliases
        }
        if other.hasMembersCount {
             membersCount = other.membersCount
        }
        if other.hasProvider {
             provider = other.provider
        }
        if other.hasCanJoin {
             canJoin = other.canJoin
        }
        if other.hasIsMember {
             isMember = other.isMember
        }
        if other.hasCanRequest {
             canRequest = other.canRequest
        }
        if other.hasIsManager {
             isManager = other.isManager
        }
        if other.hasHasPendingRequest {
             hasPendingRequest = other.hasPendingRequest
        }
        if (other.hasPermissions) {
            try mergePermissions(other.permissions)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Group.Containers.GroupV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.GroupV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            id = try input.readString()

          case 26 :
            email = try input.readString()

          case 34 :
            name = try input.readString()

          case 42 :
            displayName = try input.readString()

          case 50 :
            groupDescription = try input.readString()

          case 58 :
            aliases += [try input.readString()]

          case 64 :
            membersCount = try input.readUInt32()

          case 72 :
            let valueIntprovider = try input.readEnum()
            if let enumsprovider = Services.Group.Containers.GroupProviderV1(rawValue:valueIntprovider){
                 provider = enumsprovider
            } else {
                 try unknownFieldsBuilder.mergeVarintField(9, value:Int64(valueIntprovider))
            }

          case 80 :
            canJoin = try input.readBool()

          case 88 :
            isMember = try input.readBool()

          case 96 :
            canRequest = try input.readBool()

          case 104 :
            isManager = try input.readBool()

          case 112 :
            hasPendingRequest = try input.readBool()

          case 122 :
            let subBuilder:Services.Common.Containers.PermissionsV1.Builder = Services.Common.Containers.PermissionsV1.Builder()
            if hasPermissions {
              try subBuilder.mergeFrom(permissions)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            permissions = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class GroupSettingsV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasGroupId:Bool = false
    public private(set) var groupId:String = ""

    public private(set) var whoCanJoin:Services.Group.Containers.Permissions.WhoCanJoin.WhoCanJoinPermissionsV1 = Services.Group.Containers.Permissions.WhoCanJoin.WhoCanJoinPermissionsV1.Anyone
    public private(set) var hasWhoCanJoin:Bool = false
    public private(set) var whoCanViewMembership:Services.Group.Containers.Permissions.WhoCanViewMembership.WhoCanViewMembershipPermissionsV1 = Services.Group.Containers.Permissions.WhoCanViewMembership.WhoCanViewMembershipPermissionsV1.AllInDomain
    public private(set) var hasWhoCanViewMembership:Bool = false
    public private(set) var whoCanViewGroup:Services.Group.Containers.Permissions.WhoCanViewGroup.WhoCanViewGroupPermissionsV1 = Services.Group.Containers.Permissions.WhoCanViewGroup.WhoCanViewGroupPermissionsV1.Anyone
    public private(set) var hasWhoCanViewGroup:Bool = false
    public private(set) var whoCanInvite:Services.Group.Containers.Permissions.WhoCanInvite.WhoCanInvitePermissionsV1 = Services.Group.Containers.Permissions.WhoCanInvite.WhoCanInvitePermissionsV1.AllMembers
    public private(set) var hasWhoCanInvite:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasId {
        try output.writeString(2, value:id)
      }
      if hasGroupId {
        try output.writeString(3, value:groupId)
      }
      if hasWhoCanJoin {
        try output.writeEnum(4, value:whoCanJoin.rawValue)
      }
      if hasWhoCanViewMembership {
        try output.writeEnum(5, value:whoCanViewMembership.rawValue)
      }
      if hasWhoCanViewGroup {
        try output.writeEnum(6, value:whoCanViewGroup.rawValue)
      }
      if hasWhoCanInvite {
        try output.writeEnum(7, value:whoCanInvite.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasGroupId {
        serialize_size += groupId.computeStringSize(3)
      }
      if (hasWhoCanJoin) {
        serialize_size += whoCanJoin.rawValue.computeEnumSize(4)
      }
      if (hasWhoCanViewMembership) {
        serialize_size += whoCanViewMembership.rawValue.computeEnumSize(5)
      }
      if (hasWhoCanViewGroup) {
        serialize_size += whoCanViewGroup.rawValue.computeEnumSize(6)
      }
      if (hasWhoCanInvite) {
        serialize_size += whoCanInvite.rawValue.computeEnumSize(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Group.Containers.GroupSettingsV1> {
      var mergedArray = Array<Services.Group.Containers.GroupSettingsV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Group.Containers.GroupSettingsV1? {
      return try Services.Group.Containers.GroupSettingsV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Group.Containers.GroupSettingsV1 {
      return try Services.Group.Containers.GroupSettingsV1.Builder().mergeFromData(data, extensionRegistry:Services.Group.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.GroupSettingsV1 {
      return try Services.Group.Containers.GroupSettingsV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Group.Containers.GroupSettingsV1 {
      return try Services.Group.Containers.GroupSettingsV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.GroupSettingsV1 {
      return try Services.Group.Containers.GroupSettingsV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Group.Containers.GroupSettingsV1 {
      return try Services.Group.Containers.GroupSettingsV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.GroupSettingsV1 {
      return try Services.Group.Containers.GroupSettingsV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Group.Containers.GroupSettingsV1.Builder {
      return Services.Group.Containers.GroupSettingsV1.classBuilder() as! Services.Group.Containers.GroupSettingsV1.Builder
    }
    public func getBuilder() -> Services.Group.Containers.GroupSettingsV1.Builder {
      return classBuilder() as! Services.Group.Containers.GroupSettingsV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Group.Containers.GroupSettingsV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Group.Containers.GroupSettingsV1.Builder()
    }
    public func toBuilder() throws -> Services.Group.Containers.GroupSettingsV1.Builder {
      return try Services.Group.Containers.GroupSettingsV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Group.Containers.GroupSettingsV1) throws -> Services.Group.Containers.GroupSettingsV1.Builder {
      return try Services.Group.Containers.GroupSettingsV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasGroupId {
        output += "\(indent) groupId: \(groupId) \n"
      }
      if (hasWhoCanJoin) {
        output += "\(indent) whoCanJoin: \(whoCanJoin.rawValue)\n"
      }
      if (hasWhoCanViewMembership) {
        output += "\(indent) whoCanViewMembership: \(whoCanViewMembership.rawValue)\n"
      }
      if (hasWhoCanViewGroup) {
        output += "\(indent) whoCanViewGroup: \(whoCanViewGroup.rawValue)\n"
      }
      if (hasWhoCanInvite) {
        output += "\(indent) whoCanInvite: \(whoCanInvite.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasGroupId {
               hashCode = (hashCode &* 31) &+ groupId.hashValue
            }
            if hasWhoCanJoin {
               hashCode = (hashCode &* 31) &+ Int(whoCanJoin.rawValue)
            }
            if hasWhoCanViewMembership {
               hashCode = (hashCode &* 31) &+ Int(whoCanViewMembership.rawValue)
            }
            if hasWhoCanViewGroup {
               hashCode = (hashCode &* 31) &+ Int(whoCanViewGroup.rawValue)
            }
            if hasWhoCanInvite {
               hashCode = (hashCode &* 31) &+ Int(whoCanInvite.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Group.Containers.GroupSettingsV1"
    }
    override public func className() -> String {
        return "Services.Group.Containers.GroupSettingsV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Group.Containers.GroupSettingsV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Group.Containers.GroupSettingsV1 = Services.Group.Containers.GroupSettingsV1()
      public func getMessage() -> Services.Group.Containers.GroupSettingsV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Group.Containers.GroupSettingsV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Group.Containers.GroupSettingsV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Services.Group.Containers.GroupSettingsV1.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.Group.Containers.GroupSettingsV1.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasGroupId:Bool {
           get {
                return builderResult.hasGroupId
           }
      }
      public var groupId:String {
           get {
                return builderResult.groupId
           }
           set (value) {
               builderResult.hasGroupId = true
               builderResult.groupId = value
           }
      }
      public func setGroupId(value:String) -> Services.Group.Containers.GroupSettingsV1.Builder {
        self.groupId = value
        return self
      }
      public func clearGroupId() -> Services.Group.Containers.GroupSettingsV1.Builder{
           builderResult.hasGroupId = false
           builderResult.groupId = ""
           return self
      }
        public var hasWhoCanJoin:Bool{
            get {
                return builderResult.hasWhoCanJoin
            }
        }
        public var whoCanJoin:Services.Group.Containers.Permissions.WhoCanJoin.WhoCanJoinPermissionsV1 {
            get {
                return builderResult.whoCanJoin
            }
            set (value) {
                builderResult.hasWhoCanJoin = true
                builderResult.whoCanJoin = value
            }
        }
        public func setWhoCanJoin(value:Services.Group.Containers.Permissions.WhoCanJoin.WhoCanJoinPermissionsV1) -> Services.Group.Containers.GroupSettingsV1.Builder {
          self.whoCanJoin = value
          return self
        }
        public func clearWhoCanJoin() -> Services.Group.Containers.GroupSettingsV1.Builder {
           builderResult.hasWhoCanJoin = false
           builderResult.whoCanJoin = .Anyone
           return self
        }
        public var hasWhoCanViewMembership:Bool{
            get {
                return builderResult.hasWhoCanViewMembership
            }
        }
        public var whoCanViewMembership:Services.Group.Containers.Permissions.WhoCanViewMembership.WhoCanViewMembershipPermissionsV1 {
            get {
                return builderResult.whoCanViewMembership
            }
            set (value) {
                builderResult.hasWhoCanViewMembership = true
                builderResult.whoCanViewMembership = value
            }
        }
        public func setWhoCanViewMembership(value:Services.Group.Containers.Permissions.WhoCanViewMembership.WhoCanViewMembershipPermissionsV1) -> Services.Group.Containers.GroupSettingsV1.Builder {
          self.whoCanViewMembership = value
          return self
        }
        public func clearWhoCanViewMembership() -> Services.Group.Containers.GroupSettingsV1.Builder {
           builderResult.hasWhoCanViewMembership = false
           builderResult.whoCanViewMembership = .AllInDomain
           return self
        }
        public var hasWhoCanViewGroup:Bool{
            get {
                return builderResult.hasWhoCanViewGroup
            }
        }
        public var whoCanViewGroup:Services.Group.Containers.Permissions.WhoCanViewGroup.WhoCanViewGroupPermissionsV1 {
            get {
                return builderResult.whoCanViewGroup
            }
            set (value) {
                builderResult.hasWhoCanViewGroup = true
                builderResult.whoCanViewGroup = value
            }
        }
        public func setWhoCanViewGroup(value:Services.Group.Containers.Permissions.WhoCanViewGroup.WhoCanViewGroupPermissionsV1) -> Services.Group.Containers.GroupSettingsV1.Builder {
          self.whoCanViewGroup = value
          return self
        }
        public func clearWhoCanViewGroup() -> Services.Group.Containers.GroupSettingsV1.Builder {
           builderResult.hasWhoCanViewGroup = false
           builderResult.whoCanViewGroup = .Anyone
           return self
        }
        public var hasWhoCanInvite:Bool{
            get {
                return builderResult.hasWhoCanInvite
            }
        }
        public var whoCanInvite:Services.Group.Containers.Permissions.WhoCanInvite.WhoCanInvitePermissionsV1 {
            get {
                return builderResult.whoCanInvite
            }
            set (value) {
                builderResult.hasWhoCanInvite = true
                builderResult.whoCanInvite = value
            }
        }
        public func setWhoCanInvite(value:Services.Group.Containers.Permissions.WhoCanInvite.WhoCanInvitePermissionsV1) -> Services.Group.Containers.GroupSettingsV1.Builder {
          self.whoCanInvite = value
          return self
        }
        public func clearWhoCanInvite() -> Services.Group.Containers.GroupSettingsV1.Builder {
           builderResult.hasWhoCanInvite = false
           builderResult.whoCanInvite = .AllMembers
           return self
        }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Group.Containers.GroupSettingsV1.Builder {
        builderResult = Services.Group.Containers.GroupSettingsV1()
        return self
      }
      public override func clone() throws -> Services.Group.Containers.GroupSettingsV1.Builder {
        return try Services.Group.Containers.GroupSettingsV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Group.Containers.GroupSettingsV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Group.Containers.GroupSettingsV1 {
        let returnMe:Services.Group.Containers.GroupSettingsV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Group.Containers.GroupSettingsV1) throws -> Services.Group.Containers.GroupSettingsV1.Builder {
        if other == Services.Group.Containers.GroupSettingsV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasId {
             id = other.id
        }
        if other.hasGroupId {
             groupId = other.groupId
        }
        if other.hasWhoCanJoin {
             whoCanJoin = other.whoCanJoin
        }
        if other.hasWhoCanViewMembership {
             whoCanViewMembership = other.whoCanViewMembership
        }
        if other.hasWhoCanViewGroup {
             whoCanViewGroup = other.whoCanViewGroup
        }
        if other.hasWhoCanInvite {
             whoCanInvite = other.whoCanInvite
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Group.Containers.GroupSettingsV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.GroupSettingsV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            id = try input.readString()

          case 26 :
            groupId = try input.readString()

          case 32 :
            let valueIntwhoCanJoin = try input.readEnum()
            if let enumswhoCanJoin = Services.Group.Containers.Permissions.WhoCanJoin.WhoCanJoinPermissionsV1(rawValue:valueIntwhoCanJoin){
                 whoCanJoin = enumswhoCanJoin
            } else {
                 try unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntwhoCanJoin))
            }

          case 40 :
            let valueIntwhoCanViewMembership = try input.readEnum()
            if let enumswhoCanViewMembership = Services.Group.Containers.Permissions.WhoCanViewMembership.WhoCanViewMembershipPermissionsV1(rawValue:valueIntwhoCanViewMembership){
                 whoCanViewMembership = enumswhoCanViewMembership
            } else {
                 try unknownFieldsBuilder.mergeVarintField(5, value:Int64(valueIntwhoCanViewMembership))
            }

          case 48 :
            let valueIntwhoCanViewGroup = try input.readEnum()
            if let enumswhoCanViewGroup = Services.Group.Containers.Permissions.WhoCanViewGroup.WhoCanViewGroupPermissionsV1(rawValue:valueIntwhoCanViewGroup){
                 whoCanViewGroup = enumswhoCanViewGroup
            } else {
                 try unknownFieldsBuilder.mergeVarintField(6, value:Int64(valueIntwhoCanViewGroup))
            }

          case 56 :
            let valueIntwhoCanInvite = try input.readEnum()
            if let enumswhoCanInvite = Services.Group.Containers.Permissions.WhoCanInvite.WhoCanInvitePermissionsV1(rawValue:valueIntwhoCanInvite){
                 whoCanInvite = enumswhoCanInvite
            } else {
                 try unknownFieldsBuilder.mergeVarintField(7, value:Int64(valueIntwhoCanInvite))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class MemberV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasProfile:Bool = false
    public private(set) var profile:Services.Profile.Containers.ProfileV1!
    public private(set) var role:Services.Group.Containers.RoleV1 = Services.Group.Containers.RoleV1.Owner
    public private(set) var hasRole:Bool = false
    public private(set) var hasGroupId:Bool = false
    public private(set) var groupId:String = ""

    public private(set) var provider:Services.Group.Containers.GroupProviderV1 = Services.Group.Containers.GroupProviderV1.Google
    public private(set) var hasProvider:Bool = false
    public private(set) var hasProviderUid:Bool = false
    public private(set) var providerUid:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasId {
        try output.writeString(2, value:id)
      }
      if hasProfile {
        try output.writeMessage(3, value:profile)
      }
      if hasRole {
        try output.writeEnum(4, value:role.rawValue)
      }
      if hasGroupId {
        try output.writeString(5, value:groupId)
      }
      if hasProvider {
        try output.writeEnum(6, value:provider.rawValue)
      }
      if hasProviderUid {
        try output.writeString(7, value:providerUid)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasProfile {
          if let varSizeprofile = profile?.computeMessageSize(3) {
              serialize_size += varSizeprofile
          }
      }
      if (hasRole) {
        serialize_size += role.rawValue.computeEnumSize(4)
      }
      if hasGroupId {
        serialize_size += groupId.computeStringSize(5)
      }
      if (hasProvider) {
        serialize_size += provider.rawValue.computeEnumSize(6)
      }
      if hasProviderUid {
        serialize_size += providerUid.computeStringSize(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Group.Containers.MemberV1> {
      var mergedArray = Array<Services.Group.Containers.MemberV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Group.Containers.MemberV1? {
      return try Services.Group.Containers.MemberV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Group.Containers.MemberV1 {
      return try Services.Group.Containers.MemberV1.Builder().mergeFromData(data, extensionRegistry:Services.Group.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.MemberV1 {
      return try Services.Group.Containers.MemberV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Group.Containers.MemberV1 {
      return try Services.Group.Containers.MemberV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.MemberV1 {
      return try Services.Group.Containers.MemberV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Group.Containers.MemberV1 {
      return try Services.Group.Containers.MemberV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.MemberV1 {
      return try Services.Group.Containers.MemberV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Group.Containers.MemberV1.Builder {
      return Services.Group.Containers.MemberV1.classBuilder() as! Services.Group.Containers.MemberV1.Builder
    }
    public func getBuilder() -> Services.Group.Containers.MemberV1.Builder {
      return classBuilder() as! Services.Group.Containers.MemberV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Group.Containers.MemberV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Group.Containers.MemberV1.Builder()
    }
    public func toBuilder() throws -> Services.Group.Containers.MemberV1.Builder {
      return try Services.Group.Containers.MemberV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Group.Containers.MemberV1) throws -> Services.Group.Containers.MemberV1.Builder {
      return try Services.Group.Containers.MemberV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasProfile {
        output += "\(indent) profile {\n"
        try profile?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if (hasRole) {
        output += "\(indent) role: \(role.rawValue)\n"
      }
      if hasGroupId {
        output += "\(indent) groupId: \(groupId) \n"
      }
      if (hasProvider) {
        output += "\(indent) provider: \(provider.rawValue)\n"
      }
      if hasProviderUid {
        output += "\(indent) providerUid: \(providerUid) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasProfile {
                if let hashValueprofile = profile?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueprofile
                }
            }
            if hasRole {
               hashCode = (hashCode &* 31) &+ Int(role.rawValue)
            }
            if hasGroupId {
               hashCode = (hashCode &* 31) &+ groupId.hashValue
            }
            if hasProvider {
               hashCode = (hashCode &* 31) &+ Int(provider.rawValue)
            }
            if hasProviderUid {
               hashCode = (hashCode &* 31) &+ providerUid.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Group.Containers.MemberV1"
    }
    override public func className() -> String {
        return "Services.Group.Containers.MemberV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Group.Containers.MemberV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Group.Containers.MemberV1 = Services.Group.Containers.MemberV1()
      public func getMessage() -> Services.Group.Containers.MemberV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Group.Containers.MemberV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Group.Containers.MemberV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Services.Group.Containers.MemberV1.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.Group.Containers.MemberV1.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasProfile:Bool {
           get {
               return builderResult.hasProfile
           }
      }
      public var profile:Services.Profile.Containers.ProfileV1! {
           get {
               if profileBuilder_ != nil {
                  builderResult.profile = profileBuilder_.getMessage()
               }
               return builderResult.profile
           }
           set (value) {
               builderResult.hasProfile = true
               builderResult.profile = value
           }
      }
      private var profileBuilder_:Services.Profile.Containers.ProfileV1.Builder! {
           didSet {
              builderResult.hasProfile = true
           }
      }
      public func getProfileBuilder() -> Services.Profile.Containers.ProfileV1.Builder {
        if profileBuilder_ == nil {
           profileBuilder_ = Services.Profile.Containers.ProfileV1.Builder()
           builderResult.profile = profileBuilder_.getMessage()
           if profile != nil {
              try! profileBuilder_.mergeFrom(profile)
           }
        }
        return profileBuilder_
      }
      public func setProfile(value:Services.Profile.Containers.ProfileV1!) -> Services.Group.Containers.MemberV1.Builder {
        self.profile = value
        return self
      }
      public func mergeProfile(value:Services.Profile.Containers.ProfileV1) throws -> Services.Group.Containers.MemberV1.Builder {
        if builderResult.hasProfile {
          builderResult.profile = try Services.Profile.Containers.ProfileV1.builderWithPrototype(builderResult.profile).mergeFrom(value).buildPartial()
        } else {
          builderResult.profile = value
        }
        builderResult.hasProfile = true
        return self
      }
      public func clearProfile() -> Services.Group.Containers.MemberV1.Builder {
        profileBuilder_ = nil
        builderResult.hasProfile = false
        builderResult.profile = nil
        return self
      }
        public var hasRole:Bool{
            get {
                return builderResult.hasRole
            }
        }
        public var role:Services.Group.Containers.RoleV1 {
            get {
                return builderResult.role
            }
            set (value) {
                builderResult.hasRole = true
                builderResult.role = value
            }
        }
        public func setRole(value:Services.Group.Containers.RoleV1) -> Services.Group.Containers.MemberV1.Builder {
          self.role = value
          return self
        }
        public func clearRole() -> Services.Group.Containers.MemberV1.Builder {
           builderResult.hasRole = false
           builderResult.role = .Owner
           return self
        }
      public var hasGroupId:Bool {
           get {
                return builderResult.hasGroupId
           }
      }
      public var groupId:String {
           get {
                return builderResult.groupId
           }
           set (value) {
               builderResult.hasGroupId = true
               builderResult.groupId = value
           }
      }
      public func setGroupId(value:String) -> Services.Group.Containers.MemberV1.Builder {
        self.groupId = value
        return self
      }
      public func clearGroupId() -> Services.Group.Containers.MemberV1.Builder{
           builderResult.hasGroupId = false
           builderResult.groupId = ""
           return self
      }
        public var hasProvider:Bool{
            get {
                return builderResult.hasProvider
            }
        }
        public var provider:Services.Group.Containers.GroupProviderV1 {
            get {
                return builderResult.provider
            }
            set (value) {
                builderResult.hasProvider = true
                builderResult.provider = value
            }
        }
        public func setProvider(value:Services.Group.Containers.GroupProviderV1) -> Services.Group.Containers.MemberV1.Builder {
          self.provider = value
          return self
        }
        public func clearProvider() -> Services.Group.Containers.MemberV1.Builder {
           builderResult.hasProvider = false
           builderResult.provider = .Google
           return self
        }
      public var hasProviderUid:Bool {
           get {
                return builderResult.hasProviderUid
           }
      }
      public var providerUid:String {
           get {
                return builderResult.providerUid
           }
           set (value) {
               builderResult.hasProviderUid = true
               builderResult.providerUid = value
           }
      }
      public func setProviderUid(value:String) -> Services.Group.Containers.MemberV1.Builder {
        self.providerUid = value
        return self
      }
      public func clearProviderUid() -> Services.Group.Containers.MemberV1.Builder{
           builderResult.hasProviderUid = false
           builderResult.providerUid = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Group.Containers.MemberV1.Builder {
        builderResult = Services.Group.Containers.MemberV1()
        return self
      }
      public override func clone() throws -> Services.Group.Containers.MemberV1.Builder {
        return try Services.Group.Containers.MemberV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Group.Containers.MemberV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Group.Containers.MemberV1 {
        let returnMe:Services.Group.Containers.MemberV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Group.Containers.MemberV1) throws -> Services.Group.Containers.MemberV1.Builder {
        if other == Services.Group.Containers.MemberV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasId {
             id = other.id
        }
        if (other.hasProfile) {
            try mergeProfile(other.profile)
        }
        if other.hasRole {
             role = other.role
        }
        if other.hasGroupId {
             groupId = other.groupId
        }
        if other.hasProvider {
             provider = other.provider
        }
        if other.hasProviderUid {
             providerUid = other.providerUid
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Group.Containers.MemberV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.MemberV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            id = try input.readString()

          case 26 :
            let subBuilder:Services.Profile.Containers.ProfileV1.Builder = Services.Profile.Containers.ProfileV1.Builder()
            if hasProfile {
              try subBuilder.mergeFrom(profile)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            profile = subBuilder.buildPartial()

          case 32 :
            let valueIntrole = try input.readEnum()
            if let enumsrole = Services.Group.Containers.RoleV1(rawValue:valueIntrole){
                 role = enumsrole
            } else {
                 try unknownFieldsBuilder.mergeVarintField(4, value:Int64(valueIntrole))
            }

          case 42 :
            groupId = try input.readString()

          case 48 :
            let valueIntprovider = try input.readEnum()
            if let enumsprovider = Services.Group.Containers.GroupProviderV1(rawValue:valueIntprovider){
                 provider = enumsprovider
            } else {
                 try unknownFieldsBuilder.mergeVarintField(6, value:Int64(valueIntprovider))
            }

          case 58 :
            providerUid = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class MembershipRequestMetaV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasKey:Bool = false
    public private(set) var key:String = ""

    public private(set) var hasValue:Bool = false
    public private(set) var value:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasKey {
        try output.writeString(2, value:key)
      }
      if hasValue {
        try output.writeString(3, value:value)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasKey {
        serialize_size += key.computeStringSize(2)
      }
      if hasValue {
        serialize_size += value.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Group.Containers.MembershipRequestMetaV1> {
      var mergedArray = Array<Services.Group.Containers.MembershipRequestMetaV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Group.Containers.MembershipRequestMetaV1? {
      return try Services.Group.Containers.MembershipRequestMetaV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Group.Containers.MembershipRequestMetaV1 {
      return try Services.Group.Containers.MembershipRequestMetaV1.Builder().mergeFromData(data, extensionRegistry:Services.Group.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.MembershipRequestMetaV1 {
      return try Services.Group.Containers.MembershipRequestMetaV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Group.Containers.MembershipRequestMetaV1 {
      return try Services.Group.Containers.MembershipRequestMetaV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.MembershipRequestMetaV1 {
      return try Services.Group.Containers.MembershipRequestMetaV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Group.Containers.MembershipRequestMetaV1 {
      return try Services.Group.Containers.MembershipRequestMetaV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.MembershipRequestMetaV1 {
      return try Services.Group.Containers.MembershipRequestMetaV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Group.Containers.MembershipRequestMetaV1.Builder {
      return Services.Group.Containers.MembershipRequestMetaV1.classBuilder() as! Services.Group.Containers.MembershipRequestMetaV1.Builder
    }
    public func getBuilder() -> Services.Group.Containers.MembershipRequestMetaV1.Builder {
      return classBuilder() as! Services.Group.Containers.MembershipRequestMetaV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Group.Containers.MembershipRequestMetaV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Group.Containers.MembershipRequestMetaV1.Builder()
    }
    public func toBuilder() throws -> Services.Group.Containers.MembershipRequestMetaV1.Builder {
      return try Services.Group.Containers.MembershipRequestMetaV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Group.Containers.MembershipRequestMetaV1) throws -> Services.Group.Containers.MembershipRequestMetaV1.Builder {
      return try Services.Group.Containers.MembershipRequestMetaV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasKey {
        output += "\(indent) key: \(key) \n"
      }
      if hasValue {
        output += "\(indent) value: \(value) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasKey {
               hashCode = (hashCode &* 31) &+ key.hashValue
            }
            if hasValue {
               hashCode = (hashCode &* 31) &+ value.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Group.Containers.MembershipRequestMetaV1"
    }
    override public func className() -> String {
        return "Services.Group.Containers.MembershipRequestMetaV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Group.Containers.MembershipRequestMetaV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Group.Containers.MembershipRequestMetaV1 = Services.Group.Containers.MembershipRequestMetaV1()
      public func getMessage() -> Services.Group.Containers.MembershipRequestMetaV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Group.Containers.MembershipRequestMetaV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Group.Containers.MembershipRequestMetaV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasKey:Bool {
           get {
                return builderResult.hasKey
           }
      }
      public var key:String {
           get {
                return builderResult.key
           }
           set (value) {
               builderResult.hasKey = true
               builderResult.key = value
           }
      }
      public func setKey(value:String) -> Services.Group.Containers.MembershipRequestMetaV1.Builder {
        self.key = value
        return self
      }
      public func clearKey() -> Services.Group.Containers.MembershipRequestMetaV1.Builder{
           builderResult.hasKey = false
           builderResult.key = ""
           return self
      }
      public var hasValue:Bool {
           get {
                return builderResult.hasValue
           }
      }
      public var value:String {
           get {
                return builderResult.value
           }
           set (value) {
               builderResult.hasValue = true
               builderResult.value = value
           }
      }
      public func setValue(value:String) -> Services.Group.Containers.MembershipRequestMetaV1.Builder {
        self.value = value
        return self
      }
      public func clearValue() -> Services.Group.Containers.MembershipRequestMetaV1.Builder{
           builderResult.hasValue = false
           builderResult.value = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Group.Containers.MembershipRequestMetaV1.Builder {
        builderResult = Services.Group.Containers.MembershipRequestMetaV1()
        return self
      }
      public override func clone() throws -> Services.Group.Containers.MembershipRequestMetaV1.Builder {
        return try Services.Group.Containers.MembershipRequestMetaV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Group.Containers.MembershipRequestMetaV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Group.Containers.MembershipRequestMetaV1 {
        let returnMe:Services.Group.Containers.MembershipRequestMetaV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Group.Containers.MembershipRequestMetaV1) throws -> Services.Group.Containers.MembershipRequestMetaV1.Builder {
        if other == Services.Group.Containers.MembershipRequestMetaV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasKey {
             key = other.key
        }
        if other.hasValue {
             value = other.value
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Group.Containers.MembershipRequestMetaV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.MembershipRequestMetaV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            key = try input.readString()

          case 26 :
            value = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class MembershipRequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var status:Services.Group.Containers.MembershipRequestStatusV1 = Services.Group.Containers.MembershipRequestStatusV1.Pending
    public private(set) var hasStatus:Bool = false
    public private(set) var hasRequesterProfileId:Bool = false
    public private(set) var requesterProfileId:String = ""

    public private(set) var approverProfileIds:Array<String> = Array<String>()
    public private(set) var hasGroupId:Bool = false
    public private(set) var groupId:String = ""

    public private(set) var provider:Services.Group.Containers.GroupProviderV1 = Services.Group.Containers.GroupProviderV1.Google
    public private(set) var hasProvider:Bool = false
    public private(set) var meta:Array<Services.Group.Containers.MembershipRequestMetaV1>  = Array<Services.Group.Containers.MembershipRequestMetaV1>()
    public private(set) var hasCreated:Bool = false
    public private(set) var created:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasId {
        try output.writeString(2, value:id)
      }
      if hasStatus {
        try output.writeEnum(3, value:status.rawValue)
      }
      if hasRequesterProfileId {
        try output.writeString(4, value:requesterProfileId)
      }
      if !approverProfileIds.isEmpty {
        for oneValueapproverProfileIds in approverProfileIds {
          try output.writeString(5, value:oneValueapproverProfileIds)
        }
      }
      if hasGroupId {
        try output.writeString(6, value:groupId)
      }
      if hasProvider {
        try output.writeEnum(7, value:provider.rawValue)
      }
      for oneElementmeta in meta {
          try output.writeMessage(8, value:oneElementmeta)
      }
      if hasCreated {
        try output.writeString(9, value:created)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if (hasStatus) {
        serialize_size += status.rawValue.computeEnumSize(3)
      }
      if hasRequesterProfileId {
        serialize_size += requesterProfileId.computeStringSize(4)
      }
      var dataSizeApproverProfileIds:Int32 = 0
      for oneValueapproverProfileIds in approverProfileIds {
          dataSizeApproverProfileIds += oneValueapproverProfileIds.computeStringSizeNoTag()
      }
      serialize_size += dataSizeApproverProfileIds
      serialize_size += 1 * Int32(approverProfileIds.count)
      if hasGroupId {
        serialize_size += groupId.computeStringSize(6)
      }
      if (hasProvider) {
        serialize_size += provider.rawValue.computeEnumSize(7)
      }
      for oneElementmeta in meta {
          serialize_size += oneElementmeta.computeMessageSize(8)
      }
      if hasCreated {
        serialize_size += created.computeStringSize(9)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Group.Containers.MembershipRequestV1> {
      var mergedArray = Array<Services.Group.Containers.MembershipRequestV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Group.Containers.MembershipRequestV1? {
      return try Services.Group.Containers.MembershipRequestV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Group.Containers.MembershipRequestV1 {
      return try Services.Group.Containers.MembershipRequestV1.Builder().mergeFromData(data, extensionRegistry:Services.Group.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.MembershipRequestV1 {
      return try Services.Group.Containers.MembershipRequestV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Group.Containers.MembershipRequestV1 {
      return try Services.Group.Containers.MembershipRequestV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.MembershipRequestV1 {
      return try Services.Group.Containers.MembershipRequestV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Group.Containers.MembershipRequestV1 {
      return try Services.Group.Containers.MembershipRequestV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.MembershipRequestV1 {
      return try Services.Group.Containers.MembershipRequestV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Group.Containers.MembershipRequestV1.Builder {
      return Services.Group.Containers.MembershipRequestV1.classBuilder() as! Services.Group.Containers.MembershipRequestV1.Builder
    }
    public func getBuilder() -> Services.Group.Containers.MembershipRequestV1.Builder {
      return classBuilder() as! Services.Group.Containers.MembershipRequestV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Group.Containers.MembershipRequestV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Group.Containers.MembershipRequestV1.Builder()
    }
    public func toBuilder() throws -> Services.Group.Containers.MembershipRequestV1.Builder {
      return try Services.Group.Containers.MembershipRequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Group.Containers.MembershipRequestV1) throws -> Services.Group.Containers.MembershipRequestV1.Builder {
      return try Services.Group.Containers.MembershipRequestV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if (hasStatus) {
        output += "\(indent) status: \(status.rawValue)\n"
      }
      if hasRequesterProfileId {
        output += "\(indent) requesterProfileId: \(requesterProfileId) \n"
      }
      var approverProfileIdsElementIndex:Int = 0
      for oneValueapproverProfileIds in approverProfileIds  {
          output += "\(indent) approverProfileIds[\(approverProfileIdsElementIndex)]: \(oneValueapproverProfileIds)\n"
          approverProfileIdsElementIndex++
      }
      if hasGroupId {
        output += "\(indent) groupId: \(groupId) \n"
      }
      if (hasProvider) {
        output += "\(indent) provider: \(provider.rawValue)\n"
      }
      var metaElementIndex:Int = 0
      for oneElementmeta in meta {
          output += "\(indent) meta[\(metaElementIndex)] {\n"
          try oneElementmeta.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          metaElementIndex++
      }
      if hasCreated {
        output += "\(indent) created: \(created) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasStatus {
               hashCode = (hashCode &* 31) &+ Int(status.rawValue)
            }
            if hasRequesterProfileId {
               hashCode = (hashCode &* 31) &+ requesterProfileId.hashValue
            }
            for oneValueapproverProfileIds in approverProfileIds {
                hashCode = (hashCode &* 31) &+ oneValueapproverProfileIds.hashValue
            }
            if hasGroupId {
               hashCode = (hashCode &* 31) &+ groupId.hashValue
            }
            if hasProvider {
               hashCode = (hashCode &* 31) &+ Int(provider.rawValue)
            }
            for oneElementmeta in meta {
                hashCode = (hashCode &* 31) &+ oneElementmeta.hashValue
            }
            if hasCreated {
               hashCode = (hashCode &* 31) &+ created.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Group.Containers.MembershipRequestV1"
    }
    override public func className() -> String {
        return "Services.Group.Containers.MembershipRequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Group.Containers.MembershipRequestV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Group.Containers.MembershipRequestV1 = Services.Group.Containers.MembershipRequestV1()
      public func getMessage() -> Services.Group.Containers.MembershipRequestV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Group.Containers.MembershipRequestV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Group.Containers.MembershipRequestV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Services.Group.Containers.MembershipRequestV1.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.Group.Containers.MembershipRequestV1.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
        public var hasStatus:Bool{
            get {
                return builderResult.hasStatus
            }
        }
        public var status:Services.Group.Containers.MembershipRequestStatusV1 {
            get {
                return builderResult.status
            }
            set (value) {
                builderResult.hasStatus = true
                builderResult.status = value
            }
        }
        public func setStatus(value:Services.Group.Containers.MembershipRequestStatusV1) -> Services.Group.Containers.MembershipRequestV1.Builder {
          self.status = value
          return self
        }
        public func clearStatus() -> Services.Group.Containers.MembershipRequestV1.Builder {
           builderResult.hasStatus = false
           builderResult.status = .Pending
           return self
        }
      public var hasRequesterProfileId:Bool {
           get {
                return builderResult.hasRequesterProfileId
           }
      }
      public var requesterProfileId:String {
           get {
                return builderResult.requesterProfileId
           }
           set (value) {
               builderResult.hasRequesterProfileId = true
               builderResult.requesterProfileId = value
           }
      }
      public func setRequesterProfileId(value:String) -> Services.Group.Containers.MembershipRequestV1.Builder {
        self.requesterProfileId = value
        return self
      }
      public func clearRequesterProfileId() -> Services.Group.Containers.MembershipRequestV1.Builder{
           builderResult.hasRequesterProfileId = false
           builderResult.requesterProfileId = ""
           return self
      }
      public var approverProfileIds:Array<String> {
           get {
               return builderResult.approverProfileIds
           }
           set (array) {
               builderResult.approverProfileIds = array
           }
      }
      public func setApproverProfileIds(value:Array<String>) -> Services.Group.Containers.MembershipRequestV1.Builder {
        self.approverProfileIds = value
        return self
      }
      public func clearApproverProfileIds() -> Services.Group.Containers.MembershipRequestV1.Builder {
         builderResult.approverProfileIds.removeAll(keepCapacity: false)
         return self
      }
      public var hasGroupId:Bool {
           get {
                return builderResult.hasGroupId
           }
      }
      public var groupId:String {
           get {
                return builderResult.groupId
           }
           set (value) {
               builderResult.hasGroupId = true
               builderResult.groupId = value
           }
      }
      public func setGroupId(value:String) -> Services.Group.Containers.MembershipRequestV1.Builder {
        self.groupId = value
        return self
      }
      public func clearGroupId() -> Services.Group.Containers.MembershipRequestV1.Builder{
           builderResult.hasGroupId = false
           builderResult.groupId = ""
           return self
      }
        public var hasProvider:Bool{
            get {
                return builderResult.hasProvider
            }
        }
        public var provider:Services.Group.Containers.GroupProviderV1 {
            get {
                return builderResult.provider
            }
            set (value) {
                builderResult.hasProvider = true
                builderResult.provider = value
            }
        }
        public func setProvider(value:Services.Group.Containers.GroupProviderV1) -> Services.Group.Containers.MembershipRequestV1.Builder {
          self.provider = value
          return self
        }
        public func clearProvider() -> Services.Group.Containers.MembershipRequestV1.Builder {
           builderResult.hasProvider = false
           builderResult.provider = .Google
           return self
        }
      public var meta:Array<Services.Group.Containers.MembershipRequestMetaV1> {
           get {
               return builderResult.meta
           }
           set (value) {
               builderResult.meta = value
           }
      }
      public func setMeta(value:Array<Services.Group.Containers.MembershipRequestMetaV1>) -> Services.Group.Containers.MembershipRequestV1.Builder {
        self.meta = value
        return self
      }
      public func clearMeta() -> Services.Group.Containers.MembershipRequestV1.Builder {
        builderResult.meta.removeAll(keepCapacity: false)
        return self
      }
      public var hasCreated:Bool {
           get {
                return builderResult.hasCreated
           }
      }
      public var created:String {
           get {
                return builderResult.created
           }
           set (value) {
               builderResult.hasCreated = true
               builderResult.created = value
           }
      }
      public func setCreated(value:String) -> Services.Group.Containers.MembershipRequestV1.Builder {
        self.created = value
        return self
      }
      public func clearCreated() -> Services.Group.Containers.MembershipRequestV1.Builder{
           builderResult.hasCreated = false
           builderResult.created = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Group.Containers.MembershipRequestV1.Builder {
        builderResult = Services.Group.Containers.MembershipRequestV1()
        return self
      }
      public override func clone() throws -> Services.Group.Containers.MembershipRequestV1.Builder {
        return try Services.Group.Containers.MembershipRequestV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Group.Containers.MembershipRequestV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Group.Containers.MembershipRequestV1 {
        let returnMe:Services.Group.Containers.MembershipRequestV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Group.Containers.MembershipRequestV1) throws -> Services.Group.Containers.MembershipRequestV1.Builder {
        if other == Services.Group.Containers.MembershipRequestV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasId {
             id = other.id
        }
        if other.hasStatus {
             status = other.status
        }
        if other.hasRequesterProfileId {
             requesterProfileId = other.requesterProfileId
        }
        if !other.approverProfileIds.isEmpty {
            builderResult.approverProfileIds += other.approverProfileIds
        }
        if other.hasGroupId {
             groupId = other.groupId
        }
        if other.hasProvider {
             provider = other.provider
        }
        if !other.meta.isEmpty  {
           builderResult.meta += other.meta
        }
        if other.hasCreated {
             created = other.created
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Group.Containers.MembershipRequestV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Group.Containers.MembershipRequestV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            id = try input.readString()

          case 24 :
            let valueIntstatus = try input.readEnum()
            if let enumsstatus = Services.Group.Containers.MembershipRequestStatusV1(rawValue:valueIntstatus){
                 status = enumsstatus
            } else {
                 try unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntstatus))
            }

          case 34 :
            requesterProfileId = try input.readString()

          case 42 :
            approverProfileIds += [try input.readString()]

          case 50 :
            groupId = try input.readString()

          case 56 :
            let valueIntprovider = try input.readEnum()
            if let enumsprovider = Services.Group.Containers.GroupProviderV1(rawValue:valueIntprovider){
                 provider = enumsprovider
            } else {
                 try unknownFieldsBuilder.mergeVarintField(7, value:Int64(valueIntprovider))
            }

          case 66 :
            let subBuilder = Services.Group.Containers.MembershipRequestMetaV1.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            meta += [subBuilder.buildPartial()]

          case 74 :
            created = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
