// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file add_to_collection.proto

import Foundation

public extension Services{ public struct Post { public struct Actions { public struct AddToCollection { }}}}

public func == (lhs: Services.Post.Actions.AddToCollection.RequestV1, rhs: Services.Post.Actions.AddToCollection.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasCollectionId == rhs.hasCollectionId) && (!lhs.hasCollectionId || lhs.collectionId == rhs.collectionId)
  fieldCheck = fieldCheck && (lhs.hasSource == rhs.hasSource) && (!lhs.hasSource || lhs.source == rhs.source)
  fieldCheck = fieldCheck && (lhs.hasSourceId == rhs.hasSourceId) && (!lhs.hasSourceId || lhs.sourceId == rhs.sourceId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Post.Actions.AddToCollection.ResponseV1, rhs: Services.Post.Actions.AddToCollection.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Post.Actions.AddToCollection {
  public struct AddToCollectionRoot {
    public static var sharedInstance : AddToCollectionRoot {
     struct Static {
         static let instance : AddToCollectionRoot = AddToCollectionRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Post.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasCollectionId:Bool = false
    public private(set) var collectionId:String = ""

    public private(set) var source:Services.Post.Containers.CollectionItemV1.SourceV1 = Services.Post.Containers.CollectionItemV1.SourceV1.Luno
    public private(set) var hasSource:Bool = false
    public private(set) var hasSourceId:Bool = false
    public private(set) var sourceId:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasCollectionId {
        try output.writeString(1, value:collectionId)
      }
      if hasSource {
        try output.writeEnum(2, value:source.rawValue)
      }
      if hasSourceId {
        try output.writeString(3, value:sourceId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasCollectionId {
        serialize_size += collectionId.computeStringSize(1)
      }
      if (hasSource) {
        serialize_size += source.rawValue.computeEnumSize(2)
      }
      if hasSourceId {
        serialize_size += sourceId.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Post.Actions.AddToCollection.RequestV1> {
      var mergedArray = Array<Services.Post.Actions.AddToCollection.RequestV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Post.Actions.AddToCollection.RequestV1? {
      return try Services.Post.Actions.AddToCollection.RequestV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Post.Actions.AddToCollection.RequestV1 {
      return try Services.Post.Actions.AddToCollection.RequestV1.Builder().mergeFromData(data, extensionRegistry:Services.Post.Actions.AddToCollection.AddToCollectionRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.AddToCollection.RequestV1 {
      return try Services.Post.Actions.AddToCollection.RequestV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Post.Actions.AddToCollection.RequestV1 {
      return try Services.Post.Actions.AddToCollection.RequestV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.AddToCollection.RequestV1 {
      return try Services.Post.Actions.AddToCollection.RequestV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Post.Actions.AddToCollection.RequestV1 {
      return try Services.Post.Actions.AddToCollection.RequestV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.AddToCollection.RequestV1 {
      return try Services.Post.Actions.AddToCollection.RequestV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Post.Actions.AddToCollection.RequestV1.Builder {
      return Services.Post.Actions.AddToCollection.RequestV1.classBuilder() as! Services.Post.Actions.AddToCollection.RequestV1.Builder
    }
    public func getBuilder() -> Services.Post.Actions.AddToCollection.RequestV1.Builder {
      return classBuilder() as! Services.Post.Actions.AddToCollection.RequestV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Post.Actions.AddToCollection.RequestV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Post.Actions.AddToCollection.RequestV1.Builder()
    }
    public func toBuilder() throws -> Services.Post.Actions.AddToCollection.RequestV1.Builder {
      return try Services.Post.Actions.AddToCollection.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Post.Actions.AddToCollection.RequestV1) throws -> Services.Post.Actions.AddToCollection.RequestV1.Builder {
      return try Services.Post.Actions.AddToCollection.RequestV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasCollectionId {
        output += "\(indent) collectionId: \(collectionId) \n"
      }
      if (hasSource) {
        output += "\(indent) source: \(source.rawValue)\n"
      }
      if hasSourceId {
        output += "\(indent) sourceId: \(sourceId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasCollectionId {
               hashCode = (hashCode &* 31) &+ collectionId.hashValue
            }
            if hasSource {
               hashCode = (hashCode &* 31) &+ Int(source.rawValue)
            }
            if hasSourceId {
               hashCode = (hashCode &* 31) &+ sourceId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Post.Actions.AddToCollection.RequestV1"
    }
    override public func className() -> String {
        return "Services.Post.Actions.AddToCollection.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Post.Actions.AddToCollection.RequestV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Post.Actions.AddToCollection.RequestV1 = Services.Post.Actions.AddToCollection.RequestV1()
      public func getMessage() -> Services.Post.Actions.AddToCollection.RequestV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasCollectionId:Bool {
           get {
                return builderResult.hasCollectionId
           }
      }
      public var collectionId:String {
           get {
                return builderResult.collectionId
           }
           set (value) {
               builderResult.hasCollectionId = true
               builderResult.collectionId = value
           }
      }
      public func setCollectionId(value:String) -> Services.Post.Actions.AddToCollection.RequestV1.Builder {
        self.collectionId = value
        return self
      }
      public func clearCollectionId() -> Services.Post.Actions.AddToCollection.RequestV1.Builder{
           builderResult.hasCollectionId = false
           builderResult.collectionId = ""
           return self
      }
        public var hasSource:Bool{
            get {
                return builderResult.hasSource
            }
        }
        public var source:Services.Post.Containers.CollectionItemV1.SourceV1 {
            get {
                return builderResult.source
            }
            set (value) {
                builderResult.hasSource = true
                builderResult.source = value
            }
        }
        public func setSource(value:Services.Post.Containers.CollectionItemV1.SourceV1) -> Services.Post.Actions.AddToCollection.RequestV1.Builder {
          self.source = value
          return self
        }
        public func clearSource() -> Services.Post.Actions.AddToCollection.RequestV1.Builder {
           builderResult.hasSource = false
           builderResult.source = .Luno
           return self
        }
      public var hasSourceId:Bool {
           get {
                return builderResult.hasSourceId
           }
      }
      public var sourceId:String {
           get {
                return builderResult.sourceId
           }
           set (value) {
               builderResult.hasSourceId = true
               builderResult.sourceId = value
           }
      }
      public func setSourceId(value:String) -> Services.Post.Actions.AddToCollection.RequestV1.Builder {
        self.sourceId = value
        return self
      }
      public func clearSourceId() -> Services.Post.Actions.AddToCollection.RequestV1.Builder{
           builderResult.hasSourceId = false
           builderResult.sourceId = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Post.Actions.AddToCollection.RequestV1.Builder {
        builderResult = Services.Post.Actions.AddToCollection.RequestV1()
        return self
      }
      public override func clone() throws -> Services.Post.Actions.AddToCollection.RequestV1.Builder {
        return try Services.Post.Actions.AddToCollection.RequestV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Post.Actions.AddToCollection.RequestV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Post.Actions.AddToCollection.RequestV1 {
        let returnMe:Services.Post.Actions.AddToCollection.RequestV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Post.Actions.AddToCollection.RequestV1) throws -> Services.Post.Actions.AddToCollection.RequestV1.Builder {
        if other == Services.Post.Actions.AddToCollection.RequestV1() {
         return self
        }
        if other.hasCollectionId {
             collectionId = other.collectionId
        }
        if other.hasSource {
             source = other.source
        }
        if other.hasSourceId {
             sourceId = other.sourceId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Post.Actions.AddToCollection.RequestV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.AddToCollection.RequestV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            collectionId = try input.readString()

          case 16 :
            let valueIntsource = try input.readEnum()
            if let enumssource = Services.Post.Containers.CollectionItemV1.SourceV1(rawValue:valueIntsource){
                 source = enumssource
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntsource))
            }

          case 26 :
            sourceId = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Post.Actions.AddToCollection.ResponseV1> {
      var mergedArray = Array<Services.Post.Actions.AddToCollection.ResponseV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Post.Actions.AddToCollection.ResponseV1? {
      return try Services.Post.Actions.AddToCollection.ResponseV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Post.Actions.AddToCollection.ResponseV1 {
      return try Services.Post.Actions.AddToCollection.ResponseV1.Builder().mergeFromData(data, extensionRegistry:Services.Post.Actions.AddToCollection.AddToCollectionRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.AddToCollection.ResponseV1 {
      return try Services.Post.Actions.AddToCollection.ResponseV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Post.Actions.AddToCollection.ResponseV1 {
      return try Services.Post.Actions.AddToCollection.ResponseV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.AddToCollection.ResponseV1 {
      return try Services.Post.Actions.AddToCollection.ResponseV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Post.Actions.AddToCollection.ResponseV1 {
      return try Services.Post.Actions.AddToCollection.ResponseV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.AddToCollection.ResponseV1 {
      return try Services.Post.Actions.AddToCollection.ResponseV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Post.Actions.AddToCollection.ResponseV1.Builder {
      return Services.Post.Actions.AddToCollection.ResponseV1.classBuilder() as! Services.Post.Actions.AddToCollection.ResponseV1.Builder
    }
    public func getBuilder() -> Services.Post.Actions.AddToCollection.ResponseV1.Builder {
      return classBuilder() as! Services.Post.Actions.AddToCollection.ResponseV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Post.Actions.AddToCollection.ResponseV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Post.Actions.AddToCollection.ResponseV1.Builder()
    }
    public func toBuilder() throws -> Services.Post.Actions.AddToCollection.ResponseV1.Builder {
      return try Services.Post.Actions.AddToCollection.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Post.Actions.AddToCollection.ResponseV1) throws -> Services.Post.Actions.AddToCollection.ResponseV1.Builder {
      return try Services.Post.Actions.AddToCollection.ResponseV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Post.Actions.AddToCollection.ResponseV1"
    }
    override public func className() -> String {
        return "Services.Post.Actions.AddToCollection.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Post.Actions.AddToCollection.ResponseV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Post.Actions.AddToCollection.ResponseV1 = Services.Post.Actions.AddToCollection.ResponseV1()
      public func getMessage() -> Services.Post.Actions.AddToCollection.ResponseV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Post.Actions.AddToCollection.ResponseV1.Builder {
        builderResult = Services.Post.Actions.AddToCollection.ResponseV1()
        return self
      }
      public override func clone() throws -> Services.Post.Actions.AddToCollection.ResponseV1.Builder {
        return try Services.Post.Actions.AddToCollection.ResponseV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Post.Actions.AddToCollection.ResponseV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Post.Actions.AddToCollection.ResponseV1 {
        let returnMe:Services.Post.Actions.AddToCollection.ResponseV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Post.Actions.AddToCollection.ResponseV1) throws -> Services.Post.Actions.AddToCollection.ResponseV1.Builder {
        if other == Services.Post.Actions.AddToCollection.ResponseV1() {
         return self
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Post.Actions.AddToCollection.ResponseV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.AddToCollection.ResponseV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
