// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file complete_authorization.proto

import Foundation

public extension Services.User.Actions{ public struct CompleteAuthorization { }}

public func == (lhs: Services.User.Actions.CompleteAuthorization.RequestV1, rhs: Services.User.Actions.CompleteAuthorization.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
  fieldCheck = fieldCheck && (lhs.hasOauth2Details == rhs.hasOauth2Details) && (!lhs.hasOauth2Details || lhs.oauth2Details == rhs.oauth2Details)
  fieldCheck = fieldCheck && (lhs.hasClientType == rhs.hasClientType) && (!lhs.hasClientType || lhs.clientType == rhs.clientType)
  fieldCheck = fieldCheck && (lhs.hasSamlDetails == rhs.hasSamlDetails) && (!lhs.hasSamlDetails || lhs.samlDetails == rhs.samlDetails)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.User.Actions.CompleteAuthorization.ResponseV1, rhs: Services.User.Actions.CompleteAuthorization.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
  fieldCheck = fieldCheck && (lhs.hasIdentity == rhs.hasIdentity) && (!lhs.hasIdentity || lhs.identity == rhs.identity)
  fieldCheck = fieldCheck && (lhs.hasNewUser == rhs.hasNewUser) && (!lhs.hasNewUser || lhs.newUser == rhs.newUser)
  fieldCheck = fieldCheck && (lhs.hasRedirectUri == rhs.hasRedirectUri) && (!lhs.hasRedirectUri || lhs.redirectUri == rhs.redirectUri)
  fieldCheck = fieldCheck && (lhs.hasGoogleCredentials == rhs.hasGoogleCredentials) && (!lhs.hasGoogleCredentials || lhs.googleCredentials == rhs.googleCredentials)
  fieldCheck = fieldCheck && (lhs.hasSamlCredentials == rhs.hasSamlCredentials) && (!lhs.hasSamlCredentials || lhs.samlCredentials == rhs.samlCredentials)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.User.Actions.CompleteAuthorization {
  public struct CompleteAuthorizationRoot {
    public static var sharedInstance : CompleteAuthorizationRoot {
     struct Static {
         static let instance : CompleteAuthorizationRoot = CompleteAuthorizationRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.User.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.User.Containers.Token.TokenRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var provider:Services.User.Containers.IdentityV1.ProviderV1 = Services.User.Containers.IdentityV1.ProviderV1.Internal
    public private(set) var hasProvider:Bool = false
    public private(set) var hasOauth2Details:Bool = false
    public private(set) var oauth2Details:Services.User.Containers.OAuth2DetailsV1!
    public private(set) var clientType:Services.User.Containers.Token.ClientTypeV1 = Services.User.Containers.Token.ClientTypeV1.Ios
    public private(set) var hasClientType:Bool = false
    public private(set) var hasSamlDetails:Bool = false
    public private(set) var samlDetails:Services.User.Containers.SAMLDetailsV1!
    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasProvider {
        try output.writeEnum(1, value:provider.rawValue)
      }
      if hasOauth2Details {
        try output.writeMessage(2, value:oauth2Details)
      }
      if hasClientType {
        try output.writeEnum(3, value:clientType.rawValue)
      }
      if hasSamlDetails {
        try output.writeMessage(4, value:samlDetails)
      }
      if hasOrganizationId {
        try output.writeString(5, value:organizationId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasProvider) {
        serialize_size += provider.rawValue.computeEnumSize(1)
      }
      if hasOauth2Details {
          if let varSizeoauth2Details = oauth2Details?.computeMessageSize(2) {
              serialize_size += varSizeoauth2Details
          }
      }
      if (hasClientType) {
        serialize_size += clientType.rawValue.computeEnumSize(3)
      }
      if hasSamlDetails {
          if let varSizesamlDetails = samlDetails?.computeMessageSize(4) {
              serialize_size += varSizesamlDetails
          }
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.User.Actions.CompleteAuthorization.RequestV1> {
      var mergedArray = Array<Services.User.Actions.CompleteAuthorization.RequestV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.User.Actions.CompleteAuthorization.RequestV1? {
      return try Services.User.Actions.CompleteAuthorization.RequestV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.User.Actions.CompleteAuthorization.RequestV1 {
      return try Services.User.Actions.CompleteAuthorization.RequestV1.Builder().mergeFromData(data, extensionRegistry:Services.User.Actions.CompleteAuthorization.CompleteAuthorizationRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.CompleteAuthorization.RequestV1 {
      return try Services.User.Actions.CompleteAuthorization.RequestV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.User.Actions.CompleteAuthorization.RequestV1 {
      return try Services.User.Actions.CompleteAuthorization.RequestV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.CompleteAuthorization.RequestV1 {
      return try Services.User.Actions.CompleteAuthorization.RequestV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Actions.CompleteAuthorization.RequestV1 {
      return try Services.User.Actions.CompleteAuthorization.RequestV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.CompleteAuthorization.RequestV1 {
      return try Services.User.Actions.CompleteAuthorization.RequestV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
      return Services.User.Actions.CompleteAuthorization.RequestV1.classBuilder() as! Services.User.Actions.CompleteAuthorization.RequestV1.Builder
    }
    public func getBuilder() -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
      return classBuilder() as! Services.User.Actions.CompleteAuthorization.RequestV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Actions.CompleteAuthorization.RequestV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Actions.CompleteAuthorization.RequestV1.Builder()
    }
    public func toBuilder() throws -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
      return try Services.User.Actions.CompleteAuthorization.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Actions.CompleteAuthorization.RequestV1) throws -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
      return try Services.User.Actions.CompleteAuthorization.RequestV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if (hasProvider) {
        output += "\(indent) provider: \(provider.rawValue)\n"
      }
      if hasOauth2Details {
        output += "\(indent) oauth2Details {\n"
        try oauth2Details?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if (hasClientType) {
        output += "\(indent) clientType: \(clientType.rawValue)\n"
      }
      if hasSamlDetails {
        output += "\(indent) samlDetails {\n"
        try samlDetails?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasProvider {
               hashCode = (hashCode &* 31) &+ Int(provider.rawValue)
            }
            if hasOauth2Details {
                if let hashValueoauth2Details = oauth2Details?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueoauth2Details
                }
            }
            if hasClientType {
               hashCode = (hashCode &* 31) &+ Int(clientType.rawValue)
            }
            if hasSamlDetails {
                if let hashValuesamlDetails = samlDetails?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesamlDetails
                }
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Actions.CompleteAuthorization.RequestV1"
    }
    override public func className() -> String {
        return "Services.User.Actions.CompleteAuthorization.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Actions.CompleteAuthorization.RequestV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.User.Actions.CompleteAuthorization.RequestV1 = Services.User.Actions.CompleteAuthorization.RequestV1()
      public func getMessage() -> Services.User.Actions.CompleteAuthorization.RequestV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasProvider:Bool{
            get {
                return builderResult.hasProvider
            }
        }
        public var provider:Services.User.Containers.IdentityV1.ProviderV1 {
            get {
                return builderResult.provider
            }
            set (value) {
                builderResult.hasProvider = true
                builderResult.provider = value
            }
        }
        public func setProvider(value:Services.User.Containers.IdentityV1.ProviderV1) -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
          self.provider = value
          return self
        }
        public func clearProvider() -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
           builderResult.hasProvider = false
           builderResult.provider = .Internal
           return self
        }
      public var hasOauth2Details:Bool {
           get {
               return builderResult.hasOauth2Details
           }
      }
      public var oauth2Details:Services.User.Containers.OAuth2DetailsV1! {
           get {
               if oauth2DetailsBuilder_ != nil {
                  builderResult.oauth2Details = oauth2DetailsBuilder_.getMessage()
               }
               return builderResult.oauth2Details
           }
           set (value) {
               builderResult.hasOauth2Details = true
               builderResult.oauth2Details = value
           }
      }
      private var oauth2DetailsBuilder_:Services.User.Containers.OAuth2DetailsV1.Builder! {
           didSet {
              builderResult.hasOauth2Details = true
           }
      }
      public func getOauth2DetailsBuilder() -> Services.User.Containers.OAuth2DetailsV1.Builder {
        if oauth2DetailsBuilder_ == nil {
           oauth2DetailsBuilder_ = Services.User.Containers.OAuth2DetailsV1.Builder()
           builderResult.oauth2Details = oauth2DetailsBuilder_.getMessage()
           if oauth2Details != nil {
              try! oauth2DetailsBuilder_.mergeFrom(oauth2Details)
           }
        }
        return oauth2DetailsBuilder_
      }
      public func setOauth2Details(value:Services.User.Containers.OAuth2DetailsV1!) -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
        self.oauth2Details = value
        return self
      }
      public func mergeOauth2Details(value:Services.User.Containers.OAuth2DetailsV1) throws -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
        if builderResult.hasOauth2Details {
          builderResult.oauth2Details = try Services.User.Containers.OAuth2DetailsV1.builderWithPrototype(builderResult.oauth2Details).mergeFrom(value).buildPartial()
        } else {
          builderResult.oauth2Details = value
        }
        builderResult.hasOauth2Details = true
        return self
      }
      public func clearOauth2Details() -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
        oauth2DetailsBuilder_ = nil
        builderResult.hasOauth2Details = false
        builderResult.oauth2Details = nil
        return self
      }
        public var hasClientType:Bool{
            get {
                return builderResult.hasClientType
            }
        }
        public var clientType:Services.User.Containers.Token.ClientTypeV1 {
            get {
                return builderResult.clientType
            }
            set (value) {
                builderResult.hasClientType = true
                builderResult.clientType = value
            }
        }
        public func setClientType(value:Services.User.Containers.Token.ClientTypeV1) -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
          self.clientType = value
          return self
        }
        public func clearClientType() -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
           builderResult.hasClientType = false
           builderResult.clientType = .Ios
           return self
        }
      public var hasSamlDetails:Bool {
           get {
               return builderResult.hasSamlDetails
           }
      }
      public var samlDetails:Services.User.Containers.SAMLDetailsV1! {
           get {
               if samlDetailsBuilder_ != nil {
                  builderResult.samlDetails = samlDetailsBuilder_.getMessage()
               }
               return builderResult.samlDetails
           }
           set (value) {
               builderResult.hasSamlDetails = true
               builderResult.samlDetails = value
           }
      }
      private var samlDetailsBuilder_:Services.User.Containers.SAMLDetailsV1.Builder! {
           didSet {
              builderResult.hasSamlDetails = true
           }
      }
      public func getSamlDetailsBuilder() -> Services.User.Containers.SAMLDetailsV1.Builder {
        if samlDetailsBuilder_ == nil {
           samlDetailsBuilder_ = Services.User.Containers.SAMLDetailsV1.Builder()
           builderResult.samlDetails = samlDetailsBuilder_.getMessage()
           if samlDetails != nil {
              try! samlDetailsBuilder_.mergeFrom(samlDetails)
           }
        }
        return samlDetailsBuilder_
      }
      public func setSamlDetails(value:Services.User.Containers.SAMLDetailsV1!) -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
        self.samlDetails = value
        return self
      }
      public func mergeSamlDetails(value:Services.User.Containers.SAMLDetailsV1) throws -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
        if builderResult.hasSamlDetails {
          builderResult.samlDetails = try Services.User.Containers.SAMLDetailsV1.builderWithPrototype(builderResult.samlDetails).mergeFrom(value).buildPartial()
        } else {
          builderResult.samlDetails = value
        }
        builderResult.hasSamlDetails = true
        return self
      }
      public func clearSamlDetails() -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
        samlDetailsBuilder_ = nil
        builderResult.hasSamlDetails = false
        builderResult.samlDetails = nil
        return self
      }
      public var hasOrganizationId:Bool {
           get {
                return builderResult.hasOrganizationId
           }
      }
      public var organizationId:String {
           get {
                return builderResult.organizationId
           }
           set (value) {
               builderResult.hasOrganizationId = true
               builderResult.organizationId = value
           }
      }
      public func setOrganizationId(value:String) -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
        self.organizationId = value
        return self
      }
      public func clearOrganizationId() -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder{
           builderResult.hasOrganizationId = false
           builderResult.organizationId = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
        builderResult = Services.User.Actions.CompleteAuthorization.RequestV1()
        return self
      }
      public override func clone() throws -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
        return try Services.User.Actions.CompleteAuthorization.RequestV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.User.Actions.CompleteAuthorization.RequestV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.User.Actions.CompleteAuthorization.RequestV1 {
        let returnMe:Services.User.Actions.CompleteAuthorization.RequestV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.User.Actions.CompleteAuthorization.RequestV1) throws -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
        if other == Services.User.Actions.CompleteAuthorization.RequestV1() {
         return self
        }
        if other.hasProvider {
             provider = other.provider
        }
        if (other.hasOauth2Details) {
            try mergeOauth2Details(other.oauth2Details)
        }
        if other.hasClientType {
             clientType = other.clientType
        }
        if (other.hasSamlDetails) {
            try mergeSamlDetails(other.samlDetails)
        }
        if other.hasOrganizationId {
             organizationId = other.organizationId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.CompleteAuthorization.RequestV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            let valueIntprovider = try input.readEnum()
            if let enumsprovider = Services.User.Containers.IdentityV1.ProviderV1(rawValue:valueIntprovider){
                 provider = enumsprovider
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntprovider))
            }

          case 18 :
            let subBuilder:Services.User.Containers.OAuth2DetailsV1.Builder = Services.User.Containers.OAuth2DetailsV1.Builder()
            if hasOauth2Details {
              try subBuilder.mergeFrom(oauth2Details)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            oauth2Details = subBuilder.buildPartial()

          case 24 :
            let valueIntclientType = try input.readEnum()
            if let enumsclientType = Services.User.Containers.Token.ClientTypeV1(rawValue:valueIntclientType){
                 clientType = enumsclientType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntclientType))
            }

          case 34 :
            let subBuilder:Services.User.Containers.SAMLDetailsV1.Builder = Services.User.Containers.SAMLDetailsV1.Builder()
            if hasSamlDetails {
              try subBuilder.mergeFrom(samlDetails)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            samlDetails = subBuilder.buildPartial()

          case 42 :
            organizationId = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {


    //OneOf declaration start

    public enum Credentials {
      case CredentialsOneOfNotSet

      public func checkOneOfIsSet() -> Bool {
           switch self {
           case .CredentialsOneOfNotSet:
                return false
           default:
                return true
           }
      }
      case GoogleCredentials(Services.User.Containers.GoogleCredentialsV1)

      public static func getGoogleCredentials(value:Credentials) -> Services.User.Containers.GoogleCredentialsV1? {
           switch value {
           case .GoogleCredentials(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
      case SamlCredentials(Services.User.Containers.SAMLCredentialsV1)

      public static func getSamlCredentials(value:Credentials) -> Services.User.Containers.SAMLCredentialsV1? {
           switch value {
           case .SamlCredentials(let enumValue):
                return enumValue
           default:
                return nil
           }
      }
    }
    //OneOf declaration end

    private var storageCredentials:ResponseV1.Credentials =  ResponseV1.Credentials.CredentialsOneOfNotSet
    public private(set) var hasUser:Bool = false
    public private(set) var user:Services.User.Containers.UserV1!
    public private(set) var hasIdentity:Bool = false
    public private(set) var identity:Services.User.Containers.IdentityV1!
    public private(set) var hasNewUser:Bool = false
    public private(set) var newUser:Bool = false

    public private(set) var hasRedirectUri:Bool = false
    public private(set) var redirectUri:String = ""

    public private(set) var hasGoogleCredentials:Bool {
          get {
               if ResponseV1.Credentials.getGoogleCredentials(storageCredentials) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var googleCredentials:Services.User.Containers.GoogleCredentialsV1!{
         get {
              return ResponseV1.Credentials.getGoogleCredentials(storageCredentials)
         }
         set (newvalue) {
              storageCredentials = ResponseV1.Credentials.GoogleCredentials(newvalue)
         }
    }
    public private(set) var hasSamlCredentials:Bool {
          get {
               if ResponseV1.Credentials.getSamlCredentials(storageCredentials) == nil {
                   return false
               }
               return true
          }
          set(newValue) {
          }
    }
    public private(set) var samlCredentials:Services.User.Containers.SAMLCredentialsV1!{
         get {
              return ResponseV1.Credentials.getSamlCredentials(storageCredentials)
         }
         set (newvalue) {
              storageCredentials = ResponseV1.Credentials.SamlCredentials(newvalue)
         }
    }
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasUser {
        try output.writeMessage(1, value:user)
      }
      if hasIdentity {
        try output.writeMessage(2, value:identity)
      }
      if hasNewUser {
        try output.writeBool(3, value:newUser)
      }
      if hasRedirectUri {
        try output.writeString(4, value:redirectUri)
      }
      if hasGoogleCredentials {
        try output.writeMessage(5, value:googleCredentials)
      }
      if hasSamlCredentials {
        try output.writeMessage(6, value:samlCredentials)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasUser {
          if let varSizeuser = user?.computeMessageSize(1) {
              serialize_size += varSizeuser
          }
      }
      if hasIdentity {
          if let varSizeidentity = identity?.computeMessageSize(2) {
              serialize_size += varSizeidentity
          }
      }
      if hasNewUser {
        serialize_size += newUser.computeBoolSize(3)
      }
      if hasRedirectUri {
        serialize_size += redirectUri.computeStringSize(4)
      }
      if hasGoogleCredentials {
          if let varSizegoogleCredentials = googleCredentials?.computeMessageSize(5) {
              serialize_size += varSizegoogleCredentials
          }
      }
      if hasSamlCredentials {
          if let varSizesamlCredentials = samlCredentials?.computeMessageSize(6) {
              serialize_size += varSizesamlCredentials
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.User.Actions.CompleteAuthorization.ResponseV1> {
      var mergedArray = Array<Services.User.Actions.CompleteAuthorization.ResponseV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.User.Actions.CompleteAuthorization.ResponseV1? {
      return try Services.User.Actions.CompleteAuthorization.ResponseV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.User.Actions.CompleteAuthorization.ResponseV1 {
      return try Services.User.Actions.CompleteAuthorization.ResponseV1.Builder().mergeFromData(data, extensionRegistry:Services.User.Actions.CompleteAuthorization.CompleteAuthorizationRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.CompleteAuthorization.ResponseV1 {
      return try Services.User.Actions.CompleteAuthorization.ResponseV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.User.Actions.CompleteAuthorization.ResponseV1 {
      return try Services.User.Actions.CompleteAuthorization.ResponseV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.CompleteAuthorization.ResponseV1 {
      return try Services.User.Actions.CompleteAuthorization.ResponseV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Actions.CompleteAuthorization.ResponseV1 {
      return try Services.User.Actions.CompleteAuthorization.ResponseV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.CompleteAuthorization.ResponseV1 {
      return try Services.User.Actions.CompleteAuthorization.ResponseV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
      return Services.User.Actions.CompleteAuthorization.ResponseV1.classBuilder() as! Services.User.Actions.CompleteAuthorization.ResponseV1.Builder
    }
    public func getBuilder() -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
      return classBuilder() as! Services.User.Actions.CompleteAuthorization.ResponseV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Actions.CompleteAuthorization.ResponseV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Actions.CompleteAuthorization.ResponseV1.Builder()
    }
    public func toBuilder() throws -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
      return try Services.User.Actions.CompleteAuthorization.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Actions.CompleteAuthorization.ResponseV1) throws -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
      return try Services.User.Actions.CompleteAuthorization.ResponseV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasUser {
        output += "\(indent) user {\n"
        try user?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasIdentity {
        output += "\(indent) identity {\n"
        try identity?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasNewUser {
        output += "\(indent) newUser: \(newUser) \n"
      }
      if hasRedirectUri {
        output += "\(indent) redirectUri: \(redirectUri) \n"
      }
      if hasGoogleCredentials {
        output += "\(indent) googleCredentials {\n"
        try googleCredentials?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasSamlCredentials {
        output += "\(indent) samlCredentials {\n"
        try samlCredentials?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUser {
                if let hashValueuser = user?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuser
                }
            }
            if hasIdentity {
                if let hashValueidentity = identity?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueidentity
                }
            }
            if hasNewUser {
               hashCode = (hashCode &* 31) &+ newUser.hashValue
            }
            if hasRedirectUri {
               hashCode = (hashCode &* 31) &+ redirectUri.hashValue
            }
            if hasGoogleCredentials {
                if let hashValuegoogleCredentials = googleCredentials?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuegoogleCredentials
                }
            }
            if hasSamlCredentials {
                if let hashValuesamlCredentials = samlCredentials?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuesamlCredentials
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Actions.CompleteAuthorization.ResponseV1"
    }
    override public func className() -> String {
        return "Services.User.Actions.CompleteAuthorization.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Actions.CompleteAuthorization.ResponseV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.User.Actions.CompleteAuthorization.ResponseV1 = Services.User.Actions.CompleteAuthorization.ResponseV1()
      public func getMessage() -> Services.User.Actions.CompleteAuthorization.ResponseV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasUser:Bool {
           get {
               return builderResult.hasUser
           }
      }
      public var user:Services.User.Containers.UserV1! {
           get {
               if userBuilder_ != nil {
                  builderResult.user = userBuilder_.getMessage()
               }
               return builderResult.user
           }
           set (value) {
               builderResult.hasUser = true
               builderResult.user = value
           }
      }
      private var userBuilder_:Services.User.Containers.UserV1.Builder! {
           didSet {
              builderResult.hasUser = true
           }
      }
      public func getUserBuilder() -> Services.User.Containers.UserV1.Builder {
        if userBuilder_ == nil {
           userBuilder_ = Services.User.Containers.UserV1.Builder()
           builderResult.user = userBuilder_.getMessage()
           if user != nil {
              try! userBuilder_.mergeFrom(user)
           }
        }
        return userBuilder_
      }
      public func setUser(value:Services.User.Containers.UserV1!) -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        self.user = value
        return self
      }
      public func mergeUser(value:Services.User.Containers.UserV1) throws -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        if builderResult.hasUser {
          builderResult.user = try Services.User.Containers.UserV1.builderWithPrototype(builderResult.user).mergeFrom(value).buildPartial()
        } else {
          builderResult.user = value
        }
        builderResult.hasUser = true
        return self
      }
      public func clearUser() -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        userBuilder_ = nil
        builderResult.hasUser = false
        builderResult.user = nil
        return self
      }
      public var hasIdentity:Bool {
           get {
               return builderResult.hasIdentity
           }
      }
      public var identity:Services.User.Containers.IdentityV1! {
           get {
               if identityBuilder_ != nil {
                  builderResult.identity = identityBuilder_.getMessage()
               }
               return builderResult.identity
           }
           set (value) {
               builderResult.hasIdentity = true
               builderResult.identity = value
           }
      }
      private var identityBuilder_:Services.User.Containers.IdentityV1.Builder! {
           didSet {
              builderResult.hasIdentity = true
           }
      }
      public func getIdentityBuilder() -> Services.User.Containers.IdentityV1.Builder {
        if identityBuilder_ == nil {
           identityBuilder_ = Services.User.Containers.IdentityV1.Builder()
           builderResult.identity = identityBuilder_.getMessage()
           if identity != nil {
              try! identityBuilder_.mergeFrom(identity)
           }
        }
        return identityBuilder_
      }
      public func setIdentity(value:Services.User.Containers.IdentityV1!) -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        self.identity = value
        return self
      }
      public func mergeIdentity(value:Services.User.Containers.IdentityV1) throws -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        if builderResult.hasIdentity {
          builderResult.identity = try Services.User.Containers.IdentityV1.builderWithPrototype(builderResult.identity).mergeFrom(value).buildPartial()
        } else {
          builderResult.identity = value
        }
        builderResult.hasIdentity = true
        return self
      }
      public func clearIdentity() -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        identityBuilder_ = nil
        builderResult.hasIdentity = false
        builderResult.identity = nil
        return self
      }
      public var hasNewUser:Bool {
           get {
                return builderResult.hasNewUser
           }
      }
      public var newUser:Bool {
           get {
                return builderResult.newUser
           }
           set (value) {
               builderResult.hasNewUser = true
               builderResult.newUser = value
           }
      }
      public func setNewUser(value:Bool) -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        self.newUser = value
        return self
      }
      public func clearNewUser() -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder{
           builderResult.hasNewUser = false
           builderResult.newUser = false
           return self
      }
      public var hasRedirectUri:Bool {
           get {
                return builderResult.hasRedirectUri
           }
      }
      public var redirectUri:String {
           get {
                return builderResult.redirectUri
           }
           set (value) {
               builderResult.hasRedirectUri = true
               builderResult.redirectUri = value
           }
      }
      public func setRedirectUri(value:String) -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        self.redirectUri = value
        return self
      }
      public func clearRedirectUri() -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder{
           builderResult.hasRedirectUri = false
           builderResult.redirectUri = ""
           return self
      }
      public var hasGoogleCredentials:Bool {
           get {
               return builderResult.hasGoogleCredentials
           }
      }
      public var googleCredentials:Services.User.Containers.GoogleCredentialsV1! {
           get {
               if googleCredentialsBuilder_ != nil {
                  builderResult.googleCredentials = googleCredentialsBuilder_.getMessage()
               }
               return builderResult.googleCredentials
           }
           set (value) {
               builderResult.hasGoogleCredentials = true
               builderResult.googleCredentials = value
           }
      }
      private var googleCredentialsBuilder_:Services.User.Containers.GoogleCredentialsV1.Builder! {
           didSet {
              builderResult.hasGoogleCredentials = true
           }
      }
      public func getGoogleCredentialsBuilder() -> Services.User.Containers.GoogleCredentialsV1.Builder {
        if googleCredentialsBuilder_ == nil {
           googleCredentialsBuilder_ = Services.User.Containers.GoogleCredentialsV1.Builder()
           builderResult.googleCredentials = googleCredentialsBuilder_.getMessage()
           if googleCredentials != nil {
              try! googleCredentialsBuilder_.mergeFrom(googleCredentials)
           }
        }
        return googleCredentialsBuilder_
      }
      public func setGoogleCredentials(value:Services.User.Containers.GoogleCredentialsV1!) -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        self.googleCredentials = value
        return self
      }
      public func mergeGoogleCredentials(value:Services.User.Containers.GoogleCredentialsV1) throws -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        if builderResult.hasGoogleCredentials {
          builderResult.googleCredentials = try Services.User.Containers.GoogleCredentialsV1.builderWithPrototype(builderResult.googleCredentials).mergeFrom(value).buildPartial()
        } else {
          builderResult.googleCredentials = value
        }
        builderResult.hasGoogleCredentials = true
        return self
      }
      public func clearGoogleCredentials() -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        googleCredentialsBuilder_ = nil
        builderResult.hasGoogleCredentials = false
        builderResult.googleCredentials = nil
        return self
      }
      public var hasSamlCredentials:Bool {
           get {
               return builderResult.hasSamlCredentials
           }
      }
      public var samlCredentials:Services.User.Containers.SAMLCredentialsV1! {
           get {
               if samlCredentialsBuilder_ != nil {
                  builderResult.samlCredentials = samlCredentialsBuilder_.getMessage()
               }
               return builderResult.samlCredentials
           }
           set (value) {
               builderResult.hasSamlCredentials = true
               builderResult.samlCredentials = value
           }
      }
      private var samlCredentialsBuilder_:Services.User.Containers.SAMLCredentialsV1.Builder! {
           didSet {
              builderResult.hasSamlCredentials = true
           }
      }
      public func getSamlCredentialsBuilder() -> Services.User.Containers.SAMLCredentialsV1.Builder {
        if samlCredentialsBuilder_ == nil {
           samlCredentialsBuilder_ = Services.User.Containers.SAMLCredentialsV1.Builder()
           builderResult.samlCredentials = samlCredentialsBuilder_.getMessage()
           if samlCredentials != nil {
              try! samlCredentialsBuilder_.mergeFrom(samlCredentials)
           }
        }
        return samlCredentialsBuilder_
      }
      public func setSamlCredentials(value:Services.User.Containers.SAMLCredentialsV1!) -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        self.samlCredentials = value
        return self
      }
      public func mergeSamlCredentials(value:Services.User.Containers.SAMLCredentialsV1) throws -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        if builderResult.hasSamlCredentials {
          builderResult.samlCredentials = try Services.User.Containers.SAMLCredentialsV1.builderWithPrototype(builderResult.samlCredentials).mergeFrom(value).buildPartial()
        } else {
          builderResult.samlCredentials = value
        }
        builderResult.hasSamlCredentials = true
        return self
      }
      public func clearSamlCredentials() -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        samlCredentialsBuilder_ = nil
        builderResult.hasSamlCredentials = false
        builderResult.samlCredentials = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        builderResult = Services.User.Actions.CompleteAuthorization.ResponseV1()
        return self
      }
      public override func clone() throws -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        return try Services.User.Actions.CompleteAuthorization.ResponseV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.User.Actions.CompleteAuthorization.ResponseV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.User.Actions.CompleteAuthorization.ResponseV1 {
        let returnMe:Services.User.Actions.CompleteAuthorization.ResponseV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.User.Actions.CompleteAuthorization.ResponseV1) throws -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        if other == Services.User.Actions.CompleteAuthorization.ResponseV1() {
         return self
        }
        if (other.hasUser) {
            try mergeUser(other.user)
        }
        if (other.hasIdentity) {
            try mergeIdentity(other.identity)
        }
        if other.hasNewUser {
             newUser = other.newUser
        }
        if other.hasRedirectUri {
             redirectUri = other.redirectUri
        }
        if (other.hasGoogleCredentials) {
            try mergeGoogleCredentials(other.googleCredentials)
        }
        if (other.hasSamlCredentials) {
            try mergeSamlCredentials(other.samlCredentials)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.User.Actions.CompleteAuthorization.ResponseV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder:Services.User.Containers.UserV1.Builder = Services.User.Containers.UserV1.Builder()
            if hasUser {
              try subBuilder.mergeFrom(user)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            user = subBuilder.buildPartial()

          case 18 :
            let subBuilder:Services.User.Containers.IdentityV1.Builder = Services.User.Containers.IdentityV1.Builder()
            if hasIdentity {
              try subBuilder.mergeFrom(identity)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            identity = subBuilder.buildPartial()

          case 24 :
            newUser = try input.readBool()

          case 34 :
            redirectUri = try input.readString()

          case 42 :
            let subBuilder:Services.User.Containers.GoogleCredentialsV1.Builder = Services.User.Containers.GoogleCredentialsV1.Builder()
            if hasGoogleCredentials {
              try subBuilder.mergeFrom(googleCredentials)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            googleCredentials = subBuilder.buildPartial()

          case 50 :
            let subBuilder:Services.User.Containers.SAMLCredentialsV1.Builder = Services.User.Containers.SAMLCredentialsV1.Builder()
            if hasSamlCredentials {
              try subBuilder.mergeFrom(samlCredentials)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            samlCredentials = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
