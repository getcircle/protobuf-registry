// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
import ProtocolBuffers


internal extension Services.Profile{ internal struct Containers { internal struct Profile { }}}

internal func == (lhs: Services.Profile.Containers.Profile.ProfileV1, rhs: Services.Profile.Containers.Profile.ProfileV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  fieldCheck = fieldCheck && (lhs.hasAddressId == rhs.hasAddressId) && (!lhs.hasAddressId || lhs.addressId == rhs.addressId)
  fieldCheck = fieldCheck && (lhs.hasTitle == rhs.hasTitle) && (!lhs.hasTitle || lhs.title == rhs.title)
  fieldCheck = fieldCheck && (lhs.hasFirstName == rhs.hasFirstName) && (!lhs.hasFirstName || lhs.firstName == rhs.firstName)
  fieldCheck = fieldCheck && (lhs.hasLastName == rhs.hasLastName) && (!lhs.hasLastName || lhs.lastName == rhs.lastName)
  fieldCheck = fieldCheck && (lhs.hasCellPhone == rhs.hasCellPhone) && (!lhs.hasCellPhone || lhs.cellPhone == rhs.cellPhone)
  fieldCheck = fieldCheck && (lhs.hasWorkPhone == rhs.hasWorkPhone) && (!lhs.hasWorkPhone || lhs.workPhone == rhs.workPhone)
  fieldCheck = fieldCheck && (lhs.hasImageUrl == rhs.hasImageUrl) && (!lhs.hasImageUrl || lhs.imageUrl == rhs.imageUrl)
  fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
  fieldCheck = fieldCheck && (lhs.hasTeamId == rhs.hasTeamId) && (!lhs.hasTeamId || lhs.teamId == rhs.teamId)
  fieldCheck = fieldCheck && (lhs.hasFullName == rhs.hasFullName) && (!lhs.hasFullName || lhs.fullName == rhs.fullName)
  fieldCheck = fieldCheck && (lhs.hasBirthDate == rhs.hasBirthDate) && (!lhs.hasBirthDate || lhs.birthDate == rhs.birthDate)
  fieldCheck = fieldCheck && (lhs.hasHireDate == rhs.hasHireDate) && (!lhs.hasHireDate || lhs.hireDate == rhs.hireDate)
  fieldCheck = fieldCheck && (lhs.hasVerified == rhs.hasVerified) && (!lhs.hasVerified || lhs.verified == rhs.verified)
  fieldCheck = fieldCheck && (lhs.items == rhs.items)
  fieldCheck = fieldCheck && (lhs.hasAbout == rhs.hasAbout) && (!lhs.hasAbout || lhs.about == rhs.about)
  fieldCheck = fieldCheck && (lhs.hasLocationId == rhs.hasLocationId) && (!lhs.hasLocationId || lhs.locationId == rhs.locationId)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Services.Profile.Containers.Profile.ProfileItemV1, rhs: Services.Profile.Containers.Profile.ProfileItemV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal extension Services.Profile.Containers.Profile {
  internal struct ProfileRoot {
    internal static var sharedInstance : ProfileRoot {
     struct Static {
         static let instance : ProfileRoot = ProfileRoot()
     }
     return Static.instance
    }
    internal var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    internal func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final internal class ProfileV1 : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasVersion:Bool = false
    private(set) var version:UInt32 = UInt32(1)

    private(set) var hasId:Bool = false
    private(set) var id:String = ""

    private(set) var hasOrganizationId:Bool = false
    private(set) var organizationId:String = ""

    private(set) var hasUserId:Bool = false
    private(set) var userId:String = ""

    private(set) var hasAddressId:Bool = false
    private(set) var addressId:String = ""

    private(set) var hasTitle:Bool = false
    private(set) var title:String = ""

    private(set) var hasFirstName:Bool = false
    private(set) var firstName:String = ""

    private(set) var hasLastName:Bool = false
    private(set) var lastName:String = ""

    private(set) var hasCellPhone:Bool = false
    private(set) var cellPhone:String = ""

    private(set) var hasWorkPhone:Bool = false
    private(set) var workPhone:String = ""

    private(set) var hasImageUrl:Bool = false
    private(set) var imageUrl:String = ""

    private(set) var hasEmail:Bool = false
    private(set) var email:String = ""

    private(set) var hasTeamId:Bool = false
    private(set) var teamId:String = ""

    private(set) var hasFullName:Bool = false
    private(set) var fullName:String = ""

    private(set) var hasBirthDate:Bool = false
    private(set) var birthDate:String = ""

    private(set) var hasHireDate:Bool = false
    private(set) var hireDate:String = ""

    private(set) var hasVerified:Bool = false
    private(set) var verified:Bool = false

    private(set) var hasAbout:Bool = false
    private(set) var about:String = ""

    private(set) var hasLocationId:Bool = false
    private(set) var locationId:String = ""

    private(set) var items:Array<Services.Profile.Containers.Profile.ProfileItemV1>  = Array<Services.Profile.Containers.Profile.ProfileItemV1>()
    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasOrganizationId {
        output.writeString(3, value:organizationId)
      }
      if hasUserId {
        output.writeString(4, value:userId)
      }
      if hasAddressId {
        output.writeString(5, value:addressId)
      }
      if hasTitle {
        output.writeString(6, value:title)
      }
      if hasFirstName {
        output.writeString(7, value:firstName)
      }
      if hasLastName {
        output.writeString(8, value:lastName)
      }
      if hasCellPhone {
        output.writeString(9, value:cellPhone)
      }
      if hasWorkPhone {
        output.writeString(10, value:workPhone)
      }
      if hasImageUrl {
        output.writeString(11, value:imageUrl)
      }
      if hasEmail {
        output.writeString(12, value:email)
      }
      if hasTeamId {
        output.writeString(13, value:teamId)
      }
      if hasFullName {
        output.writeString(14, value:fullName)
      }
      if hasBirthDate {
        output.writeString(15, value:birthDate)
      }
      if hasHireDate {
        output.writeString(16, value:hireDate)
      }
      if hasVerified {
        output.writeBool(17, value:verified)
      }
      for oneElementitems in items {
          output.writeMessage(18, value:oneElementitems)
      }
      if hasAbout {
        output.writeString(19, value:about)
      }
      if hasLocationId {
        output.writeString(20, value:locationId)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(3)
      }
      if hasUserId {
        serialize_size += userId.computeStringSize(4)
      }
      if hasAddressId {
        serialize_size += addressId.computeStringSize(5)
      }
      if hasTitle {
        serialize_size += title.computeStringSize(6)
      }
      if hasFirstName {
        serialize_size += firstName.computeStringSize(7)
      }
      if hasLastName {
        serialize_size += lastName.computeStringSize(8)
      }
      if hasCellPhone {
        serialize_size += cellPhone.computeStringSize(9)
      }
      if hasWorkPhone {
        serialize_size += workPhone.computeStringSize(10)
      }
      if hasImageUrl {
        serialize_size += imageUrl.computeStringSize(11)
      }
      if hasEmail {
        serialize_size += email.computeStringSize(12)
      }
      if hasTeamId {
        serialize_size += teamId.computeStringSize(13)
      }
      if hasFullName {
        serialize_size += fullName.computeStringSize(14)
      }
      if hasBirthDate {
        serialize_size += birthDate.computeStringSize(15)
      }
      if hasHireDate {
        serialize_size += hireDate.computeStringSize(16)
      }
      if hasVerified {
        serialize_size += verified.computeBoolSize(17)
      }
      for oneElementitems in items {
          serialize_size += oneElementitems.computeMessageSize(18)
      }
      if hasAbout {
        serialize_size += about.computeStringSize(19)
      }
      if hasLocationId {
        serialize_size += locationId.computeStringSize(20)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Services.Profile.Containers.Profile.ProfileV1 {
      return Services.Profile.Containers.Profile.ProfileV1.builder().mergeFromData(data, extensionRegistry:Services.Profile.Containers.Profile.ProfileRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.Profile.ProfileV1 {
      return Services.Profile.Containers.Profile.ProfileV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Services.Profile.Containers.Profile.ProfileV1 {
      return Services.Profile.Containers.Profile.ProfileV1.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Profile.Containers.Profile.ProfileV1 {
      return Services.Profile.Containers.Profile.ProfileV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Profile.Containers.Profile.ProfileV1 {
      return Services.Profile.Containers.Profile.ProfileV1.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.Profile.ProfileV1 {
      return Services.Profile.Containers.Profile.ProfileV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Services.Profile.Containers.Profile.ProfileV1Builder {
      return Services.Profile.Containers.Profile.ProfileV1.classBuilder() as! Services.Profile.Containers.Profile.ProfileV1Builder
    }
    internal func builder() -> Services.Profile.Containers.Profile.ProfileV1Builder {
      return classBuilder() as! Services.Profile.Containers.Profile.ProfileV1Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.Profile.ProfileV1Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.Profile.ProfileV1.builder()
    }
    internal func toBuilder() -> Services.Profile.Containers.Profile.ProfileV1Builder {
      return Services.Profile.Containers.Profile.ProfileV1.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Services.Profile.Containers.Profile.ProfileV1) -> Services.Profile.Containers.Profile.ProfileV1Builder {
      return Services.Profile.Containers.Profile.ProfileV1.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      if hasUserId {
        output += "\(indent) userId: \(userId) \n"
      }
      if hasAddressId {
        output += "\(indent) addressId: \(addressId) \n"
      }
      if hasTitle {
        output += "\(indent) title: \(title) \n"
      }
      if hasFirstName {
        output += "\(indent) firstName: \(firstName) \n"
      }
      if hasLastName {
        output += "\(indent) lastName: \(lastName) \n"
      }
      if hasCellPhone {
        output += "\(indent) cellPhone: \(cellPhone) \n"
      }
      if hasWorkPhone {
        output += "\(indent) workPhone: \(workPhone) \n"
      }
      if hasImageUrl {
        output += "\(indent) imageUrl: \(imageUrl) \n"
      }
      if hasEmail {
        output += "\(indent) email: \(email) \n"
      }
      if hasTeamId {
        output += "\(indent) teamId: \(teamId) \n"
      }
      if hasFullName {
        output += "\(indent) fullName: \(fullName) \n"
      }
      if hasBirthDate {
        output += "\(indent) birthDate: \(birthDate) \n"
      }
      if hasHireDate {
        output += "\(indent) hireDate: \(hireDate) \n"
      }
      if hasVerified {
        output += "\(indent) verified: \(verified) \n"
      }
      var itemsElementIndex:Int = 0
      for oneElementitems in items {
          output += "\(indent) items[\(itemsElementIndex)] {\n"
          oneElementitems.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          itemsElementIndex++
      }
      if hasAbout {
        output += "\(indent) about: \(about) \n"
      }
      if hasLocationId {
        output += "\(indent) locationId: \(locationId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            if hasUserId {
               hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            if hasAddressId {
               hashCode = (hashCode &* 31) &+ addressId.hashValue
            }
            if hasTitle {
               hashCode = (hashCode &* 31) &+ title.hashValue
            }
            if hasFirstName {
               hashCode = (hashCode &* 31) &+ firstName.hashValue
            }
            if hasLastName {
               hashCode = (hashCode &* 31) &+ lastName.hashValue
            }
            if hasCellPhone {
               hashCode = (hashCode &* 31) &+ cellPhone.hashValue
            }
            if hasWorkPhone {
               hashCode = (hashCode &* 31) &+ workPhone.hashValue
            }
            if hasImageUrl {
               hashCode = (hashCode &* 31) &+ imageUrl.hashValue
            }
            if hasEmail {
               hashCode = (hashCode &* 31) &+ email.hashValue
            }
            if hasTeamId {
               hashCode = (hashCode &* 31) &+ teamId.hashValue
            }
            if hasFullName {
               hashCode = (hashCode &* 31) &+ fullName.hashValue
            }
            if hasBirthDate {
               hashCode = (hashCode &* 31) &+ birthDate.hashValue
            }
            if hasHireDate {
               hashCode = (hashCode &* 31) &+ hireDate.hashValue
            }
            if hasVerified {
               hashCode = (hashCode &* 31) &+ verified.hashValue
            }
            for oneElementitems in items {
                hashCode = (hashCode &* 31) &+ oneElementitems.hashValue
            }
            if hasAbout {
               hashCode = (hashCode &* 31) &+ about.hashValue
            }
            if hasLocationId {
               hashCode = (hashCode &* 31) &+ locationId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Services.Profile.Containers.Profile.ProfileV1"
    }
    override internal func className() -> String {
        return "Services.Profile.Containers.Profile.ProfileV1"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Containers.Profile.ProfileV1.self
    }
    //Meta information declaration end

  }

  final internal class ProfileV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Profile.Containers.Profile.ProfileV1

    required override internal init () {
       builderResult = Services.Profile.Containers.Profile.ProfileV1()
       super.init()
    }
    var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    func setVersion(value:UInt32)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.version = value
      return self
    }
    internal func clearVersion() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    func setId(value:String)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.id = value
      return self
    }
    internal func clearId() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    var hasOrganizationId:Bool {
         get {
              return builderResult.hasOrganizationId
         }
    }
    var organizationId:String {
         get {
              return builderResult.organizationId
         }
         set (value) {
             builderResult.hasOrganizationId = true
             builderResult.organizationId = value
         }
    }
    func setOrganizationId(value:String)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.organizationId = value
      return self
    }
    internal func clearOrganizationId() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasOrganizationId = false
         builderResult.organizationId = ""
         return self
    }
    var hasUserId:Bool {
         get {
              return builderResult.hasUserId
         }
    }
    var userId:String {
         get {
              return builderResult.userId
         }
         set (value) {
             builderResult.hasUserId = true
             builderResult.userId = value
         }
    }
    func setUserId(value:String)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.userId = value
      return self
    }
    internal func clearUserId() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasUserId = false
         builderResult.userId = ""
         return self
    }
    var hasAddressId:Bool {
         get {
              return builderResult.hasAddressId
         }
    }
    var addressId:String {
         get {
              return builderResult.addressId
         }
         set (value) {
             builderResult.hasAddressId = true
             builderResult.addressId = value
         }
    }
    func setAddressId(value:String)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.addressId = value
      return self
    }
    internal func clearAddressId() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasAddressId = false
         builderResult.addressId = ""
         return self
    }
    var hasTitle:Bool {
         get {
              return builderResult.hasTitle
         }
    }
    var title:String {
         get {
              return builderResult.title
         }
         set (value) {
             builderResult.hasTitle = true
             builderResult.title = value
         }
    }
    func setTitle(value:String)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.title = value
      return self
    }
    internal func clearTitle() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasTitle = false
         builderResult.title = ""
         return self
    }
    var hasFirstName:Bool {
         get {
              return builderResult.hasFirstName
         }
    }
    var firstName:String {
         get {
              return builderResult.firstName
         }
         set (value) {
             builderResult.hasFirstName = true
             builderResult.firstName = value
         }
    }
    func setFirstName(value:String)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.firstName = value
      return self
    }
    internal func clearFirstName() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasFirstName = false
         builderResult.firstName = ""
         return self
    }
    var hasLastName:Bool {
         get {
              return builderResult.hasLastName
         }
    }
    var lastName:String {
         get {
              return builderResult.lastName
         }
         set (value) {
             builderResult.hasLastName = true
             builderResult.lastName = value
         }
    }
    func setLastName(value:String)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.lastName = value
      return self
    }
    internal func clearLastName() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasLastName = false
         builderResult.lastName = ""
         return self
    }
    var hasCellPhone:Bool {
         get {
              return builderResult.hasCellPhone
         }
    }
    var cellPhone:String {
         get {
              return builderResult.cellPhone
         }
         set (value) {
             builderResult.hasCellPhone = true
             builderResult.cellPhone = value
         }
    }
    func setCellPhone(value:String)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.cellPhone = value
      return self
    }
    internal func clearCellPhone() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasCellPhone = false
         builderResult.cellPhone = ""
         return self
    }
    var hasWorkPhone:Bool {
         get {
              return builderResult.hasWorkPhone
         }
    }
    var workPhone:String {
         get {
              return builderResult.workPhone
         }
         set (value) {
             builderResult.hasWorkPhone = true
             builderResult.workPhone = value
         }
    }
    func setWorkPhone(value:String)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.workPhone = value
      return self
    }
    internal func clearWorkPhone() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasWorkPhone = false
         builderResult.workPhone = ""
         return self
    }
    var hasImageUrl:Bool {
         get {
              return builderResult.hasImageUrl
         }
    }
    var imageUrl:String {
         get {
              return builderResult.imageUrl
         }
         set (value) {
             builderResult.hasImageUrl = true
             builderResult.imageUrl = value
         }
    }
    func setImageUrl(value:String)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.imageUrl = value
      return self
    }
    internal func clearImageUrl() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasImageUrl = false
         builderResult.imageUrl = ""
         return self
    }
    var hasEmail:Bool {
         get {
              return builderResult.hasEmail
         }
    }
    var email:String {
         get {
              return builderResult.email
         }
         set (value) {
             builderResult.hasEmail = true
             builderResult.email = value
         }
    }
    func setEmail(value:String)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.email = value
      return self
    }
    internal func clearEmail() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasEmail = false
         builderResult.email = ""
         return self
    }
    var hasTeamId:Bool {
         get {
              return builderResult.hasTeamId
         }
    }
    var teamId:String {
         get {
              return builderResult.teamId
         }
         set (value) {
             builderResult.hasTeamId = true
             builderResult.teamId = value
         }
    }
    func setTeamId(value:String)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.teamId = value
      return self
    }
    internal func clearTeamId() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasTeamId = false
         builderResult.teamId = ""
         return self
    }
    var hasFullName:Bool {
         get {
              return builderResult.hasFullName
         }
    }
    var fullName:String {
         get {
              return builderResult.fullName
         }
         set (value) {
             builderResult.hasFullName = true
             builderResult.fullName = value
         }
    }
    func setFullName(value:String)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.fullName = value
      return self
    }
    internal func clearFullName() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasFullName = false
         builderResult.fullName = ""
         return self
    }
    var hasBirthDate:Bool {
         get {
              return builderResult.hasBirthDate
         }
    }
    var birthDate:String {
         get {
              return builderResult.birthDate
         }
         set (value) {
             builderResult.hasBirthDate = true
             builderResult.birthDate = value
         }
    }
    func setBirthDate(value:String)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.birthDate = value
      return self
    }
    internal func clearBirthDate() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasBirthDate = false
         builderResult.birthDate = ""
         return self
    }
    var hasHireDate:Bool {
         get {
              return builderResult.hasHireDate
         }
    }
    var hireDate:String {
         get {
              return builderResult.hireDate
         }
         set (value) {
             builderResult.hasHireDate = true
             builderResult.hireDate = value
         }
    }
    func setHireDate(value:String)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.hireDate = value
      return self
    }
    internal func clearHireDate() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasHireDate = false
         builderResult.hireDate = ""
         return self
    }
    var hasVerified:Bool {
         get {
              return builderResult.hasVerified
         }
    }
    var verified:Bool {
         get {
              return builderResult.verified
         }
         set (value) {
             builderResult.hasVerified = true
             builderResult.verified = value
         }
    }
    func setVerified(value:Bool)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.verified = value
      return self
    }
    internal func clearVerified() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasVerified = false
         builderResult.verified = false
         return self
    }
    var items:Array<Services.Profile.Containers.Profile.ProfileItemV1> {
         get {
             return builderResult.items
         }
         set (value) {
             builderResult.items = value
         }
    }
    func setItems(value:Array<Services.Profile.Containers.Profile.ProfileItemV1>)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.items = value
      return self
    }
    internal func clearItems() -> Services.Profile.Containers.Profile.ProfileV1Builder {
      builderResult.items.removeAll(keepCapacity: false)
      return self
    }
    var hasAbout:Bool {
         get {
              return builderResult.hasAbout
         }
    }
    var about:String {
         get {
              return builderResult.about
         }
         set (value) {
             builderResult.hasAbout = true
             builderResult.about = value
         }
    }
    func setAbout(value:String)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.about = value
      return self
    }
    internal func clearAbout() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasAbout = false
         builderResult.about = ""
         return self
    }
    var hasLocationId:Bool {
         get {
              return builderResult.hasLocationId
         }
    }
    var locationId:String {
         get {
              return builderResult.locationId
         }
         set (value) {
             builderResult.hasLocationId = true
             builderResult.locationId = value
         }
    }
    func setLocationId(value:String)-> Services.Profile.Containers.Profile.ProfileV1Builder {
      self.locationId = value
      return self
    }
    internal func clearLocationId() -> Services.Profile.Containers.Profile.ProfileV1Builder{
         builderResult.hasLocationId = false
         builderResult.locationId = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Services.Profile.Containers.Profile.ProfileV1Builder {
      builderResult = Services.Profile.Containers.Profile.ProfileV1()
      return self
    }
    internal override func clone() -> Services.Profile.Containers.Profile.ProfileV1Builder {
      return Services.Profile.Containers.Profile.ProfileV1.builderWithPrototype(builderResult)
    }
    internal override func build() -> Services.Profile.Containers.Profile.ProfileV1 {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Services.Profile.Containers.Profile.ProfileV1 {
      var returnMe:Services.Profile.Containers.Profile.ProfileV1 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Services.Profile.Containers.Profile.ProfileV1) -> Services.Profile.Containers.Profile.ProfileV1Builder {
      if (other == Services.Profile.Containers.Profile.ProfileV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasOrganizationId {
           organizationId = other.organizationId
      }
      if other.hasUserId {
           userId = other.userId
      }
      if other.hasAddressId {
           addressId = other.addressId
      }
      if other.hasTitle {
           title = other.title
      }
      if other.hasFirstName {
           firstName = other.firstName
      }
      if other.hasLastName {
           lastName = other.lastName
      }
      if other.hasCellPhone {
           cellPhone = other.cellPhone
      }
      if other.hasWorkPhone {
           workPhone = other.workPhone
      }
      if other.hasImageUrl {
           imageUrl = other.imageUrl
      }
      if other.hasEmail {
           email = other.email
      }
      if other.hasTeamId {
           teamId = other.teamId
      }
      if other.hasFullName {
           fullName = other.fullName
      }
      if other.hasBirthDate {
           birthDate = other.birthDate
      }
      if other.hasHireDate {
           hireDate = other.hireDate
      }
      if other.hasVerified {
           verified = other.verified
      }
      if !other.items.isEmpty  {
         builderResult.items += other.items
      }
      if other.hasAbout {
           about = other.about
      }
      if other.hasLocationId {
           locationId = other.locationId
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Profile.Containers.Profile.ProfileV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.Profile.ProfileV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          organizationId = input.readString()

        case 34 :
          userId = input.readString()

        case 42 :
          addressId = input.readString()

        case 50 :
          title = input.readString()

        case 58 :
          firstName = input.readString()

        case 66 :
          lastName = input.readString()

        case 74 :
          cellPhone = input.readString()

        case 82 :
          workPhone = input.readString()

        case 90 :
          imageUrl = input.readString()

        case 98 :
          email = input.readString()

        case 106 :
          teamId = input.readString()

        case 114 :
          fullName = input.readString()

        case 122 :
          birthDate = input.readString()

        case 130 :
          hireDate = input.readString()

        case 136 :
          verified = input.readBool()

        case 146 :
          var subBuilder = Services.Profile.Containers.Profile.ProfileItemV1.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          items += [subBuilder.buildPartial()]

        case 154 :
          about = input.readString()

        case 162 :
          locationId = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final internal class ProfileItemV1 : GeneratedMessage, GeneratedMessageProtocol {
    private(set) var hasVersion:Bool = false
    private(set) var version:UInt32 = UInt32(0)

    private(set) var hasKey:Bool = false
    private(set) var key:String = ""

    private(set) var hasValue:Bool = false
    private(set) var value:String = ""

    required internal init() {
         super.init()
    }
    override internal func isInitialized() -> Bool {
     return true
    }
    override internal func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasKey {
        output.writeString(2, value:key)
      }
      if hasValue {
        output.writeString(3, value:value)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override internal func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasKey {
        serialize_size += key.computeStringSize(2)
      }
      if hasValue {
        serialize_size += value.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    internal class func parseFromData(data:NSData) -> Services.Profile.Containers.Profile.ProfileItemV1 {
      return Services.Profile.Containers.Profile.ProfileItemV1.builder().mergeFromData(data, extensionRegistry:Services.Profile.Containers.Profile.ProfileRoot.sharedInstance.extensionRegistry).build()
    }
    internal class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.Profile.ProfileItemV1 {
      return Services.Profile.Containers.Profile.ProfileItemV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromInputStream(input:NSInputStream) -> Services.Profile.Containers.Profile.ProfileItemV1 {
      return Services.Profile.Containers.Profile.ProfileItemV1.builder().mergeFromInputStream(input).build()
    }
    internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Profile.Containers.Profile.ProfileItemV1 {
      return Services.Profile.Containers.Profile.ProfileItemV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Profile.Containers.Profile.ProfileItemV1 {
      return Services.Profile.Containers.Profile.ProfileItemV1.builder().mergeFromCodedInputStream(input).build()
    }
    internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.Profile.ProfileItemV1 {
      return Services.Profile.Containers.Profile.ProfileItemV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    internal class func builder() -> Services.Profile.Containers.Profile.ProfileItemV1Builder {
      return Services.Profile.Containers.Profile.ProfileItemV1.classBuilder() as! Services.Profile.Containers.Profile.ProfileItemV1Builder
    }
    internal func builder() -> Services.Profile.Containers.Profile.ProfileItemV1Builder {
      return classBuilder() as! Services.Profile.Containers.Profile.ProfileItemV1Builder
    }
    internal override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.Profile.ProfileItemV1Builder()
    }
    internal override func classBuilder() -> MessageBuilder {
      return Services.Profile.Containers.Profile.ProfileItemV1.builder()
    }
    internal func toBuilder() -> Services.Profile.Containers.Profile.ProfileItemV1Builder {
      return Services.Profile.Containers.Profile.ProfileItemV1.builderWithPrototype(self)
    }
    internal class func builderWithPrototype(prototype:Services.Profile.Containers.Profile.ProfileItemV1) -> Services.Profile.Containers.Profile.ProfileItemV1Builder {
      return Services.Profile.Containers.Profile.ProfileItemV1.builder().mergeFrom(prototype)
    }
    override internal func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasKey {
        output += "\(indent) key: \(key) \n"
      }
      if hasValue {
        output += "\(indent) value: \(value) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override internal var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasKey {
               hashCode = (hashCode &* 31) &+ key.hashValue
            }
            if hasValue {
               hashCode = (hashCode &* 31) &+ value.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override internal class func className() -> String {
        return "Services.Profile.Containers.Profile.ProfileItemV1"
    }
    override internal func className() -> String {
        return "Services.Profile.Containers.Profile.ProfileItemV1"
    }
    override internal func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Containers.Profile.ProfileItemV1.self
    }
    //Meta information declaration end

  }

  final internal class ProfileItemV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Profile.Containers.Profile.ProfileItemV1

    required override internal init () {
       builderResult = Services.Profile.Containers.Profile.ProfileItemV1()
       super.init()
    }
    var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    func setVersion(value:UInt32)-> Services.Profile.Containers.Profile.ProfileItemV1Builder {
      self.version = value
      return self
    }
    internal func clearVersion() -> Services.Profile.Containers.Profile.ProfileItemV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(0)
         return self
    }
    var hasKey:Bool {
         get {
              return builderResult.hasKey
         }
    }
    var key:String {
         get {
              return builderResult.key
         }
         set (value) {
             builderResult.hasKey = true
             builderResult.key = value
         }
    }
    func setKey(value:String)-> Services.Profile.Containers.Profile.ProfileItemV1Builder {
      self.key = value
      return self
    }
    internal func clearKey() -> Services.Profile.Containers.Profile.ProfileItemV1Builder{
         builderResult.hasKey = false
         builderResult.key = ""
         return self
    }
    var hasValue:Bool {
         get {
              return builderResult.hasValue
         }
    }
    var value:String {
         get {
              return builderResult.value
         }
         set (value) {
             builderResult.hasValue = true
             builderResult.value = value
         }
    }
    func setValue(value:String)-> Services.Profile.Containers.Profile.ProfileItemV1Builder {
      self.value = value
      return self
    }
    internal func clearValue() -> Services.Profile.Containers.Profile.ProfileItemV1Builder{
         builderResult.hasValue = false
         builderResult.value = ""
         return self
    }
    override internal var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    internal override func clear() -> Services.Profile.Containers.Profile.ProfileItemV1Builder {
      builderResult = Services.Profile.Containers.Profile.ProfileItemV1()
      return self
    }
    internal override func clone() -> Services.Profile.Containers.Profile.ProfileItemV1Builder {
      return Services.Profile.Containers.Profile.ProfileItemV1.builderWithPrototype(builderResult)
    }
    internal override func build() -> Services.Profile.Containers.Profile.ProfileItemV1 {
         checkInitialized()
         return buildPartial()
    }
    internal func buildPartial() -> Services.Profile.Containers.Profile.ProfileItemV1 {
      var returnMe:Services.Profile.Containers.Profile.ProfileItemV1 = builderResult
      return returnMe
    }
    internal func mergeFrom(other:Services.Profile.Containers.Profile.ProfileItemV1) -> Services.Profile.Containers.Profile.ProfileItemV1Builder {
      if (other == Services.Profile.Containers.Profile.ProfileItemV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasKey {
           key = other.key
      }
      if other.hasValue {
           value = other.value
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Profile.Containers.Profile.ProfileItemV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Profile.Containers.Profile.ProfileItemV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          key = input.readString()

        case 26 :
          value = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
