// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file get_teams_for_profile_ids.proto

import Foundation

public extension Services.Organization.Actions{ public struct GetTeamsForProfileIds { }}

public func == (lhs: Services.Organization.Actions.GetTeamsForProfileIds.RequestV1, rhs: Services.Organization.Actions.GetTeamsForProfileIds.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.profileIds == rhs.profileIds)
  fieldCheck = fieldCheck && (lhs.hasFields == rhs.hasFields) && (!lhs.hasFields || lhs.fields == rhs.fields)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1, rhs: Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.profilesTeams == rhs.profilesTeams)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1, rhs: Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasProfileId == rhs.hasProfileId) && (!lhs.hasProfileId || lhs.profileId == rhs.profileId)
  fieldCheck = fieldCheck && (lhs.hasTeam == rhs.hasTeam) && (!lhs.hasTeam || lhs.team == rhs.team)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Organization.Actions.GetTeamsForProfileIds {
  public struct GetTeamsForProfileIdsRoot {
    public static var sharedInstance : GetTeamsForProfileIdsRoot {
     struct Static {
         static let instance : GetTeamsForProfileIdsRoot = GetTeamsForProfileIdsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Common.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Organization.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var profileIds:Array<String> = Array<String>()
    public private(set) var hasFields:Bool = false
    public private(set) var fields:Services.Common.Containers.FieldsV1!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if !profileIds.isEmpty {
        for oneValueprofileIds in profileIds {
          try output.writeString(1, value:oneValueprofileIds)
        }
      }
      if hasFields {
        try output.writeMessage(2, value:fields)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      var dataSizeProfileIds:Int32 = 0
      for oneValueprofileIds in profileIds {
          dataSizeProfileIds += oneValueprofileIds.computeStringSizeNoTag()
      }
      serialize_size += dataSizeProfileIds
      serialize_size += 1 * Int32(profileIds.count)
      if hasFields {
          if let varSizefields = fields?.computeMessageSize(2) {
              serialize_size += varSizefields
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Actions.GetTeamsForProfileIds.RequestV1> {
      var mergedArray = Array<Services.Organization.Actions.GetTeamsForProfileIds.RequestV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1? {
      return try Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1 {
      return try Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Actions.GetTeamsForProfileIds.GetTeamsForProfileIdsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1 {
      return try Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1 {
      return try Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1 {
      return try Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1 {
      return try Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1 {
      return try Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder {
      return Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.classBuilder() as! Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder
    }
    public func getBuilder() -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder {
      return classBuilder() as! Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder {
      return try Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Actions.GetTeamsForProfileIds.RequestV1) throws -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder {
      return try Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      var profileIdsElementIndex:Int = 0
      for oneValueprofileIds in profileIds  {
          output += "\(indent) profileIds[\(profileIdsElementIndex)]: \(oneValueprofileIds)\n"
          profileIdsElementIndex++
      }
      if hasFields {
        output += "\(indent) fields {\n"
        try fields?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneValueprofileIds in profileIds {
                hashCode = (hashCode &* 31) &+ oneValueprofileIds.hashValue
            }
            if hasFields {
                if let hashValuefields = fields?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefields
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Actions.GetTeamsForProfileIds.RequestV1"
    }
    override public func className() -> String {
        return "Services.Organization.Actions.GetTeamsForProfileIds.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Actions.GetTeamsForProfileIds.RequestV1 = Services.Organization.Actions.GetTeamsForProfileIds.RequestV1()
      public func getMessage() -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var profileIds:Array<String> {
           get {
               return builderResult.profileIds
           }
           set (array) {
               builderResult.profileIds = array
           }
      }
      public func setProfileIds(value:Array<String>) -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder {
        self.profileIds = value
        return self
      }
      public func clearProfileIds() -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder {
         builderResult.profileIds.removeAll(keepCapacity: false)
         return self
      }
      public var hasFields:Bool {
           get {
               return builderResult.hasFields
           }
      }
      public var fields:Services.Common.Containers.FieldsV1! {
           get {
               if fieldsBuilder_ != nil {
                  builderResult.fields = fieldsBuilder_.getMessage()
               }
               return builderResult.fields
           }
           set (value) {
               builderResult.hasFields = true
               builderResult.fields = value
           }
      }
      private var fieldsBuilder_:Services.Common.Containers.FieldsV1.Builder! {
           didSet {
              builderResult.hasFields = true
           }
      }
      public func getFieldsBuilder() -> Services.Common.Containers.FieldsV1.Builder {
        if fieldsBuilder_ == nil {
           fieldsBuilder_ = Services.Common.Containers.FieldsV1.Builder()
           builderResult.fields = fieldsBuilder_.getMessage()
           if fields != nil {
              try! fieldsBuilder_.mergeFrom(fields)
           }
        }
        return fieldsBuilder_
      }
      public func setFields(value:Services.Common.Containers.FieldsV1!) -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder {
        self.fields = value
        return self
      }
      public func mergeFields(value:Services.Common.Containers.FieldsV1) throws -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder {
        if builderResult.hasFields {
          builderResult.fields = try Services.Common.Containers.FieldsV1.builderWithPrototype(builderResult.fields).mergeFrom(value).buildPartial()
        } else {
          builderResult.fields = value
        }
        builderResult.hasFields = true
        return self
      }
      public func clearFields() -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder {
        fieldsBuilder_ = nil
        builderResult.hasFields = false
        builderResult.fields = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder {
        builderResult = Services.Organization.Actions.GetTeamsForProfileIds.RequestV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder {
        return try Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1 {
        let returnMe:Services.Organization.Actions.GetTeamsForProfileIds.RequestV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Actions.GetTeamsForProfileIds.RequestV1) throws -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder {
        if other == Services.Organization.Actions.GetTeamsForProfileIds.RequestV1() {
         return self
        }
        if !other.profileIds.isEmpty {
            builderResult.profileIds += other.profileIds
        }
        if (other.hasFields) {
            try mergeFields(other.fields)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetTeamsForProfileIds.RequestV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            profileIds += [try input.readString()]

          case 18 :
            let subBuilder:Services.Common.Containers.FieldsV1.Builder = Services.Common.Containers.FieldsV1.Builder()
            if hasFields {
              try subBuilder.mergeFrom(fields)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            fields = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {


    //Nested type declaration start

      final public class ProfileTeamV1 : GeneratedMessage, GeneratedMessageProtocol {
        public private(set) var hasProfileId:Bool = false
        public private(set) var profileId:String = ""

        public private(set) var hasTeam:Bool = false
        public private(set) var team:Services.Organization.Containers.TeamV1!
        required public init() {
             super.init()
        }
        override public func isInitialized() -> Bool {
         return true
        }
        override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
          if hasProfileId {
            try output.writeString(1, value:profileId)
          }
          if hasTeam {
            try output.writeMessage(2, value:team)
          }
          try unknownFields.writeToCodedOutputStream(output)
        }
        override public func serializedSize() -> Int32 {
          var serialize_size:Int32 = memoizedSerializedSize
          if serialize_size != -1 {
           return serialize_size
          }

          serialize_size = 0
          if hasProfileId {
            serialize_size += profileId.computeStringSize(1)
          }
          if hasTeam {
              if let varSizeteam = team?.computeMessageSize(2) {
                  serialize_size += varSizeteam
              }
          }
          serialize_size += unknownFields.serializedSize()
          memoizedSerializedSize = serialize_size
          return serialize_size
        }
        public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1> {
          var mergedArray = Array<Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1>()
          while let value = try parseFromDelimitedFromInputStream(input) {
            mergedArray += [value]
          }
          return mergedArray
        }
        public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1? {
          return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder().mergeDelimitedFromInputStream(input)?.build()
        }
        public class func parseFromData(data:NSData) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1 {
          return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Actions.GetTeamsForProfileIds.GetTeamsForProfileIdsRoot.sharedInstance.extensionRegistry).build()
        }
        public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1 {
          return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1 {
          return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder().mergeFromInputStream(input).build()
        }
        public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1 {
          return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1 {
          return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder().mergeFromCodedInputStream(input).build()
        }
        public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1 {
          return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
        }
        public class func getBuilder() -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder {
          return Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.classBuilder() as! Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder
        }
        public func getBuilder() -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder {
          return classBuilder() as! Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder
        }
        public override class func classBuilder() -> MessageBuilder {
          return Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder()
        }
        public override func classBuilder() -> MessageBuilder {
          return Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder()
        }
        public func toBuilder() throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder {
          return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.builderWithPrototype(self)
        }
        public class func builderWithPrototype(prototype:Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder {
          return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder().mergeFrom(prototype)
        }
        override public func writeDescriptionTo(inout output:String, indent:String) throws {
          if hasProfileId {
            output += "\(indent) profileId: \(profileId) \n"
          }
          if hasTeam {
            output += "\(indent) team {\n"
            try team?.writeDescriptionTo(&output, indent:"\(indent)  ")
            output += "\(indent) }\n"
          }
          unknownFields.writeDescriptionTo(&output, indent:indent)
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasProfileId {
                   hashCode = (hashCode &* 31) &+ profileId.hashValue
                }
                if hasTeam {
                    if let hashValueteam = team?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueteam
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1"
        }
        override public func className() -> String {
            return "Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1"
        }
        override public func classMetaType() -> GeneratedMessage.Type {
            return Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.self
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
          private var builderResult:Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1 = Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1()
          public func getMessage() -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1 {
              return builderResult
          }

          required override public init () {
             super.init()
          }
          public var hasProfileId:Bool {
               get {
                    return builderResult.hasProfileId
               }
          }
          public var profileId:String {
               get {
                    return builderResult.profileId
               }
               set (value) {
                   builderResult.hasProfileId = true
                   builderResult.profileId = value
               }
          }
          public func setProfileId(value:String) -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder {
            self.profileId = value
            return self
          }
          public func clearProfileId() -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder{
               builderResult.hasProfileId = false
               builderResult.profileId = ""
               return self
          }
          public var hasTeam:Bool {
               get {
                   return builderResult.hasTeam
               }
          }
          public var team:Services.Organization.Containers.TeamV1! {
               get {
                   if teamBuilder_ != nil {
                      builderResult.team = teamBuilder_.getMessage()
                   }
                   return builderResult.team
               }
               set (value) {
                   builderResult.hasTeam = true
                   builderResult.team = value
               }
          }
          private var teamBuilder_:Services.Organization.Containers.TeamV1.Builder! {
               didSet {
                  builderResult.hasTeam = true
               }
          }
          public func getTeamBuilder() -> Services.Organization.Containers.TeamV1.Builder {
            if teamBuilder_ == nil {
               teamBuilder_ = Services.Organization.Containers.TeamV1.Builder()
               builderResult.team = teamBuilder_.getMessage()
               if team != nil {
                  try! teamBuilder_.mergeFrom(team)
               }
            }
            return teamBuilder_
          }
          public func setTeam(value:Services.Organization.Containers.TeamV1!) -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder {
            self.team = value
            return self
          }
          public func mergeTeam(value:Services.Organization.Containers.TeamV1) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder {
            if builderResult.hasTeam {
              builderResult.team = try Services.Organization.Containers.TeamV1.builderWithPrototype(builderResult.team).mergeFrom(value).buildPartial()
            } else {
              builderResult.team = value
            }
            builderResult.hasTeam = true
            return self
          }
          public func clearTeam() -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder {
            teamBuilder_ = nil
            builderResult.hasTeam = false
            builderResult.team = nil
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder {
            builderResult = Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1()
            return self
          }
          public override func clone() throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder {
            return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.builderWithPrototype(builderResult)
          }
          public override func build() throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1 {
               try checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1 {
            let returnMe:Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1 = builderResult
            return returnMe
          }
          public func mergeFrom(other:Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder {
            if other == Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1() {
             return self
            }
            if other.hasProfileId {
                 profileId = other.profileId
            }
            if (other.hasTeam) {
                try mergeTeam(other.team)
            }
            try mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder {
               return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              let tag = try input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = try unknownFieldsBuilder.build()
                return self

              case 10 :
                profileId = try input.readString()

              case 18 :
                let subBuilder:Services.Organization.Containers.TeamV1.Builder = Services.Organization.Containers.TeamV1.Builder()
                if hasTeam {
                  try subBuilder.mergeFrom(team)
                }
                try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
                team = subBuilder.buildPartial()

              default:
                if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
                   unknownFields = try unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }

      }

    //Nested type declaration end

    public private(set) var profilesTeams:Array<Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1>  = Array<Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      for oneElementprofilesTeams in profilesTeams {
          try output.writeMessage(1, value:oneElementprofilesTeams)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementprofilesTeams in profilesTeams {
          serialize_size += oneElementprofilesTeams.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1> {
      var mergedArray = Array<Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1? {
      return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1 {
      return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder().mergeFromData(data, extensionRegistry:Services.Organization.Actions.GetTeamsForProfileIds.GetTeamsForProfileIdsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1 {
      return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1 {
      return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1 {
      return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1 {
      return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1 {
      return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder {
      return Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.classBuilder() as! Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder
    }
    public func getBuilder() -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder {
      return classBuilder() as! Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder()
    }
    public func toBuilder() throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder {
      return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder {
      return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      var profilesTeamsElementIndex:Int = 0
      for oneElementprofilesTeams in profilesTeams {
          output += "\(indent) profilesTeams[\(profilesTeamsElementIndex)] {\n"
          try oneElementprofilesTeams.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          profilesTeamsElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementprofilesTeams in profilesTeams {
                hashCode = (hashCode &* 31) &+ oneElementprofilesTeams.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1"
    }
    override public func className() -> String {
        return "Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1 = Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1()
      public func getMessage() -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var profilesTeams:Array<Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1> {
           get {
               return builderResult.profilesTeams
           }
           set (value) {
               builderResult.profilesTeams = value
           }
      }
      public func setProfilesTeams(value:Array<Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1>) -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder {
        self.profilesTeams = value
        return self
      }
      public func clearProfilesTeams() -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder {
        builderResult.profilesTeams.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder {
        builderResult = Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1()
        return self
      }
      public override func clone() throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder {
        return try Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1 {
        let returnMe:Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder {
        if other == Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1() {
         return self
        }
        if !other.profilesTeams.isEmpty  {
           builderResult.profilesTeams += other.profilesTeams
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder = Services.Organization.Actions.GetTeamsForProfileIds.ResponseV1.ProfileTeamV1.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            profilesTeams += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
