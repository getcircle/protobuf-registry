// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.User{ public struct Containers { }}

public func == (lhs: Services.User.Containers.AccessRequestV1, rhs: Services.User.Containers.AccessRequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.User.Containers.DeviceV1, rhs: Services.User.Containers.DeviceV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasNotificationToken == rhs.hasNotificationToken) && (!lhs.hasNotificationToken || lhs.notificationToken == rhs.notificationToken)
  fieldCheck = fieldCheck && (lhs.hasPlatform == rhs.hasPlatform) && (!lhs.hasPlatform || lhs.platform == rhs.platform)
  fieldCheck = fieldCheck && (lhs.hasOsVersion == rhs.hasOsVersion) && (!lhs.hasOsVersion || lhs.osVersion == rhs.osVersion)
  fieldCheck = fieldCheck && (lhs.hasAppVersion == rhs.hasAppVersion) && (!lhs.hasAppVersion || lhs.appVersion == rhs.appVersion)
  fieldCheck = fieldCheck && (lhs.hasDeviceUuid == rhs.hasDeviceUuid) && (!lhs.hasDeviceUuid || lhs.deviceUuid == rhs.deviceUuid)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  fieldCheck = fieldCheck && (lhs.hasLanguagePreference == rhs.hasLanguagePreference) && (!lhs.hasLanguagePreference || lhs.languagePreference == rhs.languagePreference)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.User.Containers.IdentityV1, rhs: Services.User.Containers.IdentityV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasProvider == rhs.hasProvider) && (!lhs.hasProvider || lhs.provider == rhs.provider)
  fieldCheck = fieldCheck && (lhs.hasFullName == rhs.hasFullName) && (!lhs.hasFullName || lhs.fullName == rhs.fullName)
  fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
  fieldCheck = fieldCheck && (lhs.hasAccessToken == rhs.hasAccessToken) && (!lhs.hasAccessToken || lhs.accessToken == rhs.accessToken)
  fieldCheck = fieldCheck && (lhs.hasExpiresAt == rhs.hasExpiresAt) && (!lhs.hasExpiresAt || lhs.expiresAt == rhs.expiresAt)
  fieldCheck = fieldCheck && (lhs.hasProviderUid == rhs.hasProviderUid) && (!lhs.hasProviderUid || lhs.providerUid == rhs.providerUid)
  fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
  fieldCheck = fieldCheck && (lhs.hasRefreshToken == rhs.hasRefreshToken) && (!lhs.hasRefreshToken || lhs.refreshToken == rhs.refreshToken)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.User.Containers.OAuth2DetailsV1, rhs: Services.User.Containers.OAuth2DetailsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasCode == rhs.hasCode) && (!lhs.hasCode || lhs.code == rhs.code)
  fieldCheck = fieldCheck && (lhs.hasState == rhs.hasState) && (!lhs.hasState || lhs.state == rhs.state)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.User.Containers.OAuthSDKDetailsV1, rhs: Services.User.Containers.OAuthSDKDetailsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasCode == rhs.hasCode) && (!lhs.hasCode || lhs.code == rhs.code)
  fieldCheck = fieldCheck && (lhs.hasIdToken == rhs.hasIdToken) && (!lhs.hasIdToken || lhs.idToken == rhs.idToken)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.User.Containers.UserV1, rhs: Services.User.Containers.UserV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasPrimaryEmail == rhs.hasPrimaryEmail) && (!lhs.hasPrimaryEmail || lhs.primaryEmail == rhs.primaryEmail)
  fieldCheck = fieldCheck && (lhs.hasIsAdmin == rhs.hasIsAdmin) && (!lhs.hasIsAdmin || lhs.isAdmin == rhs.isAdmin)
  fieldCheck = fieldCheck && (lhs.hasIsActive == rhs.hasIsActive) && (!lhs.hasIsActive || lhs.isActive == rhs.isActive)
  fieldCheck = fieldCheck && (lhs.hasPhoneNumber == rhs.hasPhoneNumber) && (!lhs.hasPhoneNumber || lhs.phoneNumber == rhs.phoneNumber)
  fieldCheck = fieldCheck && (lhs.hasPhoneNumberVerified == rhs.hasPhoneNumberVerified) && (!lhs.hasPhoneNumberVerified || lhs.phoneNumberVerified == rhs.phoneNumberVerified)
  fieldCheck = fieldCheck && (lhs.hasPassword == rhs.hasPassword) && (!lhs.hasPassword || lhs.password == rhs.password)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.User.Containers {
  public struct ContainersRoot {
    public static var sharedInstance : ContainersRoot {
     struct Static {
         static let instance : ContainersRoot = ContainersRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class AccessRequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "userId": return userId
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasUserId:Bool = false
    public private(set) var userId:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasUserId {
        output.writeString(3, value:userId)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasUserId {
        serialize_size += userId.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.User.Containers.AccessRequestV1 {
      return Services.User.Containers.AccessRequestV1.builder().mergeFromData(data, extensionRegistry:Services.User.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.AccessRequestV1 {
      return Services.User.Containers.AccessRequestV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.User.Containers.AccessRequestV1 {
      return Services.User.Containers.AccessRequestV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.User.Containers.AccessRequestV1 {
      return Services.User.Containers.AccessRequestV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.User.Containers.AccessRequestV1 {
      return Services.User.Containers.AccessRequestV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.AccessRequestV1 {
      return Services.User.Containers.AccessRequestV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.User.Containers.AccessRequestV1Builder {
      return Services.User.Containers.AccessRequestV1.classBuilder() as! Services.User.Containers.AccessRequestV1Builder
    }
    public func builder() -> Services.User.Containers.AccessRequestV1Builder {
      return classBuilder() as! Services.User.Containers.AccessRequestV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Containers.AccessRequestV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Containers.AccessRequestV1.builder()
    }
    public func toBuilder() -> Services.User.Containers.AccessRequestV1Builder {
      return Services.User.Containers.AccessRequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Containers.AccessRequestV1) -> Services.User.Containers.AccessRequestV1Builder {
      return Services.User.Containers.AccessRequestV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasUserId {
        output += "\(indent) userId: \(userId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasUserId {
               hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Containers.AccessRequestV1"
    }
    override public func className() -> String {
        return "Services.User.Containers.AccessRequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Containers.AccessRequestV1.self
    }
    //Meta information declaration end

  }

  final public class AccessRequestV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.User.Containers.AccessRequestV1

    required override public init () {
       builderResult = Services.User.Containers.AccessRequestV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.User.Containers.AccessRequestV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.User.Containers.AccessRequestV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.User.Containers.AccessRequestV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.User.Containers.AccessRequestV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasUserId:Bool {
         get {
              return builderResult.hasUserId
         }
    }
    public var userId:String {
         get {
              return builderResult.userId
         }
         set (value) {
             builderResult.hasUserId = true
             builderResult.userId = value
         }
    }
    public func setUserId(value:String)-> Services.User.Containers.AccessRequestV1Builder {
      self.userId = value
      return self
    }
    public func clearUserId() -> Services.User.Containers.AccessRequestV1Builder{
         builderResult.hasUserId = false
         builderResult.userId = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.User.Containers.AccessRequestV1Builder {
      builderResult = Services.User.Containers.AccessRequestV1()
      return self
    }
    public override func clone() -> Services.User.Containers.AccessRequestV1Builder {
      return Services.User.Containers.AccessRequestV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.User.Containers.AccessRequestV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.User.Containers.AccessRequestV1 {
      var returnMe:Services.User.Containers.AccessRequestV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.User.Containers.AccessRequestV1) -> Services.User.Containers.AccessRequestV1Builder {
      if (other == Services.User.Containers.AccessRequestV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasUserId {
           userId = other.userId
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.User.Containers.AccessRequestV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.AccessRequestV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          userId = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class DeviceV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "notificationToken": return notificationToken
           case "platform": return platform
           case "osVersion": return osVersion
           case "appVersion": return appVersion
           case "deviceUuid": return deviceUuid
           case "userId": return userId
           case "languagePreference": return languagePreference
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasNotificationToken:Bool = false
    public private(set) var notificationToken:String = ""

    public private(set) var hasPlatform:Bool = false
    public private(set) var platform:String = ""

    public private(set) var hasOsVersion:Bool = false
    public private(set) var osVersion:String = ""

    public private(set) var hasAppVersion:Bool = false
    public private(set) var appVersion:String = ""

    public private(set) var hasDeviceUuid:Bool = false
    public private(set) var deviceUuid:String = ""

    public private(set) var hasUserId:Bool = false
    public private(set) var userId:String = ""

    public private(set) var hasLanguagePreference:Bool = false
    public private(set) var languagePreference:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasNotificationToken {
        output.writeString(3, value:notificationToken)
      }
      if hasPlatform {
        output.writeString(4, value:platform)
      }
      if hasOsVersion {
        output.writeString(5, value:osVersion)
      }
      if hasAppVersion {
        output.writeString(6, value:appVersion)
      }
      if hasDeviceUuid {
        output.writeString(7, value:deviceUuid)
      }
      if hasUserId {
        output.writeString(8, value:userId)
      }
      if hasLanguagePreference {
        output.writeString(9, value:languagePreference)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasNotificationToken {
        serialize_size += notificationToken.computeStringSize(3)
      }
      if hasPlatform {
        serialize_size += platform.computeStringSize(4)
      }
      if hasOsVersion {
        serialize_size += osVersion.computeStringSize(5)
      }
      if hasAppVersion {
        serialize_size += appVersion.computeStringSize(6)
      }
      if hasDeviceUuid {
        serialize_size += deviceUuid.computeStringSize(7)
      }
      if hasUserId {
        serialize_size += userId.computeStringSize(8)
      }
      if hasLanguagePreference {
        serialize_size += languagePreference.computeStringSize(9)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.User.Containers.DeviceV1 {
      return Services.User.Containers.DeviceV1.builder().mergeFromData(data, extensionRegistry:Services.User.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.DeviceV1 {
      return Services.User.Containers.DeviceV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.User.Containers.DeviceV1 {
      return Services.User.Containers.DeviceV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.User.Containers.DeviceV1 {
      return Services.User.Containers.DeviceV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.User.Containers.DeviceV1 {
      return Services.User.Containers.DeviceV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.DeviceV1 {
      return Services.User.Containers.DeviceV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.User.Containers.DeviceV1Builder {
      return Services.User.Containers.DeviceV1.classBuilder() as! Services.User.Containers.DeviceV1Builder
    }
    public func builder() -> Services.User.Containers.DeviceV1Builder {
      return classBuilder() as! Services.User.Containers.DeviceV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Containers.DeviceV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Containers.DeviceV1.builder()
    }
    public func toBuilder() -> Services.User.Containers.DeviceV1Builder {
      return Services.User.Containers.DeviceV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Containers.DeviceV1) -> Services.User.Containers.DeviceV1Builder {
      return Services.User.Containers.DeviceV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasNotificationToken {
        output += "\(indent) notificationToken: \(notificationToken) \n"
      }
      if hasPlatform {
        output += "\(indent) platform: \(platform) \n"
      }
      if hasOsVersion {
        output += "\(indent) osVersion: \(osVersion) \n"
      }
      if hasAppVersion {
        output += "\(indent) appVersion: \(appVersion) \n"
      }
      if hasDeviceUuid {
        output += "\(indent) deviceUuid: \(deviceUuid) \n"
      }
      if hasUserId {
        output += "\(indent) userId: \(userId) \n"
      }
      if hasLanguagePreference {
        output += "\(indent) languagePreference: \(languagePreference) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasNotificationToken {
               hashCode = (hashCode &* 31) &+ notificationToken.hashValue
            }
            if hasPlatform {
               hashCode = (hashCode &* 31) &+ platform.hashValue
            }
            if hasOsVersion {
               hashCode = (hashCode &* 31) &+ osVersion.hashValue
            }
            if hasAppVersion {
               hashCode = (hashCode &* 31) &+ appVersion.hashValue
            }
            if hasDeviceUuid {
               hashCode = (hashCode &* 31) &+ deviceUuid.hashValue
            }
            if hasUserId {
               hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            if hasLanguagePreference {
               hashCode = (hashCode &* 31) &+ languagePreference.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Containers.DeviceV1"
    }
    override public func className() -> String {
        return "Services.User.Containers.DeviceV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Containers.DeviceV1.self
    }
    //Meta information declaration end

  }

  final public class DeviceV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.User.Containers.DeviceV1

    required override public init () {
       builderResult = Services.User.Containers.DeviceV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.User.Containers.DeviceV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.User.Containers.DeviceV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.User.Containers.DeviceV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.User.Containers.DeviceV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasNotificationToken:Bool {
         get {
              return builderResult.hasNotificationToken
         }
    }
    public var notificationToken:String {
         get {
              return builderResult.notificationToken
         }
         set (value) {
             builderResult.hasNotificationToken = true
             builderResult.notificationToken = value
         }
    }
    public func setNotificationToken(value:String)-> Services.User.Containers.DeviceV1Builder {
      self.notificationToken = value
      return self
    }
    public func clearNotificationToken() -> Services.User.Containers.DeviceV1Builder{
         builderResult.hasNotificationToken = false
         builderResult.notificationToken = ""
         return self
    }
    public var hasPlatform:Bool {
         get {
              return builderResult.hasPlatform
         }
    }
    public var platform:String {
         get {
              return builderResult.platform
         }
         set (value) {
             builderResult.hasPlatform = true
             builderResult.platform = value
         }
    }
    public func setPlatform(value:String)-> Services.User.Containers.DeviceV1Builder {
      self.platform = value
      return self
    }
    public func clearPlatform() -> Services.User.Containers.DeviceV1Builder{
         builderResult.hasPlatform = false
         builderResult.platform = ""
         return self
    }
    public var hasOsVersion:Bool {
         get {
              return builderResult.hasOsVersion
         }
    }
    public var osVersion:String {
         get {
              return builderResult.osVersion
         }
         set (value) {
             builderResult.hasOsVersion = true
             builderResult.osVersion = value
         }
    }
    public func setOsVersion(value:String)-> Services.User.Containers.DeviceV1Builder {
      self.osVersion = value
      return self
    }
    public func clearOsVersion() -> Services.User.Containers.DeviceV1Builder{
         builderResult.hasOsVersion = false
         builderResult.osVersion = ""
         return self
    }
    public var hasAppVersion:Bool {
         get {
              return builderResult.hasAppVersion
         }
    }
    public var appVersion:String {
         get {
              return builderResult.appVersion
         }
         set (value) {
             builderResult.hasAppVersion = true
             builderResult.appVersion = value
         }
    }
    public func setAppVersion(value:String)-> Services.User.Containers.DeviceV1Builder {
      self.appVersion = value
      return self
    }
    public func clearAppVersion() -> Services.User.Containers.DeviceV1Builder{
         builderResult.hasAppVersion = false
         builderResult.appVersion = ""
         return self
    }
    public var hasDeviceUuid:Bool {
         get {
              return builderResult.hasDeviceUuid
         }
    }
    public var deviceUuid:String {
         get {
              return builderResult.deviceUuid
         }
         set (value) {
             builderResult.hasDeviceUuid = true
             builderResult.deviceUuid = value
         }
    }
    public func setDeviceUuid(value:String)-> Services.User.Containers.DeviceV1Builder {
      self.deviceUuid = value
      return self
    }
    public func clearDeviceUuid() -> Services.User.Containers.DeviceV1Builder{
         builderResult.hasDeviceUuid = false
         builderResult.deviceUuid = ""
         return self
    }
    public var hasUserId:Bool {
         get {
              return builderResult.hasUserId
         }
    }
    public var userId:String {
         get {
              return builderResult.userId
         }
         set (value) {
             builderResult.hasUserId = true
             builderResult.userId = value
         }
    }
    public func setUserId(value:String)-> Services.User.Containers.DeviceV1Builder {
      self.userId = value
      return self
    }
    public func clearUserId() -> Services.User.Containers.DeviceV1Builder{
         builderResult.hasUserId = false
         builderResult.userId = ""
         return self
    }
    public var hasLanguagePreference:Bool {
         get {
              return builderResult.hasLanguagePreference
         }
    }
    public var languagePreference:String {
         get {
              return builderResult.languagePreference
         }
         set (value) {
             builderResult.hasLanguagePreference = true
             builderResult.languagePreference = value
         }
    }
    public func setLanguagePreference(value:String)-> Services.User.Containers.DeviceV1Builder {
      self.languagePreference = value
      return self
    }
    public func clearLanguagePreference() -> Services.User.Containers.DeviceV1Builder{
         builderResult.hasLanguagePreference = false
         builderResult.languagePreference = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.User.Containers.DeviceV1Builder {
      builderResult = Services.User.Containers.DeviceV1()
      return self
    }
    public override func clone() -> Services.User.Containers.DeviceV1Builder {
      return Services.User.Containers.DeviceV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.User.Containers.DeviceV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.User.Containers.DeviceV1 {
      var returnMe:Services.User.Containers.DeviceV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.User.Containers.DeviceV1) -> Services.User.Containers.DeviceV1Builder {
      if (other == Services.User.Containers.DeviceV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasNotificationToken {
           notificationToken = other.notificationToken
      }
      if other.hasPlatform {
           platform = other.platform
      }
      if other.hasOsVersion {
           osVersion = other.osVersion
      }
      if other.hasAppVersion {
           appVersion = other.appVersion
      }
      if other.hasDeviceUuid {
           deviceUuid = other.deviceUuid
      }
      if other.hasUserId {
           userId = other.userId
      }
      if other.hasLanguagePreference {
           languagePreference = other.languagePreference
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.User.Containers.DeviceV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.DeviceV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          notificationToken = input.readString()

        case 34 :
          platform = input.readString()

        case 42 :
          osVersion = input.readString()

        case 50 :
          appVersion = input.readString()

        case 58 :
          deviceUuid = input.readString()

        case 66 :
          userId = input.readString()

        case 74 :
          languagePreference = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class IdentityV1 : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum ProviderV1:Int32 {
        case Internal = 0
        case Linkedin = 1
        case Google = 2

      }

      //Enum type declaration end 

    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "provider": return self.provider
           case "fullName": return fullName
           case "email": return email
           case "accessToken": return accessToken
           case "expiresAt": return expiresAt
           case "providerUid": return providerUid
           case "userId": return userId
           case "refreshToken": return refreshToken
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var provider:Services.User.Containers.IdentityV1.ProviderV1 = Services.User.Containers.IdentityV1.ProviderV1.Internal
    public private(set) var hasProvider:Bool = false
    public private(set) var hasFullName:Bool = false
    public private(set) var fullName:String = ""

    public private(set) var hasEmail:Bool = false
    public private(set) var email:String = ""

    public private(set) var hasAccessToken:Bool = false
    public private(set) var accessToken:String = ""

    public private(set) var hasExpiresAt:Bool = false
    public private(set) var expiresAt:String = ""

    public private(set) var hasProviderUid:Bool = false
    public private(set) var providerUid:String = ""

    public private(set) var hasUserId:Bool = false
    public private(set) var userId:String = ""

    public private(set) var hasRefreshToken:Bool = false
    public private(set) var refreshToken:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasProvider {
        output.writeEnum(3, value:provider.rawValue)
      }
      if hasFullName {
        output.writeString(4, value:fullName)
      }
      if hasEmail {
        output.writeString(5, value:email)
      }
      if hasAccessToken {
        output.writeString(6, value:accessToken)
      }
      if hasExpiresAt {
        output.writeString(7, value:expiresAt)
      }
      if hasProviderUid {
        output.writeString(8, value:providerUid)
      }
      if hasUserId {
        output.writeString(9, value:userId)
      }
      if hasRefreshToken {
        output.writeString(10, value:refreshToken)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if (hasProvider) {
        serialize_size += provider.rawValue.computeEnumSize(3)
      }
      if hasFullName {
        serialize_size += fullName.computeStringSize(4)
      }
      if hasEmail {
        serialize_size += email.computeStringSize(5)
      }
      if hasAccessToken {
        serialize_size += accessToken.computeStringSize(6)
      }
      if hasExpiresAt {
        serialize_size += expiresAt.computeStringSize(7)
      }
      if hasProviderUid {
        serialize_size += providerUid.computeStringSize(8)
      }
      if hasUserId {
        serialize_size += userId.computeStringSize(9)
      }
      if hasRefreshToken {
        serialize_size += refreshToken.computeStringSize(10)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.User.Containers.IdentityV1 {
      return Services.User.Containers.IdentityV1.builder().mergeFromData(data, extensionRegistry:Services.User.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.IdentityV1 {
      return Services.User.Containers.IdentityV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.User.Containers.IdentityV1 {
      return Services.User.Containers.IdentityV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.User.Containers.IdentityV1 {
      return Services.User.Containers.IdentityV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.User.Containers.IdentityV1 {
      return Services.User.Containers.IdentityV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.IdentityV1 {
      return Services.User.Containers.IdentityV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.User.Containers.IdentityV1Builder {
      return Services.User.Containers.IdentityV1.classBuilder() as! Services.User.Containers.IdentityV1Builder
    }
    public func builder() -> Services.User.Containers.IdentityV1Builder {
      return classBuilder() as! Services.User.Containers.IdentityV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Containers.IdentityV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Containers.IdentityV1.builder()
    }
    public func toBuilder() -> Services.User.Containers.IdentityV1Builder {
      return Services.User.Containers.IdentityV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Containers.IdentityV1) -> Services.User.Containers.IdentityV1Builder {
      return Services.User.Containers.IdentityV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if (hasProvider) {
        output += "\(indent) provider: \(provider.rawValue)\n"
      }
      if hasFullName {
        output += "\(indent) fullName: \(fullName) \n"
      }
      if hasEmail {
        output += "\(indent) email: \(email) \n"
      }
      if hasAccessToken {
        output += "\(indent) accessToken: \(accessToken) \n"
      }
      if hasExpiresAt {
        output += "\(indent) expiresAt: \(expiresAt) \n"
      }
      if hasProviderUid {
        output += "\(indent) providerUid: \(providerUid) \n"
      }
      if hasUserId {
        output += "\(indent) userId: \(userId) \n"
      }
      if hasRefreshToken {
        output += "\(indent) refreshToken: \(refreshToken) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasProvider {
               hashCode = (hashCode &* 31) &+ Int(provider.rawValue)
            }
            if hasFullName {
               hashCode = (hashCode &* 31) &+ fullName.hashValue
            }
            if hasEmail {
               hashCode = (hashCode &* 31) &+ email.hashValue
            }
            if hasAccessToken {
               hashCode = (hashCode &* 31) &+ accessToken.hashValue
            }
            if hasExpiresAt {
               hashCode = (hashCode &* 31) &+ expiresAt.hashValue
            }
            if hasProviderUid {
               hashCode = (hashCode &* 31) &+ providerUid.hashValue
            }
            if hasUserId {
               hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            if hasRefreshToken {
               hashCode = (hashCode &* 31) &+ refreshToken.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Containers.IdentityV1"
    }
    override public func className() -> String {
        return "Services.User.Containers.IdentityV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Containers.IdentityV1.self
    }
    //Meta information declaration end

  }

  final public class IdentityV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.User.Containers.IdentityV1

    required override public init () {
       builderResult = Services.User.Containers.IdentityV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.User.Containers.IdentityV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.User.Containers.IdentityV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.User.Containers.IdentityV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.User.Containers.IdentityV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
      public var hasProvider:Bool{
          get {
              return builderResult.hasProvider
          }
      }
      public var provider:Services.User.Containers.IdentityV1.ProviderV1 {
          get {
              return builderResult.provider
          }
          set (value) {
              builderResult.hasProvider = true
              builderResult.provider = value
          }
      }
      public func setProvider(value:Services.User.Containers.IdentityV1.ProviderV1)-> Services.User.Containers.IdentityV1Builder {
        self.provider = value
        return self
      }
      public func clearProvider() -> Services.User.Containers.IdentityV1Builder {
         builderResult.hasProvider = false
         builderResult.provider = .Internal
         return self
      }
    public var hasFullName:Bool {
         get {
              return builderResult.hasFullName
         }
    }
    public var fullName:String {
         get {
              return builderResult.fullName
         }
         set (value) {
             builderResult.hasFullName = true
             builderResult.fullName = value
         }
    }
    public func setFullName(value:String)-> Services.User.Containers.IdentityV1Builder {
      self.fullName = value
      return self
    }
    public func clearFullName() -> Services.User.Containers.IdentityV1Builder{
         builderResult.hasFullName = false
         builderResult.fullName = ""
         return self
    }
    public var hasEmail:Bool {
         get {
              return builderResult.hasEmail
         }
    }
    public var email:String {
         get {
              return builderResult.email
         }
         set (value) {
             builderResult.hasEmail = true
             builderResult.email = value
         }
    }
    public func setEmail(value:String)-> Services.User.Containers.IdentityV1Builder {
      self.email = value
      return self
    }
    public func clearEmail() -> Services.User.Containers.IdentityV1Builder{
         builderResult.hasEmail = false
         builderResult.email = ""
         return self
    }
    public var hasAccessToken:Bool {
         get {
              return builderResult.hasAccessToken
         }
    }
    public var accessToken:String {
         get {
              return builderResult.accessToken
         }
         set (value) {
             builderResult.hasAccessToken = true
             builderResult.accessToken = value
         }
    }
    public func setAccessToken(value:String)-> Services.User.Containers.IdentityV1Builder {
      self.accessToken = value
      return self
    }
    public func clearAccessToken() -> Services.User.Containers.IdentityV1Builder{
         builderResult.hasAccessToken = false
         builderResult.accessToken = ""
         return self
    }
    public var hasExpiresAt:Bool {
         get {
              return builderResult.hasExpiresAt
         }
    }
    public var expiresAt:String {
         get {
              return builderResult.expiresAt
         }
         set (value) {
             builderResult.hasExpiresAt = true
             builderResult.expiresAt = value
         }
    }
    public func setExpiresAt(value:String)-> Services.User.Containers.IdentityV1Builder {
      self.expiresAt = value
      return self
    }
    public func clearExpiresAt() -> Services.User.Containers.IdentityV1Builder{
         builderResult.hasExpiresAt = false
         builderResult.expiresAt = ""
         return self
    }
    public var hasProviderUid:Bool {
         get {
              return builderResult.hasProviderUid
         }
    }
    public var providerUid:String {
         get {
              return builderResult.providerUid
         }
         set (value) {
             builderResult.hasProviderUid = true
             builderResult.providerUid = value
         }
    }
    public func setProviderUid(value:String)-> Services.User.Containers.IdentityV1Builder {
      self.providerUid = value
      return self
    }
    public func clearProviderUid() -> Services.User.Containers.IdentityV1Builder{
         builderResult.hasProviderUid = false
         builderResult.providerUid = ""
         return self
    }
    public var hasUserId:Bool {
         get {
              return builderResult.hasUserId
         }
    }
    public var userId:String {
         get {
              return builderResult.userId
         }
         set (value) {
             builderResult.hasUserId = true
             builderResult.userId = value
         }
    }
    public func setUserId(value:String)-> Services.User.Containers.IdentityV1Builder {
      self.userId = value
      return self
    }
    public func clearUserId() -> Services.User.Containers.IdentityV1Builder{
         builderResult.hasUserId = false
         builderResult.userId = ""
         return self
    }
    public var hasRefreshToken:Bool {
         get {
              return builderResult.hasRefreshToken
         }
    }
    public var refreshToken:String {
         get {
              return builderResult.refreshToken
         }
         set (value) {
             builderResult.hasRefreshToken = true
             builderResult.refreshToken = value
         }
    }
    public func setRefreshToken(value:String)-> Services.User.Containers.IdentityV1Builder {
      self.refreshToken = value
      return self
    }
    public func clearRefreshToken() -> Services.User.Containers.IdentityV1Builder{
         builderResult.hasRefreshToken = false
         builderResult.refreshToken = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.User.Containers.IdentityV1Builder {
      builderResult = Services.User.Containers.IdentityV1()
      return self
    }
    public override func clone() -> Services.User.Containers.IdentityV1Builder {
      return Services.User.Containers.IdentityV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.User.Containers.IdentityV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.User.Containers.IdentityV1 {
      var returnMe:Services.User.Containers.IdentityV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.User.Containers.IdentityV1) -> Services.User.Containers.IdentityV1Builder {
      if (other == Services.User.Containers.IdentityV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasProvider {
           provider = other.provider
      }
      if other.hasFullName {
           fullName = other.fullName
      }
      if other.hasEmail {
           email = other.email
      }
      if other.hasAccessToken {
           accessToken = other.accessToken
      }
      if other.hasExpiresAt {
           expiresAt = other.expiresAt
      }
      if other.hasProviderUid {
           providerUid = other.providerUid
      }
      if other.hasUserId {
           userId = other.userId
      }
      if other.hasRefreshToken {
           refreshToken = other.refreshToken
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.User.Containers.IdentityV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.IdentityV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 24 :
          let valueIntprovider = input.readEnum()
          if let enumsprovider = Services.User.Containers.IdentityV1.ProviderV1(rawValue:valueIntprovider){
               provider = enumsprovider
          } else {
               unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntprovider))
          }

        case 34 :
          fullName = input.readString()

        case 42 :
          email = input.readString()

        case 50 :
          accessToken = input.readString()

        case 58 :
          expiresAt = input.readString()

        case 66 :
          providerUid = input.readString()

        case 74 :
          userId = input.readString()

        case 82 :
          refreshToken = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class OAuth2DetailsV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "code": return code
           case "state": return state
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasCode:Bool = false
    public private(set) var code:String = ""

    public private(set) var hasState:Bool = false
    public private(set) var state:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasCode {
        output.writeString(2, value:code)
      }
      if hasState {
        output.writeString(3, value:state)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasCode {
        serialize_size += code.computeStringSize(2)
      }
      if hasState {
        serialize_size += state.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.User.Containers.OAuth2DetailsV1 {
      return Services.User.Containers.OAuth2DetailsV1.builder().mergeFromData(data, extensionRegistry:Services.User.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.OAuth2DetailsV1 {
      return Services.User.Containers.OAuth2DetailsV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.User.Containers.OAuth2DetailsV1 {
      return Services.User.Containers.OAuth2DetailsV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.User.Containers.OAuth2DetailsV1 {
      return Services.User.Containers.OAuth2DetailsV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.User.Containers.OAuth2DetailsV1 {
      return Services.User.Containers.OAuth2DetailsV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.OAuth2DetailsV1 {
      return Services.User.Containers.OAuth2DetailsV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.User.Containers.OAuth2DetailsV1Builder {
      return Services.User.Containers.OAuth2DetailsV1.classBuilder() as! Services.User.Containers.OAuth2DetailsV1Builder
    }
    public func builder() -> Services.User.Containers.OAuth2DetailsV1Builder {
      return classBuilder() as! Services.User.Containers.OAuth2DetailsV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Containers.OAuth2DetailsV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Containers.OAuth2DetailsV1.builder()
    }
    public func toBuilder() -> Services.User.Containers.OAuth2DetailsV1Builder {
      return Services.User.Containers.OAuth2DetailsV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Containers.OAuth2DetailsV1) -> Services.User.Containers.OAuth2DetailsV1Builder {
      return Services.User.Containers.OAuth2DetailsV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasCode {
        output += "\(indent) code: \(code) \n"
      }
      if hasState {
        output += "\(indent) state: \(state) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasCode {
               hashCode = (hashCode &* 31) &+ code.hashValue
            }
            if hasState {
               hashCode = (hashCode &* 31) &+ state.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Containers.OAuth2DetailsV1"
    }
    override public func className() -> String {
        return "Services.User.Containers.OAuth2DetailsV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Containers.OAuth2DetailsV1.self
    }
    //Meta information declaration end

  }

  final public class OAuth2DetailsV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.User.Containers.OAuth2DetailsV1

    required override public init () {
       builderResult = Services.User.Containers.OAuth2DetailsV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.User.Containers.OAuth2DetailsV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.User.Containers.OAuth2DetailsV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasCode:Bool {
         get {
              return builderResult.hasCode
         }
    }
    public var code:String {
         get {
              return builderResult.code
         }
         set (value) {
             builderResult.hasCode = true
             builderResult.code = value
         }
    }
    public func setCode(value:String)-> Services.User.Containers.OAuth2DetailsV1Builder {
      self.code = value
      return self
    }
    public func clearCode() -> Services.User.Containers.OAuth2DetailsV1Builder{
         builderResult.hasCode = false
         builderResult.code = ""
         return self
    }
    public var hasState:Bool {
         get {
              return builderResult.hasState
         }
    }
    public var state:String {
         get {
              return builderResult.state
         }
         set (value) {
             builderResult.hasState = true
             builderResult.state = value
         }
    }
    public func setState(value:String)-> Services.User.Containers.OAuth2DetailsV1Builder {
      self.state = value
      return self
    }
    public func clearState() -> Services.User.Containers.OAuth2DetailsV1Builder{
         builderResult.hasState = false
         builderResult.state = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.User.Containers.OAuth2DetailsV1Builder {
      builderResult = Services.User.Containers.OAuth2DetailsV1()
      return self
    }
    public override func clone() -> Services.User.Containers.OAuth2DetailsV1Builder {
      return Services.User.Containers.OAuth2DetailsV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.User.Containers.OAuth2DetailsV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.User.Containers.OAuth2DetailsV1 {
      var returnMe:Services.User.Containers.OAuth2DetailsV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.User.Containers.OAuth2DetailsV1) -> Services.User.Containers.OAuth2DetailsV1Builder {
      if (other == Services.User.Containers.OAuth2DetailsV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasCode {
           code = other.code
      }
      if other.hasState {
           state = other.state
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.User.Containers.OAuth2DetailsV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.OAuth2DetailsV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          code = input.readString()

        case 26 :
          state = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class OAuthSDKDetailsV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "code": return code
           case "idToken": return idToken
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasCode:Bool = false
    public private(set) var code:String = ""

    public private(set) var hasIdToken:Bool = false
    public private(set) var idToken:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasCode {
        output.writeString(2, value:code)
      }
      if hasIdToken {
        output.writeString(3, value:idToken)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasCode {
        serialize_size += code.computeStringSize(2)
      }
      if hasIdToken {
        serialize_size += idToken.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.User.Containers.OAuthSDKDetailsV1 {
      return Services.User.Containers.OAuthSDKDetailsV1.builder().mergeFromData(data, extensionRegistry:Services.User.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.OAuthSDKDetailsV1 {
      return Services.User.Containers.OAuthSDKDetailsV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.User.Containers.OAuthSDKDetailsV1 {
      return Services.User.Containers.OAuthSDKDetailsV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.User.Containers.OAuthSDKDetailsV1 {
      return Services.User.Containers.OAuthSDKDetailsV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.User.Containers.OAuthSDKDetailsV1 {
      return Services.User.Containers.OAuthSDKDetailsV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.OAuthSDKDetailsV1 {
      return Services.User.Containers.OAuthSDKDetailsV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.User.Containers.OAuthSDKDetailsV1Builder {
      return Services.User.Containers.OAuthSDKDetailsV1.classBuilder() as! Services.User.Containers.OAuthSDKDetailsV1Builder
    }
    public func builder() -> Services.User.Containers.OAuthSDKDetailsV1Builder {
      return classBuilder() as! Services.User.Containers.OAuthSDKDetailsV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Containers.OAuthSDKDetailsV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Containers.OAuthSDKDetailsV1.builder()
    }
    public func toBuilder() -> Services.User.Containers.OAuthSDKDetailsV1Builder {
      return Services.User.Containers.OAuthSDKDetailsV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Containers.OAuthSDKDetailsV1) -> Services.User.Containers.OAuthSDKDetailsV1Builder {
      return Services.User.Containers.OAuthSDKDetailsV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasCode {
        output += "\(indent) code: \(code) \n"
      }
      if hasIdToken {
        output += "\(indent) idToken: \(idToken) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasCode {
               hashCode = (hashCode &* 31) &+ code.hashValue
            }
            if hasIdToken {
               hashCode = (hashCode &* 31) &+ idToken.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Containers.OAuthSDKDetailsV1"
    }
    override public func className() -> String {
        return "Services.User.Containers.OAuthSDKDetailsV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Containers.OAuthSDKDetailsV1.self
    }
    //Meta information declaration end

  }

  final public class OAuthSDKDetailsV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.User.Containers.OAuthSDKDetailsV1

    required override public init () {
       builderResult = Services.User.Containers.OAuthSDKDetailsV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.User.Containers.OAuthSDKDetailsV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.User.Containers.OAuthSDKDetailsV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasCode:Bool {
         get {
              return builderResult.hasCode
         }
    }
    public var code:String {
         get {
              return builderResult.code
         }
         set (value) {
             builderResult.hasCode = true
             builderResult.code = value
         }
    }
    public func setCode(value:String)-> Services.User.Containers.OAuthSDKDetailsV1Builder {
      self.code = value
      return self
    }
    public func clearCode() -> Services.User.Containers.OAuthSDKDetailsV1Builder{
         builderResult.hasCode = false
         builderResult.code = ""
         return self
    }
    public var hasIdToken:Bool {
         get {
              return builderResult.hasIdToken
         }
    }
    public var idToken:String {
         get {
              return builderResult.idToken
         }
         set (value) {
             builderResult.hasIdToken = true
             builderResult.idToken = value
         }
    }
    public func setIdToken(value:String)-> Services.User.Containers.OAuthSDKDetailsV1Builder {
      self.idToken = value
      return self
    }
    public func clearIdToken() -> Services.User.Containers.OAuthSDKDetailsV1Builder{
         builderResult.hasIdToken = false
         builderResult.idToken = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.User.Containers.OAuthSDKDetailsV1Builder {
      builderResult = Services.User.Containers.OAuthSDKDetailsV1()
      return self
    }
    public override func clone() -> Services.User.Containers.OAuthSDKDetailsV1Builder {
      return Services.User.Containers.OAuthSDKDetailsV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.User.Containers.OAuthSDKDetailsV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.User.Containers.OAuthSDKDetailsV1 {
      var returnMe:Services.User.Containers.OAuthSDKDetailsV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.User.Containers.OAuthSDKDetailsV1) -> Services.User.Containers.OAuthSDKDetailsV1Builder {
      if (other == Services.User.Containers.OAuthSDKDetailsV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasCode {
           code = other.code
      }
      if other.hasIdToken {
           idToken = other.idToken
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.User.Containers.OAuthSDKDetailsV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.OAuthSDKDetailsV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          code = input.readString()

        case 26 :
          idToken = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class UserV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "primaryEmail": return primaryEmail
           case "isAdmin": return isAdmin
           case "isActive": return isActive
           case "phoneNumber": return phoneNumber
           case "phoneNumberVerified": return phoneNumberVerified
           case "password": return password
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasPrimaryEmail:Bool = false
    public private(set) var primaryEmail:String = ""

    public private(set) var hasIsAdmin:Bool = false
    public private(set) var isAdmin:Bool = false

    public private(set) var hasIsActive:Bool = false
    public private(set) var isActive:Bool = false

    public private(set) var hasPhoneNumber:Bool = false
    public private(set) var phoneNumber:String = ""

    public private(set) var hasPhoneNumberVerified:Bool = false
    public private(set) var phoneNumberVerified:Bool = false

    public private(set) var hasPassword:Bool = false
    public private(set) var password:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasPrimaryEmail {
        output.writeString(3, value:primaryEmail)
      }
      if hasIsAdmin {
        output.writeBool(4, value:isAdmin)
      }
      if hasIsActive {
        output.writeBool(5, value:isActive)
      }
      if hasPhoneNumber {
        output.writeString(6, value:phoneNumber)
      }
      if hasPhoneNumberVerified {
        output.writeBool(7, value:phoneNumberVerified)
      }
      if hasPassword {
        output.writeString(8, value:password)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasPrimaryEmail {
        serialize_size += primaryEmail.computeStringSize(3)
      }
      if hasIsAdmin {
        serialize_size += isAdmin.computeBoolSize(4)
      }
      if hasIsActive {
        serialize_size += isActive.computeBoolSize(5)
      }
      if hasPhoneNumber {
        serialize_size += phoneNumber.computeStringSize(6)
      }
      if hasPhoneNumberVerified {
        serialize_size += phoneNumberVerified.computeBoolSize(7)
      }
      if hasPassword {
        serialize_size += password.computeStringSize(8)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.User.Containers.UserV1 {
      return Services.User.Containers.UserV1.builder().mergeFromData(data, extensionRegistry:Services.User.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.UserV1 {
      return Services.User.Containers.UserV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.User.Containers.UserV1 {
      return Services.User.Containers.UserV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.User.Containers.UserV1 {
      return Services.User.Containers.UserV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.User.Containers.UserV1 {
      return Services.User.Containers.UserV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.UserV1 {
      return Services.User.Containers.UserV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.User.Containers.UserV1Builder {
      return Services.User.Containers.UserV1.classBuilder() as! Services.User.Containers.UserV1Builder
    }
    public func builder() -> Services.User.Containers.UserV1Builder {
      return classBuilder() as! Services.User.Containers.UserV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.User.Containers.UserV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.User.Containers.UserV1.builder()
    }
    public func toBuilder() -> Services.User.Containers.UserV1Builder {
      return Services.User.Containers.UserV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.User.Containers.UserV1) -> Services.User.Containers.UserV1Builder {
      return Services.User.Containers.UserV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasPrimaryEmail {
        output += "\(indent) primaryEmail: \(primaryEmail) \n"
      }
      if hasIsAdmin {
        output += "\(indent) isAdmin: \(isAdmin) \n"
      }
      if hasIsActive {
        output += "\(indent) isActive: \(isActive) \n"
      }
      if hasPhoneNumber {
        output += "\(indent) phoneNumber: \(phoneNumber) \n"
      }
      if hasPhoneNumberVerified {
        output += "\(indent) phoneNumberVerified: \(phoneNumberVerified) \n"
      }
      if hasPassword {
        output += "\(indent) password: \(password) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasPrimaryEmail {
               hashCode = (hashCode &* 31) &+ primaryEmail.hashValue
            }
            if hasIsAdmin {
               hashCode = (hashCode &* 31) &+ isAdmin.hashValue
            }
            if hasIsActive {
               hashCode = (hashCode &* 31) &+ isActive.hashValue
            }
            if hasPhoneNumber {
               hashCode = (hashCode &* 31) &+ phoneNumber.hashValue
            }
            if hasPhoneNumberVerified {
               hashCode = (hashCode &* 31) &+ phoneNumberVerified.hashValue
            }
            if hasPassword {
               hashCode = (hashCode &* 31) &+ password.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.User.Containers.UserV1"
    }
    override public func className() -> String {
        return "Services.User.Containers.UserV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.User.Containers.UserV1.self
    }
    //Meta information declaration end

  }

  final public class UserV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.User.Containers.UserV1

    required override public init () {
       builderResult = Services.User.Containers.UserV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.User.Containers.UserV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.User.Containers.UserV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.User.Containers.UserV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.User.Containers.UserV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasPrimaryEmail:Bool {
         get {
              return builderResult.hasPrimaryEmail
         }
    }
    public var primaryEmail:String {
         get {
              return builderResult.primaryEmail
         }
         set (value) {
             builderResult.hasPrimaryEmail = true
             builderResult.primaryEmail = value
         }
    }
    public func setPrimaryEmail(value:String)-> Services.User.Containers.UserV1Builder {
      self.primaryEmail = value
      return self
    }
    public func clearPrimaryEmail() -> Services.User.Containers.UserV1Builder{
         builderResult.hasPrimaryEmail = false
         builderResult.primaryEmail = ""
         return self
    }
    public var hasIsAdmin:Bool {
         get {
              return builderResult.hasIsAdmin
         }
    }
    public var isAdmin:Bool {
         get {
              return builderResult.isAdmin
         }
         set (value) {
             builderResult.hasIsAdmin = true
             builderResult.isAdmin = value
         }
    }
    public func setIsAdmin(value:Bool)-> Services.User.Containers.UserV1Builder {
      self.isAdmin = value
      return self
    }
    public func clearIsAdmin() -> Services.User.Containers.UserV1Builder{
         builderResult.hasIsAdmin = false
         builderResult.isAdmin = false
         return self
    }
    public var hasIsActive:Bool {
         get {
              return builderResult.hasIsActive
         }
    }
    public var isActive:Bool {
         get {
              return builderResult.isActive
         }
         set (value) {
             builderResult.hasIsActive = true
             builderResult.isActive = value
         }
    }
    public func setIsActive(value:Bool)-> Services.User.Containers.UserV1Builder {
      self.isActive = value
      return self
    }
    public func clearIsActive() -> Services.User.Containers.UserV1Builder{
         builderResult.hasIsActive = false
         builderResult.isActive = false
         return self
    }
    public var hasPhoneNumber:Bool {
         get {
              return builderResult.hasPhoneNumber
         }
    }
    public var phoneNumber:String {
         get {
              return builderResult.phoneNumber
         }
         set (value) {
             builderResult.hasPhoneNumber = true
             builderResult.phoneNumber = value
         }
    }
    public func setPhoneNumber(value:String)-> Services.User.Containers.UserV1Builder {
      self.phoneNumber = value
      return self
    }
    public func clearPhoneNumber() -> Services.User.Containers.UserV1Builder{
         builderResult.hasPhoneNumber = false
         builderResult.phoneNumber = ""
         return self
    }
    public var hasPhoneNumberVerified:Bool {
         get {
              return builderResult.hasPhoneNumberVerified
         }
    }
    public var phoneNumberVerified:Bool {
         get {
              return builderResult.phoneNumberVerified
         }
         set (value) {
             builderResult.hasPhoneNumberVerified = true
             builderResult.phoneNumberVerified = value
         }
    }
    public func setPhoneNumberVerified(value:Bool)-> Services.User.Containers.UserV1Builder {
      self.phoneNumberVerified = value
      return self
    }
    public func clearPhoneNumberVerified() -> Services.User.Containers.UserV1Builder{
         builderResult.hasPhoneNumberVerified = false
         builderResult.phoneNumberVerified = false
         return self
    }
    public var hasPassword:Bool {
         get {
              return builderResult.hasPassword
         }
    }
    public var password:String {
         get {
              return builderResult.password
         }
         set (value) {
             builderResult.hasPassword = true
             builderResult.password = value
         }
    }
    public func setPassword(value:String)-> Services.User.Containers.UserV1Builder {
      self.password = value
      return self
    }
    public func clearPassword() -> Services.User.Containers.UserV1Builder{
         builderResult.hasPassword = false
         builderResult.password = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.User.Containers.UserV1Builder {
      builderResult = Services.User.Containers.UserV1()
      return self
    }
    public override func clone() -> Services.User.Containers.UserV1Builder {
      return Services.User.Containers.UserV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.User.Containers.UserV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.User.Containers.UserV1 {
      var returnMe:Services.User.Containers.UserV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.User.Containers.UserV1) -> Services.User.Containers.UserV1Builder {
      if (other == Services.User.Containers.UserV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasPrimaryEmail {
           primaryEmail = other.primaryEmail
      }
      if other.hasIsAdmin {
           isAdmin = other.isAdmin
      }
      if other.hasIsActive {
           isActive = other.isActive
      }
      if other.hasPhoneNumber {
           phoneNumber = other.phoneNumber
      }
      if other.hasPhoneNumberVerified {
           phoneNumberVerified = other.phoneNumberVerified
      }
      if other.hasPassword {
           password = other.password
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.User.Containers.UserV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.User.Containers.UserV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          primaryEmail = input.readString()

        case 32 :
          isAdmin = input.readBool()

        case 40 :
          isActive = input.readBool()

        case 50 :
          phoneNumber = input.readString()

        case 56 :
          phoneNumberVerified = input.readBool()

        case 66 :
          password = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
