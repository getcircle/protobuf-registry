// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file start_image_upload.proto

import Foundation

public extension Services.Media.Actions{ public struct StartImageUpload { }}

public func == (lhs: Services.Media.Actions.StartImageUpload.RequestV1, rhs: Services.Media.Actions.StartImageUpload.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasMediaType == rhs.hasMediaType) && (!lhs.hasMediaType || lhs.mediaType == rhs.mediaType)
  fieldCheck = fieldCheck && (lhs.hasMediaKey == rhs.hasMediaKey) && (!lhs.hasMediaKey || lhs.mediaKey == rhs.mediaKey)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Media.Actions.StartImageUpload.ResponseV1, rhs: Services.Media.Actions.StartImageUpload.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasUploadInstructions == rhs.hasUploadInstructions) && (!lhs.hasUploadInstructions || lhs.uploadInstructions == rhs.uploadInstructions)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Media.Actions.StartImageUpload {
  public struct StartImageUploadRoot {
    public static var sharedInstance : StartImageUploadRoot {
     struct Static {
         static let instance : StartImageUploadRoot = StartImageUploadRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Media.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Media.Containers.Media.MediaRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var mediaType:Services.Media.Containers.Media.MediaTypeV1 = Services.Media.Containers.Media.MediaTypeV1.Profile
    public private(set) var hasMediaType:Bool = false
    public private(set) var hasMediaKey:Bool = false
    public private(set) var mediaKey:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasMediaType {
        try output.writeEnum(2, value:mediaType.rawValue)
      }
      if hasMediaKey {
        try output.writeString(3, value:mediaKey)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if (hasMediaType) {
        serialize_size += mediaType.rawValue.computeEnumSize(2)
      }
      if hasMediaKey {
        serialize_size += mediaKey.computeStringSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Media.Actions.StartImageUpload.RequestV1> {
      var mergedArray = Array<Services.Media.Actions.StartImageUpload.RequestV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Media.Actions.StartImageUpload.RequestV1? {
      return try Services.Media.Actions.StartImageUpload.RequestV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Media.Actions.StartImageUpload.RequestV1 {
      return try Services.Media.Actions.StartImageUpload.RequestV1.Builder().mergeFromData(data, extensionRegistry:Services.Media.Actions.StartImageUpload.StartImageUploadRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Media.Actions.StartImageUpload.RequestV1 {
      return try Services.Media.Actions.StartImageUpload.RequestV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Media.Actions.StartImageUpload.RequestV1 {
      return try Services.Media.Actions.StartImageUpload.RequestV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Media.Actions.StartImageUpload.RequestV1 {
      return try Services.Media.Actions.StartImageUpload.RequestV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Media.Actions.StartImageUpload.RequestV1 {
      return try Services.Media.Actions.StartImageUpload.RequestV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Media.Actions.StartImageUpload.RequestV1 {
      return try Services.Media.Actions.StartImageUpload.RequestV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Media.Actions.StartImageUpload.RequestV1.Builder {
      return Services.Media.Actions.StartImageUpload.RequestV1.classBuilder() as! Services.Media.Actions.StartImageUpload.RequestV1.Builder
    }
    public func getBuilder() -> Services.Media.Actions.StartImageUpload.RequestV1.Builder {
      return classBuilder() as! Services.Media.Actions.StartImageUpload.RequestV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Media.Actions.StartImageUpload.RequestV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Media.Actions.StartImageUpload.RequestV1.Builder()
    }
    public func toBuilder() throws -> Services.Media.Actions.StartImageUpload.RequestV1.Builder {
      return try Services.Media.Actions.StartImageUpload.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Media.Actions.StartImageUpload.RequestV1) throws -> Services.Media.Actions.StartImageUpload.RequestV1.Builder {
      return try Services.Media.Actions.StartImageUpload.RequestV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if (hasMediaType) {
        output += "\(indent) mediaType: \(mediaType.rawValue)\n"
      }
      if hasMediaKey {
        output += "\(indent) mediaKey: \(mediaKey) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasMediaType {
               hashCode = (hashCode &* 31) &+ Int(mediaType.rawValue)
            }
            if hasMediaKey {
               hashCode = (hashCode &* 31) &+ mediaKey.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Media.Actions.StartImageUpload.RequestV1"
    }
    override public func className() -> String {
        return "Services.Media.Actions.StartImageUpload.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Media.Actions.StartImageUpload.RequestV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Media.Actions.StartImageUpload.RequestV1 = Services.Media.Actions.StartImageUpload.RequestV1()
      public func getMessage() -> Services.Media.Actions.StartImageUpload.RequestV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Media.Actions.StartImageUpload.RequestV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Media.Actions.StartImageUpload.RequestV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
        public var hasMediaType:Bool{
            get {
                return builderResult.hasMediaType
            }
        }
        public var mediaType:Services.Media.Containers.Media.MediaTypeV1 {
            get {
                return builderResult.mediaType
            }
            set (value) {
                builderResult.hasMediaType = true
                builderResult.mediaType = value
            }
        }
        public func setMediaType(value:Services.Media.Containers.Media.MediaTypeV1) -> Services.Media.Actions.StartImageUpload.RequestV1.Builder {
          self.mediaType = value
          return self
        }
        public func clearMediaType() -> Services.Media.Actions.StartImageUpload.RequestV1.Builder {
           builderResult.hasMediaType = false
           builderResult.mediaType = .Profile
           return self
        }
      public var hasMediaKey:Bool {
           get {
                return builderResult.hasMediaKey
           }
      }
      public var mediaKey:String {
           get {
                return builderResult.mediaKey
           }
           set (value) {
               builderResult.hasMediaKey = true
               builderResult.mediaKey = value
           }
      }
      public func setMediaKey(value:String) -> Services.Media.Actions.StartImageUpload.RequestV1.Builder {
        self.mediaKey = value
        return self
      }
      public func clearMediaKey() -> Services.Media.Actions.StartImageUpload.RequestV1.Builder{
           builderResult.hasMediaKey = false
           builderResult.mediaKey = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Media.Actions.StartImageUpload.RequestV1.Builder {
        builderResult = Services.Media.Actions.StartImageUpload.RequestV1()
        return self
      }
      public override func clone() throws -> Services.Media.Actions.StartImageUpload.RequestV1.Builder {
        return try Services.Media.Actions.StartImageUpload.RequestV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Media.Actions.StartImageUpload.RequestV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Media.Actions.StartImageUpload.RequestV1 {
        let returnMe:Services.Media.Actions.StartImageUpload.RequestV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Media.Actions.StartImageUpload.RequestV1) throws -> Services.Media.Actions.StartImageUpload.RequestV1.Builder {
        if other == Services.Media.Actions.StartImageUpload.RequestV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasMediaType {
             mediaType = other.mediaType
        }
        if other.hasMediaKey {
             mediaKey = other.mediaKey
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Media.Actions.StartImageUpload.RequestV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Media.Actions.StartImageUpload.RequestV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 16 :
            let valueIntmediaType = try input.readEnum()
            if let enumsmediaType = Services.Media.Containers.Media.MediaTypeV1(rawValue:valueIntmediaType){
                 mediaType = enumsmediaType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntmediaType))
            }

          case 26 :
            mediaKey = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasUploadInstructions:Bool = false
    public private(set) var uploadInstructions:Services.Media.Containers.UploadInstructionsV1!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasUploadInstructions {
        try output.writeMessage(2, value:uploadInstructions)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasUploadInstructions {
          if let varSizeuploadInstructions = uploadInstructions?.computeMessageSize(2) {
              serialize_size += varSizeuploadInstructions
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Media.Actions.StartImageUpload.ResponseV1> {
      var mergedArray = Array<Services.Media.Actions.StartImageUpload.ResponseV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Media.Actions.StartImageUpload.ResponseV1? {
      return try Services.Media.Actions.StartImageUpload.ResponseV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Media.Actions.StartImageUpload.ResponseV1 {
      return try Services.Media.Actions.StartImageUpload.ResponseV1.Builder().mergeFromData(data, extensionRegistry:Services.Media.Actions.StartImageUpload.StartImageUploadRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Media.Actions.StartImageUpload.ResponseV1 {
      return try Services.Media.Actions.StartImageUpload.ResponseV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Media.Actions.StartImageUpload.ResponseV1 {
      return try Services.Media.Actions.StartImageUpload.ResponseV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Media.Actions.StartImageUpload.ResponseV1 {
      return try Services.Media.Actions.StartImageUpload.ResponseV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Media.Actions.StartImageUpload.ResponseV1 {
      return try Services.Media.Actions.StartImageUpload.ResponseV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Media.Actions.StartImageUpload.ResponseV1 {
      return try Services.Media.Actions.StartImageUpload.ResponseV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Media.Actions.StartImageUpload.ResponseV1.Builder {
      return Services.Media.Actions.StartImageUpload.ResponseV1.classBuilder() as! Services.Media.Actions.StartImageUpload.ResponseV1.Builder
    }
    public func getBuilder() -> Services.Media.Actions.StartImageUpload.ResponseV1.Builder {
      return classBuilder() as! Services.Media.Actions.StartImageUpload.ResponseV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Media.Actions.StartImageUpload.ResponseV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Media.Actions.StartImageUpload.ResponseV1.Builder()
    }
    public func toBuilder() throws -> Services.Media.Actions.StartImageUpload.ResponseV1.Builder {
      return try Services.Media.Actions.StartImageUpload.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Media.Actions.StartImageUpload.ResponseV1) throws -> Services.Media.Actions.StartImageUpload.ResponseV1.Builder {
      return try Services.Media.Actions.StartImageUpload.ResponseV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasUploadInstructions {
        output += "\(indent) uploadInstructions {\n"
        try uploadInstructions?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasUploadInstructions {
                if let hashValueuploadInstructions = uploadInstructions?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuploadInstructions
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Media.Actions.StartImageUpload.ResponseV1"
    }
    override public func className() -> String {
        return "Services.Media.Actions.StartImageUpload.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Media.Actions.StartImageUpload.ResponseV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Media.Actions.StartImageUpload.ResponseV1 = Services.Media.Actions.StartImageUpload.ResponseV1()
      public func getMessage() -> Services.Media.Actions.StartImageUpload.ResponseV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Media.Actions.StartImageUpload.ResponseV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Media.Actions.StartImageUpload.ResponseV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasUploadInstructions:Bool {
           get {
               return builderResult.hasUploadInstructions
           }
      }
      public var uploadInstructions:Services.Media.Containers.UploadInstructionsV1! {
           get {
               if uploadInstructionsBuilder_ != nil {
                  builderResult.uploadInstructions = uploadInstructionsBuilder_.getMessage()
               }
               return builderResult.uploadInstructions
           }
           set (value) {
               builderResult.hasUploadInstructions = true
               builderResult.uploadInstructions = value
           }
      }
      private var uploadInstructionsBuilder_:Services.Media.Containers.UploadInstructionsV1.Builder! {
           didSet {
              builderResult.hasUploadInstructions = true
           }
      }
      public func getUploadInstructionsBuilder() -> Services.Media.Containers.UploadInstructionsV1.Builder {
        if uploadInstructionsBuilder_ == nil {
           uploadInstructionsBuilder_ = Services.Media.Containers.UploadInstructionsV1.Builder()
           builderResult.uploadInstructions = uploadInstructionsBuilder_.getMessage()
           if uploadInstructions != nil {
              try! uploadInstructionsBuilder_.mergeFrom(uploadInstructions)
           }
        }
        return uploadInstructionsBuilder_
      }
      public func setUploadInstructions(value:Services.Media.Containers.UploadInstructionsV1!) -> Services.Media.Actions.StartImageUpload.ResponseV1.Builder {
        self.uploadInstructions = value
        return self
      }
      public func mergeUploadInstructions(value:Services.Media.Containers.UploadInstructionsV1) throws -> Services.Media.Actions.StartImageUpload.ResponseV1.Builder {
        if builderResult.hasUploadInstructions {
          builderResult.uploadInstructions = try Services.Media.Containers.UploadInstructionsV1.builderWithPrototype(builderResult.uploadInstructions).mergeFrom(value).buildPartial()
        } else {
          builderResult.uploadInstructions = value
        }
        builderResult.hasUploadInstructions = true
        return self
      }
      public func clearUploadInstructions() -> Services.Media.Actions.StartImageUpload.ResponseV1.Builder {
        uploadInstructionsBuilder_ = nil
        builderResult.hasUploadInstructions = false
        builderResult.uploadInstructions = nil
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Media.Actions.StartImageUpload.ResponseV1.Builder {
        builderResult = Services.Media.Actions.StartImageUpload.ResponseV1()
        return self
      }
      public override func clone() throws -> Services.Media.Actions.StartImageUpload.ResponseV1.Builder {
        return try Services.Media.Actions.StartImageUpload.ResponseV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Media.Actions.StartImageUpload.ResponseV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Media.Actions.StartImageUpload.ResponseV1 {
        let returnMe:Services.Media.Actions.StartImageUpload.ResponseV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Media.Actions.StartImageUpload.ResponseV1) throws -> Services.Media.Actions.StartImageUpload.ResponseV1.Builder {
        if other == Services.Media.Actions.StartImageUpload.ResponseV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if (other.hasUploadInstructions) {
            try mergeUploadInstructions(other.uploadInstructions)
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Media.Actions.StartImageUpload.ResponseV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Media.Actions.StartImageUpload.ResponseV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            let subBuilder:Services.Media.Containers.UploadInstructionsV1.Builder = Services.Media.Containers.UploadInstructionsV1.Builder()
            if hasUploadInstructions {
              try subBuilder.mergeFrom(uploadInstructions)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            uploadInstructions = subBuilder.buildPartial()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
