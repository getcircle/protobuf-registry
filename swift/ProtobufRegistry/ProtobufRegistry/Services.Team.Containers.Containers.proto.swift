// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file containers.proto

import Foundation

public extension Services.Team{ public struct Containers { }}

public func == (lhs: Services.Team.Containers.TeamV1, rhs: Services.Team.Containers.TeamV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
  fieldCheck = fieldCheck && (lhs.hasPermissions == rhs.hasPermissions) && (!lhs.hasPermissions || lhs.permissions == rhs.permissions)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Team.Containers.TeamMemberV1, rhs: Services.Team.Containers.TeamMemberV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasProfileId == rhs.hasProfileId) && (!lhs.hasProfileId || lhs.profileId == rhs.profileId)
  fieldCheck = fieldCheck && (lhs.hasRole == rhs.hasRole) && (!lhs.hasRole || lhs.role == rhs.role)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Team.Containers {
  public struct ContainersRoot {
    public static var sharedInstance : ContainersRoot {
     struct Static {
         static let instance : ContainersRoot = ContainersRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Common.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Common.Containers.Description.DescriptionRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class TeamV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasDescription:Bool = false
    public private(set) var description_:Services.Common.Containers.Description.DescriptionV1!
    public private(set) var hasPermissions:Bool = false
    public private(set) var permissions:Services.Common.Containers.PermissionsV1!
    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasId {
        try output.writeString(1, value:id)
      }
      if hasName {
        try output.writeString(2, value:name)
      }
      if hasDescription {
        try output.writeMessage(3, value:description_)
      }
      if hasPermissions {
        try output.writeMessage(4, value:permissions)
      }
      if hasOrganizationId {
        try output.writeString(5, value:organizationId)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasId {
        serialize_size += id.computeStringSize(1)
      }
      if hasName {
        serialize_size += name.computeStringSize(2)
      }
      if hasDescription {
          if let varSizedescription_ = description_?.computeMessageSize(3) {
              serialize_size += varSizedescription_
          }
      }
      if hasPermissions {
          if let varSizepermissions = permissions?.computeMessageSize(4) {
              serialize_size += varSizepermissions
          }
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(5)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Team.Containers.TeamV1> {
      var mergedArray = Array<Services.Team.Containers.TeamV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Team.Containers.TeamV1? {
      return try Services.Team.Containers.TeamV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Team.Containers.TeamV1 {
      return try Services.Team.Containers.TeamV1.Builder().mergeFromData(data, extensionRegistry:Services.Team.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Team.Containers.TeamV1 {
      return try Services.Team.Containers.TeamV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Team.Containers.TeamV1 {
      return try Services.Team.Containers.TeamV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Team.Containers.TeamV1 {
      return try Services.Team.Containers.TeamV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Team.Containers.TeamV1 {
      return try Services.Team.Containers.TeamV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Team.Containers.TeamV1 {
      return try Services.Team.Containers.TeamV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Team.Containers.TeamV1.Builder {
      return Services.Team.Containers.TeamV1.classBuilder() as! Services.Team.Containers.TeamV1.Builder
    }
    public func getBuilder() -> Services.Team.Containers.TeamV1.Builder {
      return classBuilder() as! Services.Team.Containers.TeamV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Team.Containers.TeamV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Team.Containers.TeamV1.Builder()
    }
    public func toBuilder() throws -> Services.Team.Containers.TeamV1.Builder {
      return try Services.Team.Containers.TeamV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Team.Containers.TeamV1) throws -> Services.Team.Containers.TeamV1.Builder {
      return try Services.Team.Containers.TeamV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasDescription {
        output += "\(indent) description_ {\n"
        try description_?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasPermissions {
        output += "\(indent) permissions {\n"
        try permissions?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasDescription {
                if let hashValuedescription_ = description_?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuedescription_
                }
            }
            if hasPermissions {
                if let hashValuepermissions = permissions?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepermissions
                }
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Team.Containers.TeamV1"
    }
    override public func className() -> String {
        return "Services.Team.Containers.TeamV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Team.Containers.TeamV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Team.Containers.TeamV1 = Services.Team.Containers.TeamV1()
      public func getMessage() -> Services.Team.Containers.TeamV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      public var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      public func setId(value:String) -> Services.Team.Containers.TeamV1.Builder {
        self.id = value
        return self
      }
      public func clearId() -> Services.Team.Containers.TeamV1.Builder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      public var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      public var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      public func setName(value:String) -> Services.Team.Containers.TeamV1.Builder {
        self.name = value
        return self
      }
      public func clearName() -> Services.Team.Containers.TeamV1.Builder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      public var hasDescription:Bool {
           get {
               return builderResult.hasDescription
           }
      }
      public var description_:Services.Common.Containers.Description.DescriptionV1! {
           get {
               if description_Builder_ != nil {
                  builderResult.description_ = description_Builder_.getMessage()
               }
               return builderResult.description_
           }
           set (value) {
               builderResult.hasDescription = true
               builderResult.description_ = value
           }
      }
      private var description_Builder_:Services.Common.Containers.Description.DescriptionV1.Builder! {
           didSet {
              builderResult.hasDescription = true
           }
      }
      public func getDescriptionBuilder() -> Services.Common.Containers.Description.DescriptionV1.Builder {
        if description_Builder_ == nil {
           description_Builder_ = Services.Common.Containers.Description.DescriptionV1.Builder()
           builderResult.description_ = description_Builder_.getMessage()
           if description_ != nil {
              try! description_Builder_.mergeFrom(description_)
           }
        }
        return description_Builder_
      }
      public func setDescription(value:Services.Common.Containers.Description.DescriptionV1!) -> Services.Team.Containers.TeamV1.Builder {
        self.description_ = value
        return self
      }
      public func mergeDescription(value:Services.Common.Containers.Description.DescriptionV1) throws -> Services.Team.Containers.TeamV1.Builder {
        if builderResult.hasDescription {
          builderResult.description_ = try Services.Common.Containers.Description.DescriptionV1.builderWithPrototype(builderResult.description_).mergeFrom(value).buildPartial()
        } else {
          builderResult.description_ = value
        }
        builderResult.hasDescription = true
        return self
      }
      public func clearDescription() -> Services.Team.Containers.TeamV1.Builder {
        description_Builder_ = nil
        builderResult.hasDescription = false
        builderResult.description_ = nil
        return self
      }
      public var hasPermissions:Bool {
           get {
               return builderResult.hasPermissions
           }
      }
      public var permissions:Services.Common.Containers.PermissionsV1! {
           get {
               if permissionsBuilder_ != nil {
                  builderResult.permissions = permissionsBuilder_.getMessage()
               }
               return builderResult.permissions
           }
           set (value) {
               builderResult.hasPermissions = true
               builderResult.permissions = value
           }
      }
      private var permissionsBuilder_:Services.Common.Containers.PermissionsV1.Builder! {
           didSet {
              builderResult.hasPermissions = true
           }
      }
      public func getPermissionsBuilder() -> Services.Common.Containers.PermissionsV1.Builder {
        if permissionsBuilder_ == nil {
           permissionsBuilder_ = Services.Common.Containers.PermissionsV1.Builder()
           builderResult.permissions = permissionsBuilder_.getMessage()
           if permissions != nil {
              try! permissionsBuilder_.mergeFrom(permissions)
           }
        }
        return permissionsBuilder_
      }
      public func setPermissions(value:Services.Common.Containers.PermissionsV1!) -> Services.Team.Containers.TeamV1.Builder {
        self.permissions = value
        return self
      }
      public func mergePermissions(value:Services.Common.Containers.PermissionsV1) throws -> Services.Team.Containers.TeamV1.Builder {
        if builderResult.hasPermissions {
          builderResult.permissions = try Services.Common.Containers.PermissionsV1.builderWithPrototype(builderResult.permissions).mergeFrom(value).buildPartial()
        } else {
          builderResult.permissions = value
        }
        builderResult.hasPermissions = true
        return self
      }
      public func clearPermissions() -> Services.Team.Containers.TeamV1.Builder {
        permissionsBuilder_ = nil
        builderResult.hasPermissions = false
        builderResult.permissions = nil
        return self
      }
      public var hasOrganizationId:Bool {
           get {
                return builderResult.hasOrganizationId
           }
      }
      public var organizationId:String {
           get {
                return builderResult.organizationId
           }
           set (value) {
               builderResult.hasOrganizationId = true
               builderResult.organizationId = value
           }
      }
      public func setOrganizationId(value:String) -> Services.Team.Containers.TeamV1.Builder {
        self.organizationId = value
        return self
      }
      public func clearOrganizationId() -> Services.Team.Containers.TeamV1.Builder{
           builderResult.hasOrganizationId = false
           builderResult.organizationId = ""
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Team.Containers.TeamV1.Builder {
        builderResult = Services.Team.Containers.TeamV1()
        return self
      }
      public override func clone() throws -> Services.Team.Containers.TeamV1.Builder {
        return try Services.Team.Containers.TeamV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Team.Containers.TeamV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Team.Containers.TeamV1 {
        let returnMe:Services.Team.Containers.TeamV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Team.Containers.TeamV1) throws -> Services.Team.Containers.TeamV1.Builder {
        if other == Services.Team.Containers.TeamV1() {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasName {
             name = other.name
        }
        if (other.hasDescription) {
            try mergeDescription(other.description_)
        }
        if (other.hasPermissions) {
            try mergePermissions(other.permissions)
        }
        if other.hasOrganizationId {
             organizationId = other.organizationId
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Team.Containers.TeamV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Team.Containers.TeamV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            id = try input.readString()

          case 18 :
            name = try input.readString()

          case 26 :
            let subBuilder:Services.Common.Containers.Description.DescriptionV1.Builder = Services.Common.Containers.Description.DescriptionV1.Builder()
            if hasDescription {
              try subBuilder.mergeFrom(description_)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            description_ = subBuilder.buildPartial()

          case 34 :
            let subBuilder:Services.Common.Containers.PermissionsV1.Builder = Services.Common.Containers.PermissionsV1.Builder()
            if hasPermissions {
              try subBuilder.mergeFrom(permissions)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            permissions = subBuilder.buildPartial()

          case 42 :
            organizationId = try input.readString()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class TeamMemberV1 : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum RoleV1:Int32 {
        case Member = 0
        case Coordinator = 1

      }

      //Enum type declaration end 

    public private(set) var hasProfileId:Bool = false
    public private(set) var profileId:String = ""

    public private(set) var role:Services.Team.Containers.TeamMemberV1.RoleV1 = Services.Team.Containers.TeamMemberV1.RoleV1.Member
    public private(set) var hasRole:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasProfileId {
        try output.writeString(1, value:profileId)
      }
      if hasRole {
        try output.writeEnum(2, value:role.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasProfileId {
        serialize_size += profileId.computeStringSize(1)
      }
      if (hasRole) {
        serialize_size += role.rawValue.computeEnumSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Team.Containers.TeamMemberV1> {
      var mergedArray = Array<Services.Team.Containers.TeamMemberV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Team.Containers.TeamMemberV1? {
      return try Services.Team.Containers.TeamMemberV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Team.Containers.TeamMemberV1 {
      return try Services.Team.Containers.TeamMemberV1.Builder().mergeFromData(data, extensionRegistry:Services.Team.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Team.Containers.TeamMemberV1 {
      return try Services.Team.Containers.TeamMemberV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Team.Containers.TeamMemberV1 {
      return try Services.Team.Containers.TeamMemberV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Team.Containers.TeamMemberV1 {
      return try Services.Team.Containers.TeamMemberV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Team.Containers.TeamMemberV1 {
      return try Services.Team.Containers.TeamMemberV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Team.Containers.TeamMemberV1 {
      return try Services.Team.Containers.TeamMemberV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Team.Containers.TeamMemberV1.Builder {
      return Services.Team.Containers.TeamMemberV1.classBuilder() as! Services.Team.Containers.TeamMemberV1.Builder
    }
    public func getBuilder() -> Services.Team.Containers.TeamMemberV1.Builder {
      return classBuilder() as! Services.Team.Containers.TeamMemberV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Team.Containers.TeamMemberV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Team.Containers.TeamMemberV1.Builder()
    }
    public func toBuilder() throws -> Services.Team.Containers.TeamMemberV1.Builder {
      return try Services.Team.Containers.TeamMemberV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Team.Containers.TeamMemberV1) throws -> Services.Team.Containers.TeamMemberV1.Builder {
      return try Services.Team.Containers.TeamMemberV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasProfileId {
        output += "\(indent) profileId: \(profileId) \n"
      }
      if (hasRole) {
        output += "\(indent) role: \(role.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasProfileId {
               hashCode = (hashCode &* 31) &+ profileId.hashValue
            }
            if hasRole {
               hashCode = (hashCode &* 31) &+ Int(role.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Team.Containers.TeamMemberV1"
    }
    override public func className() -> String {
        return "Services.Team.Containers.TeamMemberV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Team.Containers.TeamMemberV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Team.Containers.TeamMemberV1 = Services.Team.Containers.TeamMemberV1()
      public func getMessage() -> Services.Team.Containers.TeamMemberV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasProfileId:Bool {
           get {
                return builderResult.hasProfileId
           }
      }
      public var profileId:String {
           get {
                return builderResult.profileId
           }
           set (value) {
               builderResult.hasProfileId = true
               builderResult.profileId = value
           }
      }
      public func setProfileId(value:String) -> Services.Team.Containers.TeamMemberV1.Builder {
        self.profileId = value
        return self
      }
      public func clearProfileId() -> Services.Team.Containers.TeamMemberV1.Builder{
           builderResult.hasProfileId = false
           builderResult.profileId = ""
           return self
      }
        public var hasRole:Bool{
            get {
                return builderResult.hasRole
            }
        }
        public var role:Services.Team.Containers.TeamMemberV1.RoleV1 {
            get {
                return builderResult.role
            }
            set (value) {
                builderResult.hasRole = true
                builderResult.role = value
            }
        }
        public func setRole(value:Services.Team.Containers.TeamMemberV1.RoleV1) -> Services.Team.Containers.TeamMemberV1.Builder {
          self.role = value
          return self
        }
        public func clearRole() -> Services.Team.Containers.TeamMemberV1.Builder {
           builderResult.hasRole = false
           builderResult.role = .Member
           return self
        }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Team.Containers.TeamMemberV1.Builder {
        builderResult = Services.Team.Containers.TeamMemberV1()
        return self
      }
      public override func clone() throws -> Services.Team.Containers.TeamMemberV1.Builder {
        return try Services.Team.Containers.TeamMemberV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Team.Containers.TeamMemberV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Team.Containers.TeamMemberV1 {
        let returnMe:Services.Team.Containers.TeamMemberV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Team.Containers.TeamMemberV1) throws -> Services.Team.Containers.TeamMemberV1.Builder {
        if other == Services.Team.Containers.TeamMemberV1() {
         return self
        }
        if other.hasProfileId {
             profileId = other.profileId
        }
        if other.hasRole {
             role = other.role
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Team.Containers.TeamMemberV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Team.Containers.TeamMemberV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            profileId = try input.readString()

          case 16 :
            let valueIntrole = try input.readEnum()
            if let enumsrole = Services.Team.Containers.TeamMemberV1.RoleV1(rawValue:valueIntrole){
                 role = enumsrole
            } else {
                 try unknownFieldsBuilder.mergeVarintField(2, value:Int64(valueIntrole))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
