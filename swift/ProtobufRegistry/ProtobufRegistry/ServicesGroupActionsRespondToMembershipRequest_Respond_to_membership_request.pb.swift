// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.Group.Actions{ public struct RespondToMembershipRequest { }}

public func == (lhs: Services.Group.Actions.RespondToMembershipRequest.RequestV1, rhs: Services.Group.Actions.RespondToMembershipRequest.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasRequestId == rhs.hasRequestId) && (!lhs.hasRequestId || lhs.requestId == rhs.requestId)
  fieldCheck = fieldCheck && (lhs.hasAction == rhs.hasAction) && (!lhs.hasAction || lhs.action == rhs.action)
  fieldCheck = fieldCheck && (lhs.hasMessage_ == rhs.hasMessage_) && (!lhs.hasMessage_ || lhs.message_ == rhs.message_)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Group.Actions.RespondToMembershipRequest.ResponseV1, rhs: Services.Group.Actions.RespondToMembershipRequest.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.Group.Actions.RespondToMembershipRequest {
  public struct RespondToMembershipRequestRoot {
    public static var sharedInstance : RespondToMembershipRequestRoot {
     struct Static {
         static let instance : RespondToMembershipRequestRoot = RespondToMembershipRequestRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {


      //Enum type declaration start 

      public enum ResponseActionV1:Int32 {
        case Approve = 0
        case Deny = 1

      }

      //Enum type declaration end 

    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "requestId": return requestId
           case "action": return self.action
           case "message_": return message_
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasRequestId:Bool = false
    public private(set) var requestId:String = ""

    public private(set) var action:Services.Group.Actions.RespondToMembershipRequest.RequestV1.ResponseActionV1 = Services.Group.Actions.RespondToMembershipRequest.RequestV1.ResponseActionV1.Approve
    public private(set) var hasAction:Bool = false
    public private(set) var hasMessage_:Bool = false
    public private(set) var message_:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasRequestId {
        output.writeString(2, value:requestId)
      }
      if hasAction {
        output.writeEnum(3, value:action.rawValue)
      }
      if hasMessage_ {
        output.writeString(4, value:message_)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasRequestId {
        serialize_size += requestId.computeStringSize(2)
      }
      if (hasAction) {
        serialize_size += action.rawValue.computeEnumSize(3)
      }
      if hasMessage_ {
        serialize_size += message_.computeStringSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Group.Actions.RespondToMembershipRequest.RequestV1 {
      return Services.Group.Actions.RespondToMembershipRequest.RequestV1.builder().mergeFromData(data, extensionRegistry:Services.Group.Actions.RespondToMembershipRequest.RespondToMembershipRequestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Group.Actions.RespondToMembershipRequest.RequestV1 {
      return Services.Group.Actions.RespondToMembershipRequest.RequestV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Group.Actions.RespondToMembershipRequest.RequestV1 {
      return Services.Group.Actions.RespondToMembershipRequest.RequestV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Group.Actions.RespondToMembershipRequest.RequestV1 {
      return Services.Group.Actions.RespondToMembershipRequest.RequestV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Group.Actions.RespondToMembershipRequest.RequestV1 {
      return Services.Group.Actions.RespondToMembershipRequest.RequestV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Group.Actions.RespondToMembershipRequest.RequestV1 {
      return Services.Group.Actions.RespondToMembershipRequest.RequestV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder {
      return Services.Group.Actions.RespondToMembershipRequest.RequestV1.classBuilder() as! Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder
    }
    public func builder() -> Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder {
      return classBuilder() as! Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Group.Actions.RespondToMembershipRequest.RequestV1.builder()
    }
    public func toBuilder() -> Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder {
      return Services.Group.Actions.RespondToMembershipRequest.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Group.Actions.RespondToMembershipRequest.RequestV1) -> Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder {
      return Services.Group.Actions.RespondToMembershipRequest.RequestV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasRequestId {
        output += "\(indent) requestId: \(requestId) \n"
      }
      if (hasAction) {
        output += "\(indent) action: \(action.rawValue)\n"
      }
      if hasMessage_ {
        output += "\(indent) message_: \(message_) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasRequestId {
               hashCode = (hashCode &* 31) &+ requestId.hashValue
            }
            if hasAction {
               hashCode = (hashCode &* 31) &+ Int(action.rawValue)
            }
            if hasMessage_ {
               hashCode = (hashCode &* 31) &+ message_.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Group.Actions.RespondToMembershipRequest.RequestV1"
    }
    override public func className() -> String {
        return "Services.Group.Actions.RespondToMembershipRequest.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Group.Actions.RespondToMembershipRequest.RequestV1.self
    }
    //Meta information declaration end

  }

  final public class RequestV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Group.Actions.RespondToMembershipRequest.RequestV1

    required override public init () {
       builderResult = Services.Group.Actions.RespondToMembershipRequest.RequestV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasRequestId:Bool {
         get {
              return builderResult.hasRequestId
         }
    }
    public var requestId:String {
         get {
              return builderResult.requestId
         }
         set (value) {
             builderResult.hasRequestId = true
             builderResult.requestId = value
         }
    }
    public func setRequestId(value:String)-> Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder {
      self.requestId = value
      return self
    }
    public func clearRequestId() -> Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder{
         builderResult.hasRequestId = false
         builderResult.requestId = ""
         return self
    }
      public var hasAction:Bool{
          get {
              return builderResult.hasAction
          }
      }
      public var action:Services.Group.Actions.RespondToMembershipRequest.RequestV1.ResponseActionV1 {
          get {
              return builderResult.action
          }
          set (value) {
              builderResult.hasAction = true
              builderResult.action = value
          }
      }
      public func setAction(value:Services.Group.Actions.RespondToMembershipRequest.RequestV1.ResponseActionV1)-> Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder {
        self.action = value
        return self
      }
      public func clearAction() -> Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder {
         builderResult.hasAction = false
         builderResult.action = .Approve
         return self
      }
    public var hasMessage_:Bool {
         get {
              return builderResult.hasMessage_
         }
    }
    public var message_:String {
         get {
              return builderResult.message_
         }
         set (value) {
             builderResult.hasMessage_ = true
             builderResult.message_ = value
         }
    }
    public func setMessage_(value:String)-> Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder {
      self.message_ = value
      return self
    }
    public func clearMessage_() -> Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder{
         builderResult.hasMessage_ = false
         builderResult.message_ = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder {
      builderResult = Services.Group.Actions.RespondToMembershipRequest.RequestV1()
      return self
    }
    public override func clone() -> Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder {
      return Services.Group.Actions.RespondToMembershipRequest.RequestV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Group.Actions.RespondToMembershipRequest.RequestV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Group.Actions.RespondToMembershipRequest.RequestV1 {
      var returnMe:Services.Group.Actions.RespondToMembershipRequest.RequestV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Group.Actions.RespondToMembershipRequest.RequestV1) -> Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder {
      if (other == Services.Group.Actions.RespondToMembershipRequest.RequestV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasRequestId {
           requestId = other.requestId
      }
      if other.hasAction {
           action = other.action
      }
      if other.hasMessage_ {
           message_ = other.message_
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Group.Actions.RespondToMembershipRequest.RequestV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          requestId = input.readString()

        case 24 :
          let valueIntaction = input.readEnum()
          if let enumsaction = Services.Group.Actions.RespondToMembershipRequest.RequestV1.ResponseActionV1(rawValue:valueIntaction){
               action = enumsaction
          } else {
               unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueIntaction))
          }

        case 34 :
          message_ = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Group.Actions.RespondToMembershipRequest.ResponseV1 {
      return Services.Group.Actions.RespondToMembershipRequest.ResponseV1.builder().mergeFromData(data, extensionRegistry:Services.Group.Actions.RespondToMembershipRequest.RespondToMembershipRequestRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Group.Actions.RespondToMembershipRequest.ResponseV1 {
      return Services.Group.Actions.RespondToMembershipRequest.ResponseV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Group.Actions.RespondToMembershipRequest.ResponseV1 {
      return Services.Group.Actions.RespondToMembershipRequest.ResponseV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Group.Actions.RespondToMembershipRequest.ResponseV1 {
      return Services.Group.Actions.RespondToMembershipRequest.ResponseV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Group.Actions.RespondToMembershipRequest.ResponseV1 {
      return Services.Group.Actions.RespondToMembershipRequest.ResponseV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Group.Actions.RespondToMembershipRequest.ResponseV1 {
      return Services.Group.Actions.RespondToMembershipRequest.ResponseV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Group.Actions.RespondToMembershipRequest.ResponseV1Builder {
      return Services.Group.Actions.RespondToMembershipRequest.ResponseV1.classBuilder() as! Services.Group.Actions.RespondToMembershipRequest.ResponseV1Builder
    }
    public func builder() -> Services.Group.Actions.RespondToMembershipRequest.ResponseV1Builder {
      return classBuilder() as! Services.Group.Actions.RespondToMembershipRequest.ResponseV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Group.Actions.RespondToMembershipRequest.ResponseV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Group.Actions.RespondToMembershipRequest.ResponseV1.builder()
    }
    public func toBuilder() -> Services.Group.Actions.RespondToMembershipRequest.ResponseV1Builder {
      return Services.Group.Actions.RespondToMembershipRequest.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Group.Actions.RespondToMembershipRequest.ResponseV1) -> Services.Group.Actions.RespondToMembershipRequest.ResponseV1Builder {
      return Services.Group.Actions.RespondToMembershipRequest.ResponseV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Group.Actions.RespondToMembershipRequest.ResponseV1"
    }
    override public func className() -> String {
        return "Services.Group.Actions.RespondToMembershipRequest.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Group.Actions.RespondToMembershipRequest.ResponseV1.self
    }
    //Meta information declaration end

  }

  final public class ResponseV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Group.Actions.RespondToMembershipRequest.ResponseV1

    required override public init () {
       builderResult = Services.Group.Actions.RespondToMembershipRequest.ResponseV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Group.Actions.RespondToMembershipRequest.ResponseV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Group.Actions.RespondToMembershipRequest.ResponseV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Group.Actions.RespondToMembershipRequest.ResponseV1Builder {
      builderResult = Services.Group.Actions.RespondToMembershipRequest.ResponseV1()
      return self
    }
    public override func clone() -> Services.Group.Actions.RespondToMembershipRequest.ResponseV1Builder {
      return Services.Group.Actions.RespondToMembershipRequest.ResponseV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Group.Actions.RespondToMembershipRequest.ResponseV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Group.Actions.RespondToMembershipRequest.ResponseV1 {
      var returnMe:Services.Group.Actions.RespondToMembershipRequest.ResponseV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Group.Actions.RespondToMembershipRequest.ResponseV1) -> Services.Group.Actions.RespondToMembershipRequest.ResponseV1Builder {
      if (other == Services.Group.Actions.RespondToMembershipRequest.ResponseV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Group.Actions.RespondToMembershipRequest.ResponseV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Group.Actions.RespondToMembershipRequest.ResponseV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
