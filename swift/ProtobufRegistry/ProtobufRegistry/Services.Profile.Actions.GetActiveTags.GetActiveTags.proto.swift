// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file get_active_tags.proto

import Foundation

public extension Services.Profile.Actions{ public struct GetActiveTags { }}

public func == (lhs: Services.Profile.Actions.GetActiveTags.RequestV1, rhs: Services.Profile.Actions.GetActiveTags.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.hasTagType == rhs.hasTagType) && (!lhs.hasTagType || lhs.tagType == rhs.tagType)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Profile.Actions.GetActiveTags.ResponseV1, rhs: Services.Profile.Actions.GetActiveTags.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.tags == rhs.tags)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Profile.Actions.GetActiveTags {
  public struct GetActiveTagsRoot {
    public static var sharedInstance : GetActiveTagsRoot {
     struct Static {
         static let instance : GetActiveTagsRoot = GetActiveTagsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Profile.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    public private(set) var tagType:Services.Profile.Containers.TagV1.TagTypeV1 = Services.Profile.Containers.TagV1.TagTypeV1.Skill
    public private(set) var hasTagType:Bool = false
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      if hasOrganizationId {
        try output.writeString(2, value:organizationId)
      }
      if hasTagType {
        try output.writeEnum(3, value:tagType.rawValue)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(2)
      }
      if (hasTagType) {
        serialize_size += tagType.rawValue.computeEnumSize(3)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Profile.Actions.GetActiveTags.RequestV1> {
      var mergedArray = Array<Services.Profile.Actions.GetActiveTags.RequestV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Profile.Actions.GetActiveTags.RequestV1? {
      return try Services.Profile.Actions.GetActiveTags.RequestV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Profile.Actions.GetActiveTags.RequestV1 {
      return try Services.Profile.Actions.GetActiveTags.RequestV1.Builder().mergeFromData(data, extensionRegistry:Services.Profile.Actions.GetActiveTags.GetActiveTagsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Actions.GetActiveTags.RequestV1 {
      return try Services.Profile.Actions.GetActiveTags.RequestV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Profile.Actions.GetActiveTags.RequestV1 {
      return try Services.Profile.Actions.GetActiveTags.RequestV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Actions.GetActiveTags.RequestV1 {
      return try Services.Profile.Actions.GetActiveTags.RequestV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Profile.Actions.GetActiveTags.RequestV1 {
      return try Services.Profile.Actions.GetActiveTags.RequestV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Actions.GetActiveTags.RequestV1 {
      return try Services.Profile.Actions.GetActiveTags.RequestV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Profile.Actions.GetActiveTags.RequestV1.Builder {
      return Services.Profile.Actions.GetActiveTags.RequestV1.classBuilder() as! Services.Profile.Actions.GetActiveTags.RequestV1.Builder
    }
    public func getBuilder() -> Services.Profile.Actions.GetActiveTags.RequestV1.Builder {
      return classBuilder() as! Services.Profile.Actions.GetActiveTags.RequestV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Actions.GetActiveTags.RequestV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Profile.Actions.GetActiveTags.RequestV1.Builder()
    }
    public func toBuilder() throws -> Services.Profile.Actions.GetActiveTags.RequestV1.Builder {
      return try Services.Profile.Actions.GetActiveTags.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Profile.Actions.GetActiveTags.RequestV1) throws -> Services.Profile.Actions.GetActiveTags.RequestV1.Builder {
      return try Services.Profile.Actions.GetActiveTags.RequestV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      if (hasTagType) {
        output += "\(indent) tagType: \(tagType.rawValue)\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            if hasTagType {
               hashCode = (hashCode &* 31) &+ Int(tagType.rawValue)
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Profile.Actions.GetActiveTags.RequestV1"
    }
    override public func className() -> String {
        return "Services.Profile.Actions.GetActiveTags.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Actions.GetActiveTags.RequestV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Profile.Actions.GetActiveTags.RequestV1 = Services.Profile.Actions.GetActiveTags.RequestV1()
      public func getMessage() -> Services.Profile.Actions.GetActiveTags.RequestV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Profile.Actions.GetActiveTags.RequestV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Profile.Actions.GetActiveTags.RequestV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var hasOrganizationId:Bool {
           get {
                return builderResult.hasOrganizationId
           }
      }
      public var organizationId:String {
           get {
                return builderResult.organizationId
           }
           set (value) {
               builderResult.hasOrganizationId = true
               builderResult.organizationId = value
           }
      }
      public func setOrganizationId(value:String) -> Services.Profile.Actions.GetActiveTags.RequestV1.Builder {
        self.organizationId = value
        return self
      }
      public func clearOrganizationId() -> Services.Profile.Actions.GetActiveTags.RequestV1.Builder{
           builderResult.hasOrganizationId = false
           builderResult.organizationId = ""
           return self
      }
        public var hasTagType:Bool{
            get {
                return builderResult.hasTagType
            }
        }
        public var tagType:Services.Profile.Containers.TagV1.TagTypeV1 {
            get {
                return builderResult.tagType
            }
            set (value) {
                builderResult.hasTagType = true
                builderResult.tagType = value
            }
        }
        public func setTagType(value:Services.Profile.Containers.TagV1.TagTypeV1) -> Services.Profile.Actions.GetActiveTags.RequestV1.Builder {
          self.tagType = value
          return self
        }
        public func clearTagType() -> Services.Profile.Actions.GetActiveTags.RequestV1.Builder {
           builderResult.hasTagType = false
           builderResult.tagType = .Skill
           return self
        }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Profile.Actions.GetActiveTags.RequestV1.Builder {
        builderResult = Services.Profile.Actions.GetActiveTags.RequestV1()
        return self
      }
      public override func clone() throws -> Services.Profile.Actions.GetActiveTags.RequestV1.Builder {
        return try Services.Profile.Actions.GetActiveTags.RequestV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Profile.Actions.GetActiveTags.RequestV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Profile.Actions.GetActiveTags.RequestV1 {
        let returnMe:Services.Profile.Actions.GetActiveTags.RequestV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Profile.Actions.GetActiveTags.RequestV1) throws -> Services.Profile.Actions.GetActiveTags.RequestV1.Builder {
        if other == Services.Profile.Actions.GetActiveTags.RequestV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if other.hasOrganizationId {
             organizationId = other.organizationId
        }
        if other.hasTagType {
             tagType = other.tagType
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Profile.Actions.GetActiveTags.RequestV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Actions.GetActiveTags.RequestV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            organizationId = try input.readString()

          case 24 :
            let valueInttagType = try input.readEnum()
            if let enumstagType = Services.Profile.Containers.TagV1.TagTypeV1(rawValue:valueInttagType){
                 tagType = enumstagType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(3, value:Int64(valueInttagType))
            }

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var tags:Array<Services.Profile.Containers.TagV1>  = Array<Services.Profile.Containers.TagV1>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasVersion {
        try output.writeUInt32(1, value:version)
      }
      for oneElementtags in tags {
          try output.writeMessage(2, value:oneElementtags)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      for oneElementtags in tags {
          serialize_size += oneElementtags.computeMessageSize(2)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Profile.Actions.GetActiveTags.ResponseV1> {
      var mergedArray = Array<Services.Profile.Actions.GetActiveTags.ResponseV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Profile.Actions.GetActiveTags.ResponseV1? {
      return try Services.Profile.Actions.GetActiveTags.ResponseV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Profile.Actions.GetActiveTags.ResponseV1 {
      return try Services.Profile.Actions.GetActiveTags.ResponseV1.Builder().mergeFromData(data, extensionRegistry:Services.Profile.Actions.GetActiveTags.GetActiveTagsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Actions.GetActiveTags.ResponseV1 {
      return try Services.Profile.Actions.GetActiveTags.ResponseV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Profile.Actions.GetActiveTags.ResponseV1 {
      return try Services.Profile.Actions.GetActiveTags.ResponseV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Actions.GetActiveTags.ResponseV1 {
      return try Services.Profile.Actions.GetActiveTags.ResponseV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Profile.Actions.GetActiveTags.ResponseV1 {
      return try Services.Profile.Actions.GetActiveTags.ResponseV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Actions.GetActiveTags.ResponseV1 {
      return try Services.Profile.Actions.GetActiveTags.ResponseV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Profile.Actions.GetActiveTags.ResponseV1.Builder {
      return Services.Profile.Actions.GetActiveTags.ResponseV1.classBuilder() as! Services.Profile.Actions.GetActiveTags.ResponseV1.Builder
    }
    public func getBuilder() -> Services.Profile.Actions.GetActiveTags.ResponseV1.Builder {
      return classBuilder() as! Services.Profile.Actions.GetActiveTags.ResponseV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Profile.Actions.GetActiveTags.ResponseV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Profile.Actions.GetActiveTags.ResponseV1.Builder()
    }
    public func toBuilder() throws -> Services.Profile.Actions.GetActiveTags.ResponseV1.Builder {
      return try Services.Profile.Actions.GetActiveTags.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Profile.Actions.GetActiveTags.ResponseV1) throws -> Services.Profile.Actions.GetActiveTags.ResponseV1.Builder {
      return try Services.Profile.Actions.GetActiveTags.ResponseV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      var tagsElementIndex:Int = 0
      for oneElementtags in tags {
          output += "\(indent) tags[\(tagsElementIndex)] {\n"
          try oneElementtags.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          tagsElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            for oneElementtags in tags {
                hashCode = (hashCode &* 31) &+ oneElementtags.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Profile.Actions.GetActiveTags.ResponseV1"
    }
    override public func className() -> String {
        return "Services.Profile.Actions.GetActiveTags.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Profile.Actions.GetActiveTags.ResponseV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Profile.Actions.GetActiveTags.ResponseV1 = Services.Profile.Actions.GetActiveTags.ResponseV1()
      public func getMessage() -> Services.Profile.Actions.GetActiveTags.ResponseV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var hasVersion:Bool {
           get {
                return builderResult.hasVersion
           }
      }
      public var version:UInt32 {
           get {
                return builderResult.version
           }
           set (value) {
               builderResult.hasVersion = true
               builderResult.version = value
           }
      }
      public func setVersion(value:UInt32) -> Services.Profile.Actions.GetActiveTags.ResponseV1.Builder {
        self.version = value
        return self
      }
      public func clearVersion() -> Services.Profile.Actions.GetActiveTags.ResponseV1.Builder{
           builderResult.hasVersion = false
           builderResult.version = UInt32(1)
           return self
      }
      public var tags:Array<Services.Profile.Containers.TagV1> {
           get {
               return builderResult.tags
           }
           set (value) {
               builderResult.tags = value
           }
      }
      public func setTags(value:Array<Services.Profile.Containers.TagV1>) -> Services.Profile.Actions.GetActiveTags.ResponseV1.Builder {
        self.tags = value
        return self
      }
      public func clearTags() -> Services.Profile.Actions.GetActiveTags.ResponseV1.Builder {
        builderResult.tags.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Profile.Actions.GetActiveTags.ResponseV1.Builder {
        builderResult = Services.Profile.Actions.GetActiveTags.ResponseV1()
        return self
      }
      public override func clone() throws -> Services.Profile.Actions.GetActiveTags.ResponseV1.Builder {
        return try Services.Profile.Actions.GetActiveTags.ResponseV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Profile.Actions.GetActiveTags.ResponseV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Profile.Actions.GetActiveTags.ResponseV1 {
        let returnMe:Services.Profile.Actions.GetActiveTags.ResponseV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Profile.Actions.GetActiveTags.ResponseV1) throws -> Services.Profile.Actions.GetActiveTags.ResponseV1.Builder {
        if other == Services.Profile.Actions.GetActiveTags.ResponseV1() {
         return self
        }
        if other.hasVersion {
             version = other.version
        }
        if !other.tags.isEmpty  {
           builderResult.tags += other.tags
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Profile.Actions.GetActiveTags.ResponseV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Profile.Actions.GetActiveTags.ResponseV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            version = try input.readUInt32()

          case 18 :
            let subBuilder = Services.Profile.Containers.TagV1.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            tags += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
