// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation

public struct SearchServiceRoot {
  public static var sharedInstance : SearchServiceRoot {
   struct Static {
       static let instance : SearchServiceRoot = SearchServiceRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    OrganizationServiceRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    ProfileServiceRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

public func == (lhs: SearchService.Search, rhs: SearchService.Search) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: SearchService, rhs: SearchService) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final public class SearchService : GeneratedMessage {


  //Nested type declaration start

    final public class Search : GeneratedMessage {


      //Nested type declaration start

        final public class Request : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 case "query": return query
                 default: return nil
                 }
          }

          public private(set) var hasQuery:Bool = false
          public private(set) var query:String = ""

          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            if hasQuery {
              output.writeString(1, value:query)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            if hasQuery {
              size += WireFormat.computeStringSize(1, value:query)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> SearchService.Search.Request {
            return SearchService.Search.Request.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> SearchService.Search.Request {
            return SearchService.Search.Request.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> SearchService.Search.Request {
            return SearchService.Search.Request.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->SearchService.Search.Request {
            return SearchService.Search.Request.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> SearchService.Search.Request {
            return SearchService.Search.Request.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SearchService.Search.Request {
            return SearchService.Search.Request.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> SearchService.Search.RequestBuilder {
            return SearchService.Search.Request.classBuilder() as SearchService.Search.RequestBuilder
          }
          public func builder() -> SearchService.Search.RequestBuilder {
            return classBuilder() as SearchService.Search.RequestBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return SearchService.Search.RequestBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return SearchService.Search.Request.builder()
          }
          public func toBuilder() -> SearchService.Search.RequestBuilder {
            return SearchService.Search.Request.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:SearchService.Search.Request) -> SearchService.Search.RequestBuilder {
            return SearchService.Search.Request.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            if hasQuery {
              output += "\(indent) query: \(query) \n"
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  if hasQuery {
                     hashCode = (hashCode &* 31) &+ query.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "SearchService.Search.Request"
          }
          override public func className() -> String {
              return "SearchService.Search.Request"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return SearchService.Search.Request.self
          }


          //Meta information declaration end

        }

        final public class RequestBuilder : GeneratedMessageBuilder {
          private var builderResult:SearchService.Search.Request

          required override public init () {
             builderResult = SearchService.Search.Request()
             super.init()
          }
          public var hasQuery:Bool {
               get {
                    return builderResult.hasQuery
               }
          }
          public var query:String {
               get {
                    return builderResult.query
               }
               set (value) {
                   builderResult.hasQuery = true
                   builderResult.query = value
               }
          }
          public func clearQuery() -> SearchService.Search.RequestBuilder{
               builderResult.hasQuery = false
               builderResult.query = ""
               return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> SearchService.Search.RequestBuilder {
            builderResult = SearchService.Search.Request()
            return self
          }
          public override func clone() -> SearchService.Search.RequestBuilder {
            return SearchService.Search.Request.builderWithPrototype(builderResult)
          }
          public override func build() -> SearchService.Search.Request {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> SearchService.Search.Request {
            var returnMe:SearchService.Search.Request = builderResult
            return returnMe
          }
          public func mergeFrom(other:SearchService.Search.Request) -> SearchService.Search.RequestBuilder {
            if other.hasQuery {
                 query = other.query
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->SearchService.Search.RequestBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SearchService.Search.RequestBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                query = input.readString()

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end



      //Nested type declaration start

        final public class Response : GeneratedMessage {
          public subscript(key: String) -> AnyObject? {
                 switch key {
                 default: return nil
                 }
          }

          public private(set) var profiles:Array<ProfileService.Containers.Profile>  = Array<ProfileService.Containers.Profile>()
          public private(set) var teams:Array<OrganizationService.Containers.Team>  = Array<OrganizationService.Containers.Team>()
          public private(set) var addresses:Array<OrganizationService.Containers.Address>  = Array<OrganizationService.Containers.Address>()
          required public init() {
               super.init()
          }
          override public func isInitialized() -> Bool {
           return true
          }
          override public func writeToCodedOutputStream(output:CodedOutputStream) {
            for oneElementprofiles in profiles {
                output.writeMessage(1, value:oneElementprofiles)
            }
            for oneElementteams in teams {
                output.writeMessage(2, value:oneElementteams)
            }
            for oneElementaddresses in addresses {
                output.writeMessage(3, value:oneElementaddresses)
            }
            unknownFields.writeToCodedOutputStream(output)
          }
          override public func serializedSize() -> Int32 {
            var size:Int32 = memoizedSerializedSize
            if size != -1 {
             return size
            }

            size = 0
            for oneElementprofiles in profiles {
                size += WireFormat.computeMessageSize(1, value:oneElementprofiles)
            }
            for oneElementteams in teams {
                size += WireFormat.computeMessageSize(2, value:oneElementteams)
            }
            for oneElementaddresses in addresses {
                size += WireFormat.computeMessageSize(3, value:oneElementaddresses)
            }
            size += unknownFields.serializedSize()
            memoizedSerializedSize = size
            return size
          }
          public class func parseFromData(data:[Byte]) -> SearchService.Search.Response {
            return SearchService.Search.Response.builder().mergeFromData(data).build()
          }
          public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> SearchService.Search.Response {
            return SearchService.Search.Response.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromInputStream(input:NSInputStream) -> SearchService.Search.Response {
            return SearchService.Search.Response.builder().mergeFromInputStream(input).build()
          }
          public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->SearchService.Search.Response {
            return SearchService.Search.Response.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream) -> SearchService.Search.Response {
            return SearchService.Search.Response.builder().mergeFromCodedInputStream(input).build()
          }
          public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SearchService.Search.Response {
            return SearchService.Search.Response.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
          }
          public class func builder() -> SearchService.Search.ResponseBuilder {
            return SearchService.Search.Response.classBuilder() as SearchService.Search.ResponseBuilder
          }
          public func builder() -> SearchService.Search.ResponseBuilder {
            return classBuilder() as SearchService.Search.ResponseBuilder
          }
          public override class func classBuilder() -> MessageBuilder {
            return SearchService.Search.ResponseBuilder()
          }
          public override func classBuilder() -> MessageBuilder {
            return SearchService.Search.Response.builder()
          }
          public func toBuilder() -> SearchService.Search.ResponseBuilder {
            return SearchService.Search.Response.builderWithPrototype(self)
          }
          public class func builderWithPrototype(prototype:SearchService.Search.Response) -> SearchService.Search.ResponseBuilder {
            return SearchService.Search.Response.builder().mergeFrom(prototype)
          }
          override public func writeDescriptionTo(inout output:String, indent:String) {
            var profilesElementIndex:Int = 0
            for oneElementprofiles in profiles {
                output += "\(indent) profiles[\(profilesElementIndex)] {\n"
                oneElementprofiles.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                profilesElementIndex++
            }
            var teamsElementIndex:Int = 0
            for oneElementteams in teams {
                output += "\(indent) teams[\(teamsElementIndex)] {\n"
                oneElementteams.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                teamsElementIndex++
            }
            var addressesElementIndex:Int = 0
            for oneElementaddresses in addresses {
                output += "\(indent) addresses[\(addressesElementIndex)] {\n"
                oneElementaddresses.writeDescriptionTo(&output, indent:"\(indent)  ")
                output += "\(indent)}\n"
                addressesElementIndex++
            }
            unknownFields.writeDescriptionTo(&output, indent:indent)
          }
          override public var hashValue:Int {
              get {
                  var hashCode:Int = 7
                  for oneElementprofiles in profiles {
                      hashCode = (hashCode &* 31) &+ oneElementprofiles.hashValue
                  }
                  for oneElementteams in teams {
                      hashCode = (hashCode &* 31) &+ oneElementteams.hashValue
                  }
                  for oneElementaddresses in addresses {
                      hashCode = (hashCode &* 31) &+ oneElementaddresses.hashValue
                  }
                  hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                  return hashCode
              }
          }


          //Meta information declaration start

          override public class func className() -> String {
              return "SearchService.Search.Response"
          }
          override public func className() -> String {
              return "SearchService.Search.Response"
          }
          override public func classMetaType() -> GeneratedMessage.Type {
              return SearchService.Search.Response.self
          }


          //Meta information declaration end

        }

        final public class ResponseBuilder : GeneratedMessageBuilder {
          private var builderResult:SearchService.Search.Response

          required override public init () {
             builderResult = SearchService.Search.Response()
             super.init()
          }
          public var profiles:Array<ProfileService.Containers.Profile> {
               get {
                   return builderResult.profiles
               }
               set (value) {
                   builderResult.profiles = value
               }
          }
          public func clearProfiles() -> SearchService.Search.ResponseBuilder {
            builderResult.profiles.removeAll(keepCapacity: false)
            return self
          }
          public var teams:Array<OrganizationService.Containers.Team> {
               get {
                   return builderResult.teams
               }
               set (value) {
                   builderResult.teams = value
               }
          }
          public func clearTeams() -> SearchService.Search.ResponseBuilder {
            builderResult.teams.removeAll(keepCapacity: false)
            return self
          }
          public var addresses:Array<OrganizationService.Containers.Address> {
               get {
                   return builderResult.addresses
               }
               set (value) {
                   builderResult.addresses = value
               }
          }
          public func clearAddresses() -> SearchService.Search.ResponseBuilder {
            builderResult.addresses.removeAll(keepCapacity: false)
            return self
          }
          override public var internalGetResult:GeneratedMessage {
               get {
                  return builderResult
               }
          }
          public override func clear() -> SearchService.Search.ResponseBuilder {
            builderResult = SearchService.Search.Response()
            return self
          }
          public override func clone() -> SearchService.Search.ResponseBuilder {
            return SearchService.Search.Response.builderWithPrototype(builderResult)
          }
          public override func build() -> SearchService.Search.Response {
               checkInitialized()
               return buildPartial()
          }
          public func buildPartial() -> SearchService.Search.Response {
            var returnMe:SearchService.Search.Response = builderResult
            return returnMe
          }
          public func mergeFrom(other:SearchService.Search.Response) -> SearchService.Search.ResponseBuilder {
            if !other.profiles.isEmpty  {
               builderResult.profiles += other.profiles
            }
            if !other.teams.isEmpty  {
               builderResult.teams += other.teams
            }
            if !other.addresses.isEmpty  {
               builderResult.addresses += other.addresses
            }
            mergeUnknownFields(other.unknownFields)
            return self
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream) ->SearchService.Search.ResponseBuilder {
               return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
          }
          public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SearchService.Search.ResponseBuilder {
            var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
            while (true) {
              var tag = input.readTag()
              switch tag {
              case 0: 
                self.unknownFields = unknownFieldsBuilder.build()
                return self

              case 10 :
                var subBuilder = ProfileService.Containers.Profile.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                profiles += [subBuilder.buildPartial()]

              case 18 :
                var subBuilder = OrganizationService.Containers.Team.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                teams += [subBuilder.buildPartial()]

              case 26 :
                var subBuilder = OrganizationService.Containers.Address.builder()
                input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
                addresses += [subBuilder.buildPartial()]

              default:
                if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
                   unknownFields = unknownFieldsBuilder.build()
                   return self
                }
              }
            }
          }
        }



      //Nested type declaration end

      public subscript(key: String) -> AnyObject? {
             switch key {
             default: return nil
             }
      }

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      public class func parseFromData(data:[Byte]) -> SearchService.Search {
        return SearchService.Search.builder().mergeFromData(data).build()
      }
      public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> SearchService.Search {
        return SearchService.Search.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromInputStream(input:NSInputStream) -> SearchService.Search {
        return SearchService.Search.builder().mergeFromInputStream(input).build()
      }
      public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->SearchService.Search {
        return SearchService.Search.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream) -> SearchService.Search {
        return SearchService.Search.builder().mergeFromCodedInputStream(input).build()
      }
      public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SearchService.Search {
        return SearchService.Search.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      public class func builder() -> SearchService.SearchBuilder {
        return SearchService.Search.classBuilder() as SearchService.SearchBuilder
      }
      public func builder() -> SearchService.SearchBuilder {
        return classBuilder() as SearchService.SearchBuilder
      }
      public override class func classBuilder() -> MessageBuilder {
        return SearchService.SearchBuilder()
      }
      public override func classBuilder() -> MessageBuilder {
        return SearchService.Search.builder()
      }
      public func toBuilder() -> SearchService.SearchBuilder {
        return SearchService.Search.builderWithPrototype(self)
      }
      public class func builderWithPrototype(prototype:SearchService.Search) -> SearchService.SearchBuilder {
        return SearchService.Search.builder().mergeFrom(prototype)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "SearchService.Search"
      }
      override public func className() -> String {
          return "SearchService.Search"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return SearchService.Search.self
      }


      //Meta information declaration end

    }

    final public class SearchBuilder : GeneratedMessageBuilder {
      private var builderResult:SearchService.Search

      required override public init () {
         builderResult = SearchService.Search()
         super.init()
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> SearchService.SearchBuilder {
        builderResult = SearchService.Search()
        return self
      }
      public override func clone() -> SearchService.SearchBuilder {
        return SearchService.Search.builderWithPrototype(builderResult)
      }
      public override func build() -> SearchService.Search {
           checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> SearchService.Search {
        var returnMe:SearchService.Search = builderResult
        return returnMe
      }
      public func mergeFrom(other:SearchService.Search) -> SearchService.SearchBuilder {
        mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) ->SearchService.SearchBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SearchService.SearchBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end

  public subscript(key: String) -> AnyObject? {
         switch key {
         default: return nil
         }
  }

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  public class func parseFromData(data:[Byte]) -> SearchService {
    return SearchService.builder().mergeFromData(data).build()
  }
  public class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> SearchService {
    return SearchService.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) -> SearchService {
    return SearchService.builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->SearchService {
    return SearchService.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) -> SearchService {
    return SearchService.builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SearchService {
    return SearchService.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func builder() -> SearchServiceBuilder {
    return SearchService.classBuilder() as SearchServiceBuilder
  }
  public func builder() -> SearchServiceBuilder {
    return classBuilder() as SearchServiceBuilder
  }
  public override class func classBuilder() -> MessageBuilder {
    return SearchServiceBuilder()
  }
  public override func classBuilder() -> MessageBuilder {
    return SearchService.builder()
  }
  public func toBuilder() -> SearchServiceBuilder {
    return SearchService.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:SearchService) -> SearchServiceBuilder {
    return SearchService.builder().mergeFrom(prototype)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "SearchService"
  }
  override public func className() -> String {
      return "SearchService"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return SearchService.self
  }


  //Meta information declaration end

}

final public class SearchServiceBuilder : GeneratedMessageBuilder {
  private var builderResult:SearchService

  required override public init () {
     builderResult = SearchService()
     super.init()
  }
  override public var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  public override func clear() -> SearchServiceBuilder {
    builderResult = SearchService()
    return self
  }
  public override func clone() -> SearchServiceBuilder {
    return SearchService.builderWithPrototype(builderResult)
  }
  public override func build() -> SearchService {
       checkInitialized()
       return buildPartial()
  }
  public func buildPartial() -> SearchService {
    var returnMe:SearchService = builderResult
    return returnMe
  }
  public func mergeFrom(other:SearchService) -> SearchServiceBuilder {
    mergeUnknownFields(other.unknownFields)
    return self
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream) ->SearchServiceBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SearchServiceBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


public extension SearchService.Search.Request {
    class func parseFromNSData(data:NSData) -> SearchService.Search.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return SearchService.Search.Request.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> SearchService.Search.Request {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return SearchService.Search.Request.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension SearchService.Search.Response {
    class func parseFromNSData(data:NSData) -> SearchService.Search.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return SearchService.Search.Response.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> SearchService.Search.Response {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return SearchService.Search.Response.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension SearchService.Search {
    class func parseFromNSData(data:NSData) -> SearchService.Search {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return SearchService.Search.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> SearchService.Search {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return SearchService.Search.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
public extension SearchService {
    class func parseFromNSData(data:NSData) -> SearchService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return SearchService.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> SearchService {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return SearchService.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
