// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file get_collections.proto

import Foundation

public extension Services.Post.Actions{ public struct GetCollections { }}

public func == (lhs: Services.Post.Actions.GetCollections.RequestV1, rhs: Services.Post.Actions.GetCollections.RequestV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOwnerType == rhs.hasOwnerType) && (!lhs.hasOwnerType || lhs.ownerType == rhs.ownerType)
  fieldCheck = fieldCheck && (lhs.hasOwnerId == rhs.hasOwnerId) && (!lhs.hasOwnerId || lhs.ownerId == rhs.ownerId)
  fieldCheck = fieldCheck && (lhs.hasIsDefault == rhs.hasIsDefault) && (!lhs.hasIsDefault || lhs.isDefault == rhs.isDefault)
  fieldCheck = fieldCheck && (lhs.hasInflations == rhs.hasInflations) && (!lhs.hasInflations || lhs.inflations == rhs.inflations)
  fieldCheck = fieldCheck && (lhs.hasFields == rhs.hasFields) && (!lhs.hasFields || lhs.fields == rhs.fields)
  fieldCheck = fieldCheck && (lhs.hasCollectionItemId == rhs.hasCollectionItemId) && (!lhs.hasCollectionItemId || lhs.collectionItemId == rhs.collectionItemId)
  fieldCheck = fieldCheck && (lhs.hasItemsPerCollection == rhs.hasItemsPerCollection) && (!lhs.hasItemsPerCollection || lhs.itemsPerCollection == rhs.itemsPerCollection)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Services.Post.Actions.GetCollections.ResponseV1, rhs: Services.Post.Actions.GetCollections.ResponseV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.collections == rhs.collections)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public extension Services.Post.Actions.GetCollections {
  public struct GetCollectionsRoot {
    public static var sharedInstance : GetCollectionsRoot {
     struct Static {
         static let instance : GetCollectionsRoot = GetCollectionsRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Common.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Post.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class RequestV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var ownerType:Services.Post.Containers.CollectionV1.OwnerTypeV1 = Services.Post.Containers.CollectionV1.OwnerTypeV1.Profile
    public private(set) var hasOwnerType:Bool = false
    public private(set) var hasOwnerId:Bool = false
    public private(set) var ownerId:String = ""

    public private(set) var hasIsDefault:Bool = false
    public private(set) var isDefault:Bool = false

    public private(set) var hasInflations:Bool = false
    public private(set) var inflations:Services.Common.Containers.InflationsV1!
    public private(set) var hasFields:Bool = false
    public private(set) var fields:Services.Common.Containers.FieldsV1!
    public private(set) var hasCollectionItemId:Bool = false
    public private(set) var collectionItemId:String = ""

    public private(set) var hasItemsPerCollection:Bool = false
    public private(set) var itemsPerCollection:UInt32 = UInt32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      if hasOwnerType {
        try output.writeEnum(1, value:ownerType.rawValue)
      }
      if hasOwnerId {
        try output.writeString(2, value:ownerId)
      }
      if hasIsDefault {
        try output.writeBool(3, value:isDefault)
      }
      if hasInflations {
        try output.writeMessage(4, value:inflations)
      }
      if hasFields {
        try output.writeMessage(5, value:fields)
      }
      if hasCollectionItemId {
        try output.writeString(6, value:collectionItemId)
      }
      if hasItemsPerCollection {
        try output.writeUInt32(7, value:itemsPerCollection)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if (hasOwnerType) {
        serialize_size += ownerType.rawValue.computeEnumSize(1)
      }
      if hasOwnerId {
        serialize_size += ownerId.computeStringSize(2)
      }
      if hasIsDefault {
        serialize_size += isDefault.computeBoolSize(3)
      }
      if hasInflations {
          if let varSizeinflations = inflations?.computeMessageSize(4) {
              serialize_size += varSizeinflations
          }
      }
      if hasFields {
          if let varSizefields = fields?.computeMessageSize(5) {
              serialize_size += varSizefields
          }
      }
      if hasCollectionItemId {
        serialize_size += collectionItemId.computeStringSize(6)
      }
      if hasItemsPerCollection {
        serialize_size += itemsPerCollection.computeUInt32Size(7)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Post.Actions.GetCollections.RequestV1> {
      var mergedArray = Array<Services.Post.Actions.GetCollections.RequestV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Post.Actions.GetCollections.RequestV1? {
      return try Services.Post.Actions.GetCollections.RequestV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Post.Actions.GetCollections.RequestV1 {
      return try Services.Post.Actions.GetCollections.RequestV1.Builder().mergeFromData(data, extensionRegistry:Services.Post.Actions.GetCollections.GetCollectionsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.GetCollections.RequestV1 {
      return try Services.Post.Actions.GetCollections.RequestV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Post.Actions.GetCollections.RequestV1 {
      return try Services.Post.Actions.GetCollections.RequestV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.GetCollections.RequestV1 {
      return try Services.Post.Actions.GetCollections.RequestV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Post.Actions.GetCollections.RequestV1 {
      return try Services.Post.Actions.GetCollections.RequestV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.GetCollections.RequestV1 {
      return try Services.Post.Actions.GetCollections.RequestV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Post.Actions.GetCollections.RequestV1.Builder {
      return Services.Post.Actions.GetCollections.RequestV1.classBuilder() as! Services.Post.Actions.GetCollections.RequestV1.Builder
    }
    public func getBuilder() -> Services.Post.Actions.GetCollections.RequestV1.Builder {
      return classBuilder() as! Services.Post.Actions.GetCollections.RequestV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Post.Actions.GetCollections.RequestV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Post.Actions.GetCollections.RequestV1.Builder()
    }
    public func toBuilder() throws -> Services.Post.Actions.GetCollections.RequestV1.Builder {
      return try Services.Post.Actions.GetCollections.RequestV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Post.Actions.GetCollections.RequestV1) throws -> Services.Post.Actions.GetCollections.RequestV1.Builder {
      return try Services.Post.Actions.GetCollections.RequestV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      if (hasOwnerType) {
        output += "\(indent) ownerType: \(ownerType.rawValue)\n"
      }
      if hasOwnerId {
        output += "\(indent) ownerId: \(ownerId) \n"
      }
      if hasIsDefault {
        output += "\(indent) isDefault: \(isDefault) \n"
      }
      if hasInflations {
        output += "\(indent) inflations {\n"
        try inflations?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasFields {
        output += "\(indent) fields {\n"
        try fields?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasCollectionItemId {
        output += "\(indent) collectionItemId: \(collectionItemId) \n"
      }
      if hasItemsPerCollection {
        output += "\(indent) itemsPerCollection: \(itemsPerCollection) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasOwnerType {
               hashCode = (hashCode &* 31) &+ Int(ownerType.rawValue)
            }
            if hasOwnerId {
               hashCode = (hashCode &* 31) &+ ownerId.hashValue
            }
            if hasIsDefault {
               hashCode = (hashCode &* 31) &+ isDefault.hashValue
            }
            if hasInflations {
                if let hashValueinflations = inflations?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueinflations
                }
            }
            if hasFields {
                if let hashValuefields = fields?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuefields
                }
            }
            if hasCollectionItemId {
               hashCode = (hashCode &* 31) &+ collectionItemId.hashValue
            }
            if hasItemsPerCollection {
               hashCode = (hashCode &* 31) &+ itemsPerCollection.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Post.Actions.GetCollections.RequestV1"
    }
    override public func className() -> String {
        return "Services.Post.Actions.GetCollections.RequestV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Post.Actions.GetCollections.RequestV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Post.Actions.GetCollections.RequestV1 = Services.Post.Actions.GetCollections.RequestV1()
      public func getMessage() -> Services.Post.Actions.GetCollections.RequestV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
        public var hasOwnerType:Bool{
            get {
                return builderResult.hasOwnerType
            }
        }
        public var ownerType:Services.Post.Containers.CollectionV1.OwnerTypeV1 {
            get {
                return builderResult.ownerType
            }
            set (value) {
                builderResult.hasOwnerType = true
                builderResult.ownerType = value
            }
        }
        public func setOwnerType(value:Services.Post.Containers.CollectionV1.OwnerTypeV1) -> Services.Post.Actions.GetCollections.RequestV1.Builder {
          self.ownerType = value
          return self
        }
        public func clearOwnerType() -> Services.Post.Actions.GetCollections.RequestV1.Builder {
           builderResult.hasOwnerType = false
           builderResult.ownerType = .Profile
           return self
        }
      public var hasOwnerId:Bool {
           get {
                return builderResult.hasOwnerId
           }
      }
      public var ownerId:String {
           get {
                return builderResult.ownerId
           }
           set (value) {
               builderResult.hasOwnerId = true
               builderResult.ownerId = value
           }
      }
      public func setOwnerId(value:String) -> Services.Post.Actions.GetCollections.RequestV1.Builder {
        self.ownerId = value
        return self
      }
      public func clearOwnerId() -> Services.Post.Actions.GetCollections.RequestV1.Builder{
           builderResult.hasOwnerId = false
           builderResult.ownerId = ""
           return self
      }
      public var hasIsDefault:Bool {
           get {
                return builderResult.hasIsDefault
           }
      }
      public var isDefault:Bool {
           get {
                return builderResult.isDefault
           }
           set (value) {
               builderResult.hasIsDefault = true
               builderResult.isDefault = value
           }
      }
      public func setIsDefault(value:Bool) -> Services.Post.Actions.GetCollections.RequestV1.Builder {
        self.isDefault = value
        return self
      }
      public func clearIsDefault() -> Services.Post.Actions.GetCollections.RequestV1.Builder{
           builderResult.hasIsDefault = false
           builderResult.isDefault = false
           return self
      }
      public var hasInflations:Bool {
           get {
               return builderResult.hasInflations
           }
      }
      public var inflations:Services.Common.Containers.InflationsV1! {
           get {
               if inflationsBuilder_ != nil {
                  builderResult.inflations = inflationsBuilder_.getMessage()
               }
               return builderResult.inflations
           }
           set (value) {
               builderResult.hasInflations = true
               builderResult.inflations = value
           }
      }
      private var inflationsBuilder_:Services.Common.Containers.InflationsV1.Builder! {
           didSet {
              builderResult.hasInflations = true
           }
      }
      public func getInflationsBuilder() -> Services.Common.Containers.InflationsV1.Builder {
        if inflationsBuilder_ == nil {
           inflationsBuilder_ = Services.Common.Containers.InflationsV1.Builder()
           builderResult.inflations = inflationsBuilder_.getMessage()
           if inflations != nil {
              try! inflationsBuilder_.mergeFrom(inflations)
           }
        }
        return inflationsBuilder_
      }
      public func setInflations(value:Services.Common.Containers.InflationsV1!) -> Services.Post.Actions.GetCollections.RequestV1.Builder {
        self.inflations = value
        return self
      }
      public func mergeInflations(value:Services.Common.Containers.InflationsV1) throws -> Services.Post.Actions.GetCollections.RequestV1.Builder {
        if builderResult.hasInflations {
          builderResult.inflations = try Services.Common.Containers.InflationsV1.builderWithPrototype(builderResult.inflations).mergeFrom(value).buildPartial()
        } else {
          builderResult.inflations = value
        }
        builderResult.hasInflations = true
        return self
      }
      public func clearInflations() -> Services.Post.Actions.GetCollections.RequestV1.Builder {
        inflationsBuilder_ = nil
        builderResult.hasInflations = false
        builderResult.inflations = nil
        return self
      }
      public var hasFields:Bool {
           get {
               return builderResult.hasFields
           }
      }
      public var fields:Services.Common.Containers.FieldsV1! {
           get {
               if fieldsBuilder_ != nil {
                  builderResult.fields = fieldsBuilder_.getMessage()
               }
               return builderResult.fields
           }
           set (value) {
               builderResult.hasFields = true
               builderResult.fields = value
           }
      }
      private var fieldsBuilder_:Services.Common.Containers.FieldsV1.Builder! {
           didSet {
              builderResult.hasFields = true
           }
      }
      public func getFieldsBuilder() -> Services.Common.Containers.FieldsV1.Builder {
        if fieldsBuilder_ == nil {
           fieldsBuilder_ = Services.Common.Containers.FieldsV1.Builder()
           builderResult.fields = fieldsBuilder_.getMessage()
           if fields != nil {
              try! fieldsBuilder_.mergeFrom(fields)
           }
        }
        return fieldsBuilder_
      }
      public func setFields(value:Services.Common.Containers.FieldsV1!) -> Services.Post.Actions.GetCollections.RequestV1.Builder {
        self.fields = value
        return self
      }
      public func mergeFields(value:Services.Common.Containers.FieldsV1) throws -> Services.Post.Actions.GetCollections.RequestV1.Builder {
        if builderResult.hasFields {
          builderResult.fields = try Services.Common.Containers.FieldsV1.builderWithPrototype(builderResult.fields).mergeFrom(value).buildPartial()
        } else {
          builderResult.fields = value
        }
        builderResult.hasFields = true
        return self
      }
      public func clearFields() -> Services.Post.Actions.GetCollections.RequestV1.Builder {
        fieldsBuilder_ = nil
        builderResult.hasFields = false
        builderResult.fields = nil
        return self
      }
      public var hasCollectionItemId:Bool {
           get {
                return builderResult.hasCollectionItemId
           }
      }
      public var collectionItemId:String {
           get {
                return builderResult.collectionItemId
           }
           set (value) {
               builderResult.hasCollectionItemId = true
               builderResult.collectionItemId = value
           }
      }
      public func setCollectionItemId(value:String) -> Services.Post.Actions.GetCollections.RequestV1.Builder {
        self.collectionItemId = value
        return self
      }
      public func clearCollectionItemId() -> Services.Post.Actions.GetCollections.RequestV1.Builder{
           builderResult.hasCollectionItemId = false
           builderResult.collectionItemId = ""
           return self
      }
      public var hasItemsPerCollection:Bool {
           get {
                return builderResult.hasItemsPerCollection
           }
      }
      public var itemsPerCollection:UInt32 {
           get {
                return builderResult.itemsPerCollection
           }
           set (value) {
               builderResult.hasItemsPerCollection = true
               builderResult.itemsPerCollection = value
           }
      }
      public func setItemsPerCollection(value:UInt32) -> Services.Post.Actions.GetCollections.RequestV1.Builder {
        self.itemsPerCollection = value
        return self
      }
      public func clearItemsPerCollection() -> Services.Post.Actions.GetCollections.RequestV1.Builder{
           builderResult.hasItemsPerCollection = false
           builderResult.itemsPerCollection = UInt32(0)
           return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Post.Actions.GetCollections.RequestV1.Builder {
        builderResult = Services.Post.Actions.GetCollections.RequestV1()
        return self
      }
      public override func clone() throws -> Services.Post.Actions.GetCollections.RequestV1.Builder {
        return try Services.Post.Actions.GetCollections.RequestV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Post.Actions.GetCollections.RequestV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Post.Actions.GetCollections.RequestV1 {
        let returnMe:Services.Post.Actions.GetCollections.RequestV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Post.Actions.GetCollections.RequestV1) throws -> Services.Post.Actions.GetCollections.RequestV1.Builder {
        if other == Services.Post.Actions.GetCollections.RequestV1() {
         return self
        }
        if other.hasOwnerType {
             ownerType = other.ownerType
        }
        if other.hasOwnerId {
             ownerId = other.ownerId
        }
        if other.hasIsDefault {
             isDefault = other.isDefault
        }
        if (other.hasInflations) {
            try mergeInflations(other.inflations)
        }
        if (other.hasFields) {
            try mergeFields(other.fields)
        }
        if other.hasCollectionItemId {
             collectionItemId = other.collectionItemId
        }
        if other.hasItemsPerCollection {
             itemsPerCollection = other.itemsPerCollection
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Post.Actions.GetCollections.RequestV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.GetCollections.RequestV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 8 :
            let valueIntownerType = try input.readEnum()
            if let enumsownerType = Services.Post.Containers.CollectionV1.OwnerTypeV1(rawValue:valueIntownerType){
                 ownerType = enumsownerType
            } else {
                 try unknownFieldsBuilder.mergeVarintField(1, value:Int64(valueIntownerType))
            }

          case 18 :
            ownerId = try input.readString()

          case 24 :
            isDefault = try input.readBool()

          case 34 :
            let subBuilder:Services.Common.Containers.InflationsV1.Builder = Services.Common.Containers.InflationsV1.Builder()
            if hasInflations {
              try subBuilder.mergeFrom(inflations)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            inflations = subBuilder.buildPartial()

          case 42 :
            let subBuilder:Services.Common.Containers.FieldsV1.Builder = Services.Common.Containers.FieldsV1.Builder()
            if hasFields {
              try subBuilder.mergeFrom(fields)
            }
            try input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
            fields = subBuilder.buildPartial()

          case 50 :
            collectionItemId = try input.readString()

          case 56 :
            itemsPerCollection = try input.readUInt32()

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

  final public class ResponseV1 : GeneratedMessage, GeneratedMessageProtocol {
    public private(set) var collections:Array<Services.Post.Containers.CollectionV1>  = Array<Services.Post.Containers.CollectionV1>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
      for oneElementcollections in collections {
          try output.writeMessage(1, value:oneElementcollections)
      }
      try unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      for oneElementcollections in collections {
          serialize_size += oneElementcollections.computeMessageSize(1)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Services.Post.Actions.GetCollections.ResponseV1> {
      var mergedArray = Array<Services.Post.Actions.GetCollections.ResponseV1>()
      while let value = try parseFromDelimitedFromInputStream(input) {
        mergedArray += [value]
      }
      return mergedArray
    }
    public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Services.Post.Actions.GetCollections.ResponseV1? {
      return try Services.Post.Actions.GetCollections.ResponseV1.Builder().mergeDelimitedFromInputStream(input)?.build()
    }
    public class func parseFromData(data:NSData) throws -> Services.Post.Actions.GetCollections.ResponseV1 {
      return try Services.Post.Actions.GetCollections.ResponseV1.Builder().mergeFromData(data, extensionRegistry:Services.Post.Actions.GetCollections.GetCollectionsRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.GetCollections.ResponseV1 {
      return try Services.Post.Actions.GetCollections.ResponseV1.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) throws -> Services.Post.Actions.GetCollections.ResponseV1 {
      return try Services.Post.Actions.GetCollections.ResponseV1.Builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.GetCollections.ResponseV1 {
      return try Services.Post.Actions.GetCollections.ResponseV1.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Services.Post.Actions.GetCollections.ResponseV1 {
      return try Services.Post.Actions.GetCollections.ResponseV1.Builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.GetCollections.ResponseV1 {
      return try Services.Post.Actions.GetCollections.ResponseV1.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func getBuilder() -> Services.Post.Actions.GetCollections.ResponseV1.Builder {
      return Services.Post.Actions.GetCollections.ResponseV1.classBuilder() as! Services.Post.Actions.GetCollections.ResponseV1.Builder
    }
    public func getBuilder() -> Services.Post.Actions.GetCollections.ResponseV1.Builder {
      return classBuilder() as! Services.Post.Actions.GetCollections.ResponseV1.Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Post.Actions.GetCollections.ResponseV1.Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Post.Actions.GetCollections.ResponseV1.Builder()
    }
    public func toBuilder() throws -> Services.Post.Actions.GetCollections.ResponseV1.Builder {
      return try Services.Post.Actions.GetCollections.ResponseV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Post.Actions.GetCollections.ResponseV1) throws -> Services.Post.Actions.GetCollections.ResponseV1.Builder {
      return try Services.Post.Actions.GetCollections.ResponseV1.Builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) throws {
      var collectionsElementIndex:Int = 0
      for oneElementcollections in collections {
          output += "\(indent) collections[\(collectionsElementIndex)] {\n"
          try oneElementcollections.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          collectionsElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            for oneElementcollections in collections {
                hashCode = (hashCode &* 31) &+ oneElementcollections.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Post.Actions.GetCollections.ResponseV1"
    }
    override public func className() -> String {
        return "Services.Post.Actions.GetCollections.ResponseV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Post.Actions.GetCollections.ResponseV1.self
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
      private var builderResult:Services.Post.Actions.GetCollections.ResponseV1 = Services.Post.Actions.GetCollections.ResponseV1()
      public func getMessage() -> Services.Post.Actions.GetCollections.ResponseV1 {
          return builderResult
      }

      required override public init () {
         super.init()
      }
      public var collections:Array<Services.Post.Containers.CollectionV1> {
           get {
               return builderResult.collections
           }
           set (value) {
               builderResult.collections = value
           }
      }
      public func setCollections(value:Array<Services.Post.Containers.CollectionV1>) -> Services.Post.Actions.GetCollections.ResponseV1.Builder {
        self.collections = value
        return self
      }
      public func clearCollections() -> Services.Post.Actions.GetCollections.ResponseV1.Builder {
        builderResult.collections.removeAll(keepCapacity: false)
        return self
      }
      override public var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      public override func clear() -> Services.Post.Actions.GetCollections.ResponseV1.Builder {
        builderResult = Services.Post.Actions.GetCollections.ResponseV1()
        return self
      }
      public override func clone() throws -> Services.Post.Actions.GetCollections.ResponseV1.Builder {
        return try Services.Post.Actions.GetCollections.ResponseV1.builderWithPrototype(builderResult)
      }
      public override func build() throws -> Services.Post.Actions.GetCollections.ResponseV1 {
           try checkInitialized()
           return buildPartial()
      }
      public func buildPartial() -> Services.Post.Actions.GetCollections.ResponseV1 {
        let returnMe:Services.Post.Actions.GetCollections.ResponseV1 = builderResult
        return returnMe
      }
      public func mergeFrom(other:Services.Post.Actions.GetCollections.ResponseV1) throws -> Services.Post.Actions.GetCollections.ResponseV1.Builder {
        if other == Services.Post.Actions.GetCollections.ResponseV1() {
         return self
        }
        if !other.collections.isEmpty  {
           builderResult.collections += other.collections
        }
        try mergeUnknownFields(other.unknownFields)
        return self
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Services.Post.Actions.GetCollections.ResponseV1.Builder {
           return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Services.Post.Actions.GetCollections.ResponseV1.Builder {
        let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          let tag = try input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = try unknownFieldsBuilder.build()
            return self

          case 10 :
            let subBuilder = Services.Post.Containers.CollectionV1.Builder()
            try input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
            collections += [subBuilder.buildPartial()]

          default:
            if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag))) {
               unknownFields = try unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }

  }

}

// @@protoc_insertion_point(global_scope)
