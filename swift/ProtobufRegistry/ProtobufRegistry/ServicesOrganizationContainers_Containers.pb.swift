// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.Organization.Containers{}

public func == (lhs: Services.Organization.Containers.AddressV1, rhs: Services.Organization.Containers.AddressV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasAddress1 == rhs.hasAddress1) && (!lhs.hasAddress1 || lhs.address1 == rhs.address1)
  fieldCheck = fieldCheck && (lhs.hasAddress2 == rhs.hasAddress2) && (!lhs.hasAddress2 || lhs.address2 == rhs.address2)
  fieldCheck = fieldCheck && (lhs.hasCity == rhs.hasCity) && (!lhs.hasCity || lhs.city == rhs.city)
  fieldCheck = fieldCheck && (lhs.hasRegion == rhs.hasRegion) && (!lhs.hasRegion || lhs.region == rhs.region)
  fieldCheck = fieldCheck && (lhs.hasPostalCode == rhs.hasPostalCode) && (!lhs.hasPostalCode || lhs.postalCode == rhs.postalCode)
  fieldCheck = fieldCheck && (lhs.hasCountryCode == rhs.hasCountryCode) && (!lhs.hasCountryCode || lhs.countryCode == rhs.countryCode)
  fieldCheck = fieldCheck && (lhs.hasProfileCount == rhs.hasProfileCount) && (!lhs.hasProfileCount || lhs.profileCount == rhs.profileCount)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = fieldCheck && (lhs.hasTimezone == rhs.hasTimezone) && (!lhs.hasTimezone || lhs.timezone == rhs.timezone)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Organization.Containers.ColorV1, rhs: Services.Organization.Containers.ColorV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasRed == rhs.hasRed) && (!lhs.hasRed || lhs.red == rhs.red)
  fieldCheck = fieldCheck && (lhs.hasGreen == rhs.hasGreen) && (!lhs.hasGreen || lhs.green == rhs.green)
  fieldCheck = fieldCheck && (lhs.hasBlue == rhs.hasBlue) && (!lhs.hasBlue || lhs.blue == rhs.blue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Organization.Containers.LocationV1, rhs: Services.Organization.Containers.LocationV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasAddress == rhs.hasAddress) && (!lhs.hasAddress || lhs.address == rhs.address)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.hasProfileCount == rhs.hasProfileCount) && (!lhs.hasProfileCount || lhs.profileCount == rhs.profileCount)
  fieldCheck = fieldCheck && (lhs.hasImageUrl == rhs.hasImageUrl) && (!lhs.hasImageUrl || lhs.imageUrl == rhs.imageUrl)
  fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Organization.Containers.OrganizationV1, rhs: Services.Organization.Containers.OrganizationV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasDomain == rhs.hasDomain) && (!lhs.hasDomain || lhs.domain == rhs.domain)
  fieldCheck = fieldCheck && (lhs.hasImageUrl == rhs.hasImageUrl) && (!lhs.hasImageUrl || lhs.imageUrl == rhs.imageUrl)
  fieldCheck = fieldCheck && (lhs.hasTintColor == rhs.hasTintColor) && (!lhs.hasTintColor || lhs.tintColor == rhs.tintColor)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Organization.Containers.PathPartV1, rhs: Services.Organization.Containers.PathPartV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasOwnerId == rhs.hasOwnerId) && (!lhs.hasOwnerId || lhs.ownerId == rhs.ownerId)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Organization.Containers.TeamV1, rhs: Services.Organization.Containers.TeamV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasOwnerId == rhs.hasOwnerId) && (!lhs.hasOwnerId || lhs.ownerId == rhs.ownerId)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.path == rhs.path)
  fieldCheck = fieldCheck && (lhs.hasDepartment == rhs.hasDepartment) && (!lhs.hasDepartment || lhs.department == rhs.department)
  fieldCheck = fieldCheck && (lhs.hasProfileCount == rhs.hasProfileCount) && (!lhs.hasProfileCount || lhs.profileCount == rhs.profileCount)
  fieldCheck = fieldCheck && (lhs.hasColor == rhs.hasColor) && (!lhs.hasColor || lhs.color == rhs.color)
  fieldCheck = fieldCheck && (lhs.hasPermissions == rhs.hasPermissions) && (!lhs.hasPermissions || lhs.permissions == rhs.permissions)
  fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Organization.Containers.TeamDescendantsV1, rhs: Services.Organization.Containers.TeamDescendantsV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasDepth == rhs.hasDepth) && (!lhs.hasDepth || lhs.depth == rhs.depth)
  fieldCheck = fieldCheck && (lhs.hasParentTeamId == rhs.hasParentTeamId) && (!lhs.hasParentTeamId || lhs.parentTeamId == rhs.parentTeamId)
  fieldCheck = fieldCheck && (lhs.teams == rhs.teams)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Organization.Containers.TokenV1, rhs: Services.Organization.Containers.TokenV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasRequestedByUserId == rhs.hasRequestedByUserId) && (!lhs.hasRequestedByUserId || lhs.requestedByUserId == rhs.requestedByUserId)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.Organization.Containers {
  public struct ContainersRoot {
    public static var sharedInstance : ContainersRoot {
     struct Static {
         static let instance : ContainersRoot = ContainersRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Common.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class AddressV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "organizationId": return organizationId
           case "name": return name
           case "address1": return address1
           case "address2": return address2
           case "city": return city
           case "region": return region
           case "postalCode": return postalCode
           case "countryCode": return countryCode
           case "profileCount": return profileCount
           case "latitude": return latitude
           case "longitude": return longitude
           case "timezone": return timezone
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasAddress1:Bool = false
    public private(set) var address1:String = ""

    public private(set) var hasAddress2:Bool = false
    public private(set) var address2:String = ""

    public private(set) var hasCity:Bool = false
    public private(set) var city:String = ""

    public private(set) var hasRegion:Bool = false
    public private(set) var region:String = ""

    public private(set) var hasPostalCode:Bool = false
    public private(set) var postalCode:String = ""

    public private(set) var hasCountryCode:Bool = false
    public private(set) var countryCode:String = ""

    public private(set) var hasProfileCount:Bool = false
    public private(set) var profileCount:String = ""

    public private(set) var hasLatitude:Bool = false
    public private(set) var latitude:String = ""

    public private(set) var hasLongitude:Bool = false
    public private(set) var longitude:String = ""

    public private(set) var hasTimezone:Bool = false
    public private(set) var timezone:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasOrganizationId {
        output.writeString(3, value:organizationId)
      }
      if hasName {
        output.writeString(4, value:name)
      }
      if hasAddress1 {
        output.writeString(5, value:address1)
      }
      if hasAddress2 {
        output.writeString(6, value:address2)
      }
      if hasCity {
        output.writeString(7, value:city)
      }
      if hasRegion {
        output.writeString(8, value:region)
      }
      if hasPostalCode {
        output.writeString(9, value:postalCode)
      }
      if hasCountryCode {
        output.writeString(10, value:countryCode)
      }
      if hasProfileCount {
        output.writeString(11, value:profileCount)
      }
      if hasLatitude {
        output.writeString(12, value:latitude)
      }
      if hasLongitude {
        output.writeString(13, value:longitude)
      }
      if hasTimezone {
        output.writeString(14, value:timezone)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(3)
      }
      if hasName {
        serialize_size += name.computeStringSize(4)
      }
      if hasAddress1 {
        serialize_size += address1.computeStringSize(5)
      }
      if hasAddress2 {
        serialize_size += address2.computeStringSize(6)
      }
      if hasCity {
        serialize_size += city.computeStringSize(7)
      }
      if hasRegion {
        serialize_size += region.computeStringSize(8)
      }
      if hasPostalCode {
        serialize_size += postalCode.computeStringSize(9)
      }
      if hasCountryCode {
        serialize_size += countryCode.computeStringSize(10)
      }
      if hasProfileCount {
        serialize_size += profileCount.computeStringSize(11)
      }
      if hasLatitude {
        serialize_size += latitude.computeStringSize(12)
      }
      if hasLongitude {
        serialize_size += longitude.computeStringSize(13)
      }
      if hasTimezone {
        serialize_size += timezone.computeStringSize(14)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.AddressV1 {
      return Services.Organization.Containers.AddressV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.AddressV1 {
      return Services.Organization.Containers.AddressV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.AddressV1 {
      return Services.Organization.Containers.AddressV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.AddressV1 {
      return Services.Organization.Containers.AddressV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.AddressV1 {
      return Services.Organization.Containers.AddressV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.AddressV1 {
      return Services.Organization.Containers.AddressV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.AddressV1Builder {
      return Services.Organization.Containers.AddressV1.classBuilder() as! Services.Organization.Containers.AddressV1Builder
    }
    public func builder() -> Services.Organization.Containers.AddressV1Builder {
      return classBuilder() as! Services.Organization.Containers.AddressV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.AddressV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.AddressV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.AddressV1Builder {
      return Services.Organization.Containers.AddressV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.AddressV1) -> Services.Organization.Containers.AddressV1Builder {
      return Services.Organization.Containers.AddressV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasAddress1 {
        output += "\(indent) address1: \(address1) \n"
      }
      if hasAddress2 {
        output += "\(indent) address2: \(address2) \n"
      }
      if hasCity {
        output += "\(indent) city: \(city) \n"
      }
      if hasRegion {
        output += "\(indent) region: \(region) \n"
      }
      if hasPostalCode {
        output += "\(indent) postalCode: \(postalCode) \n"
      }
      if hasCountryCode {
        output += "\(indent) countryCode: \(countryCode) \n"
      }
      if hasProfileCount {
        output += "\(indent) profileCount: \(profileCount) \n"
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      if hasTimezone {
        output += "\(indent) timezone: \(timezone) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasAddress1 {
               hashCode = (hashCode &* 31) &+ address1.hashValue
            }
            if hasAddress2 {
               hashCode = (hashCode &* 31) &+ address2.hashValue
            }
            if hasCity {
               hashCode = (hashCode &* 31) &+ city.hashValue
            }
            if hasRegion {
               hashCode = (hashCode &* 31) &+ region.hashValue
            }
            if hasPostalCode {
               hashCode = (hashCode &* 31) &+ postalCode.hashValue
            }
            if hasCountryCode {
               hashCode = (hashCode &* 31) &+ countryCode.hashValue
            }
            if hasProfileCount {
               hashCode = (hashCode &* 31) &+ profileCount.hashValue
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            if hasTimezone {
               hashCode = (hashCode &* 31) &+ timezone.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.AddressV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.AddressV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.AddressV1.self
    }
    //Meta information declaration end

  }

  final public class AddressV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.AddressV1

    required override public init () {
       builderResult = Services.Organization.Containers.AddressV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.AddressV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.AddressV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Organization.Containers.AddressV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Organization.Containers.AddressV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasOrganizationId:Bool {
         get {
              return builderResult.hasOrganizationId
         }
    }
    public var organizationId:String {
         get {
              return builderResult.organizationId
         }
         set (value) {
             builderResult.hasOrganizationId = true
             builderResult.organizationId = value
         }
    }
    public func setOrganizationId(value:String)-> Services.Organization.Containers.AddressV1Builder {
      self.organizationId = value
      return self
    }
    public func clearOrganizationId() -> Services.Organization.Containers.AddressV1Builder{
         builderResult.hasOrganizationId = false
         builderResult.organizationId = ""
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String)-> Services.Organization.Containers.AddressV1Builder {
      self.name = value
      return self
    }
    public func clearName() -> Services.Organization.Containers.AddressV1Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasAddress1:Bool {
         get {
              return builderResult.hasAddress1
         }
    }
    public var address1:String {
         get {
              return builderResult.address1
         }
         set (value) {
             builderResult.hasAddress1 = true
             builderResult.address1 = value
         }
    }
    public func setAddress1(value:String)-> Services.Organization.Containers.AddressV1Builder {
      self.address1 = value
      return self
    }
    public func clearAddress1() -> Services.Organization.Containers.AddressV1Builder{
         builderResult.hasAddress1 = false
         builderResult.address1 = ""
         return self
    }
    public var hasAddress2:Bool {
         get {
              return builderResult.hasAddress2
         }
    }
    public var address2:String {
         get {
              return builderResult.address2
         }
         set (value) {
             builderResult.hasAddress2 = true
             builderResult.address2 = value
         }
    }
    public func setAddress2(value:String)-> Services.Organization.Containers.AddressV1Builder {
      self.address2 = value
      return self
    }
    public func clearAddress2() -> Services.Organization.Containers.AddressV1Builder{
         builderResult.hasAddress2 = false
         builderResult.address2 = ""
         return self
    }
    public var hasCity:Bool {
         get {
              return builderResult.hasCity
         }
    }
    public var city:String {
         get {
              return builderResult.city
         }
         set (value) {
             builderResult.hasCity = true
             builderResult.city = value
         }
    }
    public func setCity(value:String)-> Services.Organization.Containers.AddressV1Builder {
      self.city = value
      return self
    }
    public func clearCity() -> Services.Organization.Containers.AddressV1Builder{
         builderResult.hasCity = false
         builderResult.city = ""
         return self
    }
    public var hasRegion:Bool {
         get {
              return builderResult.hasRegion
         }
    }
    public var region:String {
         get {
              return builderResult.region
         }
         set (value) {
             builderResult.hasRegion = true
             builderResult.region = value
         }
    }
    public func setRegion(value:String)-> Services.Organization.Containers.AddressV1Builder {
      self.region = value
      return self
    }
    public func clearRegion() -> Services.Organization.Containers.AddressV1Builder{
         builderResult.hasRegion = false
         builderResult.region = ""
         return self
    }
    public var hasPostalCode:Bool {
         get {
              return builderResult.hasPostalCode
         }
    }
    public var postalCode:String {
         get {
              return builderResult.postalCode
         }
         set (value) {
             builderResult.hasPostalCode = true
             builderResult.postalCode = value
         }
    }
    public func setPostalCode(value:String)-> Services.Organization.Containers.AddressV1Builder {
      self.postalCode = value
      return self
    }
    public func clearPostalCode() -> Services.Organization.Containers.AddressV1Builder{
         builderResult.hasPostalCode = false
         builderResult.postalCode = ""
         return self
    }
    public var hasCountryCode:Bool {
         get {
              return builderResult.hasCountryCode
         }
    }
    public var countryCode:String {
         get {
              return builderResult.countryCode
         }
         set (value) {
             builderResult.hasCountryCode = true
             builderResult.countryCode = value
         }
    }
    public func setCountryCode(value:String)-> Services.Organization.Containers.AddressV1Builder {
      self.countryCode = value
      return self
    }
    public func clearCountryCode() -> Services.Organization.Containers.AddressV1Builder{
         builderResult.hasCountryCode = false
         builderResult.countryCode = ""
         return self
    }
    public var hasProfileCount:Bool {
         get {
              return builderResult.hasProfileCount
         }
    }
    public var profileCount:String {
         get {
              return builderResult.profileCount
         }
         set (value) {
             builderResult.hasProfileCount = true
             builderResult.profileCount = value
         }
    }
    public func setProfileCount(value:String)-> Services.Organization.Containers.AddressV1Builder {
      self.profileCount = value
      return self
    }
    public func clearProfileCount() -> Services.Organization.Containers.AddressV1Builder{
         builderResult.hasProfileCount = false
         builderResult.profileCount = ""
         return self
    }
    public var hasLatitude:Bool {
         get {
              return builderResult.hasLatitude
         }
    }
    public var latitude:String {
         get {
              return builderResult.latitude
         }
         set (value) {
             builderResult.hasLatitude = true
             builderResult.latitude = value
         }
    }
    public func setLatitude(value:String)-> Services.Organization.Containers.AddressV1Builder {
      self.latitude = value
      return self
    }
    public func clearLatitude() -> Services.Organization.Containers.AddressV1Builder{
         builderResult.hasLatitude = false
         builderResult.latitude = ""
         return self
    }
    public var hasLongitude:Bool {
         get {
              return builderResult.hasLongitude
         }
    }
    public var longitude:String {
         get {
              return builderResult.longitude
         }
         set (value) {
             builderResult.hasLongitude = true
             builderResult.longitude = value
         }
    }
    public func setLongitude(value:String)-> Services.Organization.Containers.AddressV1Builder {
      self.longitude = value
      return self
    }
    public func clearLongitude() -> Services.Organization.Containers.AddressV1Builder{
         builderResult.hasLongitude = false
         builderResult.longitude = ""
         return self
    }
    public var hasTimezone:Bool {
         get {
              return builderResult.hasTimezone
         }
    }
    public var timezone:String {
         get {
              return builderResult.timezone
         }
         set (value) {
             builderResult.hasTimezone = true
             builderResult.timezone = value
         }
    }
    public func setTimezone(value:String)-> Services.Organization.Containers.AddressV1Builder {
      self.timezone = value
      return self
    }
    public func clearTimezone() -> Services.Organization.Containers.AddressV1Builder{
         builderResult.hasTimezone = false
         builderResult.timezone = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.AddressV1Builder {
      builderResult = Services.Organization.Containers.AddressV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.AddressV1Builder {
      return Services.Organization.Containers.AddressV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.AddressV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.AddressV1 {
      var returnMe:Services.Organization.Containers.AddressV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.AddressV1) -> Services.Organization.Containers.AddressV1Builder {
      if (other == Services.Organization.Containers.AddressV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasOrganizationId {
           organizationId = other.organizationId
      }
      if other.hasName {
           name = other.name
      }
      if other.hasAddress1 {
           address1 = other.address1
      }
      if other.hasAddress2 {
           address2 = other.address2
      }
      if other.hasCity {
           city = other.city
      }
      if other.hasRegion {
           region = other.region
      }
      if other.hasPostalCode {
           postalCode = other.postalCode
      }
      if other.hasCountryCode {
           countryCode = other.countryCode
      }
      if other.hasProfileCount {
           profileCount = other.profileCount
      }
      if other.hasLatitude {
           latitude = other.latitude
      }
      if other.hasLongitude {
           longitude = other.longitude
      }
      if other.hasTimezone {
           timezone = other.timezone
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.AddressV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.AddressV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          organizationId = input.readString()

        case 34 :
          name = input.readString()

        case 42 :
          address1 = input.readString()

        case 50 :
          address2 = input.readString()

        case 58 :
          city = input.readString()

        case 66 :
          region = input.readString()

        case 74 :
          postalCode = input.readString()

        case 82 :
          countryCode = input.readString()

        case 90 :
          profileCount = input.readString()

        case 98 :
          latitude = input.readString()

        case 106 :
          longitude = input.readString()

        case 114 :
          timezone = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class ColorV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "red": return red
           case "green": return green
           case "blue": return blue
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(0)

    public private(set) var hasRed:Bool = false
    public private(set) var red:UInt32 = UInt32(0)

    public private(set) var hasGreen:Bool = false
    public private(set) var green:UInt32 = UInt32(0)

    public private(set) var hasBlue:Bool = false
    public private(set) var blue:UInt32 = UInt32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasRed {
        output.writeUInt32(2, value:red)
      }
      if hasGreen {
        output.writeUInt32(3, value:green)
      }
      if hasBlue {
        output.writeUInt32(4, value:blue)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasRed {
        serialize_size += red.computeUInt32Size(2)
      }
      if hasGreen {
        serialize_size += green.computeUInt32Size(3)
      }
      if hasBlue {
        serialize_size += blue.computeUInt32Size(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.ColorV1 {
      return Services.Organization.Containers.ColorV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.ColorV1 {
      return Services.Organization.Containers.ColorV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.ColorV1 {
      return Services.Organization.Containers.ColorV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.ColorV1 {
      return Services.Organization.Containers.ColorV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.ColorV1 {
      return Services.Organization.Containers.ColorV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.ColorV1 {
      return Services.Organization.Containers.ColorV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.ColorV1Builder {
      return Services.Organization.Containers.ColorV1.classBuilder() as! Services.Organization.Containers.ColorV1Builder
    }
    public func builder() -> Services.Organization.Containers.ColorV1Builder {
      return classBuilder() as! Services.Organization.Containers.ColorV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.ColorV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.ColorV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.ColorV1Builder {
      return Services.Organization.Containers.ColorV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.ColorV1) -> Services.Organization.Containers.ColorV1Builder {
      return Services.Organization.Containers.ColorV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasRed {
        output += "\(indent) red: \(red) \n"
      }
      if hasGreen {
        output += "\(indent) green: \(green) \n"
      }
      if hasBlue {
        output += "\(indent) blue: \(blue) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasRed {
               hashCode = (hashCode &* 31) &+ red.hashValue
            }
            if hasGreen {
               hashCode = (hashCode &* 31) &+ green.hashValue
            }
            if hasBlue {
               hashCode = (hashCode &* 31) &+ blue.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.ColorV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.ColorV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.ColorV1.self
    }
    //Meta information declaration end

  }

  final public class ColorV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.ColorV1

    required override public init () {
       builderResult = Services.Organization.Containers.ColorV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.ColorV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.ColorV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(0)
         return self
    }
    public var hasRed:Bool {
         get {
              return builderResult.hasRed
         }
    }
    public var red:UInt32 {
         get {
              return builderResult.red
         }
         set (value) {
             builderResult.hasRed = true
             builderResult.red = value
         }
    }
    public func setRed(value:UInt32)-> Services.Organization.Containers.ColorV1Builder {
      self.red = value
      return self
    }
    public func clearRed() -> Services.Organization.Containers.ColorV1Builder{
         builderResult.hasRed = false
         builderResult.red = UInt32(0)
         return self
    }
    public var hasGreen:Bool {
         get {
              return builderResult.hasGreen
         }
    }
    public var green:UInt32 {
         get {
              return builderResult.green
         }
         set (value) {
             builderResult.hasGreen = true
             builderResult.green = value
         }
    }
    public func setGreen(value:UInt32)-> Services.Organization.Containers.ColorV1Builder {
      self.green = value
      return self
    }
    public func clearGreen() -> Services.Organization.Containers.ColorV1Builder{
         builderResult.hasGreen = false
         builderResult.green = UInt32(0)
         return self
    }
    public var hasBlue:Bool {
         get {
              return builderResult.hasBlue
         }
    }
    public var blue:UInt32 {
         get {
              return builderResult.blue
         }
         set (value) {
             builderResult.hasBlue = true
             builderResult.blue = value
         }
    }
    public func setBlue(value:UInt32)-> Services.Organization.Containers.ColorV1Builder {
      self.blue = value
      return self
    }
    public func clearBlue() -> Services.Organization.Containers.ColorV1Builder{
         builderResult.hasBlue = false
         builderResult.blue = UInt32(0)
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.ColorV1Builder {
      builderResult = Services.Organization.Containers.ColorV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.ColorV1Builder {
      return Services.Organization.Containers.ColorV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.ColorV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.ColorV1 {
      var returnMe:Services.Organization.Containers.ColorV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.ColorV1) -> Services.Organization.Containers.ColorV1Builder {
      if (other == Services.Organization.Containers.ColorV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasRed {
           red = other.red
      }
      if other.hasGreen {
           green = other.green
      }
      if other.hasBlue {
           blue = other.blue
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.ColorV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.ColorV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 16 :
          red = input.readUInt32()

        case 24 :
          green = input.readUInt32()

        case 32 :
          blue = input.readUInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class LocationV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "name": return name
           case "address": return address
           case "organizationId": return organizationId
           case "profileCount": return profileCount
           case "imageUrl": return imageUrl
           case "description_": return description_
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasAddress:Bool = false
    public private(set) var address:Services.Organization.Containers.AddressV1!
    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    public private(set) var hasProfileCount:Bool = false
    public private(set) var profileCount:UInt32 = UInt32(0)

    public private(set) var hasImageUrl:Bool = false
    public private(set) var imageUrl:String = ""

    public private(set) var hasDescription:Bool = false
    public private(set) var description_:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasName {
        output.writeString(3, value:name)
      }
      if hasAddress {
        output.writeMessage(4, value:address)
      }
      if hasOrganizationId {
        output.writeString(5, value:organizationId)
      }
      if hasProfileCount {
        output.writeUInt32(6, value:profileCount)
      }
      if hasImageUrl {
        output.writeString(7, value:imageUrl)
      }
      if hasDescription {
        output.writeString(8, value:description_)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if hasAddress {
          if let varSizeaddress = address?.computeMessageSize(4) {
              serialize_size += varSizeaddress
          }
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(5)
      }
      if hasProfileCount {
        serialize_size += profileCount.computeUInt32Size(6)
      }
      if hasImageUrl {
        serialize_size += imageUrl.computeStringSize(7)
      }
      if hasDescription {
        serialize_size += description_.computeStringSize(8)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.LocationV1 {
      return Services.Organization.Containers.LocationV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.LocationV1 {
      return Services.Organization.Containers.LocationV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.LocationV1 {
      return Services.Organization.Containers.LocationV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.LocationV1 {
      return Services.Organization.Containers.LocationV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.LocationV1 {
      return Services.Organization.Containers.LocationV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.LocationV1 {
      return Services.Organization.Containers.LocationV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.LocationV1Builder {
      return Services.Organization.Containers.LocationV1.classBuilder() as! Services.Organization.Containers.LocationV1Builder
    }
    public func builder() -> Services.Organization.Containers.LocationV1Builder {
      return classBuilder() as! Services.Organization.Containers.LocationV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.LocationV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.LocationV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.LocationV1Builder {
      return Services.Organization.Containers.LocationV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.LocationV1) -> Services.Organization.Containers.LocationV1Builder {
      return Services.Organization.Containers.LocationV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasAddress {
        output += "\(indent) address {\n"
        address?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      if hasProfileCount {
        output += "\(indent) profileCount: \(profileCount) \n"
      }
      if hasImageUrl {
        output += "\(indent) imageUrl: \(imageUrl) \n"
      }
      if hasDescription {
        output += "\(indent) description_: \(description_) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasAddress {
                if let hashValueaddress = address?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueaddress
                }
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            if hasProfileCount {
               hashCode = (hashCode &* 31) &+ profileCount.hashValue
            }
            if hasImageUrl {
               hashCode = (hashCode &* 31) &+ imageUrl.hashValue
            }
            if hasDescription {
               hashCode = (hashCode &* 31) &+ description_.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.LocationV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.LocationV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.LocationV1.self
    }
    //Meta information declaration end

  }

  final public class LocationV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.LocationV1

    required override public init () {
       builderResult = Services.Organization.Containers.LocationV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.LocationV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.name = value
      return self
    }
    public func clearName() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasAddress:Bool {
         get {
             return builderResult.hasAddress
         }
    }
    public var address:Services.Organization.Containers.AddressV1! {
         get {
             return builderResult.address
         }
         set (value) {
             builderResult.hasAddress = true
             builderResult.address = value
         }
    }
    public func setAddress(value:Services.Organization.Containers.AddressV1!)-> Services.Organization.Containers.LocationV1Builder {
      self.address = value
      return self
    }
    public func mergeAddress(value:Services.Organization.Containers.AddressV1) -> Services.Organization.Containers.LocationV1Builder {
      if (builderResult.hasAddress) {
        builderResult.address = Services.Organization.Containers.AddressV1.builderWithPrototype(builderResult.address).mergeFrom(value).buildPartial()
      } else {
        builderResult.address = value
      }
      builderResult.hasAddress = true
      return self
    }
    public func clearAddress() -> Services.Organization.Containers.LocationV1Builder {
      builderResult.hasAddress = false
      builderResult.address = nil
      return self
    }
    public var hasOrganizationId:Bool {
         get {
              return builderResult.hasOrganizationId
         }
    }
    public var organizationId:String {
         get {
              return builderResult.organizationId
         }
         set (value) {
             builderResult.hasOrganizationId = true
             builderResult.organizationId = value
         }
    }
    public func setOrganizationId(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.organizationId = value
      return self
    }
    public func clearOrganizationId() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasOrganizationId = false
         builderResult.organizationId = ""
         return self
    }
    public var hasProfileCount:Bool {
         get {
              return builderResult.hasProfileCount
         }
    }
    public var profileCount:UInt32 {
         get {
              return builderResult.profileCount
         }
         set (value) {
             builderResult.hasProfileCount = true
             builderResult.profileCount = value
         }
    }
    public func setProfileCount(value:UInt32)-> Services.Organization.Containers.LocationV1Builder {
      self.profileCount = value
      return self
    }
    public func clearProfileCount() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasProfileCount = false
         builderResult.profileCount = UInt32(0)
         return self
    }
    public var hasImageUrl:Bool {
         get {
              return builderResult.hasImageUrl
         }
    }
    public var imageUrl:String {
         get {
              return builderResult.imageUrl
         }
         set (value) {
             builderResult.hasImageUrl = true
             builderResult.imageUrl = value
         }
    }
    public func setImageUrl(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.imageUrl = value
      return self
    }
    public func clearImageUrl() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasImageUrl = false
         builderResult.imageUrl = ""
         return self
    }
    public var hasDescription:Bool {
         get {
              return builderResult.hasDescription
         }
    }
    public var description_:String {
         get {
              return builderResult.description_
         }
         set (value) {
             builderResult.hasDescription = true
             builderResult.description_ = value
         }
    }
    public func setDescription(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.description_ = value
      return self
    }
    public func clearDescription() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasDescription = false
         builderResult.description_ = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.LocationV1Builder {
      builderResult = Services.Organization.Containers.LocationV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.LocationV1Builder {
      return Services.Organization.Containers.LocationV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.LocationV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.LocationV1 {
      var returnMe:Services.Organization.Containers.LocationV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.LocationV1) -> Services.Organization.Containers.LocationV1Builder {
      if (other == Services.Organization.Containers.LocationV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasName {
           name = other.name
      }
      if (other.hasAddress) {
          mergeAddress(other.address)
      }
      if other.hasOrganizationId {
           organizationId = other.organizationId
      }
      if other.hasProfileCount {
           profileCount = other.profileCount
      }
      if other.hasImageUrl {
           imageUrl = other.imageUrl
      }
      if other.hasDescription {
           description_ = other.description_
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.LocationV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.LocationV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          name = input.readString()

        case 34 :
          var subBuilder:Services.Organization.Containers.AddressV1Builder = Services.Organization.Containers.AddressV1.builder()
          if hasAddress {
            subBuilder.mergeFrom(address)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          address = subBuilder.buildPartial()

        case 42 :
          organizationId = input.readString()

        case 48 :
          profileCount = input.readUInt32()

        case 58 :
          imageUrl = input.readString()

        case 66 :
          description_ = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class OrganizationV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "name": return name
           case "domain": return domain
           case "imageUrl": return imageUrl
           case "tintColor": return tintColor
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasDomain:Bool = false
    public private(set) var domain:String = ""

    public private(set) var hasImageUrl:Bool = false
    public private(set) var imageUrl:String = ""

    public private(set) var hasTintColor:Bool = false
    public private(set) var tintColor:Services.Organization.Containers.ColorV1!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasName {
        output.writeString(3, value:name)
      }
      if hasDomain {
        output.writeString(4, value:domain)
      }
      if hasImageUrl {
        output.writeString(5, value:imageUrl)
      }
      if hasTintColor {
        output.writeMessage(6, value:tintColor)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if hasDomain {
        serialize_size += domain.computeStringSize(4)
      }
      if hasImageUrl {
        serialize_size += imageUrl.computeStringSize(5)
      }
      if hasTintColor {
          if let varSizetintColor = tintColor?.computeMessageSize(6) {
              serialize_size += varSizetintColor
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.OrganizationV1 {
      return Services.Organization.Containers.OrganizationV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.OrganizationV1 {
      return Services.Organization.Containers.OrganizationV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.OrganizationV1 {
      return Services.Organization.Containers.OrganizationV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.OrganizationV1 {
      return Services.Organization.Containers.OrganizationV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.OrganizationV1 {
      return Services.Organization.Containers.OrganizationV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.OrganizationV1 {
      return Services.Organization.Containers.OrganizationV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.OrganizationV1Builder {
      return Services.Organization.Containers.OrganizationV1.classBuilder() as! Services.Organization.Containers.OrganizationV1Builder
    }
    public func builder() -> Services.Organization.Containers.OrganizationV1Builder {
      return classBuilder() as! Services.Organization.Containers.OrganizationV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.OrganizationV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.OrganizationV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.OrganizationV1Builder {
      return Services.Organization.Containers.OrganizationV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.OrganizationV1) -> Services.Organization.Containers.OrganizationV1Builder {
      return Services.Organization.Containers.OrganizationV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasDomain {
        output += "\(indent) domain: \(domain) \n"
      }
      if hasImageUrl {
        output += "\(indent) imageUrl: \(imageUrl) \n"
      }
      if hasTintColor {
        output += "\(indent) tintColor {\n"
        tintColor?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasDomain {
               hashCode = (hashCode &* 31) &+ domain.hashValue
            }
            if hasImageUrl {
               hashCode = (hashCode &* 31) &+ imageUrl.hashValue
            }
            if hasTintColor {
                if let hashValuetintColor = tintColor?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuetintColor
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.OrganizationV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.OrganizationV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.OrganizationV1.self
    }
    //Meta information declaration end

  }

  final public class OrganizationV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.OrganizationV1

    required override public init () {
       builderResult = Services.Organization.Containers.OrganizationV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.OrganizationV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.OrganizationV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Organization.Containers.OrganizationV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Organization.Containers.OrganizationV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String)-> Services.Organization.Containers.OrganizationV1Builder {
      self.name = value
      return self
    }
    public func clearName() -> Services.Organization.Containers.OrganizationV1Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasDomain:Bool {
         get {
              return builderResult.hasDomain
         }
    }
    public var domain:String {
         get {
              return builderResult.domain
         }
         set (value) {
             builderResult.hasDomain = true
             builderResult.domain = value
         }
    }
    public func setDomain(value:String)-> Services.Organization.Containers.OrganizationV1Builder {
      self.domain = value
      return self
    }
    public func clearDomain() -> Services.Organization.Containers.OrganizationV1Builder{
         builderResult.hasDomain = false
         builderResult.domain = ""
         return self
    }
    public var hasImageUrl:Bool {
         get {
              return builderResult.hasImageUrl
         }
    }
    public var imageUrl:String {
         get {
              return builderResult.imageUrl
         }
         set (value) {
             builderResult.hasImageUrl = true
             builderResult.imageUrl = value
         }
    }
    public func setImageUrl(value:String)-> Services.Organization.Containers.OrganizationV1Builder {
      self.imageUrl = value
      return self
    }
    public func clearImageUrl() -> Services.Organization.Containers.OrganizationV1Builder{
         builderResult.hasImageUrl = false
         builderResult.imageUrl = ""
         return self
    }
    public var hasTintColor:Bool {
         get {
             return builderResult.hasTintColor
         }
    }
    public var tintColor:Services.Organization.Containers.ColorV1! {
         get {
             return builderResult.tintColor
         }
         set (value) {
             builderResult.hasTintColor = true
             builderResult.tintColor = value
         }
    }
    public func setTintColor(value:Services.Organization.Containers.ColorV1!)-> Services.Organization.Containers.OrganizationV1Builder {
      self.tintColor = value
      return self
    }
    public func mergeTintColor(value:Services.Organization.Containers.ColorV1) -> Services.Organization.Containers.OrganizationV1Builder {
      if (builderResult.hasTintColor) {
        builderResult.tintColor = Services.Organization.Containers.ColorV1.builderWithPrototype(builderResult.tintColor).mergeFrom(value).buildPartial()
      } else {
        builderResult.tintColor = value
      }
      builderResult.hasTintColor = true
      return self
    }
    public func clearTintColor() -> Services.Organization.Containers.OrganizationV1Builder {
      builderResult.hasTintColor = false
      builderResult.tintColor = nil
      return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.OrganizationV1Builder {
      builderResult = Services.Organization.Containers.OrganizationV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.OrganizationV1Builder {
      return Services.Organization.Containers.OrganizationV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.OrganizationV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.OrganizationV1 {
      var returnMe:Services.Organization.Containers.OrganizationV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.OrganizationV1) -> Services.Organization.Containers.OrganizationV1Builder {
      if (other == Services.Organization.Containers.OrganizationV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasName {
           name = other.name
      }
      if other.hasDomain {
           domain = other.domain
      }
      if other.hasImageUrl {
           imageUrl = other.imageUrl
      }
      if (other.hasTintColor) {
          mergeTintColor(other.tintColor)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.OrganizationV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.OrganizationV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          name = input.readString()

        case 34 :
          domain = input.readString()

        case 42 :
          imageUrl = input.readString()

        case 50 :
          var subBuilder:Services.Organization.Containers.ColorV1Builder = Services.Organization.Containers.ColorV1.builder()
          if hasTintColor {
            subBuilder.mergeFrom(tintColor)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          tintColor = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class PathPartV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "name": return name
           case "ownerId": return ownerId
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasOwnerId:Bool = false
    public private(set) var ownerId:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasName {
        output.writeString(3, value:name)
      }
      if hasOwnerId {
        output.writeString(4, value:ownerId)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if hasOwnerId {
        serialize_size += ownerId.computeStringSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.PathPartV1 {
      return Services.Organization.Containers.PathPartV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.PathPartV1 {
      return Services.Organization.Containers.PathPartV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.PathPartV1 {
      return Services.Organization.Containers.PathPartV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.PathPartV1 {
      return Services.Organization.Containers.PathPartV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.PathPartV1 {
      return Services.Organization.Containers.PathPartV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.PathPartV1 {
      return Services.Organization.Containers.PathPartV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.PathPartV1Builder {
      return Services.Organization.Containers.PathPartV1.classBuilder() as! Services.Organization.Containers.PathPartV1Builder
    }
    public func builder() -> Services.Organization.Containers.PathPartV1Builder {
      return classBuilder() as! Services.Organization.Containers.PathPartV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.PathPartV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.PathPartV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.PathPartV1Builder {
      return Services.Organization.Containers.PathPartV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.PathPartV1) -> Services.Organization.Containers.PathPartV1Builder {
      return Services.Organization.Containers.PathPartV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasOwnerId {
        output += "\(indent) ownerId: \(ownerId) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasOwnerId {
               hashCode = (hashCode &* 31) &+ ownerId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.PathPartV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.PathPartV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.PathPartV1.self
    }
    //Meta information declaration end

  }

  final public class PathPartV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.PathPartV1

    required override public init () {
       builderResult = Services.Organization.Containers.PathPartV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.PathPartV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.PathPartV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Organization.Containers.PathPartV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Organization.Containers.PathPartV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String)-> Services.Organization.Containers.PathPartV1Builder {
      self.name = value
      return self
    }
    public func clearName() -> Services.Organization.Containers.PathPartV1Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasOwnerId:Bool {
         get {
              return builderResult.hasOwnerId
         }
    }
    public var ownerId:String {
         get {
              return builderResult.ownerId
         }
         set (value) {
             builderResult.hasOwnerId = true
             builderResult.ownerId = value
         }
    }
    public func setOwnerId(value:String)-> Services.Organization.Containers.PathPartV1Builder {
      self.ownerId = value
      return self
    }
    public func clearOwnerId() -> Services.Organization.Containers.PathPartV1Builder{
         builderResult.hasOwnerId = false
         builderResult.ownerId = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.PathPartV1Builder {
      builderResult = Services.Organization.Containers.PathPartV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.PathPartV1Builder {
      return Services.Organization.Containers.PathPartV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.PathPartV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.PathPartV1 {
      var returnMe:Services.Organization.Containers.PathPartV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.PathPartV1) -> Services.Organization.Containers.PathPartV1Builder {
      if (other == Services.Organization.Containers.PathPartV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasName {
           name = other.name
      }
      if other.hasOwnerId {
           ownerId = other.ownerId
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.PathPartV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.PathPartV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          name = input.readString()

        case 34 :
          ownerId = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class TeamV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "name": return name
           case "ownerId": return ownerId
           case "organizationId": return organizationId
           case "department": return department
           case "profileCount": return profileCount
           case "color": return color
           case "permissions": return permissions
           case "description_": return description_
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasOwnerId:Bool = false
    public private(set) var ownerId:String = ""

    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    public private(set) var hasDepartment:Bool = false
    public private(set) var department:String = ""

    public private(set) var hasProfileCount:Bool = false
    public private(set) var profileCount:UInt32 = UInt32(0)

    public private(set) var hasColor:Bool = false
    public private(set) var color:Services.Organization.Containers.ColorV1!
    public private(set) var hasPermissions:Bool = false
    public private(set) var permissions:Services.Common.Containers.PermissionsV1!
    public private(set) var hasDescription:Bool = false
    public private(set) var description_:String = ""

    public private(set) var path:Array<Services.Organization.Containers.PathPartV1>  = Array<Services.Organization.Containers.PathPartV1>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasName {
        output.writeString(3, value:name)
      }
      if hasOwnerId {
        output.writeString(4, value:ownerId)
      }
      if hasOrganizationId {
        output.writeString(5, value:organizationId)
      }
      for oneElementpath in path {
          output.writeMessage(6, value:oneElementpath)
      }
      if hasDepartment {
        output.writeString(7, value:department)
      }
      if hasProfileCount {
        output.writeUInt32(8, value:profileCount)
      }
      if hasColor {
        output.writeMessage(9, value:color)
      }
      if hasPermissions {
        output.writeMessage(10, value:permissions)
      }
      if hasDescription {
        output.writeString(11, value:description_)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if hasOwnerId {
        serialize_size += ownerId.computeStringSize(4)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(5)
      }
      for oneElementpath in path {
          serialize_size += oneElementpath.computeMessageSize(6)
      }
      if hasDepartment {
        serialize_size += department.computeStringSize(7)
      }
      if hasProfileCount {
        serialize_size += profileCount.computeUInt32Size(8)
      }
      if hasColor {
          if let varSizecolor = color?.computeMessageSize(9) {
              serialize_size += varSizecolor
          }
      }
      if hasPermissions {
          if let varSizepermissions = permissions?.computeMessageSize(10) {
              serialize_size += varSizepermissions
          }
      }
      if hasDescription {
        serialize_size += description_.computeStringSize(11)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.TeamV1 {
      return Services.Organization.Containers.TeamV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TeamV1 {
      return Services.Organization.Containers.TeamV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.TeamV1 {
      return Services.Organization.Containers.TeamV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.TeamV1 {
      return Services.Organization.Containers.TeamV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.TeamV1 {
      return Services.Organization.Containers.TeamV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TeamV1 {
      return Services.Organization.Containers.TeamV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.TeamV1Builder {
      return Services.Organization.Containers.TeamV1.classBuilder() as! Services.Organization.Containers.TeamV1Builder
    }
    public func builder() -> Services.Organization.Containers.TeamV1Builder {
      return classBuilder() as! Services.Organization.Containers.TeamV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.TeamV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.TeamV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.TeamV1Builder {
      return Services.Organization.Containers.TeamV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.TeamV1) -> Services.Organization.Containers.TeamV1Builder {
      return Services.Organization.Containers.TeamV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasOwnerId {
        output += "\(indent) ownerId: \(ownerId) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      var pathElementIndex:Int = 0
      for oneElementpath in path {
          output += "\(indent) path[\(pathElementIndex)] {\n"
          oneElementpath.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          pathElementIndex++
      }
      if hasDepartment {
        output += "\(indent) department: \(department) \n"
      }
      if hasProfileCount {
        output += "\(indent) profileCount: \(profileCount) \n"
      }
      if hasColor {
        output += "\(indent) color {\n"
        color?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasPermissions {
        output += "\(indent) permissions {\n"
        permissions?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasDescription {
        output += "\(indent) description_: \(description_) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasOwnerId {
               hashCode = (hashCode &* 31) &+ ownerId.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            for oneElementpath in path {
                hashCode = (hashCode &* 31) &+ oneElementpath.hashValue
            }
            if hasDepartment {
               hashCode = (hashCode &* 31) &+ department.hashValue
            }
            if hasProfileCount {
               hashCode = (hashCode &* 31) &+ profileCount.hashValue
            }
            if hasColor {
                if let hashValuecolor = color?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuecolor
                }
            }
            if hasPermissions {
                if let hashValuepermissions = permissions?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepermissions
                }
            }
            if hasDescription {
               hashCode = (hashCode &* 31) &+ description_.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.TeamV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.TeamV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.TeamV1.self
    }
    //Meta information declaration end

  }

  final public class TeamV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.TeamV1

    required override public init () {
       builderResult = Services.Organization.Containers.TeamV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.TeamV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.TeamV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Organization.Containers.TeamV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Organization.Containers.TeamV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String)-> Services.Organization.Containers.TeamV1Builder {
      self.name = value
      return self
    }
    public func clearName() -> Services.Organization.Containers.TeamV1Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasOwnerId:Bool {
         get {
              return builderResult.hasOwnerId
         }
    }
    public var ownerId:String {
         get {
              return builderResult.ownerId
         }
         set (value) {
             builderResult.hasOwnerId = true
             builderResult.ownerId = value
         }
    }
    public func setOwnerId(value:String)-> Services.Organization.Containers.TeamV1Builder {
      self.ownerId = value
      return self
    }
    public func clearOwnerId() -> Services.Organization.Containers.TeamV1Builder{
         builderResult.hasOwnerId = false
         builderResult.ownerId = ""
         return self
    }
    public var hasOrganizationId:Bool {
         get {
              return builderResult.hasOrganizationId
         }
    }
    public var organizationId:String {
         get {
              return builderResult.organizationId
         }
         set (value) {
             builderResult.hasOrganizationId = true
             builderResult.organizationId = value
         }
    }
    public func setOrganizationId(value:String)-> Services.Organization.Containers.TeamV1Builder {
      self.organizationId = value
      return self
    }
    public func clearOrganizationId() -> Services.Organization.Containers.TeamV1Builder{
         builderResult.hasOrganizationId = false
         builderResult.organizationId = ""
         return self
    }
    public var path:Array<Services.Organization.Containers.PathPartV1> {
         get {
             return builderResult.path
         }
         set (value) {
             builderResult.path = value
         }
    }
    public func setPath(value:Array<Services.Organization.Containers.PathPartV1>)-> Services.Organization.Containers.TeamV1Builder {
      self.path = value
      return self
    }
    public func clearPath() -> Services.Organization.Containers.TeamV1Builder {
      builderResult.path.removeAll(keepCapacity: false)
      return self
    }
    public var hasDepartment:Bool {
         get {
              return builderResult.hasDepartment
         }
    }
    public var department:String {
         get {
              return builderResult.department
         }
         set (value) {
             builderResult.hasDepartment = true
             builderResult.department = value
         }
    }
    public func setDepartment(value:String)-> Services.Organization.Containers.TeamV1Builder {
      self.department = value
      return self
    }
    public func clearDepartment() -> Services.Organization.Containers.TeamV1Builder{
         builderResult.hasDepartment = false
         builderResult.department = ""
         return self
    }
    public var hasProfileCount:Bool {
         get {
              return builderResult.hasProfileCount
         }
    }
    public var profileCount:UInt32 {
         get {
              return builderResult.profileCount
         }
         set (value) {
             builderResult.hasProfileCount = true
             builderResult.profileCount = value
         }
    }
    public func setProfileCount(value:UInt32)-> Services.Organization.Containers.TeamV1Builder {
      self.profileCount = value
      return self
    }
    public func clearProfileCount() -> Services.Organization.Containers.TeamV1Builder{
         builderResult.hasProfileCount = false
         builderResult.profileCount = UInt32(0)
         return self
    }
    public var hasColor:Bool {
         get {
             return builderResult.hasColor
         }
    }
    public var color:Services.Organization.Containers.ColorV1! {
         get {
             return builderResult.color
         }
         set (value) {
             builderResult.hasColor = true
             builderResult.color = value
         }
    }
    public func setColor(value:Services.Organization.Containers.ColorV1!)-> Services.Organization.Containers.TeamV1Builder {
      self.color = value
      return self
    }
    public func mergeColor(value:Services.Organization.Containers.ColorV1) -> Services.Organization.Containers.TeamV1Builder {
      if (builderResult.hasColor) {
        builderResult.color = Services.Organization.Containers.ColorV1.builderWithPrototype(builderResult.color).mergeFrom(value).buildPartial()
      } else {
        builderResult.color = value
      }
      builderResult.hasColor = true
      return self
    }
    public func clearColor() -> Services.Organization.Containers.TeamV1Builder {
      builderResult.hasColor = false
      builderResult.color = nil
      return self
    }
    public var hasPermissions:Bool {
         get {
             return builderResult.hasPermissions
         }
    }
    public var permissions:Services.Common.Containers.PermissionsV1! {
         get {
             return builderResult.permissions
         }
         set (value) {
             builderResult.hasPermissions = true
             builderResult.permissions = value
         }
    }
    public func setPermissions(value:Services.Common.Containers.PermissionsV1!)-> Services.Organization.Containers.TeamV1Builder {
      self.permissions = value
      return self
    }
    public func mergePermissions(value:Services.Common.Containers.PermissionsV1) -> Services.Organization.Containers.TeamV1Builder {
      if (builderResult.hasPermissions) {
        builderResult.permissions = Services.Common.Containers.PermissionsV1.builderWithPrototype(builderResult.permissions).mergeFrom(value).buildPartial()
      } else {
        builderResult.permissions = value
      }
      builderResult.hasPermissions = true
      return self
    }
    public func clearPermissions() -> Services.Organization.Containers.TeamV1Builder {
      builderResult.hasPermissions = false
      builderResult.permissions = nil
      return self
    }
    public var hasDescription:Bool {
         get {
              return builderResult.hasDescription
         }
    }
    public var description_:String {
         get {
              return builderResult.description_
         }
         set (value) {
             builderResult.hasDescription = true
             builderResult.description_ = value
         }
    }
    public func setDescription(value:String)-> Services.Organization.Containers.TeamV1Builder {
      self.description_ = value
      return self
    }
    public func clearDescription() -> Services.Organization.Containers.TeamV1Builder{
         builderResult.hasDescription = false
         builderResult.description_ = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.TeamV1Builder {
      builderResult = Services.Organization.Containers.TeamV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.TeamV1Builder {
      return Services.Organization.Containers.TeamV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.TeamV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.TeamV1 {
      var returnMe:Services.Organization.Containers.TeamV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.TeamV1) -> Services.Organization.Containers.TeamV1Builder {
      if (other == Services.Organization.Containers.TeamV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasName {
           name = other.name
      }
      if other.hasOwnerId {
           ownerId = other.ownerId
      }
      if other.hasOrganizationId {
           organizationId = other.organizationId
      }
      if !other.path.isEmpty  {
         builderResult.path += other.path
      }
      if other.hasDepartment {
           department = other.department
      }
      if other.hasProfileCount {
           profileCount = other.profileCount
      }
      if (other.hasColor) {
          mergeColor(other.color)
      }
      if (other.hasPermissions) {
          mergePermissions(other.permissions)
      }
      if other.hasDescription {
           description_ = other.description_
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.TeamV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TeamV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          name = input.readString()

        case 34 :
          ownerId = input.readString()

        case 42 :
          organizationId = input.readString()

        case 50 :
          var subBuilder = Services.Organization.Containers.PathPartV1.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          path += [subBuilder.buildPartial()]

        case 58 :
          department = input.readString()

        case 64 :
          profileCount = input.readUInt32()

        case 74 :
          var subBuilder:Services.Organization.Containers.ColorV1Builder = Services.Organization.Containers.ColorV1.builder()
          if hasColor {
            subBuilder.mergeFrom(color)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          color = subBuilder.buildPartial()

        case 82 :
          var subBuilder:Services.Common.Containers.PermissionsV1Builder = Services.Common.Containers.PermissionsV1.builder()
          if hasPermissions {
            subBuilder.mergeFrom(permissions)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          permissions = subBuilder.buildPartial()

        case 90 :
          description_ = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class TeamDescendantsV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "depth": return depth
           case "parentTeamId": return parentTeamId
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasDepth:Bool = false
    public private(set) var depth:UInt32 = UInt32(0)

    public private(set) var hasParentTeamId:Bool = false
    public private(set) var parentTeamId:String = ""

    public private(set) var teams:Array<Services.Organization.Containers.TeamV1>  = Array<Services.Organization.Containers.TeamV1>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasDepth {
        output.writeUInt32(2, value:depth)
      }
      if hasParentTeamId {
        output.writeString(3, value:parentTeamId)
      }
      for oneElementteams in teams {
          output.writeMessage(4, value:oneElementteams)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasDepth {
        serialize_size += depth.computeUInt32Size(2)
      }
      if hasParentTeamId {
        serialize_size += parentTeamId.computeStringSize(3)
      }
      for oneElementteams in teams {
          serialize_size += oneElementteams.computeMessageSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.TeamDescendantsV1 {
      return Services.Organization.Containers.TeamDescendantsV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TeamDescendantsV1 {
      return Services.Organization.Containers.TeamDescendantsV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.TeamDescendantsV1 {
      return Services.Organization.Containers.TeamDescendantsV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.TeamDescendantsV1 {
      return Services.Organization.Containers.TeamDescendantsV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.TeamDescendantsV1 {
      return Services.Organization.Containers.TeamDescendantsV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TeamDescendantsV1 {
      return Services.Organization.Containers.TeamDescendantsV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.TeamDescendantsV1Builder {
      return Services.Organization.Containers.TeamDescendantsV1.classBuilder() as! Services.Organization.Containers.TeamDescendantsV1Builder
    }
    public func builder() -> Services.Organization.Containers.TeamDescendantsV1Builder {
      return classBuilder() as! Services.Organization.Containers.TeamDescendantsV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.TeamDescendantsV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.TeamDescendantsV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.TeamDescendantsV1Builder {
      return Services.Organization.Containers.TeamDescendantsV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.TeamDescendantsV1) -> Services.Organization.Containers.TeamDescendantsV1Builder {
      return Services.Organization.Containers.TeamDescendantsV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasDepth {
        output += "\(indent) depth: \(depth) \n"
      }
      if hasParentTeamId {
        output += "\(indent) parentTeamId: \(parentTeamId) \n"
      }
      var teamsElementIndex:Int = 0
      for oneElementteams in teams {
          output += "\(indent) teams[\(teamsElementIndex)] {\n"
          oneElementteams.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          teamsElementIndex++
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasDepth {
               hashCode = (hashCode &* 31) &+ depth.hashValue
            }
            if hasParentTeamId {
               hashCode = (hashCode &* 31) &+ parentTeamId.hashValue
            }
            for oneElementteams in teams {
                hashCode = (hashCode &* 31) &+ oneElementteams.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.TeamDescendantsV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.TeamDescendantsV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.TeamDescendantsV1.self
    }
    //Meta information declaration end

  }

  final public class TeamDescendantsV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.TeamDescendantsV1

    required override public init () {
       builderResult = Services.Organization.Containers.TeamDescendantsV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.TeamDescendantsV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.TeamDescendantsV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasDepth:Bool {
         get {
              return builderResult.hasDepth
         }
    }
    public var depth:UInt32 {
         get {
              return builderResult.depth
         }
         set (value) {
             builderResult.hasDepth = true
             builderResult.depth = value
         }
    }
    public func setDepth(value:UInt32)-> Services.Organization.Containers.TeamDescendantsV1Builder {
      self.depth = value
      return self
    }
    public func clearDepth() -> Services.Organization.Containers.TeamDescendantsV1Builder{
         builderResult.hasDepth = false
         builderResult.depth = UInt32(0)
         return self
    }
    public var hasParentTeamId:Bool {
         get {
              return builderResult.hasParentTeamId
         }
    }
    public var parentTeamId:String {
         get {
              return builderResult.parentTeamId
         }
         set (value) {
             builderResult.hasParentTeamId = true
             builderResult.parentTeamId = value
         }
    }
    public func setParentTeamId(value:String)-> Services.Organization.Containers.TeamDescendantsV1Builder {
      self.parentTeamId = value
      return self
    }
    public func clearParentTeamId() -> Services.Organization.Containers.TeamDescendantsV1Builder{
         builderResult.hasParentTeamId = false
         builderResult.parentTeamId = ""
         return self
    }
    public var teams:Array<Services.Organization.Containers.TeamV1> {
         get {
             return builderResult.teams
         }
         set (value) {
             builderResult.teams = value
         }
    }
    public func setTeams(value:Array<Services.Organization.Containers.TeamV1>)-> Services.Organization.Containers.TeamDescendantsV1Builder {
      self.teams = value
      return self
    }
    public func clearTeams() -> Services.Organization.Containers.TeamDescendantsV1Builder {
      builderResult.teams.removeAll(keepCapacity: false)
      return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.TeamDescendantsV1Builder {
      builderResult = Services.Organization.Containers.TeamDescendantsV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.TeamDescendantsV1Builder {
      return Services.Organization.Containers.TeamDescendantsV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.TeamDescendantsV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.TeamDescendantsV1 {
      var returnMe:Services.Organization.Containers.TeamDescendantsV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.TeamDescendantsV1) -> Services.Organization.Containers.TeamDescendantsV1Builder {
      if (other == Services.Organization.Containers.TeamDescendantsV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasDepth {
           depth = other.depth
      }
      if other.hasParentTeamId {
           parentTeamId = other.parentTeamId
      }
      if !other.teams.isEmpty  {
         builderResult.teams += other.teams
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.TeamDescendantsV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TeamDescendantsV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 16 :
          depth = input.readUInt32()

        case 26 :
          parentTeamId = input.readString()

        case 34 :
          var subBuilder = Services.Organization.Containers.TeamV1.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          teams += [subBuilder.buildPartial()]

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class TokenV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "key": return key
           case "requestedByUserId": return requestedByUserId
           case "id": return id
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasKey:Bool = false
    public private(set) var key:String = ""

    public private(set) var hasRequestedByUserId:Bool = false
    public private(set) var requestedByUserId:String = ""

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasKey {
        output.writeString(2, value:key)
      }
      if hasRequestedByUserId {
        output.writeString(3, value:requestedByUserId)
      }
      if hasId {
        output.writeString(4, value:id)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasKey {
        serialize_size += key.computeStringSize(2)
      }
      if hasRequestedByUserId {
        serialize_size += requestedByUserId.computeStringSize(3)
      }
      if hasId {
        serialize_size += id.computeStringSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.TokenV1 {
      return Services.Organization.Containers.TokenV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TokenV1 {
      return Services.Organization.Containers.TokenV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.TokenV1 {
      return Services.Organization.Containers.TokenV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.TokenV1 {
      return Services.Organization.Containers.TokenV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.TokenV1 {
      return Services.Organization.Containers.TokenV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TokenV1 {
      return Services.Organization.Containers.TokenV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.TokenV1Builder {
      return Services.Organization.Containers.TokenV1.classBuilder() as! Services.Organization.Containers.TokenV1Builder
    }
    public func builder() -> Services.Organization.Containers.TokenV1Builder {
      return classBuilder() as! Services.Organization.Containers.TokenV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.TokenV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.TokenV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.TokenV1Builder {
      return Services.Organization.Containers.TokenV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.TokenV1) -> Services.Organization.Containers.TokenV1Builder {
      return Services.Organization.Containers.TokenV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasKey {
        output += "\(indent) key: \(key) \n"
      }
      if hasRequestedByUserId {
        output += "\(indent) requestedByUserId: \(requestedByUserId) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasKey {
               hashCode = (hashCode &* 31) &+ key.hashValue
            }
            if hasRequestedByUserId {
               hashCode = (hashCode &* 31) &+ requestedByUserId.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.TokenV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.TokenV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.TokenV1.self
    }
    //Meta information declaration end

  }

  final public class TokenV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.TokenV1

    required override public init () {
       builderResult = Services.Organization.Containers.TokenV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.TokenV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.TokenV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasKey:Bool {
         get {
              return builderResult.hasKey
         }
    }
    public var key:String {
         get {
              return builderResult.key
         }
         set (value) {
             builderResult.hasKey = true
             builderResult.key = value
         }
    }
    public func setKey(value:String)-> Services.Organization.Containers.TokenV1Builder {
      self.key = value
      return self
    }
    public func clearKey() -> Services.Organization.Containers.TokenV1Builder{
         builderResult.hasKey = false
         builderResult.key = ""
         return self
    }
    public var hasRequestedByUserId:Bool {
         get {
              return builderResult.hasRequestedByUserId
         }
    }
    public var requestedByUserId:String {
         get {
              return builderResult.requestedByUserId
         }
         set (value) {
             builderResult.hasRequestedByUserId = true
             builderResult.requestedByUserId = value
         }
    }
    public func setRequestedByUserId(value:String)-> Services.Organization.Containers.TokenV1Builder {
      self.requestedByUserId = value
      return self
    }
    public func clearRequestedByUserId() -> Services.Organization.Containers.TokenV1Builder{
         builderResult.hasRequestedByUserId = false
         builderResult.requestedByUserId = ""
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Organization.Containers.TokenV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Organization.Containers.TokenV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.TokenV1Builder {
      builderResult = Services.Organization.Containers.TokenV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.TokenV1Builder {
      return Services.Organization.Containers.TokenV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.TokenV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.TokenV1 {
      var returnMe:Services.Organization.Containers.TokenV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.TokenV1) -> Services.Organization.Containers.TokenV1Builder {
      if (other == Services.Organization.Containers.TokenV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasKey {
           key = other.key
      }
      if other.hasRequestedByUserId {
           requestedByUserId = other.requestedByUserId
      }
      if other.hasId {
           id = other.id
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.TokenV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TokenV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          key = input.readString()

        case 26 :
          requestedByUserId = input.readString()

        case 34 :
          id = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
