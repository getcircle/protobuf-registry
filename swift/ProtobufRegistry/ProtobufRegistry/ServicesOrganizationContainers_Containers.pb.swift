// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
public extension Services.Organization.Containers{}

public func == (lhs: Services.Organization.Containers.LocationV1, rhs: Services.Organization.Containers.LocationV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasAddress1 == rhs.hasAddress1) && (!lhs.hasAddress1 || lhs.address1 == rhs.address1)
  fieldCheck = fieldCheck && (lhs.hasAddress2 == rhs.hasAddress2) && (!lhs.hasAddress2 || lhs.address2 == rhs.address2)
  fieldCheck = fieldCheck && (lhs.hasCity == rhs.hasCity) && (!lhs.hasCity || lhs.city == rhs.city)
  fieldCheck = fieldCheck && (lhs.hasRegion == rhs.hasRegion) && (!lhs.hasRegion || lhs.region == rhs.region)
  fieldCheck = fieldCheck && (lhs.hasPostalCode == rhs.hasPostalCode) && (!lhs.hasPostalCode || lhs.postalCode == rhs.postalCode)
  fieldCheck = fieldCheck && (lhs.hasCountryCode == rhs.hasCountryCode) && (!lhs.hasCountryCode || lhs.countryCode == rhs.countryCode)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = fieldCheck && (lhs.hasTimezone == rhs.hasTimezone) && (!lhs.hasTimezone || lhs.timezone == rhs.timezone)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.hasProfileCount == rhs.hasProfileCount) && (!lhs.hasProfileCount || lhs.profileCount == rhs.profileCount)
  fieldCheck = fieldCheck && (lhs.hasImageUrl == rhs.hasImageUrl) && (!lhs.hasImageUrl || lhs.imageUrl == rhs.imageUrl)
  fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
  fieldCheck = fieldCheck && (lhs.hasEstablishedDate == rhs.hasEstablishedDate) && (!lhs.hasEstablishedDate || lhs.establishedDate == rhs.establishedDate)
  fieldCheck = fieldCheck && (lhs.pointsOfContact == rhs.pointsOfContact)
  fieldCheck = fieldCheck && (lhs.hasPermissions == rhs.hasPermissions) && (!lhs.hasPermissions || lhs.permissions == rhs.permissions)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Organization.Containers.OrganizationV1, rhs: Services.Organization.Containers.OrganizationV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasDomain == rhs.hasDomain) && (!lhs.hasDomain || lhs.domain == rhs.domain)
  fieldCheck = fieldCheck && (lhs.hasImageUrl == rhs.hasImageUrl) && (!lhs.hasImageUrl || lhs.imageUrl == rhs.imageUrl)
  fieldCheck = fieldCheck && (lhs.hasProfileCount == rhs.hasProfileCount) && (!lhs.hasProfileCount || lhs.profileCount == rhs.profileCount)
  fieldCheck = fieldCheck && (lhs.hasTeamCount == rhs.hasTeamCount) && (!lhs.hasTeamCount || lhs.teamCount == rhs.teamCount)
  fieldCheck = fieldCheck && (lhs.hasLocationCount == rhs.hasLocationCount) && (!lhs.hasLocationCount || lhs.locationCount == rhs.locationCount)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Organization.Containers.TeamV1, rhs: Services.Organization.Containers.TeamV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasOrganizationId == rhs.hasOrganizationId) && (!lhs.hasOrganizationId || lhs.organizationId == rhs.organizationId)
  fieldCheck = fieldCheck && (lhs.hasManagerProfileId == rhs.hasManagerProfileId) && (!lhs.hasManagerProfileId || lhs.managerProfileId == rhs.managerProfileId)
  fieldCheck = fieldCheck && (lhs.hasManager == rhs.hasManager) && (!lhs.hasManager || lhs.manager == rhs.manager)
  fieldCheck = fieldCheck && (lhs.hasPermissions == rhs.hasPermissions) && (!lhs.hasPermissions || lhs.permissions == rhs.permissions)
  fieldCheck = fieldCheck && (lhs.hasDescription == rhs.hasDescription) && (!lhs.hasDescription || lhs.description_ == rhs.description_)
  fieldCheck = fieldCheck && (lhs.hasStatus == rhs.hasStatus) && (!lhs.hasStatus || lhs.status == rhs.status)
  fieldCheck = fieldCheck && (lhs.hasImageUrl == rhs.hasImageUrl) && (!lhs.hasImageUrl || lhs.imageUrl == rhs.imageUrl)
  fieldCheck = fieldCheck && (lhs.hasChildTeamCount == rhs.hasChildTeamCount) && (!lhs.hasChildTeamCount || lhs.childTeamCount == rhs.childTeamCount)
  fieldCheck = fieldCheck && (lhs.hasProfileCount == rhs.hasProfileCount) && (!lhs.hasProfileCount || lhs.profileCount == rhs.profileCount)
  fieldCheck = fieldCheck && (lhs.hasDisplayName == rhs.hasDisplayName) && (!lhs.hasDisplayName || lhs.displayName == rhs.displayName)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Organization.Containers.TeamStatusV1, rhs: Services.Organization.Containers.TeamStatusV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasValue == rhs.hasValue) && (!lhs.hasValue || lhs.value == rhs.value)
  fieldCheck = fieldCheck && (lhs.hasCreated == rhs.hasCreated) && (!lhs.hasCreated || lhs.created == rhs.created)
  fieldCheck = fieldCheck && (lhs.hasByProfileId == rhs.hasByProfileId) && (!lhs.hasByProfileId || lhs.byProfileId == rhs.byProfileId)
  fieldCheck = fieldCheck && (lhs.hasByProfile == rhs.hasByProfile) && (!lhs.hasByProfile || lhs.byProfile == rhs.byProfile)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public func == (lhs: Services.Organization.Containers.TokenV1, rhs: Services.Organization.Containers.TokenV1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasVersion == rhs.hasVersion) && (!lhs.hasVersion || lhs.version == rhs.version)
  fieldCheck = fieldCheck && (lhs.hasKey == rhs.hasKey) && (!lhs.hasKey || lhs.key == rhs.key)
  fieldCheck = fieldCheck && (lhs.hasRequestedByUserId == rhs.hasRequestedByUserId) && (!lhs.hasRequestedByUserId || lhs.requestedByUserId == rhs.requestedByUserId)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

public extension Services.Organization.Containers {
  public struct ContainersRoot {
    public static var sharedInstance : ContainersRoot {
     struct Static {
         static let instance : ContainersRoot = ContainersRoot()
     }
     return Static.instance
    }
    public var extensionRegistry:ExtensionRegistry

    init() {
      extensionRegistry = ExtensionRegistry()
      registerAllExtensions(extensionRegistry)
      Services.Common.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
      Services.Profile.Containers.ContainersRoot.sharedInstance.registerAllExtensions(extensionRegistry)
    }
    public func registerAllExtensions(registry:ExtensionRegistry) {
    }
  }

  final public class LocationV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "name": return name
           case "address1": return address1
           case "address2": return address2
           case "city": return city
           case "region": return region
           case "postalCode": return postalCode
           case "countryCode": return countryCode
           case "latitude": return latitude
           case "longitude": return longitude
           case "timezone": return timezone
           case "organizationId": return organizationId
           case "profileCount": return profileCount
           case "imageUrl": return imageUrl
           case "description_": return description_
           case "establishedDate": return establishedDate
           case "permissions": return permissions
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasAddress1:Bool = false
    public private(set) var address1:String = ""

    public private(set) var hasAddress2:Bool = false
    public private(set) var address2:String = ""

    public private(set) var hasCity:Bool = false
    public private(set) var city:String = ""

    public private(set) var hasRegion:Bool = false
    public private(set) var region:String = ""

    public private(set) var hasPostalCode:Bool = false
    public private(set) var postalCode:String = ""

    public private(set) var hasCountryCode:Bool = false
    public private(set) var countryCode:String = ""

    public private(set) var hasLatitude:Bool = false
    public private(set) var latitude:String = ""

    public private(set) var hasLongitude:Bool = false
    public private(set) var longitude:String = ""

    public private(set) var hasTimezone:Bool = false
    public private(set) var timezone:String = ""

    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    public private(set) var hasProfileCount:Bool = false
    public private(set) var profileCount:UInt32 = UInt32(0)

    public private(set) var hasImageUrl:Bool = false
    public private(set) var imageUrl:String = ""

    public private(set) var hasDescription:Bool = false
    public private(set) var description_:Services.Common.Containers.DescriptionV1!
    public private(set) var hasEstablishedDate:Bool = false
    public private(set) var establishedDate:String = ""

    public private(set) var hasPermissions:Bool = false
    public private(set) var permissions:Services.Common.Containers.PermissionsV1!
    public private(set) var pointsOfContact:Array<Services.Profile.Containers.ProfileV1>  = Array<Services.Profile.Containers.ProfileV1>()
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasName {
        output.writeString(3, value:name)
      }
      if hasAddress1 {
        output.writeString(4, value:address1)
      }
      if hasAddress2 {
        output.writeString(5, value:address2)
      }
      if hasCity {
        output.writeString(6, value:city)
      }
      if hasRegion {
        output.writeString(7, value:region)
      }
      if hasPostalCode {
        output.writeString(8, value:postalCode)
      }
      if hasCountryCode {
        output.writeString(9, value:countryCode)
      }
      if hasLatitude {
        output.writeString(10, value:latitude)
      }
      if hasLongitude {
        output.writeString(11, value:longitude)
      }
      if hasTimezone {
        output.writeString(12, value:timezone)
      }
      if hasOrganizationId {
        output.writeString(13, value:organizationId)
      }
      if hasProfileCount {
        output.writeUInt32(14, value:profileCount)
      }
      if hasImageUrl {
        output.writeString(15, value:imageUrl)
      }
      if hasDescription {
        output.writeMessage(16, value:description_)
      }
      if hasEstablishedDate {
        output.writeString(17, value:establishedDate)
      }
      for oneElementpointsOfContact in pointsOfContact {
          output.writeMessage(18, value:oneElementpointsOfContact)
      }
      if hasPermissions {
        output.writeMessage(19, value:permissions)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if hasAddress1 {
        serialize_size += address1.computeStringSize(4)
      }
      if hasAddress2 {
        serialize_size += address2.computeStringSize(5)
      }
      if hasCity {
        serialize_size += city.computeStringSize(6)
      }
      if hasRegion {
        serialize_size += region.computeStringSize(7)
      }
      if hasPostalCode {
        serialize_size += postalCode.computeStringSize(8)
      }
      if hasCountryCode {
        serialize_size += countryCode.computeStringSize(9)
      }
      if hasLatitude {
        serialize_size += latitude.computeStringSize(10)
      }
      if hasLongitude {
        serialize_size += longitude.computeStringSize(11)
      }
      if hasTimezone {
        serialize_size += timezone.computeStringSize(12)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(13)
      }
      if hasProfileCount {
        serialize_size += profileCount.computeUInt32Size(14)
      }
      if hasImageUrl {
        serialize_size += imageUrl.computeStringSize(15)
      }
      if hasDescription {
          if let varSizedescription_ = description_?.computeMessageSize(16) {
              serialize_size += varSizedescription_
          }
      }
      if hasEstablishedDate {
        serialize_size += establishedDate.computeStringSize(17)
      }
      for oneElementpointsOfContact in pointsOfContact {
          serialize_size += oneElementpointsOfContact.computeMessageSize(18)
      }
      if hasPermissions {
          if let varSizepermissions = permissions?.computeMessageSize(19) {
              serialize_size += varSizepermissions
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.LocationV1 {
      return Services.Organization.Containers.LocationV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.LocationV1 {
      return Services.Organization.Containers.LocationV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.LocationV1 {
      return Services.Organization.Containers.LocationV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.LocationV1 {
      return Services.Organization.Containers.LocationV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.LocationV1 {
      return Services.Organization.Containers.LocationV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.LocationV1 {
      return Services.Organization.Containers.LocationV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.LocationV1Builder {
      return Services.Organization.Containers.LocationV1.classBuilder() as! Services.Organization.Containers.LocationV1Builder
    }
    public func builder() -> Services.Organization.Containers.LocationV1Builder {
      return classBuilder() as! Services.Organization.Containers.LocationV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.LocationV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.LocationV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.LocationV1Builder {
      return Services.Organization.Containers.LocationV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.LocationV1) -> Services.Organization.Containers.LocationV1Builder {
      return Services.Organization.Containers.LocationV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasAddress1 {
        output += "\(indent) address1: \(address1) \n"
      }
      if hasAddress2 {
        output += "\(indent) address2: \(address2) \n"
      }
      if hasCity {
        output += "\(indent) city: \(city) \n"
      }
      if hasRegion {
        output += "\(indent) region: \(region) \n"
      }
      if hasPostalCode {
        output += "\(indent) postalCode: \(postalCode) \n"
      }
      if hasCountryCode {
        output += "\(indent) countryCode: \(countryCode) \n"
      }
      if hasLatitude {
        output += "\(indent) latitude: \(latitude) \n"
      }
      if hasLongitude {
        output += "\(indent) longitude: \(longitude) \n"
      }
      if hasTimezone {
        output += "\(indent) timezone: \(timezone) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      if hasProfileCount {
        output += "\(indent) profileCount: \(profileCount) \n"
      }
      if hasImageUrl {
        output += "\(indent) imageUrl: \(imageUrl) \n"
      }
      if hasDescription {
        output += "\(indent) description_ {\n"
        description_?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasEstablishedDate {
        output += "\(indent) establishedDate: \(establishedDate) \n"
      }
      var pointsOfContactElementIndex:Int = 0
      for oneElementpointsOfContact in pointsOfContact {
          output += "\(indent) pointsOfContact[\(pointsOfContactElementIndex)] {\n"
          oneElementpointsOfContact.writeDescriptionTo(&output, indent:"\(indent)  ")
          output += "\(indent)}\n"
          pointsOfContactElementIndex++
      }
      if hasPermissions {
        output += "\(indent) permissions {\n"
        permissions?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasAddress1 {
               hashCode = (hashCode &* 31) &+ address1.hashValue
            }
            if hasAddress2 {
               hashCode = (hashCode &* 31) &+ address2.hashValue
            }
            if hasCity {
               hashCode = (hashCode &* 31) &+ city.hashValue
            }
            if hasRegion {
               hashCode = (hashCode &* 31) &+ region.hashValue
            }
            if hasPostalCode {
               hashCode = (hashCode &* 31) &+ postalCode.hashValue
            }
            if hasCountryCode {
               hashCode = (hashCode &* 31) &+ countryCode.hashValue
            }
            if hasLatitude {
               hashCode = (hashCode &* 31) &+ latitude.hashValue
            }
            if hasLongitude {
               hashCode = (hashCode &* 31) &+ longitude.hashValue
            }
            if hasTimezone {
               hashCode = (hashCode &* 31) &+ timezone.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            if hasProfileCount {
               hashCode = (hashCode &* 31) &+ profileCount.hashValue
            }
            if hasImageUrl {
               hashCode = (hashCode &* 31) &+ imageUrl.hashValue
            }
            if hasDescription {
                if let hashValuedescription_ = description_?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuedescription_
                }
            }
            if hasEstablishedDate {
               hashCode = (hashCode &* 31) &+ establishedDate.hashValue
            }
            for oneElementpointsOfContact in pointsOfContact {
                hashCode = (hashCode &* 31) &+ oneElementpointsOfContact.hashValue
            }
            if hasPermissions {
                if let hashValuepermissions = permissions?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepermissions
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.LocationV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.LocationV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.LocationV1.self
    }
    //Meta information declaration end

  }

  final public class LocationV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.LocationV1

    required override public init () {
       builderResult = Services.Organization.Containers.LocationV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.LocationV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.name = value
      return self
    }
    public func clearName() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasAddress1:Bool {
         get {
              return builderResult.hasAddress1
         }
    }
    public var address1:String {
         get {
              return builderResult.address1
         }
         set (value) {
             builderResult.hasAddress1 = true
             builderResult.address1 = value
         }
    }
    public func setAddress1(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.address1 = value
      return self
    }
    public func clearAddress1() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasAddress1 = false
         builderResult.address1 = ""
         return self
    }
    public var hasAddress2:Bool {
         get {
              return builderResult.hasAddress2
         }
    }
    public var address2:String {
         get {
              return builderResult.address2
         }
         set (value) {
             builderResult.hasAddress2 = true
             builderResult.address2 = value
         }
    }
    public func setAddress2(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.address2 = value
      return self
    }
    public func clearAddress2() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasAddress2 = false
         builderResult.address2 = ""
         return self
    }
    public var hasCity:Bool {
         get {
              return builderResult.hasCity
         }
    }
    public var city:String {
         get {
              return builderResult.city
         }
         set (value) {
             builderResult.hasCity = true
             builderResult.city = value
         }
    }
    public func setCity(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.city = value
      return self
    }
    public func clearCity() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasCity = false
         builderResult.city = ""
         return self
    }
    public var hasRegion:Bool {
         get {
              return builderResult.hasRegion
         }
    }
    public var region:String {
         get {
              return builderResult.region
         }
         set (value) {
             builderResult.hasRegion = true
             builderResult.region = value
         }
    }
    public func setRegion(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.region = value
      return self
    }
    public func clearRegion() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasRegion = false
         builderResult.region = ""
         return self
    }
    public var hasPostalCode:Bool {
         get {
              return builderResult.hasPostalCode
         }
    }
    public var postalCode:String {
         get {
              return builderResult.postalCode
         }
         set (value) {
             builderResult.hasPostalCode = true
             builderResult.postalCode = value
         }
    }
    public func setPostalCode(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.postalCode = value
      return self
    }
    public func clearPostalCode() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasPostalCode = false
         builderResult.postalCode = ""
         return self
    }
    public var hasCountryCode:Bool {
         get {
              return builderResult.hasCountryCode
         }
    }
    public var countryCode:String {
         get {
              return builderResult.countryCode
         }
         set (value) {
             builderResult.hasCountryCode = true
             builderResult.countryCode = value
         }
    }
    public func setCountryCode(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.countryCode = value
      return self
    }
    public func clearCountryCode() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasCountryCode = false
         builderResult.countryCode = ""
         return self
    }
    public var hasLatitude:Bool {
         get {
              return builderResult.hasLatitude
         }
    }
    public var latitude:String {
         get {
              return builderResult.latitude
         }
         set (value) {
             builderResult.hasLatitude = true
             builderResult.latitude = value
         }
    }
    public func setLatitude(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.latitude = value
      return self
    }
    public func clearLatitude() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasLatitude = false
         builderResult.latitude = ""
         return self
    }
    public var hasLongitude:Bool {
         get {
              return builderResult.hasLongitude
         }
    }
    public var longitude:String {
         get {
              return builderResult.longitude
         }
         set (value) {
             builderResult.hasLongitude = true
             builderResult.longitude = value
         }
    }
    public func setLongitude(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.longitude = value
      return self
    }
    public func clearLongitude() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasLongitude = false
         builderResult.longitude = ""
         return self
    }
    public var hasTimezone:Bool {
         get {
              return builderResult.hasTimezone
         }
    }
    public var timezone:String {
         get {
              return builderResult.timezone
         }
         set (value) {
             builderResult.hasTimezone = true
             builderResult.timezone = value
         }
    }
    public func setTimezone(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.timezone = value
      return self
    }
    public func clearTimezone() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasTimezone = false
         builderResult.timezone = ""
         return self
    }
    public var hasOrganizationId:Bool {
         get {
              return builderResult.hasOrganizationId
         }
    }
    public var organizationId:String {
         get {
              return builderResult.organizationId
         }
         set (value) {
             builderResult.hasOrganizationId = true
             builderResult.organizationId = value
         }
    }
    public func setOrganizationId(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.organizationId = value
      return self
    }
    public func clearOrganizationId() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasOrganizationId = false
         builderResult.organizationId = ""
         return self
    }
    public var hasProfileCount:Bool {
         get {
              return builderResult.hasProfileCount
         }
    }
    public var profileCount:UInt32 {
         get {
              return builderResult.profileCount
         }
         set (value) {
             builderResult.hasProfileCount = true
             builderResult.profileCount = value
         }
    }
    public func setProfileCount(value:UInt32)-> Services.Organization.Containers.LocationV1Builder {
      self.profileCount = value
      return self
    }
    public func clearProfileCount() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasProfileCount = false
         builderResult.profileCount = UInt32(0)
         return self
    }
    public var hasImageUrl:Bool {
         get {
              return builderResult.hasImageUrl
         }
    }
    public var imageUrl:String {
         get {
              return builderResult.imageUrl
         }
         set (value) {
             builderResult.hasImageUrl = true
             builderResult.imageUrl = value
         }
    }
    public func setImageUrl(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.imageUrl = value
      return self
    }
    public func clearImageUrl() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasImageUrl = false
         builderResult.imageUrl = ""
         return self
    }
    public var hasDescription:Bool {
         get {
             return builderResult.hasDescription
         }
    }
    public var description_:Services.Common.Containers.DescriptionV1! {
         get {
             return builderResult.description_
         }
         set (value) {
             builderResult.hasDescription = true
             builderResult.description_ = value
         }
    }
    public func setDescription(value:Services.Common.Containers.DescriptionV1!)-> Services.Organization.Containers.LocationV1Builder {
      self.description_ = value
      return self
    }
    public func mergeDescription(value:Services.Common.Containers.DescriptionV1) -> Services.Organization.Containers.LocationV1Builder {
      if (builderResult.hasDescription) {
        builderResult.description_ = Services.Common.Containers.DescriptionV1.builderWithPrototype(builderResult.description_).mergeFrom(value).buildPartial()
      } else {
        builderResult.description_ = value
      }
      builderResult.hasDescription = true
      return self
    }
    public func clearDescription() -> Services.Organization.Containers.LocationV1Builder {
      builderResult.hasDescription = false
      builderResult.description_ = nil
      return self
    }
    public var hasEstablishedDate:Bool {
         get {
              return builderResult.hasEstablishedDate
         }
    }
    public var establishedDate:String {
         get {
              return builderResult.establishedDate
         }
         set (value) {
             builderResult.hasEstablishedDate = true
             builderResult.establishedDate = value
         }
    }
    public func setEstablishedDate(value:String)-> Services.Organization.Containers.LocationV1Builder {
      self.establishedDate = value
      return self
    }
    public func clearEstablishedDate() -> Services.Organization.Containers.LocationV1Builder{
         builderResult.hasEstablishedDate = false
         builderResult.establishedDate = ""
         return self
    }
    public var pointsOfContact:Array<Services.Profile.Containers.ProfileV1> {
         get {
             return builderResult.pointsOfContact
         }
         set (value) {
             builderResult.pointsOfContact = value
         }
    }
    public func setPointsOfContact(value:Array<Services.Profile.Containers.ProfileV1>)-> Services.Organization.Containers.LocationV1Builder {
      self.pointsOfContact = value
      return self
    }
    public func clearPointsOfContact() -> Services.Organization.Containers.LocationV1Builder {
      builderResult.pointsOfContact.removeAll(keepCapacity: false)
      return self
    }
    public var hasPermissions:Bool {
         get {
             return builderResult.hasPermissions
         }
    }
    public var permissions:Services.Common.Containers.PermissionsV1! {
         get {
             return builderResult.permissions
         }
         set (value) {
             builderResult.hasPermissions = true
             builderResult.permissions = value
         }
    }
    public func setPermissions(value:Services.Common.Containers.PermissionsV1!)-> Services.Organization.Containers.LocationV1Builder {
      self.permissions = value
      return self
    }
    public func mergePermissions(value:Services.Common.Containers.PermissionsV1) -> Services.Organization.Containers.LocationV1Builder {
      if (builderResult.hasPermissions) {
        builderResult.permissions = Services.Common.Containers.PermissionsV1.builderWithPrototype(builderResult.permissions).mergeFrom(value).buildPartial()
      } else {
        builderResult.permissions = value
      }
      builderResult.hasPermissions = true
      return self
    }
    public func clearPermissions() -> Services.Organization.Containers.LocationV1Builder {
      builderResult.hasPermissions = false
      builderResult.permissions = nil
      return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.LocationV1Builder {
      builderResult = Services.Organization.Containers.LocationV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.LocationV1Builder {
      return Services.Organization.Containers.LocationV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.LocationV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.LocationV1 {
      var returnMe:Services.Organization.Containers.LocationV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.LocationV1) -> Services.Organization.Containers.LocationV1Builder {
      if (other == Services.Organization.Containers.LocationV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasName {
           name = other.name
      }
      if other.hasAddress1 {
           address1 = other.address1
      }
      if other.hasAddress2 {
           address2 = other.address2
      }
      if other.hasCity {
           city = other.city
      }
      if other.hasRegion {
           region = other.region
      }
      if other.hasPostalCode {
           postalCode = other.postalCode
      }
      if other.hasCountryCode {
           countryCode = other.countryCode
      }
      if other.hasLatitude {
           latitude = other.latitude
      }
      if other.hasLongitude {
           longitude = other.longitude
      }
      if other.hasTimezone {
           timezone = other.timezone
      }
      if other.hasOrganizationId {
           organizationId = other.organizationId
      }
      if other.hasProfileCount {
           profileCount = other.profileCount
      }
      if other.hasImageUrl {
           imageUrl = other.imageUrl
      }
      if (other.hasDescription) {
          mergeDescription(other.description_)
      }
      if other.hasEstablishedDate {
           establishedDate = other.establishedDate
      }
      if !other.pointsOfContact.isEmpty  {
         builderResult.pointsOfContact += other.pointsOfContact
      }
      if (other.hasPermissions) {
          mergePermissions(other.permissions)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.LocationV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.LocationV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          name = input.readString()

        case 34 :
          address1 = input.readString()

        case 42 :
          address2 = input.readString()

        case 50 :
          city = input.readString()

        case 58 :
          region = input.readString()

        case 66 :
          postalCode = input.readString()

        case 74 :
          countryCode = input.readString()

        case 82 :
          latitude = input.readString()

        case 90 :
          longitude = input.readString()

        case 98 :
          timezone = input.readString()

        case 106 :
          organizationId = input.readString()

        case 112 :
          profileCount = input.readUInt32()

        case 122 :
          imageUrl = input.readString()

        case 130 :
          var subBuilder:Services.Common.Containers.DescriptionV1Builder = Services.Common.Containers.DescriptionV1.builder()
          if hasDescription {
            subBuilder.mergeFrom(description_)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          description_ = subBuilder.buildPartial()

        case 138 :
          establishedDate = input.readString()

        case 146 :
          var subBuilder = Services.Profile.Containers.ProfileV1.builder()
          input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
          pointsOfContact += [subBuilder.buildPartial()]

        case 154 :
          var subBuilder:Services.Common.Containers.PermissionsV1Builder = Services.Common.Containers.PermissionsV1.builder()
          if hasPermissions {
            subBuilder.mergeFrom(permissions)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          permissions = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class OrganizationV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "name": return name
           case "domain": return domain
           case "imageUrl": return imageUrl
           case "profileCount": return profileCount
           case "teamCount": return teamCount
           case "locationCount": return locationCount
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasDomain:Bool = false
    public private(set) var domain:String = ""

    public private(set) var hasImageUrl:Bool = false
    public private(set) var imageUrl:String = ""

    public private(set) var hasProfileCount:Bool = false
    public private(set) var profileCount:UInt32 = UInt32(0)

    public private(set) var hasTeamCount:Bool = false
    public private(set) var teamCount:UInt32 = UInt32(0)

    public private(set) var hasLocationCount:Bool = false
    public private(set) var locationCount:UInt32 = UInt32(0)

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasName {
        output.writeString(3, value:name)
      }
      if hasDomain {
        output.writeString(4, value:domain)
      }
      if hasImageUrl {
        output.writeString(5, value:imageUrl)
      }
      if hasProfileCount {
        output.writeUInt32(6, value:profileCount)
      }
      if hasTeamCount {
        output.writeUInt32(7, value:teamCount)
      }
      if hasLocationCount {
        output.writeUInt32(8, value:locationCount)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if hasDomain {
        serialize_size += domain.computeStringSize(4)
      }
      if hasImageUrl {
        serialize_size += imageUrl.computeStringSize(5)
      }
      if hasProfileCount {
        serialize_size += profileCount.computeUInt32Size(6)
      }
      if hasTeamCount {
        serialize_size += teamCount.computeUInt32Size(7)
      }
      if hasLocationCount {
        serialize_size += locationCount.computeUInt32Size(8)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.OrganizationV1 {
      return Services.Organization.Containers.OrganizationV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.OrganizationV1 {
      return Services.Organization.Containers.OrganizationV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.OrganizationV1 {
      return Services.Organization.Containers.OrganizationV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.OrganizationV1 {
      return Services.Organization.Containers.OrganizationV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.OrganizationV1 {
      return Services.Organization.Containers.OrganizationV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.OrganizationV1 {
      return Services.Organization.Containers.OrganizationV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.OrganizationV1Builder {
      return Services.Organization.Containers.OrganizationV1.classBuilder() as! Services.Organization.Containers.OrganizationV1Builder
    }
    public func builder() -> Services.Organization.Containers.OrganizationV1Builder {
      return classBuilder() as! Services.Organization.Containers.OrganizationV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.OrganizationV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.OrganizationV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.OrganizationV1Builder {
      return Services.Organization.Containers.OrganizationV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.OrganizationV1) -> Services.Organization.Containers.OrganizationV1Builder {
      return Services.Organization.Containers.OrganizationV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasDomain {
        output += "\(indent) domain: \(domain) \n"
      }
      if hasImageUrl {
        output += "\(indent) imageUrl: \(imageUrl) \n"
      }
      if hasProfileCount {
        output += "\(indent) profileCount: \(profileCount) \n"
      }
      if hasTeamCount {
        output += "\(indent) teamCount: \(teamCount) \n"
      }
      if hasLocationCount {
        output += "\(indent) locationCount: \(locationCount) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasDomain {
               hashCode = (hashCode &* 31) &+ domain.hashValue
            }
            if hasImageUrl {
               hashCode = (hashCode &* 31) &+ imageUrl.hashValue
            }
            if hasProfileCount {
               hashCode = (hashCode &* 31) &+ profileCount.hashValue
            }
            if hasTeamCount {
               hashCode = (hashCode &* 31) &+ teamCount.hashValue
            }
            if hasLocationCount {
               hashCode = (hashCode &* 31) &+ locationCount.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.OrganizationV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.OrganizationV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.OrganizationV1.self
    }
    //Meta information declaration end

  }

  final public class OrganizationV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.OrganizationV1

    required override public init () {
       builderResult = Services.Organization.Containers.OrganizationV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.OrganizationV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.OrganizationV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Organization.Containers.OrganizationV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Organization.Containers.OrganizationV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String)-> Services.Organization.Containers.OrganizationV1Builder {
      self.name = value
      return self
    }
    public func clearName() -> Services.Organization.Containers.OrganizationV1Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasDomain:Bool {
         get {
              return builderResult.hasDomain
         }
    }
    public var domain:String {
         get {
              return builderResult.domain
         }
         set (value) {
             builderResult.hasDomain = true
             builderResult.domain = value
         }
    }
    public func setDomain(value:String)-> Services.Organization.Containers.OrganizationV1Builder {
      self.domain = value
      return self
    }
    public func clearDomain() -> Services.Organization.Containers.OrganizationV1Builder{
         builderResult.hasDomain = false
         builderResult.domain = ""
         return self
    }
    public var hasImageUrl:Bool {
         get {
              return builderResult.hasImageUrl
         }
    }
    public var imageUrl:String {
         get {
              return builderResult.imageUrl
         }
         set (value) {
             builderResult.hasImageUrl = true
             builderResult.imageUrl = value
         }
    }
    public func setImageUrl(value:String)-> Services.Organization.Containers.OrganizationV1Builder {
      self.imageUrl = value
      return self
    }
    public func clearImageUrl() -> Services.Organization.Containers.OrganizationV1Builder{
         builderResult.hasImageUrl = false
         builderResult.imageUrl = ""
         return self
    }
    public var hasProfileCount:Bool {
         get {
              return builderResult.hasProfileCount
         }
    }
    public var profileCount:UInt32 {
         get {
              return builderResult.profileCount
         }
         set (value) {
             builderResult.hasProfileCount = true
             builderResult.profileCount = value
         }
    }
    public func setProfileCount(value:UInt32)-> Services.Organization.Containers.OrganizationV1Builder {
      self.profileCount = value
      return self
    }
    public func clearProfileCount() -> Services.Organization.Containers.OrganizationV1Builder{
         builderResult.hasProfileCount = false
         builderResult.profileCount = UInt32(0)
         return self
    }
    public var hasTeamCount:Bool {
         get {
              return builderResult.hasTeamCount
         }
    }
    public var teamCount:UInt32 {
         get {
              return builderResult.teamCount
         }
         set (value) {
             builderResult.hasTeamCount = true
             builderResult.teamCount = value
         }
    }
    public func setTeamCount(value:UInt32)-> Services.Organization.Containers.OrganizationV1Builder {
      self.teamCount = value
      return self
    }
    public func clearTeamCount() -> Services.Organization.Containers.OrganizationV1Builder{
         builderResult.hasTeamCount = false
         builderResult.teamCount = UInt32(0)
         return self
    }
    public var hasLocationCount:Bool {
         get {
              return builderResult.hasLocationCount
         }
    }
    public var locationCount:UInt32 {
         get {
              return builderResult.locationCount
         }
         set (value) {
             builderResult.hasLocationCount = true
             builderResult.locationCount = value
         }
    }
    public func setLocationCount(value:UInt32)-> Services.Organization.Containers.OrganizationV1Builder {
      self.locationCount = value
      return self
    }
    public func clearLocationCount() -> Services.Organization.Containers.OrganizationV1Builder{
         builderResult.hasLocationCount = false
         builderResult.locationCount = UInt32(0)
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.OrganizationV1Builder {
      builderResult = Services.Organization.Containers.OrganizationV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.OrganizationV1Builder {
      return Services.Organization.Containers.OrganizationV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.OrganizationV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.OrganizationV1 {
      var returnMe:Services.Organization.Containers.OrganizationV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.OrganizationV1) -> Services.Organization.Containers.OrganizationV1Builder {
      if (other == Services.Organization.Containers.OrganizationV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasName {
           name = other.name
      }
      if other.hasDomain {
           domain = other.domain
      }
      if other.hasImageUrl {
           imageUrl = other.imageUrl
      }
      if other.hasProfileCount {
           profileCount = other.profileCount
      }
      if other.hasTeamCount {
           teamCount = other.teamCount
      }
      if other.hasLocationCount {
           locationCount = other.locationCount
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.OrganizationV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.OrganizationV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          name = input.readString()

        case 34 :
          domain = input.readString()

        case 42 :
          imageUrl = input.readString()

        case 48 :
          profileCount = input.readUInt32()

        case 56 :
          teamCount = input.readUInt32()

        case 64 :
          locationCount = input.readUInt32()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class TeamV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "id": return id
           case "name": return name
           case "organizationId": return organizationId
           case "managerProfileId": return managerProfileId
           case "manager": return manager
           case "permissions": return permissions
           case "description_": return description_
           case "status": return status
           case "imageUrl": return imageUrl
           case "childTeamCount": return childTeamCount
           case "profileCount": return profileCount
           case "displayName": return displayName
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    public private(set) var hasName:Bool = false
    public private(set) var name:String = ""

    public private(set) var hasOrganizationId:Bool = false
    public private(set) var organizationId:String = ""

    public private(set) var hasManagerProfileId:Bool = false
    public private(set) var managerProfileId:String = ""

    public private(set) var hasManager:Bool = false
    public private(set) var manager:Services.Profile.Containers.ProfileV1!
    public private(set) var hasPermissions:Bool = false
    public private(set) var permissions:Services.Common.Containers.PermissionsV1!
    public private(set) var hasDescription:Bool = false
    public private(set) var description_:Services.Common.Containers.DescriptionV1!
    public private(set) var hasStatus:Bool = false
    public private(set) var status:Services.Organization.Containers.TeamStatusV1!
    public private(set) var hasImageUrl:Bool = false
    public private(set) var imageUrl:String = ""

    public private(set) var hasChildTeamCount:Bool = false
    public private(set) var childTeamCount:UInt32 = UInt32(0)

    public private(set) var hasProfileCount:Bool = false
    public private(set) var profileCount:UInt32 = UInt32(0)

    public private(set) var hasDisplayName:Bool = false
    public private(set) var displayName:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasId {
        output.writeString(2, value:id)
      }
      if hasName {
        output.writeString(3, value:name)
      }
      if hasOrganizationId {
        output.writeString(4, value:organizationId)
      }
      if hasManagerProfileId {
        output.writeString(5, value:managerProfileId)
      }
      if hasManager {
        output.writeMessage(6, value:manager)
      }
      if hasPermissions {
        output.writeMessage(7, value:permissions)
      }
      if hasDescription {
        output.writeMessage(8, value:description_)
      }
      if hasStatus {
        output.writeMessage(9, value:status)
      }
      if hasImageUrl {
        output.writeString(10, value:imageUrl)
      }
      if hasChildTeamCount {
        output.writeUInt32(11, value:childTeamCount)
      }
      if hasProfileCount {
        output.writeUInt32(12, value:profileCount)
      }
      if hasDisplayName {
        output.writeString(13, value:displayName)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasId {
        serialize_size += id.computeStringSize(2)
      }
      if hasName {
        serialize_size += name.computeStringSize(3)
      }
      if hasOrganizationId {
        serialize_size += organizationId.computeStringSize(4)
      }
      if hasManagerProfileId {
        serialize_size += managerProfileId.computeStringSize(5)
      }
      if hasManager {
          if let varSizemanager = manager?.computeMessageSize(6) {
              serialize_size += varSizemanager
          }
      }
      if hasPermissions {
          if let varSizepermissions = permissions?.computeMessageSize(7) {
              serialize_size += varSizepermissions
          }
      }
      if hasDescription {
          if let varSizedescription_ = description_?.computeMessageSize(8) {
              serialize_size += varSizedescription_
          }
      }
      if hasStatus {
          if let varSizestatus = status?.computeMessageSize(9) {
              serialize_size += varSizestatus
          }
      }
      if hasImageUrl {
        serialize_size += imageUrl.computeStringSize(10)
      }
      if hasChildTeamCount {
        serialize_size += childTeamCount.computeUInt32Size(11)
      }
      if hasProfileCount {
        serialize_size += profileCount.computeUInt32Size(12)
      }
      if hasDisplayName {
        serialize_size += displayName.computeStringSize(13)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.TeamV1 {
      return Services.Organization.Containers.TeamV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TeamV1 {
      return Services.Organization.Containers.TeamV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.TeamV1 {
      return Services.Organization.Containers.TeamV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.TeamV1 {
      return Services.Organization.Containers.TeamV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.TeamV1 {
      return Services.Organization.Containers.TeamV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TeamV1 {
      return Services.Organization.Containers.TeamV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.TeamV1Builder {
      return Services.Organization.Containers.TeamV1.classBuilder() as! Services.Organization.Containers.TeamV1Builder
    }
    public func builder() -> Services.Organization.Containers.TeamV1Builder {
      return classBuilder() as! Services.Organization.Containers.TeamV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.TeamV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.TeamV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.TeamV1Builder {
      return Services.Organization.Containers.TeamV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.TeamV1) -> Services.Organization.Containers.TeamV1Builder {
      return Services.Organization.Containers.TeamV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      if hasName {
        output += "\(indent) name: \(name) \n"
      }
      if hasOrganizationId {
        output += "\(indent) organizationId: \(organizationId) \n"
      }
      if hasManagerProfileId {
        output += "\(indent) managerProfileId: \(managerProfileId) \n"
      }
      if hasManager {
        output += "\(indent) manager {\n"
        manager?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasPermissions {
        output += "\(indent) permissions {\n"
        permissions?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasDescription {
        output += "\(indent) description_ {\n"
        description_?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasStatus {
        output += "\(indent) status {\n"
        status?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      if hasImageUrl {
        output += "\(indent) imageUrl: \(imageUrl) \n"
      }
      if hasChildTeamCount {
        output += "\(indent) childTeamCount: \(childTeamCount) \n"
      }
      if hasProfileCount {
        output += "\(indent) profileCount: \(profileCount) \n"
      }
      if hasDisplayName {
        output += "\(indent) displayName: \(displayName) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            if hasName {
               hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasOrganizationId {
               hashCode = (hashCode &* 31) &+ organizationId.hashValue
            }
            if hasManagerProfileId {
               hashCode = (hashCode &* 31) &+ managerProfileId.hashValue
            }
            if hasManager {
                if let hashValuemanager = manager?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuemanager
                }
            }
            if hasPermissions {
                if let hashValuepermissions = permissions?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuepermissions
                }
            }
            if hasDescription {
                if let hashValuedescription_ = description_?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuedescription_
                }
            }
            if hasStatus {
                if let hashValuestatus = status?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuestatus
                }
            }
            if hasImageUrl {
               hashCode = (hashCode &* 31) &+ imageUrl.hashValue
            }
            if hasChildTeamCount {
               hashCode = (hashCode &* 31) &+ childTeamCount.hashValue
            }
            if hasProfileCount {
               hashCode = (hashCode &* 31) &+ profileCount.hashValue
            }
            if hasDisplayName {
               hashCode = (hashCode &* 31) &+ displayName.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.TeamV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.TeamV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.TeamV1.self
    }
    //Meta information declaration end

  }

  final public class TeamV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.TeamV1

    required override public init () {
       builderResult = Services.Organization.Containers.TeamV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.TeamV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.TeamV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Organization.Containers.TeamV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Organization.Containers.TeamV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String)-> Services.Organization.Containers.TeamV1Builder {
      self.name = value
      return self
    }
    public func clearName() -> Services.Organization.Containers.TeamV1Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasOrganizationId:Bool {
         get {
              return builderResult.hasOrganizationId
         }
    }
    public var organizationId:String {
         get {
              return builderResult.organizationId
         }
         set (value) {
             builderResult.hasOrganizationId = true
             builderResult.organizationId = value
         }
    }
    public func setOrganizationId(value:String)-> Services.Organization.Containers.TeamV1Builder {
      self.organizationId = value
      return self
    }
    public func clearOrganizationId() -> Services.Organization.Containers.TeamV1Builder{
         builderResult.hasOrganizationId = false
         builderResult.organizationId = ""
         return self
    }
    public var hasManagerProfileId:Bool {
         get {
              return builderResult.hasManagerProfileId
         }
    }
    public var managerProfileId:String {
         get {
              return builderResult.managerProfileId
         }
         set (value) {
             builderResult.hasManagerProfileId = true
             builderResult.managerProfileId = value
         }
    }
    public func setManagerProfileId(value:String)-> Services.Organization.Containers.TeamV1Builder {
      self.managerProfileId = value
      return self
    }
    public func clearManagerProfileId() -> Services.Organization.Containers.TeamV1Builder{
         builderResult.hasManagerProfileId = false
         builderResult.managerProfileId = ""
         return self
    }
    public var hasManager:Bool {
         get {
             return builderResult.hasManager
         }
    }
    public var manager:Services.Profile.Containers.ProfileV1! {
         get {
             return builderResult.manager
         }
         set (value) {
             builderResult.hasManager = true
             builderResult.manager = value
         }
    }
    public func setManager(value:Services.Profile.Containers.ProfileV1!)-> Services.Organization.Containers.TeamV1Builder {
      self.manager = value
      return self
    }
    public func mergeManager(value:Services.Profile.Containers.ProfileV1) -> Services.Organization.Containers.TeamV1Builder {
      if (builderResult.hasManager) {
        builderResult.manager = Services.Profile.Containers.ProfileV1.builderWithPrototype(builderResult.manager).mergeFrom(value).buildPartial()
      } else {
        builderResult.manager = value
      }
      builderResult.hasManager = true
      return self
    }
    public func clearManager() -> Services.Organization.Containers.TeamV1Builder {
      builderResult.hasManager = false
      builderResult.manager = nil
      return self
    }
    public var hasPermissions:Bool {
         get {
             return builderResult.hasPermissions
         }
    }
    public var permissions:Services.Common.Containers.PermissionsV1! {
         get {
             return builderResult.permissions
         }
         set (value) {
             builderResult.hasPermissions = true
             builderResult.permissions = value
         }
    }
    public func setPermissions(value:Services.Common.Containers.PermissionsV1!)-> Services.Organization.Containers.TeamV1Builder {
      self.permissions = value
      return self
    }
    public func mergePermissions(value:Services.Common.Containers.PermissionsV1) -> Services.Organization.Containers.TeamV1Builder {
      if (builderResult.hasPermissions) {
        builderResult.permissions = Services.Common.Containers.PermissionsV1.builderWithPrototype(builderResult.permissions).mergeFrom(value).buildPartial()
      } else {
        builderResult.permissions = value
      }
      builderResult.hasPermissions = true
      return self
    }
    public func clearPermissions() -> Services.Organization.Containers.TeamV1Builder {
      builderResult.hasPermissions = false
      builderResult.permissions = nil
      return self
    }
    public var hasDescription:Bool {
         get {
             return builderResult.hasDescription
         }
    }
    public var description_:Services.Common.Containers.DescriptionV1! {
         get {
             return builderResult.description_
         }
         set (value) {
             builderResult.hasDescription = true
             builderResult.description_ = value
         }
    }
    public func setDescription(value:Services.Common.Containers.DescriptionV1!)-> Services.Organization.Containers.TeamV1Builder {
      self.description_ = value
      return self
    }
    public func mergeDescription(value:Services.Common.Containers.DescriptionV1) -> Services.Organization.Containers.TeamV1Builder {
      if (builderResult.hasDescription) {
        builderResult.description_ = Services.Common.Containers.DescriptionV1.builderWithPrototype(builderResult.description_).mergeFrom(value).buildPartial()
      } else {
        builderResult.description_ = value
      }
      builderResult.hasDescription = true
      return self
    }
    public func clearDescription() -> Services.Organization.Containers.TeamV1Builder {
      builderResult.hasDescription = false
      builderResult.description_ = nil
      return self
    }
    public var hasStatus:Bool {
         get {
             return builderResult.hasStatus
         }
    }
    public var status:Services.Organization.Containers.TeamStatusV1! {
         get {
             return builderResult.status
         }
         set (value) {
             builderResult.hasStatus = true
             builderResult.status = value
         }
    }
    public func setStatus(value:Services.Organization.Containers.TeamStatusV1!)-> Services.Organization.Containers.TeamV1Builder {
      self.status = value
      return self
    }
    public func mergeStatus(value:Services.Organization.Containers.TeamStatusV1) -> Services.Organization.Containers.TeamV1Builder {
      if (builderResult.hasStatus) {
        builderResult.status = Services.Organization.Containers.TeamStatusV1.builderWithPrototype(builderResult.status).mergeFrom(value).buildPartial()
      } else {
        builderResult.status = value
      }
      builderResult.hasStatus = true
      return self
    }
    public func clearStatus() -> Services.Organization.Containers.TeamV1Builder {
      builderResult.hasStatus = false
      builderResult.status = nil
      return self
    }
    public var hasImageUrl:Bool {
         get {
              return builderResult.hasImageUrl
         }
    }
    public var imageUrl:String {
         get {
              return builderResult.imageUrl
         }
         set (value) {
             builderResult.hasImageUrl = true
             builderResult.imageUrl = value
         }
    }
    public func setImageUrl(value:String)-> Services.Organization.Containers.TeamV1Builder {
      self.imageUrl = value
      return self
    }
    public func clearImageUrl() -> Services.Organization.Containers.TeamV1Builder{
         builderResult.hasImageUrl = false
         builderResult.imageUrl = ""
         return self
    }
    public var hasChildTeamCount:Bool {
         get {
              return builderResult.hasChildTeamCount
         }
    }
    public var childTeamCount:UInt32 {
         get {
              return builderResult.childTeamCount
         }
         set (value) {
             builderResult.hasChildTeamCount = true
             builderResult.childTeamCount = value
         }
    }
    public func setChildTeamCount(value:UInt32)-> Services.Organization.Containers.TeamV1Builder {
      self.childTeamCount = value
      return self
    }
    public func clearChildTeamCount() -> Services.Organization.Containers.TeamV1Builder{
         builderResult.hasChildTeamCount = false
         builderResult.childTeamCount = UInt32(0)
         return self
    }
    public var hasProfileCount:Bool {
         get {
              return builderResult.hasProfileCount
         }
    }
    public var profileCount:UInt32 {
         get {
              return builderResult.profileCount
         }
         set (value) {
             builderResult.hasProfileCount = true
             builderResult.profileCount = value
         }
    }
    public func setProfileCount(value:UInt32)-> Services.Organization.Containers.TeamV1Builder {
      self.profileCount = value
      return self
    }
    public func clearProfileCount() -> Services.Organization.Containers.TeamV1Builder{
         builderResult.hasProfileCount = false
         builderResult.profileCount = UInt32(0)
         return self
    }
    public var hasDisplayName:Bool {
         get {
              return builderResult.hasDisplayName
         }
    }
    public var displayName:String {
         get {
              return builderResult.displayName
         }
         set (value) {
             builderResult.hasDisplayName = true
             builderResult.displayName = value
         }
    }
    public func setDisplayName(value:String)-> Services.Organization.Containers.TeamV1Builder {
      self.displayName = value
      return self
    }
    public func clearDisplayName() -> Services.Organization.Containers.TeamV1Builder{
         builderResult.hasDisplayName = false
         builderResult.displayName = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.TeamV1Builder {
      builderResult = Services.Organization.Containers.TeamV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.TeamV1Builder {
      return Services.Organization.Containers.TeamV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.TeamV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.TeamV1 {
      var returnMe:Services.Organization.Containers.TeamV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.TeamV1) -> Services.Organization.Containers.TeamV1Builder {
      if (other == Services.Organization.Containers.TeamV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasId {
           id = other.id
      }
      if other.hasName {
           name = other.name
      }
      if other.hasOrganizationId {
           organizationId = other.organizationId
      }
      if other.hasManagerProfileId {
           managerProfileId = other.managerProfileId
      }
      if (other.hasManager) {
          mergeManager(other.manager)
      }
      if (other.hasPermissions) {
          mergePermissions(other.permissions)
      }
      if (other.hasDescription) {
          mergeDescription(other.description_)
      }
      if (other.hasStatus) {
          mergeStatus(other.status)
      }
      if other.hasImageUrl {
           imageUrl = other.imageUrl
      }
      if other.hasChildTeamCount {
           childTeamCount = other.childTeamCount
      }
      if other.hasProfileCount {
           profileCount = other.profileCount
      }
      if other.hasDisplayName {
           displayName = other.displayName
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.TeamV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TeamV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          id = input.readString()

        case 26 :
          name = input.readString()

        case 34 :
          organizationId = input.readString()

        case 42 :
          managerProfileId = input.readString()

        case 50 :
          var subBuilder:Services.Profile.Containers.ProfileV1Builder = Services.Profile.Containers.ProfileV1.builder()
          if hasManager {
            subBuilder.mergeFrom(manager)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          manager = subBuilder.buildPartial()

        case 58 :
          var subBuilder:Services.Common.Containers.PermissionsV1Builder = Services.Common.Containers.PermissionsV1.builder()
          if hasPermissions {
            subBuilder.mergeFrom(permissions)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          permissions = subBuilder.buildPartial()

        case 66 :
          var subBuilder:Services.Common.Containers.DescriptionV1Builder = Services.Common.Containers.DescriptionV1.builder()
          if hasDescription {
            subBuilder.mergeFrom(description_)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          description_ = subBuilder.buildPartial()

        case 74 :
          var subBuilder:Services.Organization.Containers.TeamStatusV1Builder = Services.Organization.Containers.TeamStatusV1.builder()
          if hasStatus {
            subBuilder.mergeFrom(status)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          status = subBuilder.buildPartial()

        case 82 :
          imageUrl = input.readString()

        case 88 :
          childTeamCount = input.readUInt32()

        case 96 :
          profileCount = input.readUInt32()

        case 106 :
          displayName = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class TeamStatusV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "value": return value
           case "created": return created
           case "byProfileId": return byProfileId
           case "byProfile": return byProfile
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasValue:Bool = false
    public private(set) var value:String = ""

    public private(set) var hasCreated:Bool = false
    public private(set) var created:String = ""

    public private(set) var hasByProfileId:Bool = false
    public private(set) var byProfileId:String = ""

    public private(set) var hasByProfile:Bool = false
    public private(set) var byProfile:Services.Profile.Containers.ProfileV1!
    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasValue {
        output.writeString(2, value:value)
      }
      if hasCreated {
        output.writeString(3, value:created)
      }
      if hasByProfileId {
        output.writeString(4, value:byProfileId)
      }
      if hasByProfile {
        output.writeMessage(5, value:byProfile)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasValue {
        serialize_size += value.computeStringSize(2)
      }
      if hasCreated {
        serialize_size += created.computeStringSize(3)
      }
      if hasByProfileId {
        serialize_size += byProfileId.computeStringSize(4)
      }
      if hasByProfile {
          if let varSizebyProfile = byProfile?.computeMessageSize(5) {
              serialize_size += varSizebyProfile
          }
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.TeamStatusV1 {
      return Services.Organization.Containers.TeamStatusV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TeamStatusV1 {
      return Services.Organization.Containers.TeamStatusV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.TeamStatusV1 {
      return Services.Organization.Containers.TeamStatusV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.TeamStatusV1 {
      return Services.Organization.Containers.TeamStatusV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.TeamStatusV1 {
      return Services.Organization.Containers.TeamStatusV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TeamStatusV1 {
      return Services.Organization.Containers.TeamStatusV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.TeamStatusV1Builder {
      return Services.Organization.Containers.TeamStatusV1.classBuilder() as! Services.Organization.Containers.TeamStatusV1Builder
    }
    public func builder() -> Services.Organization.Containers.TeamStatusV1Builder {
      return classBuilder() as! Services.Organization.Containers.TeamStatusV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.TeamStatusV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.TeamStatusV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.TeamStatusV1Builder {
      return Services.Organization.Containers.TeamStatusV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.TeamStatusV1) -> Services.Organization.Containers.TeamStatusV1Builder {
      return Services.Organization.Containers.TeamStatusV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasValue {
        output += "\(indent) value: \(value) \n"
      }
      if hasCreated {
        output += "\(indent) created: \(created) \n"
      }
      if hasByProfileId {
        output += "\(indent) byProfileId: \(byProfileId) \n"
      }
      if hasByProfile {
        output += "\(indent) byProfile {\n"
        byProfile?.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent) }\n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasValue {
               hashCode = (hashCode &* 31) &+ value.hashValue
            }
            if hasCreated {
               hashCode = (hashCode &* 31) &+ created.hashValue
            }
            if hasByProfileId {
               hashCode = (hashCode &* 31) &+ byProfileId.hashValue
            }
            if hasByProfile {
                if let hashValuebyProfile = byProfile?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValuebyProfile
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.TeamStatusV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.TeamStatusV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.TeamStatusV1.self
    }
    //Meta information declaration end

  }

  final public class TeamStatusV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.TeamStatusV1

    required override public init () {
       builderResult = Services.Organization.Containers.TeamStatusV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.TeamStatusV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.TeamStatusV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasValue:Bool {
         get {
              return builderResult.hasValue
         }
    }
    public var value:String {
         get {
              return builderResult.value
         }
         set (value) {
             builderResult.hasValue = true
             builderResult.value = value
         }
    }
    public func setValue(value:String)-> Services.Organization.Containers.TeamStatusV1Builder {
      self.value = value
      return self
    }
    public func clearValue() -> Services.Organization.Containers.TeamStatusV1Builder{
         builderResult.hasValue = false
         builderResult.value = ""
         return self
    }
    public var hasCreated:Bool {
         get {
              return builderResult.hasCreated
         }
    }
    public var created:String {
         get {
              return builderResult.created
         }
         set (value) {
             builderResult.hasCreated = true
             builderResult.created = value
         }
    }
    public func setCreated(value:String)-> Services.Organization.Containers.TeamStatusV1Builder {
      self.created = value
      return self
    }
    public func clearCreated() -> Services.Organization.Containers.TeamStatusV1Builder{
         builderResult.hasCreated = false
         builderResult.created = ""
         return self
    }
    public var hasByProfileId:Bool {
         get {
              return builderResult.hasByProfileId
         }
    }
    public var byProfileId:String {
         get {
              return builderResult.byProfileId
         }
         set (value) {
             builderResult.hasByProfileId = true
             builderResult.byProfileId = value
         }
    }
    public func setByProfileId(value:String)-> Services.Organization.Containers.TeamStatusV1Builder {
      self.byProfileId = value
      return self
    }
    public func clearByProfileId() -> Services.Organization.Containers.TeamStatusV1Builder{
         builderResult.hasByProfileId = false
         builderResult.byProfileId = ""
         return self
    }
    public var hasByProfile:Bool {
         get {
             return builderResult.hasByProfile
         }
    }
    public var byProfile:Services.Profile.Containers.ProfileV1! {
         get {
             return builderResult.byProfile
         }
         set (value) {
             builderResult.hasByProfile = true
             builderResult.byProfile = value
         }
    }
    public func setByProfile(value:Services.Profile.Containers.ProfileV1!)-> Services.Organization.Containers.TeamStatusV1Builder {
      self.byProfile = value
      return self
    }
    public func mergeByProfile(value:Services.Profile.Containers.ProfileV1) -> Services.Organization.Containers.TeamStatusV1Builder {
      if (builderResult.hasByProfile) {
        builderResult.byProfile = Services.Profile.Containers.ProfileV1.builderWithPrototype(builderResult.byProfile).mergeFrom(value).buildPartial()
      } else {
        builderResult.byProfile = value
      }
      builderResult.hasByProfile = true
      return self
    }
    public func clearByProfile() -> Services.Organization.Containers.TeamStatusV1Builder {
      builderResult.hasByProfile = false
      builderResult.byProfile = nil
      return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.TeamStatusV1Builder {
      builderResult = Services.Organization.Containers.TeamStatusV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.TeamStatusV1Builder {
      return Services.Organization.Containers.TeamStatusV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.TeamStatusV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.TeamStatusV1 {
      var returnMe:Services.Organization.Containers.TeamStatusV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.TeamStatusV1) -> Services.Organization.Containers.TeamStatusV1Builder {
      if (other == Services.Organization.Containers.TeamStatusV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasValue {
           value = other.value
      }
      if other.hasCreated {
           created = other.created
      }
      if other.hasByProfileId {
           byProfileId = other.byProfileId
      }
      if (other.hasByProfile) {
          mergeByProfile(other.byProfile)
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.TeamStatusV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TeamStatusV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          value = input.readString()

        case 26 :
          created = input.readString()

        case 34 :
          byProfileId = input.readString()

        case 42 :
          var subBuilder:Services.Profile.Containers.ProfileV1Builder = Services.Profile.Containers.ProfileV1.builder()
          if hasByProfile {
            subBuilder.mergeFrom(byProfile)
          }
          input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
          byProfile = subBuilder.buildPartial()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

  final public class TokenV1 : GeneratedMessage, GeneratedMessageProtocol {
    override public subscript(key: String) -> Any? {
           switch key {
           case "version": return version
           case "key": return key
           case "requestedByUserId": return requestedByUserId
           case "id": return id
           default: return nil
           }
    }

    public private(set) var hasVersion:Bool = false
    public private(set) var version:UInt32 = UInt32(1)

    public private(set) var hasKey:Bool = false
    public private(set) var key:String = ""

    public private(set) var hasRequestedByUserId:Bool = false
    public private(set) var requestedByUserId:String = ""

    public private(set) var hasId:Bool = false
    public private(set) var id:String = ""

    required public init() {
         super.init()
    }
    override public func isInitialized() -> Bool {
     return true
    }
    override public func writeToCodedOutputStream(output:CodedOutputStream) {
      if hasVersion {
        output.writeUInt32(1, value:version)
      }
      if hasKey {
        output.writeString(2, value:key)
      }
      if hasRequestedByUserId {
        output.writeString(3, value:requestedByUserId)
      }
      if hasId {
        output.writeString(4, value:id)
      }
      unknownFields.writeToCodedOutputStream(output)
    }
    override public func serializedSize() -> Int32 {
      var serialize_size:Int32 = memoizedSerializedSize
      if serialize_size != -1 {
       return serialize_size
      }

      serialize_size = 0
      if hasVersion {
        serialize_size += version.computeUInt32Size(1)
      }
      if hasKey {
        serialize_size += key.computeStringSize(2)
      }
      if hasRequestedByUserId {
        serialize_size += requestedByUserId.computeStringSize(3)
      }
      if hasId {
        serialize_size += id.computeStringSize(4)
      }
      serialize_size += unknownFields.serializedSize()
      memoizedSerializedSize = serialize_size
      return serialize_size
    }
    public class func parseFromData(data:NSData) -> Services.Organization.Containers.TokenV1 {
      return Services.Organization.Containers.TokenV1.builder().mergeFromData(data, extensionRegistry:Services.Organization.Containers.ContainersRoot.sharedInstance.extensionRegistry).build()
    }
    public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TokenV1 {
      return Services.Organization.Containers.TokenV1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromInputStream(input:NSInputStream) -> Services.Organization.Containers.TokenV1 {
      return Services.Organization.Containers.TokenV1.builder().mergeFromInputStream(input).build()
    }
    public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Services.Organization.Containers.TokenV1 {
      return Services.Organization.Containers.TokenV1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream) -> Services.Organization.Containers.TokenV1 {
      return Services.Organization.Containers.TokenV1.builder().mergeFromCodedInputStream(input).build()
    }
    public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TokenV1 {
      return Services.Organization.Containers.TokenV1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
    }
    public class func builder() -> Services.Organization.Containers.TokenV1Builder {
      return Services.Organization.Containers.TokenV1.classBuilder() as! Services.Organization.Containers.TokenV1Builder
    }
    public func builder() -> Services.Organization.Containers.TokenV1Builder {
      return classBuilder() as! Services.Organization.Containers.TokenV1Builder
    }
    public override class func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.TokenV1Builder()
    }
    public override func classBuilder() -> MessageBuilder {
      return Services.Organization.Containers.TokenV1.builder()
    }
    public func toBuilder() -> Services.Organization.Containers.TokenV1Builder {
      return Services.Organization.Containers.TokenV1.builderWithPrototype(self)
    }
    public class func builderWithPrototype(prototype:Services.Organization.Containers.TokenV1) -> Services.Organization.Containers.TokenV1Builder {
      return Services.Organization.Containers.TokenV1.builder().mergeFrom(prototype)
    }
    override public func writeDescriptionTo(inout output:String, indent:String) {
      if hasVersion {
        output += "\(indent) version: \(version) \n"
      }
      if hasKey {
        output += "\(indent) key: \(key) \n"
      }
      if hasRequestedByUserId {
        output += "\(indent) requestedByUserId: \(requestedByUserId) \n"
      }
      if hasId {
        output += "\(indent) id: \(id) \n"
      }
      unknownFields.writeDescriptionTo(&output, indent:indent)
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasVersion {
               hashCode = (hashCode &* 31) &+ version.hashValue
            }
            if hasKey {
               hashCode = (hashCode &* 31) &+ key.hashValue
            }
            if hasRequestedByUserId {
               hashCode = (hashCode &* 31) &+ requestedByUserId.hashValue
            }
            if hasId {
               hashCode = (hashCode &* 31) &+ id.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "Services.Organization.Containers.TokenV1"
    }
    override public func className() -> String {
        return "Services.Organization.Containers.TokenV1"
    }
    override public func classMetaType() -> GeneratedMessage.Type {
        return Services.Organization.Containers.TokenV1.self
    }
    //Meta information declaration end

  }

  final public class TokenV1Builder : GeneratedMessageBuilder {
    private var builderResult:Services.Organization.Containers.TokenV1

    required override public init () {
       builderResult = Services.Organization.Containers.TokenV1()
       super.init()
    }
    public var hasVersion:Bool {
         get {
              return builderResult.hasVersion
         }
    }
    public var version:UInt32 {
         get {
              return builderResult.version
         }
         set (value) {
             builderResult.hasVersion = true
             builderResult.version = value
         }
    }
    public func setVersion(value:UInt32)-> Services.Organization.Containers.TokenV1Builder {
      self.version = value
      return self
    }
    public func clearVersion() -> Services.Organization.Containers.TokenV1Builder{
         builderResult.hasVersion = false
         builderResult.version = UInt32(1)
         return self
    }
    public var hasKey:Bool {
         get {
              return builderResult.hasKey
         }
    }
    public var key:String {
         get {
              return builderResult.key
         }
         set (value) {
             builderResult.hasKey = true
             builderResult.key = value
         }
    }
    public func setKey(value:String)-> Services.Organization.Containers.TokenV1Builder {
      self.key = value
      return self
    }
    public func clearKey() -> Services.Organization.Containers.TokenV1Builder{
         builderResult.hasKey = false
         builderResult.key = ""
         return self
    }
    public var hasRequestedByUserId:Bool {
         get {
              return builderResult.hasRequestedByUserId
         }
    }
    public var requestedByUserId:String {
         get {
              return builderResult.requestedByUserId
         }
         set (value) {
             builderResult.hasRequestedByUserId = true
             builderResult.requestedByUserId = value
         }
    }
    public func setRequestedByUserId(value:String)-> Services.Organization.Containers.TokenV1Builder {
      self.requestedByUserId = value
      return self
    }
    public func clearRequestedByUserId() -> Services.Organization.Containers.TokenV1Builder{
         builderResult.hasRequestedByUserId = false
         builderResult.requestedByUserId = ""
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:String {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:String)-> Services.Organization.Containers.TokenV1Builder {
      self.id = value
      return self
    }
    public func clearId() -> Services.Organization.Containers.TokenV1Builder{
         builderResult.hasId = false
         builderResult.id = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Services.Organization.Containers.TokenV1Builder {
      builderResult = Services.Organization.Containers.TokenV1()
      return self
    }
    public override func clone() -> Services.Organization.Containers.TokenV1Builder {
      return Services.Organization.Containers.TokenV1.builderWithPrototype(builderResult)
    }
    public override func build() -> Services.Organization.Containers.TokenV1 {
         checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Services.Organization.Containers.TokenV1 {
      var returnMe:Services.Organization.Containers.TokenV1 = builderResult
      return returnMe
    }
    public func mergeFrom(other:Services.Organization.Containers.TokenV1) -> Services.Organization.Containers.TokenV1Builder {
      if (other == Services.Organization.Containers.TokenV1()) {
       return self
      }
      if other.hasVersion {
           version = other.version
      }
      if other.hasKey {
           key = other.key
      }
      if other.hasRequestedByUserId {
           requestedByUserId = other.requestedByUserId
      }
      if other.hasId {
           id = other.id
      }
      mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) ->Services.Organization.Containers.TokenV1Builder {
         return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Services.Organization.Containers.TokenV1Builder {
      var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        var tag = input.readTag()
        switch tag {
        case 0: 
          self.unknownFields = unknownFieldsBuilder.build()
          return self

        case 8 :
          version = input.readUInt32()

        case 18 :
          key = input.readString()

        case 26 :
          requestedByUserId = input.readString()

        case 34 :
          id = input.readString()

        default:
          if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
             unknownFields = unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

// @@protoc_insertion_point(global_scope)
