// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
import ProtocolBuffers

internal struct UserRoot {
  internal static var sharedInstance : UserRoot {
   struct Static {
       static let instance : UserRoot = UserRoot()
   }
   return Static.instance
  }
  var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    IdentityRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  internal func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

internal func == (lhs: User, rhs: User) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasPrimaryEmail == rhs.hasPrimaryEmail) && (!lhs.hasPrimaryEmail || lhs.primaryEmail == rhs.primaryEmail)
  fieldCheck = fieldCheck && (lhs.hasIsAdmin == rhs.hasIsAdmin) && (!lhs.hasIsAdmin || lhs.isAdmin == rhs.isAdmin)
  fieldCheck = fieldCheck && (lhs.hasIsActive == rhs.hasIsActive) && (!lhs.hasIsActive || lhs.isActive == rhs.isActive)
  fieldCheck = fieldCheck && (lhs.identities == rhs.identities)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final internal class User : GeneratedMessage {
  private(set) var hasId:Bool = false
  private(set) var id:String = ""

  private(set) var hasPrimaryEmail:Bool = false
  private(set) var primaryEmail:String = ""

  private(set) var hasIsAdmin:Bool = false
  private(set) var isAdmin:Bool = false

  private(set) var hasIsActive:Bool = false
  private(set) var isActive:Bool = false

  private(set) var identities:Array<Identity>  = Array<Identity>()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasId {
      output.writeString(1, value:id)
    }
    if hasPrimaryEmail {
      output.writeString(2, value:primaryEmail)
    }
    if hasIsAdmin {
      output.writeBool(3, value:isAdmin)
    }
    if hasIsActive {
      output.writeBool(4, value:isActive)
    }
    for oneElementidentities in identities {
        output.writeMessage(5, value:oneElementidentities)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasId {
      size += WireFormat.computeStringSize(1, value:id)
    }
    if hasPrimaryEmail {
      size += WireFormat.computeStringSize(2, value:primaryEmail)
    }
    if hasIsAdmin {
      size += WireFormat.computeBoolSize(3, value:isAdmin)
    }
    if hasIsActive {
      size += WireFormat.computeBoolSize(4, value:isActive)
    }
    for oneElementidentities in identities {
        size += WireFormat.computeMessageSize(5, value:oneElementidentities)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> User {
    return User.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> User {
    return User.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> User {
    return User.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->User {
    return User.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> User {
    return User.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> User {
    return User.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> UserBuilder {
    return User.classBuilder() as UserBuilder
  }
  internal func builder() -> UserBuilder {
    return classBuilder() as UserBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return UserBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return User.builder()
  }
  internal func toBuilder() -> UserBuilder {
    return User.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:User) -> UserBuilder {
    return User.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasId {
      output += "\(indent) id: \(id) \n"
    }
    if hasPrimaryEmail {
      output += "\(indent) primaryEmail: \(primaryEmail) \n"
    }
    if hasIsAdmin {
      output += "\(indent) isAdmin: \(isAdmin) \n"
    }
    if hasIsActive {
      output += "\(indent) isActive: \(isActive) \n"
    }
    var identitiesElementIndex:Int = 0
    for oneElementidentities in identities {
        output += "\(indent) identities[\(identitiesElementIndex)] {\n"
        oneElementidentities.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        identitiesElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasId {
             hashCode = (hashCode &* 31) &+ id.hashValue
          }
          if hasPrimaryEmail {
             hashCode = (hashCode &* 31) &+ primaryEmail.hashValue
          }
          if hasIsAdmin {
             hashCode = (hashCode &* 31) &+ isAdmin.hashValue
          }
          if hasIsActive {
             hashCode = (hashCode &* 31) &+ isActive.hashValue
          }
          for oneElementidentities in identities {
              hashCode = (hashCode &* 31) &+ oneElementidentities.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "User"
  }
  override internal func className() -> String {
      return "User"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return User.self
  }


  //Meta information declaration end

}

final internal class UserBuilder : GeneratedMessageBuilder {
  private var builderResult:User

  required override internal init () {
     builderResult = User()
     super.init()
  }
  var hasId:Bool {
       get {
            return builderResult.hasId
       }
  }
  var id:String {
       get {
            return builderResult.id
       }
       set (value) {
           builderResult.hasId = true
           builderResult.id = value
       }
  }
  internal func clearId() -> UserBuilder{
       builderResult.hasId = false
       builderResult.id = ""
       return self
  }
  var hasPrimaryEmail:Bool {
       get {
            return builderResult.hasPrimaryEmail
       }
  }
  var primaryEmail:String {
       get {
            return builderResult.primaryEmail
       }
       set (value) {
           builderResult.hasPrimaryEmail = true
           builderResult.primaryEmail = value
       }
  }
  internal func clearPrimaryEmail() -> UserBuilder{
       builderResult.hasPrimaryEmail = false
       builderResult.primaryEmail = ""
       return self
  }
  var hasIsAdmin:Bool {
       get {
            return builderResult.hasIsAdmin
       }
  }
  var isAdmin:Bool {
       get {
            return builderResult.isAdmin
       }
       set (value) {
           builderResult.hasIsAdmin = true
           builderResult.isAdmin = value
       }
  }
  internal func clearIsAdmin() -> UserBuilder{
       builderResult.hasIsAdmin = false
       builderResult.isAdmin = false
       return self
  }
  var hasIsActive:Bool {
       get {
            return builderResult.hasIsActive
       }
  }
  var isActive:Bool {
       get {
            return builderResult.isActive
       }
       set (value) {
           builderResult.hasIsActive = true
           builderResult.isActive = value
       }
  }
  internal func clearIsActive() -> UserBuilder{
       builderResult.hasIsActive = false
       builderResult.isActive = false
       return self
  }
  var identities:Array<Identity> {
       get {
           return builderResult.identities
       }
       set (value) {
           builderResult.identities = value
       }
  }
  internal func clearIdentities() -> UserBuilder {
    builderResult.identities.removeAll(keepCapacity: false)
    return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> UserBuilder {
    builderResult = User()
    return self
  }
  internal override func clone() -> UserBuilder {
    return User.builderWithPrototype(builderResult)
  }
  internal override func build() -> User {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> User {
    var returnMe:User = builderResult
    return returnMe
  }
  internal func mergeFrom(other:User) -> UserBuilder {
    if (other == User()) {
     return self
    }
    if other.hasId {
         id = other.id
    }
    if other.hasPrimaryEmail {
         primaryEmail = other.primaryEmail
    }
    if other.hasIsAdmin {
         isAdmin = other.isAdmin
    }
    if other.hasIsActive {
         isActive = other.isActive
    }
    if !other.identities.isEmpty  {
       builderResult.identities += other.identities
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->UserBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> UserBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        id = input.readString()

      case 18 :
        primaryEmail = input.readString()

      case 24 :
        isAdmin = input.readBool()

      case 32 :
        isActive = input.readBool()

      case 42 :
        var subBuilder = Identity.builder()
        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
        identities += [subBuilder.buildPartial()]

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


internal extension User {
    class func parseFromNSData(data:NSData) -> User {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return User.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> User {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return User.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
